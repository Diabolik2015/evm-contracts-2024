{
  "address": "0x538ab7BbF565F86C7b215AE8c7537129998B5f70",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cyclixRandomizer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lotteryReader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lotteryRoundCreator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_paymentToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_ticketPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_freeRoundsAreEnabled",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "participant",
          "type": "address[]"
        }
      ],
      "name": "addFreeRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bankWallets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "moreTicketNumbers",
          "type": "uint16[]"
        },
        {
          "internalType": "address",
          "name": "referral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        }
      ],
      "name": "buyTickets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimVictory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_statusEndTime",
          "type": "uint256"
        }
      ],
      "name": "closeRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counterForBankWallets",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "crossChainOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_statusEndTime",
          "type": "uint256"
        }
      ],
      "name": "fetchRoundNumbers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "freeRounds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "freeRoundsAreEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lotteryRoundCreator",
      "outputs": [
        {
          "internalType": "contract LotteryRoundCreatorInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lotteryStatus",
      "outputs": [
        {
          "internalType": "enum LotteryStatuses",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_statusEndTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "amountWonForEachTicketCrossChain",
          "type": "uint256[]"
        }
      ],
      "name": "markWinners",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentToken",
      "outputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "percentageOfReferralWinners",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "publicRoundRandomNumbersRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randomizer",
      "outputs": [
        {
          "internalType": "contract CyclixRandomizerInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reader",
      "outputs": [
        {
          "internalType": "contract LotteryReaderInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roundCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rounds",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendCryptoToTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "sendTokenToTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "add",
          "type": "bool"
        }
      ],
      "name": "setBankWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setCrossChainOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_statusEndTime",
          "type": "uint256"
        }
      ],
      "name": "startNewRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_statusEndTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "previousRound",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "forcedUiIdForUpgrade",
          "type": "uint256"
        }
      ],
      "name": "startNewRoundForUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "statusEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "statusStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ticketPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cyclixRandomizer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lotteryReader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lotteryRoundCreator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_paymentToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_ticketPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_percentageOfReferralWinners",
          "type": "uint16"
        },
        {
          "internalType": "uint16[]",
          "name": "_poolPercentagesBasePoints",
          "type": "uint16[]"
        },
        {
          "internalType": "bool",
          "name": "_freeRoundsAreEnabled",
          "type": "bool"
        }
      ],
      "name": "updateSetup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_teamAddress",
          "type": "address"
        }
      ],
      "name": "updateTeamAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf298ddcf5703a9d3c75f6165ae9efaff541abd504a5d95315cfd0e43bc6ce598",
  "receipt": {
    "to": null,
    "from": "0x4eCa23Ffd5710970E22558C484a0D6943dA5eAa5",
    "contractAddress": "0x538ab7BbF565F86C7b215AE8c7537129998B5f70",
    "transactionIndex": 16,
    "gasUsed": "5029454",
    "logsBloom": "0x
    "blockHash": "0xc390f4a4adbc1e9a62c791ce21a712e42d0d392d0764261beebabd3e7b731c9f",
    "transactionHash": "0xf298ddcf5703a9d3c75f6165ae9efaff541abd504a5d95315cfd0e43bc6ce598",
    "logs": [
      {
        "transactionIndex": 16,
        "blockNumber": 5989989,
        "transactionHash": "0xf298ddcf5703a9d3c75f6165ae9efaff541abd504a5d95315cfd0e43bc6ce598",
        "address": "0x538ab7BbF565F86C7b215AE8c7537129998B5f70",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004eca23ffd5710970e22558c484a0d6943da5eaa5"
        ],
        "data": "0x",
        "logIndex": 29,
        "blockHash": "0xc390f4a4adbc1e9a62c791ce21a712e42d0d392d0764261beebabd3e7b731c9f"
      }
    ],
    "blockNumber": 5989989,
    "cumulativeGasUsed": "7113414",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xebfcE0770ef3d67b1283328B553fa6df550Af6ED",
    "0x82eadA6Edff4F26fB0e367D891Cd0ea5726Bc2B4",
    "0x6d55Df1977d0fd3CD9776810ADc934a56D1C8af3",
    "0x0c587a37735eeD50719bF529F791e5dBBB9f4747",
    10,
    true
  ],
  "numDeployments": 1,
  "solcInputHash": "a6c5d572d4bb27edbaf06b9559e9bf52",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cyclixRandomizer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lotteryReader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lotteryRoundCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_freeRoundsAreEnabled\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"participant\",\"type\":\"address[]\"}],\"name\":\"addFreeRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bankWallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"moreTicketNumbers\",\"type\":\"uint16[]\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"buyTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimVictory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_statusEndTime\",\"type\":\"uint256\"}],\"name\":\"closeRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counterForBankWallets\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"crossChainOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_statusEndTime\",\"type\":\"uint256\"}],\"name\":\"fetchRoundNumbers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"freeRounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeRoundsAreEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryRoundCreator\",\"outputs\":[{\"internalType\":\"contract LotteryRoundCreatorInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryStatus\",\"outputs\":[{\"internalType\":\"enum LotteryStatuses\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_statusEndTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"amountWonForEachTicketCrossChain\",\"type\":\"uint256[]\"}],\"name\":\"markWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentToken\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentageOfReferralWinners\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"publicRoundRandomNumbersRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomizer\",\"outputs\":[{\"internalType\":\"contract CyclixRandomizerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reader\",\"outputs\":[{\"internalType\":\"contract LotteryReaderInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendCryptoToTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sendTokenToTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"}],\"name\":\"setBankWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setCrossChainOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_statusEndTime\",\"type\":\"uint256\"}],\"name\":\"startNewRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_statusEndTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"previousRound\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"forcedUiIdForUpgrade\",\"type\":\"uint256\"}],\"name\":\"startNewRoundForUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"statusEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"statusStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cyclixRandomizer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lotteryReader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lotteryRoundCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_percentageOfReferralWinners\",\"type\":\"uint16\"},{\"internalType\":\"uint16[]\",\"name\":\"_poolPercentagesBasePoints\",\"type\":\"uint16[]\"},{\"internalType\":\"bool\",\"name\":\"_freeRoundsAreEnabled\",\"type\":\"bool\"}],\"name\":\"updateSetup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teamAddress\",\"type\":\"address\"}],\"name\":\"updateTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LotteryMaster.sol\":\"LotteryMaster\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/CyclixRandomizerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface CyclixRandomizerInterface {\\n    function requestRandomWords(uint32 numWords) external returns (uint256 requestId);\\n    function getRequestStatus(uint256 _requestId) external view returns (bool fulfilled, uint256[] memory randomWords);\\n    function registerGameContract(address gameAddress, string calldata name) external;\\n    function getLastRequestIdForCaller(address _gameAddress) external view returns (uint256);\\n    function recoverLostNumberRequest(uint256 _requestId) external returns (uint256);\\n}\",\"keccak256\":\"0xc71c2b020044355f41cc53069e9a6f9f2778311e8d601a29bcc608301a0dfe24\",\"license\":\"MIT\"},\"contracts/LotteryCommon.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\n    enum RoundVictoryTier {\\n        Tier5_1,\\n        Tier5,\\n        Tier4_1,\\n        Tier4,\\n        Tier3_1,\\n        Tier3,\\n        Referrer,\\n        TokenHolders,\\n        Treasury,\\n        NO_WIN\\n    }\\n\\n    struct Round {\\n        uint256 id;\\n        uint256 uiId;\\n        uint256 startTime;\\n        uint256 endTime;\\n        bool ended;\\n        uint16[] roundNumbers;\\n        uint256[] referralWinnersNumber;\\n        uint16 referralWinnersNumberCount;\\n        uint256[] ticketIds;\\n        uint16 ticketsCount;\\n        uint256[] referralTicketIds;\\n        uint16 referralCounts;\\n    }\\n\\n    struct Ticket {\\n        uint256 id;\\n        address participantAddress;\\n        address referralAddress;\\n        bool claimed;\\n        uint256 chainId;\\n        RoundVictoryTier victoryTier;\\n    }\\n\\n    struct TicketResults {\\n        uint256 ticketId;\\n        address participantAddress;\\n        RoundVictoryTier victoryTier;\\n        bool won;\\n        bool claimed;\\n        uint256 amountWon;\\n    }\\n\\n    struct ReferralTicket {\\n        uint256 id;\\n        address buyerAddress;\\n        address referralAddress;\\n        uint256 referralTicketNumber;\\n        bool winner;\\n        bool claimed;\\n    }\\n\\n    struct ReferralTicketResults {\\n        uint256 referralTicketId;\\n        address buyerAddress;\\n        address referralAddress;\\n        uint256 referralTicketNumber;\\n        bool won;\\n        bool claimed;\\n        uint256 amountWon;\\n    }\",\"keccak256\":\"0x18f928f2fd3df4033c8a3ee722d2eb90b69d7b12ebd66a09d60fc679425c2a0c\",\"license\":\"UNLICENSED\"},\"contracts/LotteryMaster.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {CyclixRandomizerInterface} from \\\"./CyclixRandomizerInterface.sol\\\";\\nimport {EmergencyFunctions} from \\\"./utils/EmergencyFunctions.sol\\\";\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\nimport { LotteryRoundInterface } from \\\"./LotteryRoundInterface.sol\\\";\\nimport { LotteryReaderInterface } from \\\"./LotteryReaderInterface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./LotteryRoundCreatorInterface.sol\\\";\\nimport {LotteryMasterInterface} from \\\"./LotteryMasterInterface.sol\\\";\\n    enum LotteryStatuses {\\n        DrawOpen,\\n        EvaluatingResults,\\n        ResultsEvaluated,\\n        ClaimInProgress\\n    }\\n\\ncontract LotteryMaster is EmergencyFunctions, LotteryMasterInterface{\\n\\n    uint chainId;\\n    uint256 public roundCount;\\n    address[] public rounds;\\n    LotteryStatuses public lotteryStatus;\\n    uint256 public statusStartTime;\\n    uint256 public statusEndTime;\\n\\n    mapping(uint256 => mapping(address => uint256)) public freeRounds;\\n    mapping(address => bool) public crossChainOperator;\\n    function setCrossChainOperator(address operator, bool value) public onlyOwner {\\n        crossChainOperator[operator] = value;\\n    }\\n\\n    uint16 public counterForBankWallets;\\n    address[] public bankWallets;\\n    function setBankWallet(address wallet, bool add) public onlyOwner {\\n        for (uint i = 0; i < bankWallets.length; i++) {\\n            if (bankWallets[i] == wallet) {\\n                if (add) {\\n                    require(false, \\\"Wallet already added\\\");\\n                } else {\\n                    bankWallets[i] = bankWallets[bankWallets.length - 1];\\n                    bankWallets.pop();\\n                }\\n            }\\n        }\\n        if (add) {\\n            bankWallets.push(wallet);\\n        }\\n    }\\n\\n    IERC20Metadata public paymentToken;\\n    CyclixRandomizerInterface public randomizer;\\n    LotteryReaderInterface public reader;\\n    uint256 public ticketPrice;\\n    bool public freeRoundsAreEnabled = false;\\n    uint16 public percentageOfReferralWinners = 10;\\n    LotteryRoundCreatorInterface public lotteryRoundCreator;\\n\\n    constructor(address cyclixRandomizer, address lotteryReader, address _lotteryRoundCreator, address _paymentToken, uint256 _ticketPrice, bool _freeRoundsAreEnabled)\\n    EmergencyFunctions(msg.sender) {\\n        chainId = block.chainid;\\n        randomizer = CyclixRandomizerInterface(cyclixRandomizer);\\n        randomizer.registerGameContract(address(this), \\\"LotteryMasterV0.1\\\");\\n        reader = LotteryReaderInterface(lotteryReader);\\n        lotteryRoundCreator = LotteryRoundCreatorInterface(_lotteryRoundCreator);\\n        paymentToken = IERC20Metadata(_paymentToken);\\n        ticketPrice = _ticketPrice * (10 ** uint256(paymentToken.decimals()));\\n        freeRoundsAreEnabled = _freeRoundsAreEnabled;\\n        bankWallets.push(msg.sender);\\n    }\\n\\n    function updateSetup(address cyclixRandomizer, address lotteryReader, address _lotteryRoundCreator, address _paymentToken, uint256 _ticketPrice,\\n        uint16 _percentageOfReferralWinners, uint16[] memory _poolPercentagesBasePoints, bool _freeRoundsAreEnabled) public onlyOwner {\\n        if (address(randomizer) != cyclixRandomizer) {\\n            randomizer = CyclixRandomizerInterface(cyclixRandomizer);\\n            randomizer.registerGameContract(address(this), \\\"LotteryMasterV0.1\\\");\\n        }\\n        reader = LotteryReaderInterface(lotteryReader);\\n        lotteryRoundCreator = LotteryRoundCreatorInterface(_lotteryRoundCreator);\\n        paymentToken = IERC20Metadata(_paymentToken);\\n        ticketPrice = _ticketPrice * (10 ** uint256(paymentToken.decimals()));\\n        percentageOfReferralWinners = _percentageOfReferralWinners;\\n        LotteryRoundInterface(rounds[roundCount - 1]).setPoolPercentagesBasePoints(_poolPercentagesBasePoints);\\n        freeRoundsAreEnabled = _freeRoundsAreEnabled;\\n    }\\n\\n    function startNewRound(uint256 _statusEndTime) public onlyOwner {\\n        if (roundCount > 0) {\\n            startNewRoundForUpgrade(_statusEndTime, rounds[roundCount - 1], 0);\\n        } else {\\n            startNewRoundForUpgrade(_statusEndTime, address(0), 0);\\n        }\\n    }\\n\\n    function startNewRoundForUpgrade(uint256 _statusEndTime, address previousRound, uint256 forcedUiIdForUpgrade) public onlyOwner {\\n        roundCount++;\\n        rounds.push(lotteryRoundCreator.startNewRound(_statusEndTime, previousRound, forcedUiIdForUpgrade));\\n        require(previousRound == address(0) || forcedUiIdForUpgrade > 0 || (lotteryStatus == LotteryStatuses.ClaimInProgress && statusEndTime < block.timestamp), \\\"Previous round not ended\\\");\\n        setLotteryStatus(LotteryStatuses.DrawOpen, _statusEndTime);\\n    }\\n\\n    function setLotteryStatus(LotteryStatuses _lotteryStatus, uint256 _statusEndTime) internal onlyOwner {\\n        lotteryStatus = _lotteryStatus;\\n        statusStartTime = block.timestamp;\\n        statusEndTime = block.timestamp + _statusEndTime;\\n    }\\n\\n    function buyTickets(uint16[] memory moreTicketNumbers, address referral, address buyer) public override {\\n        uint256 paidWithFreeTicket = 0;\\n        for (uint i = 0; i < moreTicketNumbers.length; i += 6) {\\n            uint16[] memory chosenNumbers = new uint16[](6);\\n            for (uint j = 0; j < 6; j++) {\\n                chosenNumbers[j] = moreTicketNumbers[i + j];\\n            }\\n            if (buyTicket(chosenNumbers, referral, buyer)) {\\n                paidWithFreeTicket += 1;\\n            }\\n        }\\n\\n        if (referral != address(0) && freeRoundsAreEnabled) {\\n            unchecked {\\n                freeRounds[roundCount][buyer] = freeRounds[roundCount][buyer] + moreTicketNumbers.length / 6 - paidWithFreeTicket;\\n                freeRounds[roundCount][referral] = freeRounds[roundCount][referral] + moreTicketNumbers.length / 6 - paidWithFreeTicket;\\n            }\\n        }\\n    }\\n\\n    function buyTicket(uint16[] memory chosenNumbers, address referral, address buyer) internal returns(bool) {\\n        require(freeRounds[roundCount][buyer] > 0\\n        || paymentToken.allowance(buyer, address(this)) >= ticketPrice\\n        || crossChainOperator[msg.sender], \\\"Missing Allowance\\\");\\n        LotteryRoundInterface lotteryRound = LotteryRoundInterface(rounds[roundCount - 1]);\\n        bool paidWithFreeTicket = false;\\n        if (freeRounds[roundCount][buyer] > 0) {\\n            freeRounds[roundCount][buyer]--;\\n            paidWithFreeTicket = true;\\n        } else {\\n            if (!crossChainOperator[msg.sender]) {\\n                require(paymentToken.balanceOf(tx.origin) >= ticketPrice, \\\"Insufficient funds\\\");\\n                counterForBankWallets = uint16(counterForBankWallets++ % bankWallets.length);\\n                SafeERC20.safeTransferFrom(paymentToken, buyer, bankWallets[counterForBankWallets], ticketPrice);\\n            }\\n            lotteryRound.updateVictoryPoolForTicket(ticketPrice);\\n        }\\n\\n        if (paidWithFreeTicket) {\\n            lotteryRound.buyTicket(chainId, chosenNumbers, address(0), buyer);\\n        } else {\\n            lotteryRound.buyTicket(chainId, chosenNumbers, referral, buyer);\\n        }\\n        return paidWithFreeTicket;\\n    }\\n\\n    function addFreeRound(address[] calldata participant) public onlyOwner {\\n        for (uint i = 0; i < participant.length; i++) {\\n            freeRounds[roundCount][participant[i]]++;\\n        }\\n    }\\n\\n    mapping(uint256 => uint256) public publicRoundRandomNumbersRequestId;\\n\\n    function closeRound(uint256 _statusEndTime) external onlyOwner {\\n        LotteryRoundInterface lotteryRound = LotteryRoundInterface(rounds[roundCount - 1]);\\n        lotteryRound.closeRound();\\n        uint16 referralWinners = reader.numberOfReferralWinnersForRoundId(roundCount);\\n        publicRoundRandomNumbersRequestId[roundCount] = randomizer.requestRandomWords(6 + referralWinners);\\n        setLotteryStatus(LotteryStatuses.EvaluatingResults, _statusEndTime);\\n    }\\n\\n    function fetchRoundNumbers(uint256 roundId, uint256 _statusEndTime) external onlyOwner {\\n        LotteryRoundInterface round = LotteryRoundInterface(rounds[roundId - 1]);\\n        round.couldReceiveWinningNumbers();\\n        (bool fulfilled, uint256[] memory randomWords) = randomizer.getRequestStatus(publicRoundRandomNumbersRequestId[roundId]);\\n        require(fulfilled, \\\"Random numbers not ready\\\");\\n        uint16[] memory roundNumbers = new uint16[](6);\\n        uint16[] memory referralWinnersNumber = new uint16[](randomWords.length - 6);\\n        if (fulfilled) {\\n            for (uint i = 0; i < 6; i++) {\\n                roundNumbers[i] = reader.getRandomUniqueNumberInArrayForMaxValue(randomWords[i], 69, roundNumbers);\\n            }\\n            roundNumbers[5] = uint16(randomWords[5] % 26 + 1);\\n            for (uint i = 6; i < randomWords.length; i++) {\\n                referralWinnersNumber [i - 6] = reader.getRandomUniqueNumberInArrayForMaxValue(randomWords[i],\\n                    round.getRound().referralCounts, referralWinnersNumber);\\n            }\\n        }\\n        round.storeWinningNumbers(roundNumbers, referralWinnersNumber);\\n        setLotteryStatus(LotteryStatuses.ResultsEvaluated, _statusEndTime);\\n    }\\n\\n    function markWinners(uint256 roundId, uint256 _statusEndTime, uint256[] memory amountWonForEachTicketCrossChain) public onlyOwner {\\n        LotteryRoundInterface(rounds[roundId - 1]).markWinners(reader.evaluateWonTicketsForRound(roundId), reader.evaluateWonReferralForRound(roundId), amountWonForEachTicketCrossChain);\\n        setLotteryStatus(LotteryStatuses.ClaimInProgress, _statusEndTime);\\n    }\\n\\n    function claimVictory() public {\\n        require(lotteryStatus == LotteryStatuses.ClaimInProgress, \\\"Lottery is not in claim period\\\");\\n        require(statusEndTime > block.timestamp, \\\"Claim Period ended\\\");\\n        uint256 amountForEntries = reader.evaluateWonTicketsAmountForWallet(roundCount, msg.sender, false);\\n        uint256 amountForReferral = reader.evaluateWonReferralAmountForWallet(roundCount, msg.sender, false);\\n        require(amountForEntries > 0 || amountForReferral > 0, \\\"Nothing to claim for this wallet\\\");\\n        require(paymentToken.balanceOf(address(this)) >= amountForEntries + amountForReferral, \\\"Not enough funds on contract\\\");\\n        LotteryRoundInterface(rounds[roundCount - 1]).markVictoryClaimed(\\n            reader.evaluateWonTicketsForWallet(roundCount, msg.sender),\\n            reader.evaluateWonReferralFoWallet(roundCount, msg.sender)\\n        );\\n        paymentToken.transfer(msg.sender, amountForEntries + amountForReferral);\\n    }\\n}\",\"keccak256\":\"0x6f9b5b915c1501b98eaa3b0c1c8d1a594b683509fb229ecbf88c5fd3f167fa50\",\"license\":\"UNLICENSED\"},\"contracts/LotteryMasterInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {TestFunctions} from \\\"./utils/TestUtils.sol\\\";\\nimport {CyclixRandomizerInterface} from \\\"./CyclixRandomizerInterface.sol\\\";\\nimport {EmergencyFunctions} from \\\"./utils/EmergencyFunctions.sol\\\";\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\n\\ninterface LotteryMasterInterface {\\n    function buyTickets(uint16[] memory moreTicketNumbers, address referral, address buyer) external;\\n}\",\"keccak256\":\"0x095210a993bb70bb45517c464c9ba6c5cac5ba7b82d9bae402ceb4445de36361\",\"license\":\"UNLICENSED\"},\"contracts/LotteryReaderInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {TestFunctions} from \\\"./utils/TestUtils.sol\\\";\\nimport {CyclixRandomizerInterface} from \\\"./CyclixRandomizerInterface.sol\\\";\\nimport {EmergencyFunctions} from \\\"./utils/EmergencyFunctions.sol\\\";\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\n\\ninterface LotteryReaderInterface {\\n    function poolForVictoryTier(uint256 roundId, RoundVictoryTier victoryTier) external view returns(uint256) ;\\n    function poolForReferral(uint256 roundId) external view returns(uint256) ;\\n    function tokenHoldersPoolAmount(uint256 roundId) external view returns (uint256) ;\\n    function treasuryPoolAmount(uint256 roundId) external view returns (uint256) ;\\n    function numberOfReferralWinnersForRoundId(uint256 roundId) external view returns (uint16) ;\\n    function existInArrayBigNumber(uint256 num, uint256[] memory arr) external pure returns (bool) ;\\n    function existInArrayNumber(uint16 num, uint16[] memory arr) external pure returns (bool) ;\\n    function notExistInArrayNumber(uint16 num, uint16[] memory arr) external pure returns (bool) ;\\n    function getRandomUniqueNumberInArrayForMaxValue(uint256 randomNumber, uint16 maxValue, uint16[] memory arr) external pure returns (uint16) ;\\n    function tierFromResults(uint16 rightNumbersForTicket, bool powerNumberFound) external pure returns (RoundVictoryTier) ;\\n    function getTicketsForRound(uint256 roundId) external view returns(Ticket[] memory);\\n    function getAllTicketsNumbersForRound(uint256 roundId) external view returns(uint16[] memory);\\n    function getReferralTicketsForRound(uint256 roundId) external view returns(ReferralTicket[] memory);\\n    function evaluateWonTicketsForRound(uint256 roundId) external view returns (TicketResults[] memory);\\n    function evaluateWonTicketsAmountForWallet(uint256 roundId, address wallet, bool claimed) external view returns(uint256);\\n    function evaluateWonTicketsForWallet(uint256 roundId, address wallet) external view returns(TicketResults[] memory);\\n    function evaluateWonReferralForRound(uint256 roundId) external view returns (ReferralTicketResults[] memory);\\n    function evaluateWonReferralAmountForWallet(uint256 roundId, address wallet, bool claimed) external view returns(uint256);\\n    function evaluateWonReferralFoWallet(uint256 roundId, address wallet) external view returns (ReferralTicketResults[] memory);\\n    function amountWonInRound(uint256 roundId) external view returns (uint256) ;\\n    function roundNumbers(uint256 roundId) external view returns(uint16[] memory);\\n    function referralWinnersNumber(uint256 roundId) external view returns(uint256[] memory);\\n}\",\"keccak256\":\"0x815fb0592bae303a980a5bdc44ae9d50653a6606c310f1b51e6096e8f83fbb1a\",\"license\":\"UNLICENSED\"},\"contracts/LotteryRoundCreatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\ninterface LotteryRoundCreatorInterface {\\n   function startNewRound(uint256 roundDurationInSeconds, address previousRoundAddress, uint256 forcedUiIdForUpgrade) external returns(address);\\n}\",\"keccak256\":\"0xe927e4ac71030ab7137f7ea7a19f7cb8b6f074ae449fc03188237d3f2f2222fd\",\"license\":\"UNLICENSED\"},\"contracts/LotteryRoundInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\n\\ninterface LotteryRoundInterface {\\n    function getRound() external returns(Round memory);\\n    function markWinners(TicketResults[] memory ticketResults, ReferralTicketResults[] memory referralTicketResults, uint256[] memory amountWonForEachTicketCrossChain) external;\\n    function markVictoryClaimed(TicketResults[] memory ticketResults, ReferralTicketResults[] memory referralTicketResults) external;\\n    function markReferralVictoryClaimed(uint256 referralTicketId, uint256 amountClaimed) external;\\n    function treasuryAmountOnTicket(uint256 paymentTokenAmount) external view returns (uint256);\\n    function updateVictoryPoolForTicket(uint256 paymentTokenAmount) external;\\n    function buyTicket(uint256 chainId, uint16[] memory chosenNumbers, address referral, address buyer) external;\\n    function closeRound() external;\\n    function couldReceiveWinningNumbers() external view;\\n    function storeWinningNumbers(uint16[] memory roundNumbers, uint16[] memory referralWinnersNumber) external;\\n    function ticketById(uint256 ticketId) external view returns (Ticket memory);\\n    function numbersForTicketId(uint256 ticketId) external view returns (uint16[] memory);\\n    function referralTicketById(uint256 index) external view returns (ReferralTicket memory);\\n    function setPoolPercentagesBasePoints(uint16[] memory _poolPercentagesBasePoints) external;\\n}\",\"keccak256\":\"0xf94f81d870751bc3e30b85f4b7c6cf07d807afa640d57ff3be0dda82c32b8931\",\"license\":\"UNLICENSED\"},\"contracts/utils/EmergencyFunctions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract EmergencyFunctions is Ownable {\\n    address internal teamAddress;\\n    constructor(address _teamAddress) Ownable(_teamAddress) {\\n        teamAddress = _teamAddress;\\n    }\\n\\n    function updateTeamAddress(address _teamAddress) public onlyOwner {\\n        teamAddress = _teamAddress;\\n    }\\n\\n    // Emergency Functions\\n    function sendTokenToTeam(address _token) public onlyOwner {\\n        uint256 amount = IERC20(_token).balanceOf(address(this));\\n        if (amount > 0) {\\n            SafeERC20.safeTransfer(IERC20(_token), teamAddress, amount);\\n        }\\n    }\\n\\n    function sendCryptoToTeam() public onlyOwner {\\n        if (address(this).balance > 0) {\\n            payable(teamAddress).transfer(address(this).balance);\\n        }\\n    }\\n\\n    /** @notice Check if an address is a contract */\\n    function _isContract(address _addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x68dcc6a4104e2905f65c342fdb2dbde1908113d10c006f5857b52dc0bbefd419\",\"license\":\"MIT\"},\"contracts/utils/TestUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.x <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IERC20Extension {\\n    function decimals() external view returns (uint8);\\n}\\n\\ncontract TestFunctions is Ownable {\\n    constructor() Ownable(msg.sender) {}\\n    //Used for mock testing, contract ownership will be renounced on release\\n    uint public currentTimestampOverride;\\n    function updateCurrentTimestampOverride(uint _v) external onlyOwner {\\n        currentTimestampOverride = _v;\\n    }\\n    function currentTimestamp() public view returns(uint) {\\n        if (currentTimestampOverride > 0) {\\n            return currentTimestampOverride;\\n        }\\n        return block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x8edb22ef91efc1d38ffbd50b48821f4fe23bdaf84a14de75d0df8231eb772bc4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102065760003560e01c806388e01a981161011a578063b62fe01b116100ad578063e03d753a1161007c578063e03d753a14610579578063f10fb58414610597578063f2fde38b146105b5578063f4dec22b146105d1578063f542bd9a146105ef57610206565b8063b62fe01b14610505578063bbd1783a14610521578063cedd1bc31461052b578063d4fc42c61461055b57610206565b8063998da3e9116100e9578063998da3e914610495578063a8eed12d146104b1578063abe659fe146104cd578063b33d8c54146104e957610206565b806388e01a981461040d5780638c65c81f146104295780638da5cb5b1461045957806392566fdd1461047757610206565b80633013ce291161019d57806362cd30d11161016c57806362cd30d11461037d578063715018a61461039957806375e5460d146103a3578063839163ae146103d357806387da46f1146103ef57610206565b80633013ce29146102f55780633fda7d95146103135780634615102c1461033157806347be7bf61461034d57610206565b80631abddf33116101d95780631abddf33146102815780631ed15aa41461028b57806322429429146102a7578063258799f8146102c557610206565b80630d683dd91461020b5780631209b1f614610229578063127f0b3f1461024757806314eb76ac14610265575b600080fd5b61021361060b565b6040516102209190613204565b60405180910390f35b61023161061e565b60405161023e9190613238565b60405180910390f35b61024f610624565b60405161025c9190613238565b60405180910390f35b61027f600480360381019061027a91906132c5565b61062a565b005b610289610676565b005b6102a560048036038101906102a0919061332a565b610c65565b005b6102af610eab565b6040516102bc9190613238565b60405180910390f35b6102df60048036038101906102da9190613396565b610eb1565b6040516102ec91906133d2565b60405180910390f35b6102fd610ef0565b60405161030a919061344c565b60405180910390f35b61031b610f16565b6040516103289190613238565b60405180910390f35b61034b60048036038101906103469190613396565b610f1c565b005b61036760048036038101906103629190613467565b610f9c565b6040516103749190613238565b60405180910390f35b6103976004803603810190610392919061363a565b610fc1565b005b6103a1611359565b005b6103bd60048036038101906103b891906132c5565b61136d565b6040516103ca919061371b565b60405180910390f35b6103ed60048036038101906103e89190613736565b61138d565b005b6103f7611585565b60405161040491906137aa565b60405180910390f35b61042760048036038101906104229190613396565b6115ab565b005b610443600480360381019061043e9190613396565b6117d9565b60405161045091906133d2565b60405180910390f35b610461611818565b60405161046e91906133d2565b60405180910390f35b61047f611841565b60405161048c91906137d4565b60405180910390f35b6104af60048036038101906104aa91906132c5565b611855565b005b6104cb60048036038101906104c6919061332a565b611916565b005b6104e760048036038101906104e291906138b2565b611979565b005b61050360048036038101906104fe919061397c565b611b8a565b005b61051f600480360381019061051a91906139c9565b611c41565b005b610529612204565b005b61054560048036038101906105409190613396565b612281565b6040516105529190613238565b60405180910390f35b610563612299565b6040516105709190613a2a565b60405180910390f35b6105816122bf565b60405161058e919061371b565b60405180910390f35b61059f6122d2565b6040516105ac9190613a66565b60405180910390f35b6105cf60048036038101906105ca91906132c5565b6122f8565b005b6105d961237e565b6040516105e691906137d4565b60405180910390f35b61060960048036038101906106049190613a81565b612392565b005b600560009054906101000a900460ff1681565b600f5481565b60035481565b61063261265f565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6003808111156106895761068861318d565b5b600560009054906101000a900460ff1660038111156106ab576106aa61318d565b5b146106eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e290613b4d565b60405180910390fd5b426007541161072f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072690613bb9565b60405180910390fd5b6000600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b7991e336003543360006040518463ffffffff1660e01b815260040161079393929190613bd9565b602060405180830381865afa1580156107b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d49190613c25565b90506000600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a521dc956003543360006040518463ffffffff1660e01b815260040161083a93929190613bd9565b602060405180830381865afa158015610857573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087b9190613c25565b9050600082118061088c5750600081115b6108cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c290613c9e565b60405180910390fd5b80826108d79190613ced565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161093291906133d2565b602060405180830381865afa15801561094f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109739190613c25565b10156109b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ab90613d6d565b60405180910390fd5b600460016003546109c59190613d8d565b815481106109d6576109d5613dc1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b82e18ff600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663eed25896600354336040518363ffffffff1660e01b8152600401610a7b929190613df0565b600060405180830381865afa158015610a98573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610ac19190613fd5565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166317ba3b7d600354336040518363ffffffff1660e01b8152600401610b20929190613df0565b600060405180830381865afa158015610b3d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610b669190614195565b6040518363ffffffff1660e01b8152600401610b839291906144ba565b600060405180830381600087803b158015610b9d57600080fd5b505af1158015610bb1573d6000803e3d6000fd5b50505050600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338385610c009190613ced565b6040518363ffffffff1660e01b8152600401610c1d9291906144f1565b6020604051808303816000875af1158015610c3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c60919061451a565b505050565b610c6d61265f565b60005b600b80549050811015610e3c578273ffffffffffffffffffffffffffffffffffffffff16600b8281548110610ca857610ca7613dc1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610e2f578115610d3a576000610d35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2c90614593565b60405180910390fd5b610e2e565b600b6001600b80549050610d4e9190613d8d565b81548110610d5f57610d5e613dc1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600b8281548110610d9e57610d9d613dc1565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600b805480610df857610df76145b3565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590555b5b8080600101915050610c70565b508015610ea757600b829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5050565b60075481565b600b8181548110610ec157600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60065481565b610f2461265f565b60006003541115610f8c57610f878160046001600354610f449190613d8d565b81548110610f5557610f54613dc1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600061138d565b610f99565b610f988160008061138d565b5b50565b6008602052816000526040600020602052806000526040600020600091509150505481565b610fc961265f565b8773ffffffffffffffffffffffffffffffffffffffff16600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146110ed5787600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cd0f2311306040518263ffffffff1660e01b81526004016110ba919061462e565b600060405180830381600087803b1580156110d457600080fd5b505af11580156110e8573d6000803e3d6000fd5b505050505b86600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085601060036101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561121d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112419190614695565b60ff16600a61125091906147f5565b8461125b9190614840565b600f8190555082601060016101000a81548161ffff021916908361ffff1602179055506004600160035461128f9190613d8d565b815481106112a05761129f613dc1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639469f293836040518263ffffffff1660e01b81526004016113039190614940565b600060405180830381600087803b15801561131d57600080fd5b505af1158015611331573d6000803e3d6000fd5b5050505080601060006101000a81548160ff0219169083151502179055505050505050505050565b61136161265f565b61136b60006126e6565b565b60096020528060005260406000206000915054906101000a900460ff1681565b61139561265f565b600360008154809291906113a890614962565b91905055506004601060039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f199f5308585856040518463ffffffff1660e01b815260040161140e939291906149aa565b6020604051808303816000875af115801561142d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145191906149e1565b9080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614806114ec5750600081115b8061153657506003808111156115055761150461318d565b5b600560009054906101000a900460ff1660038111156115275761152661318d565b5b148015611535575042600754105b5b611575576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156c90614a5a565b60405180910390fd5b6115806000846127aa565b505050565b601060039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6115b361265f565b6000600460016003546115c69190613d8d565b815481106115d7576115d6613dc1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663e278fe6f6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561164c57600080fd5b505af1158015611660573d6000803e3d6000fd5b505050506000600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f1664df66003546040518263ffffffff1660e01b81526004016116c39190613238565b602060405180830381865afa1580156116e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117049190614a8f565b9050600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e726f2e18260066117519190614abc565b6040518263ffffffff1660e01b815260040161176d9190614b33565b6020604051808303816000875af115801561178c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b09190613c25565b601160006003548152602001908152602001600020819055506117d46001846127aa565b505050565b600481815481106117e957600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600a60009054906101000a900461ffff1681565b61185d61265f565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161189891906133d2565b602060405180830381865afa1580156118b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118d99190613c25565b905060008111156119125761191182600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836127f9565b5b5050565b61191e61265f565b80600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b61198161265f565b60046001846119909190613d8d565b815481106119a1576119a0613dc1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663df4fbb2f600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639f75e5c9866040518263ffffffff1660e01b8152600401611a429190613238565b600060405180830381865afa158015611a5f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611a889190613fd5565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166348b2e35c876040518263ffffffff1660e01b8152600401611ae39190613238565b600060405180830381865afa158015611b00573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611b299190614195565b846040518463ffffffff1660e01b8152600401611b4893929190614bfd565b600060405180830381600087803b158015611b6257600080fd5b505af1158015611b76573d6000803e3d6000fd5b50505050611b856003836127aa565b505050565b611b9261265f565b60005b82829050811015611c3c576008600060035481526020019081526020016000206000848484818110611bca57611bc9613dc1565b5b9050602002016020810190611bdf91906132c5565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190611c2a90614962565b91905055508080600101915050611b95565b505050565b611c4961265f565b60006004600184611c5a9190613d8d565b81548110611c6b57611c6a613dc1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663343f25666040518163ffffffff1660e01b815260040160006040518083038186803b158015611cde57600080fd5b505afa158015611cf2573d6000803e3d6000fd5b50505050600080600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d8a4676f60116000888152602001908152602001600020546040518263ffffffff1660e01b8152600401611d679190613238565b600060405180830381865afa158015611d84573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611dad9190614ce0565b9150915081611df1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611de890614d88565b60405180910390fd5b6000600667ffffffffffffffff811115611e0e57611e0d6134f7565b5b604051908082528060200260200182016040528015611e3c5781602001602082028036833780820191505090505b509050600060068351611e4f9190613d8d565b67ffffffffffffffff811115611e6857611e676134f7565b5b604051908082528060200260200182016040528015611e965781602001602082028036833780820191505090505b50905083156121835760005b6006811015611f9c57600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c746a8a858381518110611efc57611efb613dc1565b5b60200260200101516045866040518463ffffffff1660e01b8152600401611f2593929190614de3565b602060405180830381865afa158015611f42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f669190614a8f565b838281518110611f7957611f78613dc1565b5b602002602001019061ffff16908161ffff16815250508080600101915050611ea2565b506001601a84600581518110611fb557611fb4613dc1565b5b6020026020010151611fc79190614e50565b611fd19190613ced565b82600581518110611fe557611fe4613dc1565b5b602002602001019061ffff16908161ffff16815250506000600690505b835181101561218157600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c746a8a85838151811061205c5761205b613dc1565b5b60200260200101518873ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b81526004016000604051808303816000875af11580156120b1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906120da91906150aa565b6101600151856040518463ffffffff1660e01b81526004016120fe939291906150f3565b602060405180830381865afa15801561211b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061213f9190614a8f565b8260068361214d9190613d8d565b8151811061215e5761215d613dc1565b5b602002602001019061ffff16908161ffff16815250508080600101915050612002565b505b8473ffffffffffffffffffffffffffffffffffffffff16632724d10483836040518363ffffffff1660e01b81526004016121be929190615131565b600060405180830381600087803b1580156121d857600080fd5b505af11580156121ec573d6000803e3d6000fd5b505050506121fb6002876127aa565b50505050505050565b61220c61265f565b600047111561227f57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561227d573d6000803e3d6000fd5b505b565b60116020528060005260406000206000915090505481565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601060009054906101000a900460ff1681565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61230061265f565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036123725760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161236991906133d2565b60405180910390fd5b61237b816126e6565b50565b601060019054906101000a900461ffff1681565b6000805b845181101561248b576000600667ffffffffffffffff8111156123bc576123bb6134f7565b5b6040519080825280602002602001820160405280156123ea5781602001602082028036833780820191505090505b50905060005b6006811015612455578681846124069190613ced565b8151811061241757612416613dc1565b5b602002602001015182828151811061243257612431613dc1565b5b602002602001019061ffff16908161ffff168152505080806001019150506123f0565b50612461818686612878565b15612476576001836124739190613ced565b92505b506006816124849190613ced565b9050612396565b50600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156124d55750601060009054906101000a900460ff165b15612659578060068551816124ed576124ec614e21565b5b0460086000600354815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054010360086000600354815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508060068551816125ac576125ab614e21565b5b0460086000600354815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054010360086000600354815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b50505050565b612667612eb5565b73ffffffffffffffffffffffffffffffffffffffff16612685611818565b73ffffffffffffffffffffffffffffffffffffffff16146126e4576126a8612eb5565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016126db91906133d2565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6127b261265f565b81600560006101000a81548160ff021916908360038111156127d7576127d661318d565b5b02179055504260068190555080426127ef9190613ced565b6007819055505050565b612873838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb858560405160240161282c9291906144f1565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612ebd565b505050565b60008060086000600354815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411806129795750600f54600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e84306040518363ffffffff1660e01b8152600401612935929190615168565b602060405180830381865afa158015612952573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129769190613c25565b10155b806129cd5750600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b612a0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a03906151dd565b60405180910390fd5b600060046001600354612a1f9190613d8d565b81548110612a3057612a2f613dc1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060086000600354815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115612b2a5760086000600354815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190612b1c906151fd565b919050555060019050612db6565b600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16612d4857600f54600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231326040518263ffffffff1660e01b8152600401612bd991906133d2565b602060405180830381865afa158015612bf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c1a9190613c25565b1015612c5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c5290615272565b60405180910390fd5b600b80549050600a600081819054906101000a900461ffff1680929190612c8190615292565b91906101000a81548161ffff021916908361ffff16021790555061ffff16612ca99190614e50565b600a60006101000a81548161ffff021916908361ffff160217905550612d47600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685600b600a60009054906101000a900461ffff1661ffff1681548110612d1457612d13613dc1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600f54612f54565b5b8173ffffffffffffffffffffffffffffffffffffffff1663b56c12b4600f546040518263ffffffff1660e01b8152600401612d839190613238565b600060405180830381600087803b158015612d9d57600080fd5b505af1158015612db1573d6000803e3d6000fd5b505050505b8015612e35578173ffffffffffffffffffffffffffffffffffffffff1663eb7165fa600254886000886040518563ffffffff1660e01b8152600401612dfe94939291906152bc565b600060405180830381600087803b158015612e1857600080fd5b505af1158015612e2c573d6000803e3d6000fd5b50505050612ea9565b8173ffffffffffffffffffffffffffffffffffffffff1663eb7165fa6002548888886040518563ffffffff1660e01b8152600401612e7694939291906152bc565b600060405180830381600087803b158015612e9057600080fd5b505af1158015612ea4573d6000803e3d6000fd5b505050505b80925050509392505050565b600033905090565b6000612ee8828473ffffffffffffffffffffffffffffffffffffffff16612fd690919063ffffffff16565b90506000815114158015612f0d575080806020019051810190612f0b919061451a565b155b15612f4f57826040517f5274afe7000000000000000000000000000000000000000000000000000000008152600401612f4691906133d2565b60405180910390fd5b505050565b612fd0848573ffffffffffffffffffffffffffffffffffffffff166323b872dd868686604051602401612f8993929190615308565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612ebd565b50505050565b6060612fe483836000612fec565b905092915050565b60608147101561303357306040517fcd78605900000000000000000000000000000000000000000000000000000000815260040161302a91906133d2565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff16848660405161305c91906153b0565b60006040518083038185875af1925050503d8060008114613099576040519150601f19603f3d011682016040523d82523d6000602084013e61309e565b606091505b50915091506130ae8683836130b9565b925050509392505050565b6060826130ce576130c982613148565b613140565b600082511480156130f6575060008473ffffffffffffffffffffffffffffffffffffffff163b145b1561313857836040517f9996b31500000000000000000000000000000000000000000000000000000000815260040161312f91906133d2565b60405180910390fd5b819050613141565b5b9392505050565b60008151111561315b5780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600481106131cd576131cc61318d565b5b50565b60008190506131de826131bc565b919050565b60006131ee826131d0565b9050919050565b6131fe816131e3565b82525050565b600060208201905061321960008301846131f5565b92915050565b6000819050919050565b6132328161321f565b82525050565b600060208201905061324d6000830184613229565b92915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061329282613267565b9050919050565b6132a281613287565b81146132ad57600080fd5b50565b6000813590506132bf81613299565b92915050565b6000602082840312156132db576132da61325d565b5b60006132e9848285016132b0565b91505092915050565b60008115159050919050565b613307816132f2565b811461331257600080fd5b50565b600081359050613324816132fe565b92915050565b600080604083850312156133415761334061325d565b5b600061334f858286016132b0565b925050602061336085828601613315565b9150509250929050565b6133738161321f565b811461337e57600080fd5b50565b6000813590506133908161336a565b92915050565b6000602082840312156133ac576133ab61325d565b5b60006133ba84828501613381565b91505092915050565b6133cc81613287565b82525050565b60006020820190506133e760008301846133c3565b92915050565b6000819050919050565b600061341261340d61340884613267565b6133ed565b613267565b9050919050565b6000613424826133f7565b9050919050565b600061343682613419565b9050919050565b6134468161342b565b82525050565b6000602082019050613461600083018461343d565b92915050565b6000806040838503121561347e5761347d61325d565b5b600061348c85828601613381565b925050602061349d858286016132b0565b9150509250929050565b600061ffff82169050919050565b6134be816134a7565b81146134c957600080fd5b50565b6000813590506134db816134b5565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61352f826134e6565b810181811067ffffffffffffffff8211171561354e5761354d6134f7565b5b80604052505050565b6000613561613253565b905061356d8282613526565b919050565b600067ffffffffffffffff82111561358d5761358c6134f7565b5b602082029050602081019050919050565b600080fd5b60006135b66135b184613572565b613557565b905080838252602082019050602084028301858111156135d9576135d861359e565b5b835b8181101561360257806135ee88826134cc565b8452602084019350506020810190506135db565b5050509392505050565b600082601f830112613621576136206134e1565b5b81356136318482602086016135a3565b91505092915050565b600080600080600080600080610100898b03121561365b5761365a61325d565b5b60006136698b828c016132b0565b985050602061367a8b828c016132b0565b975050604061368b8b828c016132b0565b965050606061369c8b828c016132b0565b95505060806136ad8b828c01613381565b94505060a06136be8b828c016134cc565b93505060c089013567ffffffffffffffff8111156136df576136de613262565b5b6136eb8b828c0161360c565b92505060e06136fc8b828c01613315565b9150509295985092959890939650565b613715816132f2565b82525050565b6000602082019050613730600083018461370c565b92915050565b60008060006060848603121561374f5761374e61325d565b5b600061375d86828701613381565b935050602061376e868287016132b0565b925050604061377f86828701613381565b9150509250925092565b600061379482613419565b9050919050565b6137a481613789565b82525050565b60006020820190506137bf600083018461379b565b92915050565b6137ce816134a7565b82525050565b60006020820190506137e960008301846137c5565b92915050565b600067ffffffffffffffff82111561380a576138096134f7565b5b602082029050602081019050919050565b600061382e613829846137ef565b613557565b905080838252602082019050602084028301858111156138515761385061359e565b5b835b8181101561387a57806138668882613381565b845260208401935050602081019050613853565b5050509392505050565b600082601f830112613899576138986134e1565b5b81356138a984826020860161381b565b91505092915050565b6000806000606084860312156138cb576138ca61325d565b5b60006138d986828701613381565b93505060206138ea86828701613381565b925050604084013567ffffffffffffffff81111561390b5761390a613262565b5b61391786828701613884565b9150509250925092565b600080fd5b60008083601f84011261393c5761393b6134e1565b5b8235905067ffffffffffffffff81111561395957613958613921565b5b6020830191508360208202830111156139755761397461359e565b5b9250929050565b600080602083850312156139935761399261325d565b5b600083013567ffffffffffffffff8111156139b1576139b0613262565b5b6139bd85828601613926565b92509250509250929050565b600080604083850312156139e0576139df61325d565b5b60006139ee85828601613381565b92505060206139ff85828601613381565b9150509250929050565b6000613a1482613419565b9050919050565b613a2481613a09565b82525050565b6000602082019050613a3f6000830184613a1b565b92915050565b6000613a5082613419565b9050919050565b613a6081613a45565b82525050565b6000602082019050613a7b6000830184613a57565b92915050565b600080600060608486031215613a9a57613a9961325d565b5b600084013567ffffffffffffffff811115613ab857613ab7613262565b5b613ac48682870161360c565b9350506020613ad5868287016132b0565b9250506040613ae6868287016132b0565b9150509250925092565b600082825260208201905092915050565b7f4c6f7474657279206973206e6f7420696e20636c61696d20706572696f640000600082015250565b6000613b37601e83613af0565b9150613b4282613b01565b602082019050919050565b60006020820190508181036000830152613b6681613b2a565b9050919050565b7f436c61696d20506572696f6420656e6465640000000000000000000000000000600082015250565b6000613ba3601283613af0565b9150613bae82613b6d565b602082019050919050565b60006020820190508181036000830152613bd281613b96565b9050919050565b6000606082019050613bee6000830186613229565b613bfb60208301856133c3565b613c08604083018461370c565b949350505050565b600081519050613c1f8161336a565b92915050565b600060208284031215613c3b57613c3a61325d565b5b6000613c4984828501613c10565b91505092915050565b7f4e6f7468696e6720746f20636c61696d20666f7220746869732077616c6c6574600082015250565b6000613c88602083613af0565b9150613c9382613c52565b602082019050919050565b60006020820190508181036000830152613cb781613c7b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613cf88261321f565b9150613d038361321f565b9250828201905080821115613d1b57613d1a613cbe565b5b92915050565b7f4e6f7420656e6f7567682066756e6473206f6e20636f6e747261637400000000600082015250565b6000613d57601c83613af0565b9150613d6282613d21565b602082019050919050565b60006020820190508181036000830152613d8681613d4a565b9050919050565b6000613d988261321f565b9150613da38361321f565b9250828203905081811115613dbb57613dba613cbe565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000604082019050613e056000830185613229565b613e1260208301846133c3565b9392505050565b600067ffffffffffffffff821115613e3457613e336134f7565b5b602082029050602081019050919050565b600080fd5b600080fd5b600081519050613e5e81613299565b92915050565b600a8110613e7157600080fd5b50565b600081519050613e8381613e64565b92915050565b600081519050613e98816132fe565b92915050565b600060c08284031215613eb457613eb3613e45565b5b613ebe60c0613557565b90506000613ece84828501613c10565b6000830152506020613ee284828501613e4f565b6020830152506040613ef684828501613e74565b6040830152506060613f0a84828501613e89565b6060830152506080613f1e84828501613e89565b60808301525060a0613f3284828501613c10565b60a08301525092915050565b6000613f51613f4c84613e19565b613557565b90508083825260208201905060c08402830185811115613f7457613f7361359e565b5b835b81811015613f9d5780613f898882613e9e565b84526020840193505060c081019050613f76565b5050509392505050565b600082601f830112613fbc57613fbb6134e1565b5b8151613fcc848260208601613f3e565b91505092915050565b600060208284031215613feb57613fea61325d565b5b600082015167ffffffffffffffff81111561400957614008613262565b5b61401584828501613fa7565b91505092915050565b600067ffffffffffffffff821115614039576140386134f7565b5b602082029050602081019050919050565b600060e082840312156140605761405f613e45565b5b61406a60e0613557565b9050600061407a84828501613c10565b600083015250602061408e84828501613e4f565b60208301525060406140a284828501613e4f565b60408301525060606140b684828501613c10565b60608301525060806140ca84828501613e89565b60808301525060a06140de84828501613e89565b60a08301525060c06140f284828501613c10565b60c08301525092915050565b600061411161410c8461401e565b613557565b90508083825260208201905060e084028301858111156141345761413361359e565b5b835b8181101561415d5780614149888261404a565b84526020840193505060e081019050614136565b5050509392505050565b600082601f83011261417c5761417b6134e1565b5b815161418c8482602086016140fe565b91505092915050565b6000602082840312156141ab576141aa61325d565b5b600082015167ffffffffffffffff8111156141c9576141c8613262565b5b6141d584828501614167565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6142138161321f565b82525050565b61422281613287565b82525050565b600a81106142395761423861318d565b5b50565b600081905061424a82614228565b919050565b600061425a8261423c565b9050919050565b61426a8161424f565b82525050565b614279816132f2565b82525050565b60c082016000820151614295600085018261420a565b5060208201516142a86020850182614219565b5060408201516142bb6040850182614261565b5060608201516142ce6060850182614270565b5060808201516142e16080850182614270565b5060a08201516142f460a085018261420a565b50505050565b6000614306838361427f565b60c08301905092915050565b6000602082019050919050565b600061432a826141de565b61433481856141e9565b935061433f836141fa565b8060005b8381101561437057815161435788826142fa565b975061436283614312565b925050600181019050614343565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60e0820160008201516143bf600085018261420a565b5060208201516143d26020850182614219565b5060408201516143e56040850182614219565b5060608201516143f8606085018261420a565b50608082015161440b6080850182614270565b5060a082015161441e60a0850182614270565b5060c082015161443160c085018261420a565b50505050565b600061444383836143a9565b60e08301905092915050565b6000602082019050919050565b60006144678261437d565b6144718185614388565b935061447c83614399565b8060005b838110156144ad5781516144948882614437565b975061449f8361444f565b925050600181019050614480565b5085935050505092915050565b600060408201905081810360008301526144d4818561431f565b905081810360208301526144e8818461445c565b90509392505050565b600060408201905061450660008301856133c3565b6145136020830184613229565b9392505050565b6000602082840312156145305761452f61325d565b5b600061453e84828501613e89565b91505092915050565b7f57616c6c657420616c7265616479206164646564000000000000000000000000600082015250565b600061457d601483613af0565b915061458882614547565b602082019050919050565b600060208201905081810360008301526145ac81614570565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4c6f74746572794d617374657256302e31000000000000000000000000000000600082015250565b6000614618601183613af0565b9150614623826145e2565b602082019050919050565b600060408201905061464360008301846133c3565b81810360208301526146548161460b565b905092915050565b600060ff82169050919050565b6146728161465c565b811461467d57600080fd5b50565b60008151905061468f81614669565b92915050565b6000602082840312156146ab576146aa61325d565b5b60006146b984828501614680565b91505092915050565b60008160011c9050919050565b6000808291508390505b6001851115614719578086048111156146f5576146f4613cbe565b5b60018516156147045780820291505b8081029050614712856146c2565b94506146d9565b94509492505050565b60008261473257600190506147ee565b8161474057600090506147ee565b816001811461475657600281146147605761478f565b60019150506147ee565b60ff84111561477257614771613cbe565b5b8360020a91508482111561478957614788613cbe565b5b506147ee565b5060208310610133831016604e8410600b84101617156147c45782820a9050838111156147bf576147be613cbe565b5b6147ee565b6147d184848460016146cf565b925090508184048111156147e8576147e7613cbe565b5b81810290505b9392505050565b60006148008261321f565b915061480b8361321f565b92506148387fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484614722565b905092915050565b600061484b8261321f565b91506148568361321f565b92508282026148648161321f565b9150828204841483151761487b5761487a613cbe565b5b5092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6148b7816134a7565b82525050565b60006148c983836148ae565b60208301905092915050565b6000602082019050919050565b60006148ed82614882565b6148f7818561488d565b93506149028361489e565b8060005b8381101561493357815161491a88826148bd565b9750614925836148d5565b925050600181019050614906565b5085935050505092915050565b6000602082019050818103600083015261495a81846148e2565b905092915050565b600061496d8261321f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361499f5761499e613cbe565b5b600182019050919050565b60006060820190506149bf6000830186613229565b6149cc60208301856133c3565b6149d96040830184613229565b949350505050565b6000602082840312156149f7576149f661325d565b5b6000614a0584828501613e4f565b91505092915050565b7f50726576696f757320726f756e64206e6f7420656e6465640000000000000000600082015250565b6000614a44601883613af0565b9150614a4f82614a0e565b602082019050919050565b60006020820190508181036000830152614a7381614a37565b9050919050565b600081519050614a89816134b5565b92915050565b600060208284031215614aa557614aa461325d565b5b6000614ab384828501614a7a565b91505092915050565b6000614ac7826134a7565b9150614ad2836134a7565b9250828201905061ffff811115614aec57614aeb613cbe565b5b92915050565b600063ffffffff82169050919050565b6000614b1d614b18614b13846134a7565b6133ed565b614af2565b9050919050565b614b2d81614b02565b82525050565b6000602082019050614b486000830184614b24565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000614b86838361420a565b60208301905092915050565b6000602082019050919050565b6000614baa82614b4e565b614bb48185614b59565b9350614bbf83614b6a565b8060005b83811015614bf0578151614bd78882614b7a565b9750614be283614b92565b925050600181019050614bc3565b5085935050505092915050565b60006060820190508181036000830152614c17818661431f565b90508181036020830152614c2b818561445c565b90508181036040830152614c3f8184614b9f565b9050949350505050565b6000614c5c614c57846137ef565b613557565b90508083825260208201905060208402830185811115614c7f57614c7e61359e565b5b835b81811015614ca85780614c948882613c10565b845260208401935050602081019050614c81565b5050509392505050565b600082601f830112614cc757614cc66134e1565b5b8151614cd7848260208601614c49565b91505092915050565b60008060408385031215614cf757614cf661325d565b5b6000614d0585828601613e89565b925050602083015167ffffffffffffffff811115614d2657614d25613262565b5b614d3285828601614cb2565b9150509250929050565b7f52616e646f6d206e756d62657273206e6f742072656164790000000000000000600082015250565b6000614d72601883613af0565b9150614d7d82614d3c565b602082019050919050565b60006020820190508181036000830152614da181614d65565b9050919050565b6000819050919050565b6000614dcd614dc8614dc384614da8565b6133ed565b6134a7565b9050919050565b614ddd81614db2565b82525050565b6000606082019050614df86000830186613229565b614e056020830185614dd4565b8181036040830152614e1781846148e2565b9050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614e5b8261321f565b9150614e668361321f565b925082614e7657614e75614e21565b5b828206905092915050565b6000614e94614e8f84613572565b613557565b90508083825260208201905060208402830185811115614eb757614eb661359e565b5b835b81811015614ee05780614ecc8882614a7a565b845260208401935050602081019050614eb9565b5050509392505050565b600082601f830112614eff57614efe6134e1565b5b8151614f0f848260208601614e81565b91505092915050565b60006101808284031215614f2f57614f2e613e45565b5b614f3a610180613557565b90506000614f4a84828501613c10565b6000830152506020614f5e84828501613c10565b6020830152506040614f7284828501613c10565b6040830152506060614f8684828501613c10565b6060830152506080614f9a84828501613e89565b60808301525060a082015167ffffffffffffffff811115614fbe57614fbd613e4a565b5b614fca84828501614eea565b60a08301525060c082015167ffffffffffffffff811115614fee57614fed613e4a565b5b614ffa84828501614cb2565b60c08301525060e061500e84828501614a7a565b60e08301525061010082015167ffffffffffffffff81111561503357615032613e4a565b5b61503f84828501614cb2565b6101008301525061012061505584828501614a7a565b6101208301525061014082015167ffffffffffffffff81111561507b5761507a613e4a565b5b61508784828501614cb2565b6101408301525061016061509d84828501614a7a565b6101608301525092915050565b6000602082840312156150c0576150bf61325d565b5b600082015167ffffffffffffffff8111156150de576150dd613262565b5b6150ea84828501614f18565b91505092915050565b60006060820190506151086000830186613229565b61511560208301856137c5565b818103604083015261512781846148e2565b9050949350505050565b6000604082019050818103600083015261514b81856148e2565b9050818103602083015261515f81846148e2565b90509392505050565b600060408201905061517d60008301856133c3565b61518a60208301846133c3565b9392505050565b7f4d697373696e6720416c6c6f77616e6365000000000000000000000000000000600082015250565b60006151c7601183613af0565b91506151d282615191565b602082019050919050565b600060208201905081810360008301526151f6816151ba565b9050919050565b60006152088261321f565b91506000820361521b5761521a613cbe565b5b600182039050919050565b7f496e73756666696369656e742066756e64730000000000000000000000000000600082015250565b600061525c601283613af0565b915061526782615226565b602082019050919050565b6000602082019050818103600083015261528b8161524f565b9050919050565b600061529d826134a7565b915061ffff82036152b1576152b0613cbe565b5b600182019050919050565b60006080820190506152d16000830187613229565b81810360208301526152e381866148e2565b90506152f260408301856133c3565b6152ff60608301846133c3565b95945050505050565b600060608201905061531d60008301866133c3565b61532a60208301856133c3565b6153376040830184613229565b949350505050565b600081519050919050565b600081905092915050565b60005b83811015615373578082015181840152602081019050615358565b60008484015250505050565b600061538a8261533f565b615394818561534a565b93506153a4818560208601615355565b80840191505092915050565b60006153bc828461537f565b91508190509291505056fea2646970667358221220614151f96c9522ff2357e2772a6397c5b532d949283a5063fc395023264f326c64736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5081,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "teamAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1035,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "chainId",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1037,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "roundCount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1040,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "rounds",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1043,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "lotteryStatus",
        "offset": 0,
        "slot": "5",
        "type": "t_enum(LotteryStatuses)1029"
      },
      {
        "astId": 1045,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "statusStartTime",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1047,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "statusEndTime",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1053,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "freeRounds",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1057,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "crossChainOperator",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1075,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "counterForBankWallets",
        "offset": 0,
        "slot": "10",
        "type": "t_uint16"
      },
      {
        "astId": 1078,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "bankWallets",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1145,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "paymentToken",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IERC20Metadata)251"
      },
      {
        "astId": 1148,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "randomizer",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(CyclixRandomizerInterface)901"
      },
      {
        "astId": 1151,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "reader",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(LotteryReaderInterface)3888"
      },
      {
        "astId": 1153,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "ticketPrice",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 1156,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "freeRoundsAreEnabled",
        "offset": 0,
        "slot": "16",
        "type": "t_bool"
      },
      {
        "astId": 1159,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "percentageOfReferralWinners",
        "offset": 1,
        "slot": "16",
        "type": "t_uint16"
      },
      {
        "astId": 1162,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "lotteryRoundCreator",
        "offset": 3,
        "slot": "16",
        "type": "t_contract(LotteryRoundCreatorInterface)4955"
      },
      {
        "astId": 1768,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "publicRoundRandomNumbersRequestId",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(CyclixRandomizerInterface)901": {
        "encoding": "inplace",
        "label": "contract CyclixRandomizerInterface",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Metadata)251": {
        "encoding": "inplace",
        "label": "contract IERC20Metadata",
        "numberOfBytes": "20"
      },
      "t_contract(LotteryReaderInterface)3888": {
        "encoding": "inplace",
        "label": "contract LotteryReaderInterface",
        "numberOfBytes": "20"
      },
      "t_contract(LotteryRoundCreatorInterface)4955": {
        "encoding": "inplace",
        "label": "contract LotteryRoundCreatorInterface",
        "numberOfBytes": "20"
      },
      "t_enum(LotteryStatuses)1029": {
        "encoding": "inplace",
        "label": "enum LotteryStatuses",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}