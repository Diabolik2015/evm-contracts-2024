{
  "address": "0xC631A6e6074bb70f3159940679b1261e76A3CAc2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cyclixRandomizer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lotteryReader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_paymentToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_ticketPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "addBankWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "participant",
          "type": "address[]"
        }
      ],
      "name": "addFreeRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bankWallets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint16[]",
          "name": "chosenNumbers",
          "type": "uint16[]"
        },
        {
          "internalType": "uint16",
          "name": "powerNumber",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "referral",
          "type": "address"
        }
      ],
      "name": "buyTicket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "referralTicketId",
          "type": "uint256"
        }
      ],
      "name": "claimReferralVictory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketId",
          "type": "uint256"
        }
      ],
      "name": "claimVictory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counterForBankWallets",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "fetchRoundNumbers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "freeRounds",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentRound",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "markWinners",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentToken",
      "outputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "publicRoundRandomNumbersRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randomizer",
      "outputs": [
        {
          "internalType": "contract CyclixRandomizerInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reader",
      "outputs": [
        {
          "internalType": "contract LotteryReaderInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "removeBankWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roundCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "roundForId",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rounds",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendCryptoToTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "sendTokenToTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_paymentToken",
          "type": "address"
        }
      ],
      "name": "setPaymentToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ticketPrice",
          "type": "uint256"
        }
      ],
      "name": "setTicketPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "setTreasuryWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newLotteryRoundAddress",
          "type": "address"
        }
      ],
      "name": "startNewRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ticketPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryWallets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_teamAddress",
          "type": "address"
        }
      ],
      "name": "updateTeamAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x20623517193de229c16e0f41b7f152ffe9080a08d2df2cdfcf75a5922f4bebd6",
  "receipt": {
    "to": null,
    "from": "0x4eCa23Ffd5710970E22558C484a0D6943dA5eAa5",
    "contractAddress": "0xC631A6e6074bb70f3159940679b1261e76A3CAc2",
    "transactionIndex": 7,
    "gasUsed": "4846024",
    "logsBloom": "0x000000000000004000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000010000000000000000000000000000000000000a0000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020400000000000000000000000000000000000000000000008000000000000000000",
    "blockHash": "0x5f46cd92e98ccd765db40a62d3a6e2b38a56f1b3a2133b65925134fbb35b4e79",
    "transactionHash": "0x20623517193de229c16e0f41b7f152ffe9080a08d2df2cdfcf75a5922f4bebd6",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 32402976,
        "transactionHash": "0x20623517193de229c16e0f41b7f152ffe9080a08d2df2cdfcf75a5922f4bebd6",
        "address": "0xC631A6e6074bb70f3159940679b1261e76A3CAc2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004eca23ffd5710970e22558c484a0d6943da5eaa5"
        ],
        "data": "0x",
        "logIndex": 22,
        "blockHash": "0x5f46cd92e98ccd765db40a62d3a6e2b38a56f1b3a2133b65925134fbb35b4e79"
      }
    ],
    "blockNumber": 32402976,
    "cumulativeGasUsed": "5859749",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x603A50cF183cb4c103A95baDfaF011b749e04966",
    "0xA02A3f7e59152162D5699eD32DCE66D34Ade3B84",
    "0xd6f605b40ba9D2ffB07f192d7eDf4eeB0B21c142",
    10
  ],
  "numDeployments": 2,
  "solcInputHash": "04867362111321919c19caff6a348279",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cyclixRandomizer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lotteryReader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ticketPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"addBankWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"participant\",\"type\":\"address[]\"}],\"name\":\"addFreeRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bankWallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint16[]\",\"name\":\"chosenNumbers\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16\",\"name\":\"powerNumber\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"buyTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"referralTicketId\",\"type\":\"uint256\"}],\"name\":\"claimReferralVictory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"}],\"name\":\"claimVictory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counterForBankWallets\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"fetchRoundNumbers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"freeRounds\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRound\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"markWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentToken\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"publicRoundRandomNumbersRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomizer\",\"outputs\":[{\"internalType\":\"contract CyclixRandomizerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reader\",\"outputs\":[{\"internalType\":\"contract LotteryReaderInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"removeBankWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"roundForId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendCryptoToTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sendTokenToTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"}],\"name\":\"setPaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ticketPrice\",\"type\":\"uint256\"}],\"name\":\"setTicketPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newLotteryRoundAddress\",\"type\":\"address\"}],\"name\":\"startNewRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teamAddress\",\"type\":\"address\"}],\"name\":\"updateTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LotteryMaster.sol\":\"LotteryMaster\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/CyclixRandomizerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface CyclixRandomizerInterface {\\n    function requestRandomWords(uint32 numWords) external returns (uint256 requestId);\\n    function getRequestStatus(uint256 _requestId) external view returns (bool fulfilled, uint256[] memory randomWords);\\n    function registerGameContract(address gameAddress, string calldata name) external;\\n    function getLastRequestIdForCaller() external view returns (uint256);\\n}\",\"keccak256\":\"0x066c0e37e0bd528ce42d23ee3b5815f550f44571c61f1be89a4b844f1d52f71f\",\"license\":\"MIT\"},\"contracts/LotteryCommon.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\n    enum RoundVictoryTier {\\n        NO_WIN,\\n        Tier5_1,\\n        Tier5,\\n        Tier4_1,\\n        Tier4,\\n        Tier3_1,\\n        Tier3,\\n        Referrer,\\n        PublicPool,\\n        TokenHolders,\\n        Treasury\\n    }\\n\\n    struct Round {\\n        uint256 id;\\n        uint256 startTime;\\n        uint256 endTime;\\n        bool ended;\\n        uint16[] roundNumbers;\\n        uint16 powerNumber;\\n        uint16[] referralWinnersNumber;\\n        uint16 referralWinnersNumberCount;\\n        uint256[] ticketIds;\\n        uint16 ticketsCount;\\n        uint256[] referralTicketIds;\\n        uint16 referralCounts;\\n    }\\n\\n    struct Ticket {\\n        uint256 id;\\n        address participantAddress;\\n        address referralAddress;\\n        bool claimed;\\n        uint256 chainId;\\n        RoundVictoryTier victoryTier;\\n        uint16 powerNumber;\\n    }\\n\\n    struct TicketResults {\\n        uint256 ticketId;\\n        RoundVictoryTier victoryTier;\\n    }\\n\\n    struct ReferralTicket {\\n        uint256 id;\\n        address referralAddress;\\n        uint16 referralTicketNumber;\\n        bool winner;\\n        bool claimed;\\n    }\\n\\n    struct ReferralTicketResults {\\n        uint256 referralTicketId;\\n        bool won;\\n    }\",\"keccak256\":\"0x4a30f56a4b0850bdc3cd7ea3d9d9254038a29ea61c3abc6bf7ab0e2024e44796\",\"license\":\"UNLICENSED\"},\"contracts/LotteryMaster.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {TestFunctions} from \\\"./utils/TestUtils.sol\\\";\\nimport {CyclixRandomizerInterface} from \\\"./CyclixRandomizerInterface.sol\\\";\\nimport {EmergencyFunctions} from \\\"./utils/EmergencyFunctions.sol\\\";\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\nimport { LotteryRound } from \\\"./LotteryRound.sol\\\";\\nimport { LotteryReaderInterface } from \\\"./LotteryReaderInterface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract LotteryMaster is EmergencyFunctions {\\n\\n    uint256 public roundCount;\\n    address[] public rounds;\\n    function roundForId(uint256 roundId) public view returns (address) {\\n        return rounds[roundId - 1];\\n    }\\n\\n    function getCurrentRound() public view returns (address) {\\n        return rounds[roundCount - 1];\\n    }\\n    mapping(address => uint16) public freeRounds;\\n\\n    uint16 public counterForBankWallets;\\n    address[] public bankWallets;\\n    function addBankWallet(address wallet) public onlyOwner {\\n        for (uint i = 0; i < bankWallets.length; i++) {\\n            if (bankWallets[i] == wallet) {\\n                require(false, \\\"Wallet already added\\\");\\n            }\\n        }\\n        bankWallets.push(wallet);\\n    }\\n    function removeBankWallet(address wallet) public onlyOwner {\\n        for (uint i = 0; i < bankWallets.length; i++) {\\n            if (bankWallets[i] == wallet) {\\n                bankWallets[i] = bankWallets[bankWallets.length - 1];\\n                bankWallets.pop();\\n            }\\n        }\\n    }\\n    address public treasuryWallets;\\n    function setTreasuryWallet(address wallet) public onlyOwner {\\n        treasuryWallets = wallet;\\n    }\\n    IERC20Metadata public paymentToken;\\n    function setPaymentToken(address _paymentToken) public onlyOwner {\\n        paymentToken = IERC20Metadata(_paymentToken);\\n    }\\n    CyclixRandomizerInterface public randomizer;\\n    LotteryReaderInterface public reader;\\n    uint256 public ticketPrice;\\n    function setTicketPrice(uint256 _ticketPrice) public onlyOwner {\\n        ticketPrice = _ticketPrice;\\n    }\\n\\n    constructor(address cyclixRandomizer, address lotteryReader, address _paymentToken, uint256 _ticketPrice)\\n    EmergencyFunctions(msg.sender) {\\n        randomizer = CyclixRandomizerInterface(cyclixRandomizer);\\n        randomizer.registerGameContract(address(this), \\\"LotteryMasterV0.1\\\");\\n        reader = LotteryReaderInterface(lotteryReader);\\n        paymentToken = IERC20Metadata(_paymentToken);\\n        ticketPrice = _ticketPrice * (10 ** uint256(paymentToken.decimals()));\\n        treasuryWallets = msg.sender;\\n        bankWallets.push(msg.sender);\\n    }\\n\\n    function startNewRound(address newLotteryRoundAddress) public onlyOwner {\\n        roundCount++;\\n        rounds.push(address(newLotteryRoundAddress));\\n        if (roundCount > 1) {\\n            require(LotteryRound(rounds[roundCount - 2]).getRound().ended, \\\"Previous round not ended\\\");\\n            require(rounds[roundCount - 2] == LotteryRound(newLotteryRoundAddress).previousRound(), \\\"Previous round not propagated correctly\\\");\\n        }\\n    }\\n\\n    function buyTicket(uint256 chainId, uint16[] memory chosenNumbers, uint16 powerNumber, address referral) public {\\n        require(freeRounds[tx.origin] > 0 || paymentToken.allowance(tx.origin, address(this)) >= ticketPrice, \\\"Missing Allowance\\\");\\n        LotteryRound lotteryRound = LotteryRound(rounds[roundCount - 1]);\\n        if (freeRounds[msg.sender] > 0) {\\n            freeRounds[msg.sender]--;\\n        } else {\\n            require(paymentToken.balanceOf(tx.origin) >= ticketPrice, \\\"Insufficient funds\\\");\\n            counterForBankWallets = uint16(counterForBankWallets++ % bankWallets.length);\\n            uint256 treasuryAmount = lotteryRound.treasuryAmountOnTicket(ticketPrice);\\n            SafeERC20.safeTransferFrom(paymentToken, msg.sender, bankWallets[counterForBankWallets], ticketPrice - treasuryAmount);\\n            SafeERC20.safeTransferFrom(paymentToken, msg.sender, treasuryWallets, treasuryAmount);\\n            lotteryRound.updateVictoryPoolForTicket(ticketPrice);\\n        }\\n\\n        lotteryRound.buyTicket(chainId, chosenNumbers, powerNumber, referral);\\n    }\\n\\n    function addFreeRound(address[] calldata participant) public onlyOwner {\\n        for (uint i = 0; i < participant.length; i++) {\\n            freeRounds[participant[i]]++;\\n        }\\n    }\\n\\n    mapping(uint256 => uint256) public publicRoundRandomNumbersRequestId;\\n\\n    function closeRound() external onlyOwner {\\n        LotteryRound lotteryRound = LotteryRound(rounds[roundCount - 1]);\\n        lotteryRound.closeRound();\\n        uint16 referralWinners = reader.numberOfReferralWinnersForRoundId(roundCount);\\n        publicRoundRandomNumbersRequestId[roundCount] = randomizer.requestRandomWords(6 + referralWinners);\\n    }\\n\\n    function fetchRoundNumbers(uint256 roundId) external onlyOwner {\\n        LotteryRound round = LotteryRound(rounds[roundId - 1]);\\n        round.couldReceiveWinningNumbers();\\n        (bool fulfilled, uint256[] memory randomWords) = randomizer.getRequestStatus(publicRoundRandomNumbersRequestId[roundId]);\\n        require(fulfilled, \\\"Random numbers not ready\\\");\\n        uint16[] memory roundNumbers = new uint16[](5);\\n        uint16 powerNumber;\\n        uint16[] memory referralWinnersNumber = new uint16[](randomWords.length - 6);\\n        if (fulfilled) {\\n            for (uint i = 0; i < 5; i++) {\\n                roundNumbers[i] = reader.getRandomUniqueNumberInArrayForMaxValue(randomWords[i], 69, roundNumbers);\\n            }\\n            powerNumber = uint16(randomWords[5] % 26 + 1);\\n            for (uint i = 6; i < randomWords.length; i++) {\\n                referralWinnersNumber [i - 6] = reader.getRandomUniqueNumberInArrayForMaxValue(randomWords[i],\\n                    round.getRound().referralCounts, referralWinnersNumber);\\n            }\\n        }\\n        round.storeWinningNumbers(roundNumbers, powerNumber, referralWinnersNumber);\\n    }\\n\\n    function markWinners(uint256 roundId) public onlyOwner {\\n        LotteryRound(rounds[roundId - 1]).markWinners(reader.evaluateWonResultsForTickets(roundId), reader.evaluateWonResultsForReferral(roundId));\\n    }\\n\\n    function claimVictory(uint256 ticketId) public {\\n        LotteryRound lotteryRound = LotteryRound(getCurrentRound());\\n        Ticket memory ticket = lotteryRound.ticketById(ticketId);\\n        require(ticket.id == ticketId, \\\"Invalid ticket id\\\");\\n        require(ticket.participantAddress == msg.sender, \\\"Invalid ticket owner\\\");\\n        require(!ticket.claimed, \\\"Ticket already claimed\\\");\\n        require(lotteryRound.getRound().ended, \\\"Round not ended\\\");\\n        require(ticket.victoryTier != RoundVictoryTier.NO_WIN, \\\"No prize for this ticket\\\");\\n        require(ticket.victoryTier == reader.evaluateWonResultsForOneTicket(lotteryRound.getRound().id, ticketId).victoryTier, \\\"Invalid ticket tier\\\");\\n        unchecked {\\n            uint256 amountWon = lotteryRound.victoryTierAmounts(ticket.victoryTier) / lotteryRound.winnersForEachTier(ticket.victoryTier);\\n            require(paymentToken.balanceOf(address(this)) >= amountWon, \\\"Not enough funds on contract\\\");\\n            LotteryRound(getCurrentRound()).markVictoryClaimed(ticketId, amountWon);\\n            paymentToken.transfer(msg.sender, amountWon);\\n        }\\n    }\\n\\n    function claimReferralVictory(uint256 referralTicketId) public {\\n        LotteryRound lotteryRound = LotteryRound(getCurrentRound());\\n        ReferralTicket memory referralTicket = lotteryRound.referralTicketById(referralTicketId);\\n        require(referralTicket.id == referralTicketId, \\\"Invalid ticket id\\\");\\n        require(referralTicket.referralAddress == msg.sender, \\\"Invalid ticket owner\\\");\\n        require(!referralTicket.claimed, \\\"Ticket already claimed\\\");\\n        require(lotteryRound.getRound().ended, \\\"Round not ended\\\");\\n        require(referralTicket.winner == true, \\\"No prize for this ticket\\\");\\n        require(referralTicket.winner == reader.evaluateWonResultsForOneReferralTicket(lotteryRound.getRound().id, referralTicketId).won, \\\"Invalid ticket tier\\\");\\n        unchecked {\\n            uint256 amountWon = lotteryRound.victoryTierAmounts(RoundVictoryTier.Referrer) / reader.numberOfReferralWinnersForRoundId(lotteryRound.getRound().id);\\n            require(paymentToken.balanceOf(address(this)) >= amountWon, \\\"Not enough funds on contract\\\");\\n            LotteryRound(getCurrentRound()).markReferralVictoryClaimed(referralTicketId, amountWon);\\n            paymentToken.transfer(msg.sender, amountWon);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x15c27e2427fec85f95d9f5681badd3dbcb7244ca5714953c158ac9ab5608064b\",\"license\":\"UNLICENSED\"},\"contracts/LotteryReaderInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {TestFunctions} from \\\"./utils/TestUtils.sol\\\";\\nimport {CyclixRandomizerInterface} from \\\"./CyclixRandomizerInterface.sol\\\";\\nimport {EmergencyFunctions} from \\\"./utils/EmergencyFunctions.sol\\\";\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\n\\ninterface LotteryReaderInterface {\\n    function poolForVictoryTier(uint256 roundId, RoundVictoryTier victoryTier) external view returns(uint256) ;\\n    function poolForReferral(uint256 roundId) external view returns(uint256) ;\\n    function tokenHoldersPoolAmount(uint256 roundId) external view returns (uint256) ;\\n    function treasuryPoolAmount(uint256 roundId) external view returns (uint256) ;\\n    function numberOfReferralWinnersForRoundId(uint256 roundId) external view returns (uint16) ;\\n    function existInArrayNumber(uint16 num, uint16[] memory arr) external pure returns (bool) ;\\n    function notExistInArrayNumber(uint16 num, uint16[] memory arr) external pure returns (bool) ;\\n    function getRandomUniqueNumberInArrayForMaxValue(uint256 randomNumber, uint16 maxValue, uint16[] memory arr) external pure returns (uint16) ;\\n    function tierFromResults(uint16 rightNumbersForTicket, bool powerNumberFound) external pure returns (RoundVictoryTier) ;\\n    function evaluateWonResultsForOneTicket(uint256 roundId, uint256 ticketId) external view returns (TicketResults memory);\\n    function evaluateWonResultsForTickets(uint256 roundId) external view returns (TicketResults[] memory);\\n    function evaluateWonResultsForOneReferralTicket(uint256 roundId, uint256 referralTicketId) external view returns (ReferralTicketResults memory);\\n    function evaluateWonResultsForReferral(uint256 roundId) external view returns (ReferralTicketResults[] memory);\\n    function amountWonInRound(uint256 roundId) external view returns (uint256) ;\\n}\",\"keccak256\":\"0x3a2614be9037e4f45b023a1701fe19d1c1f9ecaf3c9103e35764d7c1ada244a4\",\"license\":\"UNLICENSED\"},\"contracts/LotteryRound.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {TestFunctions} from \\\"./utils/TestUtils.sol\\\";\\nimport {CyclixRandomizerInterface} from \\\"./CyclixRandomizerInterface.sol\\\";\\nimport {EmergencyFunctions} from \\\"./utils/EmergencyFunctions.sol\\\";\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\n\\ncontract LotteryRound is EmergencyFunctions {\\n    Round public round;\\n    function getRound() public view returns (Round memory) {\\n        return round;\\n    }\\n\\n    Ticket[] public tickets;\\n    function ticketById(uint256 ticketId) public view returns (Ticket memory) {\\n        return tickets[ticketId];\\n    }\\n    mapping(uint256 => uint16[]) public ticketNumbers;\\n    function numbersForTicketId(uint256 ticketId) public view returns (uint16[] memory) {\\n        return ticketNumbers[ticketId];\\n    }\\n    mapping(address => uint256[]) public roundTicketsByAddress;\\n    mapping(address => uint256) public roundTicketsByAddressCount;\\n\\n    ReferralTicket[] public referralTickets;\\n    function referralTicketById(uint256 index) public view returns (ReferralTicket memory) {\\n        return referralTickets[index];\\n    }\\n    mapping(address => uint256[]) public roundReferralTicketsByAddress;\\n    mapping(address => uint256) public roundReferralTicketsByAddressCount;\\n\\n    mapping(RoundVictoryTier => uint256) public victoryTierAmounts;\\n    mapping(RoundVictoryTier => uint256) public victoryTierAmountsClaimed;\\n    mapping(RoundVictoryTier => uint256) public winnersForEachTier;\\n    address public previousRound;\\n\\n    constructor(address previousRoundAddress, uint256 roundDurationInSeconds) EmergencyFunctions(msg.sender) {\\n        uint256 id = 1;\\n        previousRound = previousRoundAddress;\\n        if (previousRoundAddress != address(0)) {\\n            LotteryRound previousLotteryRound = LotteryRound(previousRoundAddress);\\n            id = previousLotteryRound.getRound().id + 1;\\n            propagateWinningFromPreviousRound();\\n        }\\n        round = Round({\\n            id: id,\\n            startTime: block.timestamp,\\n            endTime: block.timestamp + roundDurationInSeconds,\\n            ended : false,\\n            roundNumbers: new uint16[](0),\\n            powerNumber: 0,\\n            referralWinnersNumber: new uint16[](0),\\n            referralWinnersNumberCount : 0,\\n            ticketIds : new uint256[](0),\\n            ticketsCount : 0,\\n            referralTicketIds : new uint256[](0),\\n            referralCounts : 0\\n        });\\n    }\\n\\n    function propagateWinningFromPreviousRound() internal {\\n        LotteryRound previousLotteryRound = LotteryRound(previousRound);\\n        victoryTierAmounts[RoundVictoryTier.Tier5_1] += previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Tier5_1) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Tier5_1);\\n        victoryTierAmounts[RoundVictoryTier.Tier5] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Tier5) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Tier5);\\n        victoryTierAmounts[RoundVictoryTier.Tier4_1] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Tier4_1) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Tier4_1);\\n        victoryTierAmounts[RoundVictoryTier.Tier4] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Tier4) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Tier4);\\n        victoryTierAmounts[RoundVictoryTier.Tier3_1] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Tier3_1) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Tier3_1);\\n        victoryTierAmounts[RoundVictoryTier.Tier3] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Tier3) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Tier3);\\n        victoryTierAmounts[RoundVictoryTier.PublicPool] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.PublicPool) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.PublicPool);\\n        victoryTierAmounts[RoundVictoryTier.Referrer] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Referrer) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Referrer);\\n        victoryTierAmounts[RoundVictoryTier.TokenHolders] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.TokenHolders) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.TokenHolders);\\n        victoryTierAmounts[RoundVictoryTier.Treasury] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Treasury) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Treasury);\\n    }\\n\\n    function numberIsInRangeForRound(uint256 number) public pure returns (bool) {\\n        return number > 0 && number <= 69;\\n    }\\n\\n    function numberIsInRangeForPowerNumber(uint256 number) public pure returns (bool) {\\n        return number > 0 && number <= 26;\\n    }\\n\\n    function validateBuyTicket(uint16[] memory numbers, uint16 powerNumber, address referral ) public view onlyOwner {\\n        require(tx.origin != address(0), \\\"Invalid sender\\\");\\n        require(block.timestamp < round.endTime, \\\"Round is over\\\");\\n        require(numbers.length == 5, \\\"Invalid numbers count\\\");\\n        for (uint i = 0; i < numbers.length; i++) {\\n            require(numberIsInRangeForRound(numbers[i]), \\\"Invalid numbers\\\");\\n        }\\n        require(numberIsInRangeForPowerNumber(powerNumber), \\\"Invalid power number\\\");\\n        require(referral != tx.origin, \\\"Referral cannot be the same as the participant\\\");\\n    }\\n\\n    function percentageInBasisPoint(uint256 amount, uint256 basisPoint) public pure returns (uint256) {\\n        return amount * basisPoint / 10000;\\n    }\\n\\n    function treasuryAmountOnTicket(uint256 paymentTokenAmount) public pure returns (uint256) {\\n        return percentageInBasisPoint(paymentTokenAmount, 5000);\\n    }\\n\\n    function updateVictoryPoolForTicket(uint256 paymentTokenAmount) public onlyOwner {\\n        uint256 forPublicPool = percentageInBasisPoint(paymentTokenAmount, 7000);\\n        victoryTierAmounts[RoundVictoryTier.Tier5_1] += percentageInBasisPoint(forPublicPool, 3500);\\n        victoryTierAmounts[RoundVictoryTier.Tier5] += percentageInBasisPoint(forPublicPool, 1500);\\n        victoryTierAmounts[RoundVictoryTier.Tier4_1] += percentageInBasisPoint(forPublicPool, 1000);\\n        victoryTierAmounts[RoundVictoryTier.Tier4] += percentageInBasisPoint(forPublicPool, 700);\\n        victoryTierAmounts[RoundVictoryTier.Tier3_1] += percentageInBasisPoint(forPublicPool, 500);\\n        victoryTierAmounts[RoundVictoryTier.Tier3] += percentageInBasisPoint(forPublicPool, 300);\\n        victoryTierAmounts[RoundVictoryTier.PublicPool] += forPublicPool;\\n        victoryTierAmounts[RoundVictoryTier.Referrer] += percentageInBasisPoint(paymentTokenAmount, 1500);\\n        victoryTierAmounts[RoundVictoryTier.TokenHolders] += percentageInBasisPoint(paymentTokenAmount, 1000);\\n        victoryTierAmounts[RoundVictoryTier.Treasury] += treasuryAmountOnTicket(paymentTokenAmount);\\n    }\\n\\n    function buyTicket(uint256 chainId, uint16[] memory chosenNumbers, uint16 powerNumber, address referral) public onlyOwner {\\n        validateBuyTicket(chosenNumbers, powerNumber, referral);\\n\\n        uint256 ticketId = tickets.length;\\n        tickets.push(Ticket({\\n            id: ticketId,\\n            participantAddress: tx.origin,\\n            referralAddress: referral,\\n            claimed: false,\\n            chainId: chainId,\\n            victoryTier: RoundVictoryTier.NO_WIN,\\n            powerNumber: powerNumber\\n        }));\\n        for(uint i = 0; i < chosenNumbers.length; i++) {\\n            ticketNumbers[ticketId].push(chosenNumbers[i]);\\n        }\\n        round.ticketIds.push(ticketId);\\n        round.ticketsCount++;\\n\\n        roundTicketsByAddress[msg.sender].push(tickets.length - 1);\\n        roundTicketsByAddressCount[msg.sender]++;\\n        if (referral != address(0)) {\\n            uint256 referralTicketId = referralTickets.length;\\n            round.referralTicketIds.push(referralTicketId);\\n            round.referralCounts++;\\n            referralTickets.push(ReferralTicket({\\n                id: referralTicketId,\\n                referralAddress: referral,\\n                referralTicketNumber: uint16(round.referralCounts),\\n                winner: false,\\n                claimed: false\\n            }));\\n\\n            roundReferralTicketsByAddress[referral].push(referralTickets.length - 1);\\n            roundReferralTicketsByAddressCount[referral]++;\\n        }\\n    }\\n\\n    function closeRound() public onlyOwner {\\n        require(block.timestamp >= round.endTime, \\\"Round is not over yet\\\");\\n        round.ended = true;\\n    }\\n\\n    function couldReceiveWinningNumbers() public view {\\n        require(block.timestamp >= round.endTime, \\\"Round is not over yet\\\");\\n        require(round.roundNumbers.length == 0, \\\"Winning numbers already set\\\");\\n    }\\n\\n    function storeWinningNumbers(uint16[] memory roundNumbers, uint16 powerNumber, uint16[] memory referralWinnersNumber) public onlyOwner {\\n        round.roundNumbers = roundNumbers;\\n        round.powerNumber = powerNumber;\\n        round.referralWinnersNumber = referralWinnersNumber;\\n        round.referralWinnersNumberCount = uint16(referralWinnersNumber.length);\\n    }\\n\\n    function markWinners(TicketResults[] memory ticketResults, ReferralTicketResults[] memory referralTicketResults) public onlyOwner {\\n        for (uint i = 0; i < ticketResults.length; i++) {\\n            TicketResults memory ticketResult = ticketResults[i];\\n            Ticket storage ticket = tickets[ticketResult.ticketId];\\n            ticket.victoryTier = ticketResult.victoryTier;\\n            winnersForEachTier[ticketResult.victoryTier]++;\\n        }\\n        for (uint i = 0; i < referralTicketResults.length; i++) {\\n            ReferralTicketResults memory referralTicketResult = referralTicketResults[i];\\n            ReferralTicket storage referralTicket = referralTickets[referralTicketResult.referralTicketId];\\n            referralTicket.winner = referralTicketResult.won;\\n            if (referralTicketResult.won) {\\n                winnersForEachTier[RoundVictoryTier.Referrer]++;\\n            }\\n        }\\n    }\\n\\n    function markVictoryClaimed(uint256 ticketId, uint256 amountClaimed) public onlyOwner {\\n        Ticket storage ticket = tickets[ticketId];\\n        ticket.claimed = true;\\n        victoryTierAmountsClaimed[ticket.victoryTier] += amountClaimed;\\n    }\\n\\n    function markReferralVictoryClaimed(uint256 referralTicketId, uint256 amountClaimed) public onlyOwner {\\n        ReferralTicket storage referralTicket = referralTickets[referralTicketId];\\n        referralTicket.claimed = true;\\n        victoryTierAmountsClaimed[RoundVictoryTier.Referrer] += amountClaimed;\\n    }\\n}\",\"keccak256\":\"0x812e09eea94e62dbce63b86be6c05943b8a60f36b46010efe4a8a70cf4bbf527\",\"license\":\"UNLICENSED\"},\"contracts/utils/EmergencyFunctions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract EmergencyFunctions is Ownable {\\n    address internal teamAddress;\\n    constructor(address _teamAddress) Ownable(_teamAddress) {\\n        teamAddress = _teamAddress;\\n    }\\n\\n    function updateTeamAddress(address _teamAddress) public onlyOwner {\\n        teamAddress = _teamAddress;\\n    }\\n\\n    // Emergency Functions\\n    function sendTokenToTeam(address _token) public onlyOwner {\\n        uint256 amount = IERC20(_token).balanceOf(address(this));\\n        if (amount > 0) {\\n            SafeERC20.safeTransfer(IERC20(_token), teamAddress, amount);\\n        }\\n    }\\n\\n    function sendCryptoToTeam() public onlyOwner {\\n        if (address(this).balance > 0) {\\n            payable(teamAddress).transfer(address(this).balance);\\n        }\\n    }\\n\\n    /** @notice Check if an address is a contract */\\n    function _isContract(address _addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x68dcc6a4104e2905f65c342fdb2dbde1908113d10c006f5857b52dc0bbefd419\",\"license\":\"MIT\"},\"contracts/utils/TestUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.x <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IERC20Extension {\\n    function decimals() external view returns (uint8);\\n}\\n\\ncontract TestFunctions is Ownable {\\n    constructor() Ownable(msg.sender) {}\\n    //Used for mock testing, contract ownership will be renounced on release\\n    uint public currentTimestampOverride;\\n    function updateCurrentTimestampOverride(uint _v) external onlyOwner {\\n        currentTimestampOverride = _v;\\n    }\\n    function currentTimestamp() public view returns(uint) {\\n        if (currentTimestampOverride > 0) {\\n            return currentTimestampOverride;\\n        }\\n        return block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x8edb22ef91efc1d38ffbd50b48821f4fe23bdaf84a14de75d0df8231eb772bc4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3979,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "teamAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1001,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "roundCount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1004,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "rounds",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1034,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "freeRounds",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint16)"
      },
      {
        "astId": 1036,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "counterForBankWallets",
        "offset": 0,
        "slot": "5",
        "type": "t_uint16"
      },
      {
        "astId": 1039,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "bankWallets",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1124,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "treasuryWallets",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 1139,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "paymentToken",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IERC20Metadata)251"
      },
      {
        "astId": 1156,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "randomizer",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(CyclixRandomizerInterface)892"
      },
      {
        "astId": 1159,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "reader",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(LotteryReaderInterface)2938"
      },
      {
        "astId": 1161,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "ticketPrice",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1459,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "publicRoundRandomNumbersRequestId",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(CyclixRandomizerInterface)892": {
        "encoding": "inplace",
        "label": "contract CyclixRandomizerInterface",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Metadata)251": {
        "encoding": "inplace",
        "label": "contract IERC20Metadata",
        "numberOfBytes": "20"
      },
      "t_contract(LotteryReaderInterface)2938": {
        "encoding": "inplace",
        "label": "contract LotteryReaderInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint16)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}