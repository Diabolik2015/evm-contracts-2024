{
  "address": "0x57b266C71E49eFc68EC7C89Fc479631A30e68317",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cyclixRandomizer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lotteryReader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lotteryRoundCreator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_paymentToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_ticketPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "addBankWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "participant",
          "type": "address[]"
        }
      ],
      "name": "addFreeRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bankWallets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint16[]",
          "name": "chosenNumbers",
          "type": "uint16[]"
        },
        {
          "internalType": "address",
          "name": "referral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        }
      ],
      "name": "buyTicket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint16[]",
          "name": "moreTicketNumbers",
          "type": "uint16[]"
        },
        {
          "internalType": "address",
          "name": "referral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        }
      ],
      "name": "buyTickets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "referralTicketId",
          "type": "uint256"
        }
      ],
      "name": "claimReferralVictory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketId",
          "type": "uint256"
        }
      ],
      "name": "claimVictory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_statusEndTime",
          "type": "uint256"
        }
      ],
      "name": "closeRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counterForBankWallets",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "crossChainOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_statusEndTime",
          "type": "uint256"
        }
      ],
      "name": "fetchRoundNumbers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "freeRounds",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "freeRoundsAreEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lotteryRoundCreator",
      "outputs": [
        {
          "internalType": "contract LotteryRoundCreatorInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lotteryStatus",
      "outputs": [
        {
          "internalType": "enum LotteryStatuses",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimingTimeInSeconds",
          "type": "uint256"
        }
      ],
      "name": "markWinners",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentToken",
      "outputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "percentageOfReferralWinners",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "publicRoundRandomNumbersRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randomizer",
      "outputs": [
        {
          "internalType": "contract CyclixRandomizerInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reader",
      "outputs": [
        {
          "internalType": "contract LotteryReaderInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "removeBankWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roundCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rounds",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendCryptoToTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "sendTokenToTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setCrossChainOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "v",
          "type": "bool"
        }
      ],
      "name": "setFreeRoundsOnPurchase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_paymentToken",
          "type": "address"
        }
      ],
      "name": "setPaymentToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "percentage",
          "type": "uint16"
        }
      ],
      "name": "setPercentageOfReferralWinners",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "_poolPercentagesBasePoints",
          "type": "uint16[]"
        }
      ],
      "name": "setPoolPercentagesBasePoints",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ticketPrice",
          "type": "uint256"
        }
      ],
      "name": "setTicketPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "setTreasuryWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_statusEndTime",
          "type": "uint256"
        }
      ],
      "name": "startNewRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "statusEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "statusStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ticketPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryWallets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_teamAddress",
          "type": "address"
        }
      ],
      "name": "updateTeamAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdd4935ea40f10c9b092bd85ea20da3f07480eb11a95acbdcd63d2c5811f341de",
  "receipt": {
    "to": null,
    "from": "0x4eCa23Ffd5710970E22558C484a0D6943dA5eAa5",
    "contractAddress": "0x57b266C71E49eFc68EC7C89Fc479631A30e68317",
    "transactionIndex": 10,
    "gasUsed": "5682947",
    "logsBloom": "0x
    "blockHash": "0x33028897ed8cc31c938f69b718be14a758696dfac25182e837659d826331ffd3",
    "transactionHash": "0xdd4935ea40f10c9b092bd85ea20da3f07480eb11a95acbdcd63d2c5811f341de",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 32612893,
        "transactionHash": "0xdd4935ea40f10c9b092bd85ea20da3f07480eb11a95acbdcd63d2c5811f341de",
        "address": "0x57b266C71E49eFc68EC7C89Fc479631A30e68317",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004eca23ffd5710970e22558c484a0d6943da5eaa5"
        ],
        "data": "0x",
        "logIndex": 20,
        "blockHash": "0x33028897ed8cc31c938f69b718be14a758696dfac25182e837659d826331ffd3"
      }
    ],
    "blockNumber": 32612893,
    "cumulativeGasUsed": "6736715",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0518F1CAAfA9c4D49C800D2C0Ef2d6f04330e6B6",
    "0x8EAbD0550926B4c7a98dAA3433921D75c424FCEd",
    "0xE6FFb9dea2e30d4Ceeb37194338b4A3DA4a94aab",
    "0xeFFEEe7d5888A398A78c4670eDE3aC47A0fF80C6",
    10
  ],
  "numDeployments": 1,
  "solcInputHash": "55fa657024ed812cd08f1f920743ecfe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cyclixRandomizer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lotteryReader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lotteryRoundCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ticketPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"addBankWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"participant\",\"type\":\"address[]\"}],\"name\":\"addFreeRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bankWallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint16[]\",\"name\":\"chosenNumbers\",\"type\":\"uint16[]\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"buyTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint16[]\",\"name\":\"moreTicketNumbers\",\"type\":\"uint16[]\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"buyTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"referralTicketId\",\"type\":\"uint256\"}],\"name\":\"claimReferralVictory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"}],\"name\":\"claimVictory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_statusEndTime\",\"type\":\"uint256\"}],\"name\":\"closeRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counterForBankWallets\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"crossChainOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_statusEndTime\",\"type\":\"uint256\"}],\"name\":\"fetchRoundNumbers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"freeRounds\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeRoundsAreEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryRoundCreator\",\"outputs\":[{\"internalType\":\"contract LotteryRoundCreatorInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryStatus\",\"outputs\":[{\"internalType\":\"enum LotteryStatuses\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimingTimeInSeconds\",\"type\":\"uint256\"}],\"name\":\"markWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentToken\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentageOfReferralWinners\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"publicRoundRandomNumbersRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomizer\",\"outputs\":[{\"internalType\":\"contract CyclixRandomizerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reader\",\"outputs\":[{\"internalType\":\"contract LotteryReaderInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"removeBankWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendCryptoToTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sendTokenToTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setCrossChainOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"v\",\"type\":\"bool\"}],\"name\":\"setFreeRoundsOnPurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"}],\"name\":\"setPaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"percentage\",\"type\":\"uint16\"}],\"name\":\"setPercentageOfReferralWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"_poolPercentagesBasePoints\",\"type\":\"uint16[]\"}],\"name\":\"setPoolPercentagesBasePoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ticketPrice\",\"type\":\"uint256\"}],\"name\":\"setTicketPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_statusEndTime\",\"type\":\"uint256\"}],\"name\":\"startNewRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"statusEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"statusStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teamAddress\",\"type\":\"address\"}],\"name\":\"updateTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LotteryMaster.sol\":\"LotteryMaster\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/CyclixRandomizerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface CyclixRandomizerInterface {\\n    function requestRandomWords(uint32 numWords) external returns (uint256 requestId);\\n    function getRequestStatus(uint256 _requestId) external view returns (bool fulfilled, uint256[] memory randomWords);\\n    function registerGameContract(address gameAddress, string calldata name) external;\\n    function getLastRequestIdForCaller() external view returns (uint256);\\n}\",\"keccak256\":\"0x066c0e37e0bd528ce42d23ee3b5815f550f44571c61f1be89a4b844f1d52f71f\",\"license\":\"MIT\"},\"contracts/LotteryCommon.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\n    enum RoundVictoryTier {\\n        NO_WIN,\\n        Tier5_1,\\n        Tier5,\\n        Tier4_1,\\n        Tier4,\\n        Tier3_1,\\n        Tier3,\\n        Referrer,\\n        PublicPool,\\n        TokenHolders,\\n        Treasury\\n    }\\n\\n    struct Round {\\n        uint256 id;\\n        uint256 startTime;\\n        uint256 endTime;\\n        bool ended;\\n        uint16[] roundNumbers;\\n        uint16[] referralWinnersNumber;\\n        uint16 referralWinnersNumberCount;\\n        uint256[] ticketIds;\\n        uint16 ticketsCount;\\n        uint256[] referralTicketIds;\\n        uint16 referralCounts;\\n    }\\n\\n    struct Ticket {\\n        uint256 id;\\n        address participantAddress;\\n        address referralAddress;\\n        bool claimed;\\n        uint256 chainId;\\n        RoundVictoryTier victoryTier;\\n    }\\n\\n    struct TicketResults {\\n        uint256 ticketId;\\n        RoundVictoryTier victoryTier;\\n    }\\n\\n    struct ReferralTicket {\\n        uint256 id;\\n        address referralAddress;\\n        uint16 referralTicketNumber;\\n        bool winner;\\n        bool claimed;\\n    }\\n\\n    struct ReferralTicketResults {\\n        uint256 referralTicketId;\\n        bool won;\\n    }\",\"keccak256\":\"0x20e8b7859bdc7f7d3d7aff78c3a0d9953316d0a2a8850f886fe8e273820b32ec\",\"license\":\"UNLICENSED\"},\"contracts/LotteryMaster.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {CyclixRandomizerInterface} from \\\"./CyclixRandomizerInterface.sol\\\";\\nimport {EmergencyFunctions} from \\\"./utils/EmergencyFunctions.sol\\\";\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\nimport { LotteryRoundInterface } from \\\"./LotteryRoundInterface.sol\\\";\\nimport { LotteryReaderInterface } from \\\"./LotteryReaderInterface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./LotteryRoundCreatorInterface.sol\\\";\\nenum LotteryStatuses {\\n    DrawOpen,\\n    EvaluatingResults,\\n    ResultsEvaluated,\\n    ClaimInProgress\\n}\\n\\ncontract LotteryMaster is EmergencyFunctions {\\n\\n    uint256 public roundCount;\\n    address[] public rounds;\\n    LotteryStatuses public lotteryStatus;\\n    uint256 public statusStartTime;\\n    uint256 public statusEndTime;\\n\\n    mapping(address => uint16) public freeRounds;\\n    mapping(address => bool) public crossChainOperator;\\n    function setCrossChainOperator(address operator, bool value) public onlyOwner {\\n        crossChainOperator[operator] = value;\\n    }\\n\\n    uint16 public counterForBankWallets;\\n    address[] public bankWallets;\\n    function addBankWallet(address wallet) public onlyOwner {\\n        for (uint i = 0; i < bankWallets.length; i++) {\\n            if (bankWallets[i] == wallet) {\\n                require(false, \\\"Wallet already added\\\");\\n            }\\n        }\\n        bankWallets.push(wallet);\\n    }\\n    function removeBankWallet(address wallet) public onlyOwner {\\n        for (uint i = 0; i < bankWallets.length; i++) {\\n            if (bankWallets[i] == wallet) {\\n                bankWallets[i] = bankWallets[bankWallets.length - 1];\\n                bankWallets.pop();\\n            }\\n        }\\n    }\\n    address public treasuryWallets;\\n    function setTreasuryWallet(address wallet) public onlyOwner {\\n        treasuryWallets = wallet;\\n    }\\n    IERC20Metadata public paymentToken;\\n    function setPaymentToken(address _paymentToken) public onlyOwner {\\n        paymentToken = IERC20Metadata(_paymentToken);\\n    }\\n    CyclixRandomizerInterface public randomizer;\\n    LotteryReaderInterface public reader;\\n    uint256 public ticketPrice;\\n    function setTicketPrice(uint256 _ticketPrice) public onlyOwner {\\n        ticketPrice = _ticketPrice;\\n    }\\n\\n    bool public freeRoundsAreEnabled = false;\\n    function setFreeRoundsOnPurchase(bool v) public onlyOwner {\\n        freeRoundsAreEnabled = v;\\n    }\\n\\n    uint16 public percentageOfReferralWinners = 10;\\n    function setPercentageOfReferralWinners(uint16 percentage) public onlyOwner {\\n        percentageOfReferralWinners = percentage;\\n    }\\n\\n    function setPoolPercentagesBasePoints(uint16[] memory _poolPercentagesBasePoints) public onlyOwner {\\n        LotteryRoundInterface(rounds[roundCount - 1]).setPoolPercentagesBasePoints(_poolPercentagesBasePoints);\\n    }\\n\\n    LotteryRoundCreatorInterface public lotteryRoundCreator;\\n\\n    constructor(address cyclixRandomizer, address lotteryReader, address _lotteryRoundCreator, address _paymentToken, uint256 _ticketPrice)\\n    EmergencyFunctions(msg.sender) {\\n        randomizer = CyclixRandomizerInterface(cyclixRandomizer);\\n        randomizer.registerGameContract(address(this), \\\"LotteryMasterV0.1\\\");\\n        reader = LotteryReaderInterface(lotteryReader);\\n        lotteryRoundCreator = LotteryRoundCreatorInterface(_lotteryRoundCreator);\\n        paymentToken = IERC20Metadata(_paymentToken);\\n        ticketPrice = _ticketPrice * (10 ** uint256(paymentToken.decimals()));\\n        treasuryWallets = msg.sender;\\n        bankWallets.push(msg.sender);\\n    }\\n\\n    function startNewRound(uint256 _statusEndTime) public onlyOwner {\\n        roundCount++;\\n        if (roundCount > 1) {\\n            rounds.push(lotteryRoundCreator.startNewRound(_statusEndTime, rounds[roundCount - 2]));\\n            require(LotteryRoundInterface(rounds[roundCount - 2]).getRound().ended, \\\"Previous round not ended\\\");\\n            require(rounds[roundCount - 2] == LotteryRoundInterface(rounds[roundCount - 1]).previousRound(), \\\"Previous round not propagated correctly\\\");\\n        } else {\\n            rounds.push(lotteryRoundCreator.startNewRound(_statusEndTime, address(0)));\\n        }\\n        lotteryStatus = LotteryStatuses.DrawOpen;\\n        statusStartTime = block.timestamp;\\n        statusEndTime = block.timestamp + _statusEndTime;\\n    }\\n\\n    function buyTickets(uint256 chainId, uint16[] memory moreTicketNumbers, address referral, address buyer) public {\\n        for (uint i = 0; i < moreTicketNumbers.length; i += 6) {\\n            uint16[] memory chosenNumbers = new uint16[](6);\\n            for (uint j = 0; j < 6; j++) {\\n                chosenNumbers[j] = moreTicketNumbers[i + j];\\n            }\\n            buyTicket(chainId, chosenNumbers, referral, buyer);\\n        }\\n    }\\n\\n    function buyTicket(uint256 chainId, uint16[] memory chosenNumbers, address referral, address buyer) public {\\n        require(freeRounds[buyer] > 0\\n        || paymentToken.allowance(buyer, address(this)) >= ticketPrice\\n        || crossChainOperator[msg.sender], \\\"Missing Allowance\\\");\\n        LotteryRoundInterface lotteryRound = LotteryRoundInterface(rounds[roundCount - 1]);\\n        if (freeRounds[buyer] > 0) {\\n            freeRounds[buyer]--;\\n        } else {\\n            if (!crossChainOperator[msg.sender]) {\\n                require(paymentToken.balanceOf(tx.origin) >= ticketPrice, \\\"Insufficient funds\\\");\\n                counterForBankWallets = uint16(counterForBankWallets++ % bankWallets.length);\\n                uint256 treasuryAmount = lotteryRound.treasuryAmountOnTicket(ticketPrice);\\n                SafeERC20.safeTransferFrom(paymentToken, buyer, bankWallets[counterForBankWallets], ticketPrice - treasuryAmount);\\n                SafeERC20.safeTransferFrom(paymentToken, buyer, treasuryWallets, treasuryAmount);\\n            }\\n            lotteryRound.updateVictoryPoolForTicket(ticketPrice);\\n            addFreeRoundForBuyTicket(buyer, referral);\\n        }\\n\\n        lotteryRound.buyTicket(chainId, chosenNumbers, referral, buyer);\\n    }\\n\\n    function addFreeRoundForBuyTicket(address buyer, address referral) internal {\\n        if (referral != address(0) && freeRoundsAreEnabled) {\\n            freeRounds[buyer]++;\\n            freeRounds[referral]++;\\n        }\\n    }\\n\\n    function addFreeRound(address[] calldata participant) public onlyOwner {\\n        for (uint i = 0; i < participant.length; i++) {\\n            freeRounds[participant[i]]++;\\n        }\\n    }\\n\\n    mapping(uint256 => uint256) public publicRoundRandomNumbersRequestId;\\n\\n    function closeRound(uint256 _statusEndTime) external onlyOwner {\\n        LotteryRoundInterface lotteryRound = LotteryRoundInterface(rounds[roundCount - 1]);\\n        lotteryRound.closeRound();\\n        uint16 referralWinners = reader.numberOfReferralWinnersForRoundId(roundCount);\\n        publicRoundRandomNumbersRequestId[roundCount] = randomizer.requestRandomWords(6 + referralWinners);\\n        lotteryStatus = LotteryStatuses.EvaluatingResults;\\n        statusStartTime = block.timestamp;\\n        statusEndTime = block.timestamp + _statusEndTime;\\n    }\\n\\n    function fetchRoundNumbers(uint256 roundId, uint256 _statusEndTime) external onlyOwner {\\n        LotteryRoundInterface round = LotteryRoundInterface(rounds[roundId - 1]);\\n        round.couldReceiveWinningNumbers();\\n        (bool fulfilled, uint256[] memory randomWords) = randomizer.getRequestStatus(publicRoundRandomNumbersRequestId[roundId]);\\n        require(fulfilled, \\\"Random numbers not ready\\\");\\n        uint16[] memory roundNumbers = new uint16[](6);\\n        uint16[] memory referralWinnersNumber = new uint16[](randomWords.length - 6);\\n        if (fulfilled) {\\n            for (uint i = 0; i < 6; i++) {\\n                roundNumbers[i] = reader.getRandomUniqueNumberInArrayForMaxValue(randomWords[i], 69, roundNumbers);\\n            }\\n            roundNumbers[5] = uint16(randomWords[5] % 26 + 1);\\n            for (uint i = 6; i < randomWords.length; i++) {\\n                referralWinnersNumber [i - 6] = reader.getRandomUniqueNumberInArrayForMaxValue(randomWords[i],\\n                    round.getRound().referralCounts, referralWinnersNumber);\\n            }\\n        }\\n        round.storeWinningNumbers(roundNumbers, referralWinnersNumber);\\n        lotteryStatus = LotteryStatuses.ResultsEvaluated;\\n        statusStartTime = block.timestamp;\\n        statusEndTime = block.timestamp + _statusEndTime;\\n    }\\n\\n    function markWinners(uint256 roundId, uint256 claimingTimeInSeconds) public onlyOwner {\\n        LotteryRoundInterface(rounds[roundId - 1]).markWinners(reader.evaluateWonResultsForTickets(roundId), reader.evaluateWonResultsForReferral(roundId));\\n        lotteryStatus = LotteryStatuses.ClaimInProgress;\\n        statusStartTime = block.timestamp;\\n        statusEndTime = block.timestamp + claimingTimeInSeconds;\\n    }\\n\\n    function claimVictory(uint256 ticketId) public {\\n        LotteryRoundInterface lotteryRound = LotteryRoundInterface(rounds[roundCount - 1]);\\n        Ticket memory ticket = lotteryRound.ticketById(ticketId);\\n        require(ticket.id == ticketId, \\\"Invalid ticket id\\\");\\n        require(ticket.participantAddress == msg.sender, \\\"Invalid ticket owner\\\");\\n        require(!ticket.claimed, \\\"Ticket already claimed\\\");\\n        require(lotteryRound.getRound().ended, \\\"Round not ended\\\");\\n        require(lotteryStatus == LotteryStatuses.ClaimInProgress, \\\"Claim not started\\\");\\n        require(block.timestamp > statusStartTime, \\\"Claim not started: too early\\\");\\n        require(block.timestamp < statusEndTime, \\\"Claim not started: too late\\\");\\n        require(ticket.victoryTier != RoundVictoryTier.NO_WIN, \\\"No prize for this ticket\\\");\\n        require(ticket.victoryTier == reader.evaluateWonResultsForOneTicket(lotteryRound.getRound().id, ticketId).victoryTier, \\\"Invalid ticket tier\\\");\\n        unchecked {\\n            uint256 amountWon = lotteryRound.victoryTierAmounts(ticket.victoryTier) / lotteryRound.winnersForEachTier(ticket.victoryTier);\\n            require(paymentToken.balanceOf(address(this)) >= amountWon, \\\"Not enough funds on contract\\\");\\n            LotteryRoundInterface(rounds[roundCount - 1]).markVictoryClaimed(ticketId, amountWon);\\n            paymentToken.transfer(msg.sender, amountWon);\\n        }\\n    }\\n\\n    function claimReferralVictory(uint256 referralTicketId) public {\\n        LotteryRoundInterface lotteryRound = LotteryRoundInterface(rounds[roundCount - 1]);\\n        ReferralTicket memory referralTicket = lotteryRound.referralTicketById(referralTicketId);\\n        require(referralTicket.id == referralTicketId, \\\"Invalid ticket id\\\");\\n        require(referralTicket.referralAddress == msg.sender, \\\"Invalid ticket owner\\\");\\n        require(!referralTicket.claimed, \\\"Ticket already claimed\\\");\\n        require(lotteryRound.getRound().ended, \\\"Round not ended\\\");\\n        require(referralTicket.winner == true, \\\"No prize for this ticket\\\");\\n        require(referralTicket.winner == reader.evaluateWonResultsForOneReferralTicket(lotteryRound.getRound().id, referralTicketId).won, \\\"Invalid ticket tier\\\");\\n        unchecked {\\n            uint256 amountWon = lotteryRound.victoryTierAmounts(RoundVictoryTier.Referrer) / reader.numberOfReferralWinnersForRoundId(lotteryRound.getRound().id);\\n            require(paymentToken.balanceOf(address(this)) >= amountWon, \\\"Not enough funds on contract\\\");\\n            LotteryRoundInterface(rounds[roundCount - 1]).markReferralVictoryClaimed(referralTicketId, amountWon);\\n            paymentToken.transfer(msg.sender, amountWon);\\n        }\\n    }\\n}\",\"keccak256\":\"0xe260b300d649f3cb091201d2c134a11b5aba3a20dfa0e9e79b58a1997518c552\",\"license\":\"UNLICENSED\"},\"contracts/LotteryReaderInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {TestFunctions} from \\\"./utils/TestUtils.sol\\\";\\nimport {CyclixRandomizerInterface} from \\\"./CyclixRandomizerInterface.sol\\\";\\nimport {EmergencyFunctions} from \\\"./utils/EmergencyFunctions.sol\\\";\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\n\\ninterface LotteryReaderInterface {\\n    function poolForVictoryTier(uint256 roundId, RoundVictoryTier victoryTier) external view returns(uint256) ;\\n    function poolForReferral(uint256 roundId) external view returns(uint256) ;\\n    function tokenHoldersPoolAmount(uint256 roundId) external view returns (uint256) ;\\n    function treasuryPoolAmount(uint256 roundId) external view returns (uint256) ;\\n    function numberOfReferralWinnersForRoundId(uint256 roundId) external view returns (uint16) ;\\n    function existInArrayNumber(uint16 num, uint16[] memory arr) external pure returns (bool) ;\\n    function notExistInArrayNumber(uint16 num, uint16[] memory arr) external pure returns (bool) ;\\n    function getRandomUniqueNumberInArrayForMaxValue(uint256 randomNumber, uint16 maxValue, uint16[] memory arr) external pure returns (uint16) ;\\n    function tierFromResults(uint16 rightNumbersForTicket, bool powerNumberFound) external pure returns (RoundVictoryTier) ;\\n    function evaluateWonResultsForOneTicket(uint256 roundId, uint256 ticketId) external view returns (TicketResults memory);\\n    function evaluateWonResultsForTickets(uint256 roundId) external view returns (TicketResults[] memory);\\n    function evaluateWonResultsForOneReferralTicket(uint256 roundId, uint256 referralTicketId) external view returns (ReferralTicketResults memory);\\n    function evaluateWonResultsForReferral(uint256 roundId) external view returns (ReferralTicketResults[] memory);\\n    function amountWonInRound(uint256 roundId) external view returns (uint256) ;\\n}\",\"keccak256\":\"0x3a2614be9037e4f45b023a1701fe19d1c1f9ecaf3c9103e35764d7c1ada244a4\",\"license\":\"UNLICENSED\"},\"contracts/LotteryRoundCreatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\ninterface LotteryRoundCreatorInterface {\\n   function startNewRound(uint256 roundDurationInSeconds, address previousRoundAddress) external returns(address);\\n}\",\"keccak256\":\"0x758edc675f9d3b6e91d052e64cf4ea0495d6639542acf1d41ddb2a4c825a392a\",\"license\":\"UNLICENSED\"},\"contracts/LotteryRoundInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\n\\ninterface LotteryRoundInterface {\\n    function getRound() external returns(Round memory);\\n    function previousRound() external returns(address);\\n    function markWinners(TicketResults[] memory ticketResults, ReferralTicketResults[] memory referralTicketResults) external;\\n    function markVictoryClaimed(uint256 ticketId, uint256 amountClaimed) external;\\n    function markReferralVictoryClaimed(uint256 referralTicketId, uint256 amountClaimed) external;\\n    function treasuryAmountOnTicket(uint256 paymentTokenAmount) external view returns (uint256);\\n    function updateVictoryPoolForTicket(uint256 paymentTokenAmount) external;\\n    function buyTicket(uint256 chainId, uint16[] memory chosenNumbers, address referral, address buyer) external;\\n    function closeRound() external;\\n    function couldReceiveWinningNumbers() external view;\\n    function storeWinningNumbers(uint16[] memory roundNumbers, uint16[] memory referralWinnersNumber) external;\\n    function ticketById(uint256 ticketId) external view returns (Ticket memory);\\n    function numbersForTicketId(uint256 ticketId) external view returns (uint16[] memory);\\n    function referralTicketById(uint256 index) external view returns (ReferralTicket memory);\\n    function victoryTierAmounts(RoundVictoryTier tier) external view returns (uint256);\\n    function winnersForEachTier(RoundVictoryTier tier) external returns(uint256);\\n    function setPoolPercentagesBasePoints(uint16[] memory _poolPercentagesBasePoints) external;\\n}\",\"keccak256\":\"0xaf0ab80798c6142a9cf867a7f998c58ab2a980ef5b81ac2451ac83da18e20457\",\"license\":\"UNLICENSED\"},\"contracts/utils/EmergencyFunctions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract EmergencyFunctions is Ownable {\\n    address internal teamAddress;\\n    constructor(address _teamAddress) Ownable(_teamAddress) {\\n        teamAddress = _teamAddress;\\n    }\\n\\n    function updateTeamAddress(address _teamAddress) public onlyOwner {\\n        teamAddress = _teamAddress;\\n    }\\n\\n    // Emergency Functions\\n    function sendTokenToTeam(address _token) public onlyOwner {\\n        uint256 amount = IERC20(_token).balanceOf(address(this));\\n        if (amount > 0) {\\n            SafeERC20.safeTransfer(IERC20(_token), teamAddress, amount);\\n        }\\n    }\\n\\n    function sendCryptoToTeam() public onlyOwner {\\n        if (address(this).balance > 0) {\\n            payable(teamAddress).transfer(address(this).balance);\\n        }\\n    }\\n\\n    /** @notice Check if an address is a contract */\\n    function _isContract(address _addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x68dcc6a4104e2905f65c342fdb2dbde1908113d10c006f5857b52dc0bbefd419\",\"license\":\"MIT\"},\"contracts/utils/TestUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.x <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IERC20Extension {\\n    function decimals() external view returns (uint8);\\n}\\n\\ncontract TestFunctions is Ownable {\\n    constructor() Ownable(msg.sender) {}\\n    //Used for mock testing, contract ownership will be renounced on release\\n    uint public currentTimestampOverride;\\n    function updateCurrentTimestampOverride(uint _v) external onlyOwner {\\n        currentTimestampOverride = _v;\\n    }\\n    function currentTimestamp() public view returns(uint) {\\n        if (currentTimestampOverride > 0) {\\n            return currentTimestampOverride;\\n        }\\n        return block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x8edb22ef91efc1d38ffbd50b48821f4fe23bdaf84a14de75d0df8231eb772bc4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061025e5760003560e01c806388e01a9811610146578063b62fe01b116100c3578063d4fc42c611610087578063d4fc42c6146106a7578063e03d753a146106c5578063eb7165fa146106e3578063f10fb584146106ff578063f2fde38b1461071d578063f4dec22b146107395761025e565b8063b62fe01b14610619578063ba96849414610635578063bbd1783a14610651578063c96acb5a1461065b578063cedd1bc3146106775761025e565b8063998da3e91161010a578063998da3e91461058d578063a8602fea146105a9578063a8eed12d146105c5578063b086f3c0146105e1578063b33d8c54146105fd5761025e565b806388e01a98146104e95780638c65c81f146105055780638da5cb5b1461053557806392566fdd146105535780639469f293146105715761025e565b8063258799f8116101df5780634ff776b8116101a35780634ff776b81461043d5780636a326ab114610459578063715018a61461047557806375e5460d1461047f5780637a5ed721146104af57806387da46f1146104cb5761025e565b8063258799f8146103995780633013ce29146103c957806339c834e9146103e75780633fda7d95146104035780634615102c146104215761025e565b806314eb76ac1161022657806314eb76ac146102f757806315981650146103135780631e410ddb1461032f5780631fcebf681461034b578063224294291461037b5761025e565b80630d683dd9146102635780630f5c49de14610281578063104dc3601461029d5780631209b1f6146102bb578063127f0b3f146102d9575b600080fd5b61026b610757565b6040516102789190613fea565b60405180910390f35b61029b60048036038101906102969190614051565b61076a565b005b6102a561078f565b6040516102b291906140bf565b60405180910390f35b6102c36107b5565b6040516102d091906140f3565b60405180910390f35b6102e16107bb565b6040516102ee91906140f3565b60405180910390f35b610311600480360381019061030c919061413a565b6107c1565b005b61032d60048036038101906103289190614193565b61080d565b005b610349600480360381019061034491906141fa565b61081f565b005b6103656004803603810190610360919061413a565b610847565b6040516103729190614236565b60405180910390f35b610383610868565b60405161039091906140f3565b60405180910390f35b6103b360048036038101906103ae9190614193565b61086e565b6040516103c091906140bf565b60405180910390f35b6103d16108ad565b6040516103de91906142b0565b60405180910390f35b61040160048036038101906103fc919061413a565b6108d3565b005b61040b610a61565b60405161041891906140f3565b60405180910390f35b61043b60048036038101906104369190614193565b610a67565b005b61045760048036038101906104529190614193565b610fa8565b005b610473600480360381019061046e919061413a565b61185e565b005b61047d6118aa565b005b6104996004803603810190610494919061413a565b6118be565b6040516104a691906142da565b60405180910390f35b6104c960048036038101906104c4919061444e565b6118de565b005b6104d36119c9565b6040516104e091906144f2565b60405180910390f35b61050360048036038101906104fe9190614193565b6119ef565b005b61051f600480360381019061051a9190614193565b611c56565b60405161052c91906140bf565b60405180910390f35b61053d611c95565b60405161054a91906140bf565b60405180910390f35b61055b611cbe565b6040516105689190614236565b60405180910390f35b61058b6004803603810190610586919061450d565b611cd2565b005b6105a760048036038101906105a2919061413a565b611d94565b005b6105c360048036038101906105be919061413a565b611e55565b005b6105df60048036038101906105da9190614556565b611ea1565b005b6105fb60048036038101906105f69190614193565b611f04565b005b610617600480360381019061061291906145f1565b612713565b005b610633600480360381019061062e919061463e565b6127da565b005b61064f600480360381019061064a919061413a565b612dd6565b005b610659612f15565b005b6106756004803603810190610670919061463e565b612f92565b005b610691600480360381019061068c9190614193565b6131d9565b60405161069e91906140f3565b60405180910390f35b6106af6131f1565b6040516106bc919061469f565b60405180910390f35b6106cd613217565b6040516106da91906142da565b60405180910390f35b6106fd60048036038101906106f8919061444e565b61322a565b005b6107076138ce565b60405161071491906146db565b60405180910390f35b6107376004803603810190610732919061413a565b6138f4565b005b61074161397a565b60405161074e9190614236565b60405180910390f35b600460009054906101000a900460ff1681565b61077261398e565b80601060006101000a81548160ff02191690831515021790555050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600f5481565b60025481565b6107c961398e565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61081561398e565b80600f8190555050565b61082761398e565b80601060016101000a81548161ffff021916908361ffff16021790555050565b60076020528060005260406000206000915054906101000a900461ffff1681565b60065481565b600a818154811061087e57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6108db61398e565b60005b600a80549050811015610a5d578173ffffffffffffffffffffffffffffffffffffffff16600a8281548110610916576109156146f6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610a5057600a6001600a805490506109709190614754565b81548110610981576109806146f6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a82815481106109c0576109bf6146f6565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600a805480610a1a57610a19614788565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590555b80806001019150506108de565b5050565b60055481565b610a6f61398e565b60026000815480929190610a82906147b7565b919050555060016002541115610e5d576003601060039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166363ea940f83600360028054610ae39190614754565b81548110610af457610af36146f6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401610b3c9291906147ff565b6020604051808303816000875af1158015610b5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7f919061483d565b9080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360028054610bef9190614754565b81548110610c0057610bff6146f6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b81526004016000604051808303816000875af1158015610c77573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610ca09190614b89565b60600151610ce3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cda90614c2f565b60405180910390fd5b60036001600254610cf49190614754565b81548110610d0557610d046146f6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b288e1a96040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610d7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da0919061483d565b73ffffffffffffffffffffffffffffffffffffffff16600360028054610dc69190614754565b81548110610dd757610dd66146f6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610e58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4f90614cc1565b60405180910390fd5b610f61565b6003601060039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166363ea940f8360006040518363ffffffff1660e01b8152600401610ebd9291906147ff565b6020604051808303816000875af1158015610edc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f00919061483d565b9080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6000600460006101000a81548160ff02191690836003811115610f8757610f86613f73565b5b0217905550426005819055508042610f9f9190614ce1565b60068190555050565b600060036001600254610fbb9190614754565b81548110610fcc57610fcb6146f6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff16639b7be8fc846040518263ffffffff1660e01b815260040161103491906140f3565b60c060405180830381865afa158015611051573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110759190614dda565b9050828160000151146110bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b490614e53565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff161461112f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112690614ebf565b60405180910390fd5b806060015115611174576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116b90614f2b565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b81526004016000604051808303816000875af11580156111c1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906111ea9190614b89565b6060015161122d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122490614f97565b60405180910390fd5b6003808111156112405761123f613f73565b5b600460009054906101000a900460ff16600381111561126257611261613f73565b5b146112a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129990615003565b60405180910390fd5b60055442116112e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112dd9061506f565b60405180910390fd5b600654421061132a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611321906150db565b60405180910390fd5b6000600a81111561133e5761133d613f73565b5b8160a00151600a81111561135557611354613f73565b5b03611395576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138c90615147565b60405180910390fd5b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632aa601708373ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b81526004016000604051808303816000875af1158015611420573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906114499190614b89565b60000151856040518363ffffffff1660e01b815260040161146b929190615167565b6040805180830381865afa158015611487573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ab91906151e0565b60200151600a8111156114c1576114c0613f73565b5b8160a00151600a8111156114d8576114d7613f73565b5b14611518576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150f90615259565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1663efa3d5318360a001516040518263ffffffff1660e01b815260040161155791906152c1565b6020604051808303816000875af1158015611576573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159a91906152dc565b8373ffffffffffffffffffffffffffffffffffffffff1663e2e308308460a001516040518263ffffffff1660e01b81526004016115d791906152c1565b602060405180830381865afa1580156115f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161891906152dc565b8161162657611625615309565b5b04905080600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161168591906140bf565b602060405180830381865afa1580156116a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c691906152dc565b1015611707576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116fe90615384565b60405180910390fd5b6003600160025403815481106117205761171f6146f6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382e5892385836040518363ffffffff1660e01b8152600401611785929190615167565b600060405180830381600087803b15801561179f57600080fd5b505af11580156117b3573d6000803e3d6000fd5b50505050600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016118149291906153a4565b6020604051808303816000875af1158015611833573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185791906153cd565b5050505050565b61186661398e565b80600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6118b261398e565b6118bc6000613a15565b565b60086020528060005260406000206000915054906101000a900460ff1681565b60005b83518110156119c2576000600667ffffffffffffffff8111156119075761190661430b565b5b6040519080825280602002602001820160405280156119355781602001602082028036833780820191505090505b50905060005b60068110156119a0578581846119519190614ce1565b81518110611962576119616146f6565b5b602002602001015182828151811061197d5761197c6146f6565b5b602002602001019061ffff16908161ffff1681525050808060010191505061193b565b506119ad8682868661322a565b506006816119bb9190614ce1565b90506118e1565b5050505050565b601060039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6119f761398e565b600060036001600254611a0a9190614754565b81548110611a1b57611a1a6146f6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663e278fe6f6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611a9057600080fd5b505af1158015611aa4573d6000803e3d6000fd5b505050506000600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f1664df66002546040518263ffffffff1660e01b8152600401611b0791906140f3565b602060405180830381865afa158015611b24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b4891906153fa565b9050600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e726f2e1826006611b959190615427565b6040518263ffffffff1660e01b8152600401611bb1919061549e565b6020604051808303816000875af1158015611bd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf491906152dc565b601160006002548152602001908152602001600020819055506001600460006101000a81548160ff02191690836003811115611c3357611c32613f73565b5b0217905550426005819055508242611c4b9190614ce1565b600681905550505050565b60038181548110611c6657600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600960009054906101000a900461ffff1681565b611cda61398e565b60036001600254611ceb9190614754565b81548110611cfc57611cfb6146f6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639469f293826040518263ffffffff1660e01b8152600401611d5f9190615577565b600060405180830381600087803b158015611d7957600080fd5b505af1158015611d8d573d6000803e3d6000fd5b5050505050565b611d9c61398e565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611dd791906140bf565b602060405180830381865afa158015611df4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1891906152dc565b90506000811115611e5157611e5082600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683613ad9565b5b5050565b611e5d61398e565b80600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611ea961398e565b80600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600060036001600254611f179190614754565b81548110611f2857611f276146f6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663dd85ae5f846040518263ffffffff1660e01b8152600401611f9091906140f3565b60a060405180830381865afa158015611fad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd19190615625565b905082816000015114612019576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161201090614e53565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff161461208b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161208290614ebf565b60405180910390fd5b8060800151156120d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120c790614f2b565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b81526004016000604051808303816000875af115801561211d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906121469190614b89565b60600151612189576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161218090614f97565b60405180910390fd5b6001151581606001511515146121d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121cb90615147565b60405180910390fd5b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663078a6dbf8373ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b81526004016000604051808303816000875af115801561225f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906122889190614b89565b60000151856040518363ffffffff1660e01b81526004016122aa929190615167565b6040805180830381865afa1580156122c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ea91906156a2565b6020015115158160600151151514612337576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161232e90615259565b60405180910390fd5b6000600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f1664df68473ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b81526004016000604051808303816000875af11580156123c4573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906123ed9190614b89565b600001516040518263ffffffff1660e01b815260040161240d91906140f3565b602060405180830381865afa15801561242a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244e91906153fa565b61ffff168373ffffffffffffffffffffffffffffffffffffffff1663e2e3083060076040518263ffffffff1660e01b815260040161248c91906152c1565b602060405180830381865afa1580156124a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124cd91906152dc565b816124db576124da615309565b5b04905080600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161253a91906140bf565b602060405180830381865afa158015612557573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061257b91906152dc565b10156125bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125b390615384565b60405180910390fd5b6003600160025403815481106125d5576125d46146f6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630cee803c85836040518363ffffffff1660e01b815260040161263a929190615167565b600060405180830381600087803b15801561265457600080fd5b505af1158015612668573d6000803e3d6000fd5b50505050600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016126c99291906153a4565b6020604051808303816000875af11580156126e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061270c91906153cd565b5050505050565b61271b61398e565b60005b828290508110156127d557600760008484848181106127405761273f6146f6565b5b9050602002016020810190612755919061413a565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081819054906101000a900461ffff16809291906127ad906156cf565b91906101000a81548161ffff021916908361ffff16021790555050808060010191505061271e565b505050565b6127e261398e565b600060036001846127f39190614754565b81548110612804576128036146f6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663343f25666040518163ffffffff1660e01b815260040160006040518083038186803b15801561287757600080fd5b505afa15801561288b573d6000803e3d6000fd5b50505050600080600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d8a4676f60116000888152602001908152602001600020546040518263ffffffff1660e01b815260040161290091906140f3565b600060405180830381865afa15801561291d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061294691906156f9565b915091508161298a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612981906157a1565b60405180910390fd5b6000600667ffffffffffffffff8111156129a7576129a661430b565b5b6040519080825280602002602001820160405280156129d55781602001602082028036833780820191505090505b5090506000600683516129e89190614754565b67ffffffffffffffff811115612a0157612a0061430b565b5b604051908082528060200260200182016040528015612a2f5781602001602082028036833780820191505090505b5090508315612d1c5760005b6006811015612b3557600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c746a8a858381518110612a9557612a946146f6565b5b60200260200101516045866040518463ffffffff1660e01b8152600401612abe939291906157fc565b602060405180830381865afa158015612adb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aff91906153fa565b838281518110612b1257612b116146f6565b5b602002602001019061ffff16908161ffff16815250508080600101915050612a3b565b506001601a84600581518110612b4e57612b4d6146f6565b5b6020026020010151612b60919061583a565b612b6a9190614ce1565b82600581518110612b7e57612b7d6146f6565b5b602002602001019061ffff16908161ffff16815250506000600690505b8351811015612d1a57600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c746a8a858381518110612bf557612bf46146f6565b5b60200260200101518873ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b81526004016000604051808303816000875af1158015612c4a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612c739190614b89565b6101400151856040518463ffffffff1660e01b8152600401612c979392919061586b565b602060405180830381865afa158015612cb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cd891906153fa565b82600683612ce69190614754565b81518110612cf757612cf66146f6565b5b602002602001019061ffff16908161ffff16815250508080600101915050612b9b565b505b8473ffffffffffffffffffffffffffffffffffffffff16632724d10483836040518363ffffffff1660e01b8152600401612d579291906158a9565b600060405180830381600087803b158015612d7157600080fd5b505af1158015612d85573d6000803e3d6000fd5b505050506002600460006101000a81548160ff02191690836003811115612daf57612dae613f73565b5b0217905550426005819055508542612dc79190614ce1565b60068190555050505050505050565b612dde61398e565b60005b600a80549050811015612eae578173ffffffffffffffffffffffffffffffffffffffff16600a8281548110612e1957612e186146f6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603612ea1576000612ea0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e979061592c565b60405180910390fd5b5b8080600101915050612de1565b50600a819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b612f1d61398e565b6000471115612f9057600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015612f8e573d6000803e3d6000fd5b505b565b612f9a61398e565b6003600183612fa99190614754565b81548110612fba57612fb96146f6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633590bd3c600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c099ae19856040518263ffffffff1660e01b815260040161305b91906140f3565b600060405180830381865afa158015613078573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906130a19190615a0f565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d856f0d5866040518263ffffffff1660e01b81526004016130fc91906140f3565b600060405180830381865afa158015613119573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906131429190615b1b565b6040518363ffffffff1660e01b815260040161315f929190615d4d565b600060405180830381600087803b15801561317957600080fd5b505af115801561318d573d6000803e3d6000fd5b505050506003600460006101000a81548160ff021916908360038111156131b7576131b6613f73565b5b02179055504260058190555080426131cf9190614ce1565b6006819055505050565b60116020528060005260406000206000915090505481565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601060009054906101000a900460ff1681565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900461ffff1661ffff1611806133295750600f54600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e83306040518363ffffffff1660e01b81526004016132e5929190615d84565b602060405180830381865afa158015613302573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061332691906152dc565b10155b8061337d5750600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6133bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133b390615df9565b60405180910390fd5b6000600360016002546133cf9190614754565b815481106133e0576133df6146f6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900461ffff1661ffff1611156134e457600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081819054906101000a900461ffff16809291906134c490615e19565b91906101000a81548161ffff021916908361ffff16021790555050613856565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166137de57600f54600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231326040518263ffffffff1660e01b815260040161359391906140bf565b602060405180830381865afa1580156135b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135d491906152dc565b1015613615576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161360c90615e8e565b60405180910390fd5b600a805490506009600081819054906101000a900461ffff168092919061363b906156cf565b91906101000a81548161ffff021916908361ffff16021790555061ffff16613663919061583a565b600960006101000a81548161ffff021916908361ffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff1663af33d08f600f546040518263ffffffff1660e01b81526004016136bc91906140f3565b602060405180830381865afa1580156136d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136fd91906152dc565b905061378c600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600a600960009054906101000a900461ffff1661ffff168154811061374e5761374d6146f6565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600f546137879190614754565b613b58565b6137dc600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684613b58565b505b8073ffffffffffffffffffffffffffffffffffffffff1663b56c12b4600f546040518263ffffffff1660e01b815260040161381991906140f3565b600060405180830381600087803b15801561383357600080fd5b505af1158015613847573d6000803e3d6000fd5b505050506138558284613bda565b5b8073ffffffffffffffffffffffffffffffffffffffff1663eb7165fa868686866040518563ffffffff1660e01b81526004016138959493929190615eae565b600060405180830381600087803b1580156138af57600080fd5b505af11580156138c3573d6000803e3d6000fd5b505050505050505050565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6138fc61398e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361396e5760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161396591906140bf565b60405180910390fd5b61397781613a15565b50565b601060019054906101000a900461ffff1681565b613996613d1d565b73ffffffffffffffffffffffffffffffffffffffff166139b4611c95565b73ffffffffffffffffffffffffffffffffffffffff1614613a13576139d7613d1d565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401613a0a91906140bf565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b613b53838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401613b0c9291906153a4565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613d25565b505050565b613bd4848573ffffffffffffffffffffffffffffffffffffffff166323b872dd868686604051602401613b8d93929190615efa565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613d25565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015613c235750601060009054906101000a900460ff165b15613d1957600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081819054906101000a900461ffff1680929190613c85906156cf565b91906101000a81548161ffff021916908361ffff16021790555050600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081819054906101000a900461ffff1680929190613cfd906156cf565b91906101000a81548161ffff021916908361ffff160217905550505b5050565b600033905090565b6000613d50828473ffffffffffffffffffffffffffffffffffffffff16613dbc90919063ffffffff16565b90506000815114158015613d75575080806020019051810190613d7391906153cd565b155b15613db757826040517f5274afe7000000000000000000000000000000000000000000000000000000008152600401613dae91906140bf565b60405180910390fd5b505050565b6060613dca83836000613dd2565b905092915050565b606081471015613e1957306040517fcd786059000000000000000000000000000000000000000000000000000000008152600401613e1091906140bf565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff168486604051613e429190615fa2565b60006040518083038185875af1925050503d8060008114613e7f576040519150601f19603f3d011682016040523d82523d6000602084013e613e84565b606091505b5091509150613e94868383613e9f565b925050509392505050565b606082613eb457613eaf82613f2e565b613f26565b60008251148015613edc575060008473ffffffffffffffffffffffffffffffffffffffff163b145b15613f1e57836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401613f1591906140bf565b60405180910390fd5b819050613f27565b5b9392505050565b600081511115613f415780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110613fb357613fb2613f73565b5b50565b6000819050613fc482613fa2565b919050565b6000613fd482613fb6565b9050919050565b613fe481613fc9565b82525050565b6000602082019050613fff6000830184613fdb565b92915050565b6000604051905090565b600080fd5b600080fd5b60008115159050919050565b61402e81614019565b811461403957600080fd5b50565b60008135905061404b81614025565b92915050565b6000602082840312156140675761406661400f565b5b60006140758482850161403c565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006140a98261407e565b9050919050565b6140b98161409e565b82525050565b60006020820190506140d460008301846140b0565b92915050565b6000819050919050565b6140ed816140da565b82525050565b600060208201905061410860008301846140e4565b92915050565b6141178161409e565b811461412257600080fd5b50565b6000813590506141348161410e565b92915050565b6000602082840312156141505761414f61400f565b5b600061415e84828501614125565b91505092915050565b614170816140da565b811461417b57600080fd5b50565b60008135905061418d81614167565b92915050565b6000602082840312156141a9576141a861400f565b5b60006141b78482850161417e565b91505092915050565b600061ffff82169050919050565b6141d7816141c0565b81146141e257600080fd5b50565b6000813590506141f4816141ce565b92915050565b6000602082840312156142105761420f61400f565b5b600061421e848285016141e5565b91505092915050565b614230816141c0565b82525050565b600060208201905061424b6000830184614227565b92915050565b6000819050919050565b600061427661427161426c8461407e565b614251565b61407e565b9050919050565b60006142888261425b565b9050919050565b600061429a8261427d565b9050919050565b6142aa8161428f565b82525050565b60006020820190506142c560008301846142a1565b92915050565b6142d481614019565b82525050565b60006020820190506142ef60008301846142cb565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b614343826142fa565b810181811067ffffffffffffffff821117156143625761436161430b565b5b80604052505050565b6000614375614005565b9050614381828261433a565b919050565b600067ffffffffffffffff8211156143a1576143a061430b565b5b602082029050602081019050919050565b600080fd5b60006143ca6143c584614386565b61436b565b905080838252602082019050602084028301858111156143ed576143ec6143b2565b5b835b81811015614416578061440288826141e5565b8452602084019350506020810190506143ef565b5050509392505050565b600082601f830112614435576144346142f5565b5b81356144458482602086016143b7565b91505092915050565b600080600080608085870312156144685761446761400f565b5b60006144768782880161417e565b945050602085013567ffffffffffffffff81111561449757614496614014565b5b6144a387828801614420565b93505060406144b487828801614125565b92505060606144c587828801614125565b91505092959194509250565b60006144dc8261427d565b9050919050565b6144ec816144d1565b82525050565b600060208201905061450760008301846144e3565b92915050565b6000602082840312156145235761452261400f565b5b600082013567ffffffffffffffff81111561454157614540614014565b5b61454d84828501614420565b91505092915050565b6000806040838503121561456d5761456c61400f565b5b600061457b85828601614125565b925050602061458c8582860161403c565b9150509250929050565b600080fd5b60008083601f8401126145b1576145b06142f5565b5b8235905067ffffffffffffffff8111156145ce576145cd614596565b5b6020830191508360208202830111156145ea576145e96143b2565b5b9250929050565b600080602083850312156146085761460761400f565b5b600083013567ffffffffffffffff81111561462657614625614014565b5b6146328582860161459b565b92509250509250929050565b600080604083850312156146555761465461400f565b5b60006146638582860161417e565b92505060206146748582860161417e565b9150509250929050565b60006146898261427d565b9050919050565b6146998161467e565b82525050565b60006020820190506146b46000830184614690565b92915050565b60006146c58261427d565b9050919050565b6146d5816146ba565b82525050565b60006020820190506146f060008301846146cc565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061475f826140da565b915061476a836140da565b925082820390508181111561478257614781614725565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60006147c2826140da565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036147f4576147f3614725565b5b600182019050919050565b600060408201905061481460008301856140e4565b61482160208301846140b0565b9392505050565b6000815190506148378161410e565b92915050565b6000602082840312156148535761485261400f565b5b600061486184828501614828565b91505092915050565b600080fd5b600080fd5b60008151905061488381614167565b92915050565b60008151905061489881614025565b92915050565b6000815190506148ad816141ce565b92915050565b60006148c66148c184614386565b61436b565b905080838252602082019050602084028301858111156148e9576148e86143b2565b5b835b8181101561491257806148fe888261489e565b8452602084019350506020810190506148eb565b5050509392505050565b600082601f830112614931576149306142f5565b5b81516149418482602086016148b3565b91505092915050565b600067ffffffffffffffff8211156149655761496461430b565b5b602082029050602081019050919050565b60006149896149848461494a565b61436b565b905080838252602082019050602084028301858111156149ac576149ab6143b2565b5b835b818110156149d557806149c18882614874565b8452602084019350506020810190506149ae565b5050509392505050565b600082601f8301126149f4576149f36142f5565b5b8151614a04848260208601614976565b91505092915050565b60006101608284031215614a2457614a2361486a565b5b614a2f61016061436b565b90506000614a3f84828501614874565b6000830152506020614a5384828501614874565b6020830152506040614a6784828501614874565b6040830152506060614a7b84828501614889565b606083015250608082015167ffffffffffffffff811115614a9f57614a9e61486f565b5b614aab8482850161491c565b60808301525060a082015167ffffffffffffffff811115614acf57614ace61486f565b5b614adb8482850161491c565b60a08301525060c0614aef8482850161489e565b60c08301525060e082015167ffffffffffffffff811115614b1357614b1261486f565b5b614b1f848285016149df565b60e083015250610100614b348482850161489e565b6101008301525061012082015167ffffffffffffffff811115614b5a57614b5961486f565b5b614b66848285016149df565b61012083015250610140614b7c8482850161489e565b6101408301525092915050565b600060208284031215614b9f57614b9e61400f565b5b600082015167ffffffffffffffff811115614bbd57614bbc614014565b5b614bc984828501614a0d565b91505092915050565b600082825260208201905092915050565b7f50726576696f757320726f756e64206e6f7420656e6465640000000000000000600082015250565b6000614c19601883614bd2565b9150614c2482614be3565b602082019050919050565b60006020820190508181036000830152614c4881614c0c565b9050919050565b7f50726576696f757320726f756e64206e6f742070726f7061676174656420636f60008201527f72726563746c7900000000000000000000000000000000000000000000000000602082015250565b6000614cab602783614bd2565b9150614cb682614c4f565b604082019050919050565b60006020820190508181036000830152614cda81614c9e565b9050919050565b6000614cec826140da565b9150614cf7836140da565b9250828201905080821115614d0f57614d0e614725565b5b92915050565b600b8110614d2257600080fd5b50565b600081519050614d3481614d15565b92915050565b600060c08284031215614d5057614d4f61486a565b5b614d5a60c061436b565b90506000614d6a84828501614874565b6000830152506020614d7e84828501614828565b6020830152506040614d9284828501614828565b6040830152506060614da684828501614889565b6060830152506080614dba84828501614874565b60808301525060a0614dce84828501614d25565b60a08301525092915050565b600060c08284031215614df057614def61400f565b5b6000614dfe84828501614d3a565b91505092915050565b7f496e76616c6964207469636b6574206964000000000000000000000000000000600082015250565b6000614e3d601183614bd2565b9150614e4882614e07565b602082019050919050565b60006020820190508181036000830152614e6c81614e30565b9050919050565b7f496e76616c6964207469636b6574206f776e6572000000000000000000000000600082015250565b6000614ea9601483614bd2565b9150614eb482614e73565b602082019050919050565b60006020820190508181036000830152614ed881614e9c565b9050919050565b7f5469636b657420616c726561647920636c61696d656400000000000000000000600082015250565b6000614f15601683614bd2565b9150614f2082614edf565b602082019050919050565b60006020820190508181036000830152614f4481614f08565b9050919050565b7f526f756e64206e6f7420656e6465640000000000000000000000000000000000600082015250565b6000614f81600f83614bd2565b9150614f8c82614f4b565b602082019050919050565b60006020820190508181036000830152614fb081614f74565b9050919050565b7f436c61696d206e6f742073746172746564000000000000000000000000000000600082015250565b6000614fed601183614bd2565b9150614ff882614fb7565b602082019050919050565b6000602082019050818103600083015261501c81614fe0565b9050919050565b7f436c61696d206e6f7420737461727465643a20746f6f206561726c7900000000600082015250565b6000615059601c83614bd2565b915061506482615023565b602082019050919050565b600060208201905081810360008301526150888161504c565b9050919050565b7f436c61696d206e6f7420737461727465643a20746f6f206c6174650000000000600082015250565b60006150c5601b83614bd2565b91506150d08261508f565b602082019050919050565b600060208201905081810360008301526150f4816150b8565b9050919050565b7f4e6f207072697a6520666f722074686973207469636b65740000000000000000600082015250565b6000615131601883614bd2565b915061513c826150fb565b602082019050919050565b6000602082019050818103600083015261516081615124565b9050919050565b600060408201905061517c60008301856140e4565b61518960208301846140e4565b9392505050565b6000604082840312156151a6576151a561486a565b5b6151b0604061436b565b905060006151c084828501614874565b60008301525060206151d484828501614d25565b60208301525092915050565b6000604082840312156151f6576151f561400f565b5b600061520484828501615190565b91505092915050565b7f496e76616c6964207469636b6574207469657200000000000000000000000000600082015250565b6000615243601383614bd2565b915061524e8261520d565b602082019050919050565b6000602082019050818103600083015261527281615236565b9050919050565b600b811061528a57615289613f73565b5b50565b600081905061529b82615279565b919050565b60006152ab8261528d565b9050919050565b6152bb816152a0565b82525050565b60006020820190506152d660008301846152b2565b92915050565b6000602082840312156152f2576152f161400f565b5b600061530084828501614874565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e6f7420656e6f7567682066756e6473206f6e20636f6e747261637400000000600082015250565b600061536e601c83614bd2565b915061537982615338565b602082019050919050565b6000602082019050818103600083015261539d81615361565b9050919050565b60006040820190506153b960008301856140b0565b6153c660208301846140e4565b9392505050565b6000602082840312156153e3576153e261400f565b5b60006153f184828501614889565b91505092915050565b6000602082840312156154105761540f61400f565b5b600061541e8482850161489e565b91505092915050565b6000615432826141c0565b915061543d836141c0565b9250828201905061ffff81111561545757615456614725565b5b92915050565b600063ffffffff82169050919050565b600061548861548361547e846141c0565b614251565b61545d565b9050919050565b6154988161546d565b82525050565b60006020820190506154b3600083018461548f565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6154ee816141c0565b82525050565b600061550083836154e5565b60208301905092915050565b6000602082019050919050565b6000615524826154b9565b61552e81856154c4565b9350615539836154d5565b8060005b8381101561556a57815161555188826154f4565b975061555c8361550c565b92505060018101905061553d565b5085935050505092915050565b600060208201905081810360008301526155918184615519565b905092915050565b600060a082840312156155af576155ae61486a565b5b6155b960a061436b565b905060006155c984828501614874565b60008301525060206155dd84828501614828565b60208301525060406155f18482850161489e565b604083015250606061560584828501614889565b606083015250608061561984828501614889565b60808301525092915050565b600060a0828403121561563b5761563a61400f565b5b600061564984828501615599565b91505092915050565b6000604082840312156156685761566761486a565b5b615672604061436b565b9050600061568284828501614874565b600083015250602061569684828501614889565b60208301525092915050565b6000604082840312156156b8576156b761400f565b5b60006156c684828501615652565b91505092915050565b60006156da826141c0565b915061ffff82036156ee576156ed614725565b5b600182019050919050565b600080604083850312156157105761570f61400f565b5b600061571e85828601614889565b925050602083015167ffffffffffffffff81111561573f5761573e614014565b5b61574b858286016149df565b9150509250929050565b7f52616e646f6d206e756d62657273206e6f742072656164790000000000000000600082015250565b600061578b601883614bd2565b915061579682615755565b602082019050919050565b600060208201905081810360008301526157ba8161577e565b9050919050565b6000819050919050565b60006157e66157e16157dc846157c1565b614251565b6141c0565b9050919050565b6157f6816157cb565b82525050565b600060608201905061581160008301866140e4565b61581e60208301856157ed565b81810360408301526158308184615519565b9050949350505050565b6000615845826140da565b9150615850836140da565b9250826158605761585f615309565b5b828206905092915050565b600060608201905061588060008301866140e4565b61588d6020830185614227565b818103604083015261589f8184615519565b9050949350505050565b600060408201905081810360008301526158c38185615519565b905081810360208301526158d78184615519565b90509392505050565b7f57616c6c657420616c7265616479206164646564000000000000000000000000600082015250565b6000615916601483614bd2565b9150615921826158e0565b602082019050919050565b6000602082019050818103600083015261594581615909565b9050919050565b600067ffffffffffffffff8211156159675761596661430b565b5b602082029050602081019050919050565b600061598b6159868461594c565b61436b565b905080838252602082019050604084028301858111156159ae576159ad6143b2565b5b835b818110156159d757806159c38882615190565b8452602084019350506040810190506159b0565b5050509392505050565b600082601f8301126159f6576159f56142f5565b5b8151615a06848260208601615978565b91505092915050565b600060208284031215615a2557615a2461400f565b5b600082015167ffffffffffffffff811115615a4357615a42614014565b5b615a4f848285016159e1565b91505092915050565b600067ffffffffffffffff821115615a7357615a7261430b565b5b602082029050602081019050919050565b6000615a97615a9284615a58565b61436b565b90508083825260208201905060408402830185811115615aba57615ab96143b2565b5b835b81811015615ae35780615acf8882615652565b845260208401935050604081019050615abc565b5050509392505050565b600082601f830112615b0257615b016142f5565b5b8151615b12848260208601615a84565b91505092915050565b600060208284031215615b3157615b3061400f565b5b600082015167ffffffffffffffff811115615b4f57615b4e614014565b5b615b5b84828501615aed565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b615b99816140da565b82525050565b615ba8816152a0565b82525050565b604082016000820151615bc46000850182615b90565b506020820151615bd76020850182615b9f565b50505050565b6000615be98383615bae565b60408301905092915050565b6000602082019050919050565b6000615c0d82615b64565b615c178185615b6f565b9350615c2283615b80565b8060005b83811015615c53578151615c3a8882615bdd565b9750615c4583615bf5565b925050600181019050615c26565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b615c9581614019565b82525050565b604082016000820151615cb16000850182615b90565b506020820151615cc46020850182615c8c565b50505050565b6000615cd68383615c9b565b60408301905092915050565b6000602082019050919050565b6000615cfa82615c60565b615d048185615c6b565b9350615d0f83615c7c565b8060005b83811015615d40578151615d278882615cca565b9750615d3283615ce2565b925050600181019050615d13565b5085935050505092915050565b60006040820190508181036000830152615d678185615c02565b90508181036020830152615d7b8184615cef565b90509392505050565b6000604082019050615d9960008301856140b0565b615da660208301846140b0565b9392505050565b7f4d697373696e6720416c6c6f77616e6365000000000000000000000000000000600082015250565b6000615de3601183614bd2565b9150615dee82615dad565b602082019050919050565b60006020820190508181036000830152615e1281615dd6565b9050919050565b6000615e24826141c0565b915060008203615e3757615e36614725565b5b600182039050919050565b7f496e73756666696369656e742066756e64730000000000000000000000000000600082015250565b6000615e78601283614bd2565b9150615e8382615e42565b602082019050919050565b60006020820190508181036000830152615ea781615e6b565b9050919050565b6000608082019050615ec360008301876140e4565b8181036020830152615ed58186615519565b9050615ee460408301856140b0565b615ef160608301846140b0565b95945050505050565b6000606082019050615f0f60008301866140b0565b615f1c60208301856140b0565b615f2960408301846140e4565b949350505050565b600081519050919050565b600081905092915050565b60005b83811015615f65578082015181840152602081019050615f4a565b60008484015250505050565b6000615f7c82615f31565b615f868185615f3c565b9350615f96818560208601615f47565b80840191505092915050565b6000615fae8284615f71565b91508190509291505056fea264697066735822122097fee0b6d18e923b7154f1155cad2f8c4e8297a7d041521d08ad57efac39227764736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4462,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "teamAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1001,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "roundCount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1004,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "rounds",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1007,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "lotteryStatus",
        "offset": 0,
        "slot": "4",
        "type": "t_enum(LotteryStatuses)997"
      },
      {
        "astId": 1009,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "statusStartTime",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1011,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "statusEndTime",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1015,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "freeRounds",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint16)"
      },
      {
        "astId": 1019,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "crossChainOperator",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1037,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "counterForBankWallets",
        "offset": 0,
        "slot": "9",
        "type": "t_uint16"
      },
      {
        "astId": 1040,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "bankWallets",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1125,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "treasuryWallets",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 1140,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "paymentToken",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IERC20Metadata)251"
      },
      {
        "astId": 1157,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "randomizer",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(CyclixRandomizerInterface)892"
      },
      {
        "astId": 1160,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "reader",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(LotteryReaderInterface)3253"
      },
      {
        "astId": 1162,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "ticketPrice",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 1177,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "freeRoundsAreEnabled",
        "offset": 0,
        "slot": "16",
        "type": "t_bool"
      },
      {
        "astId": 1192,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "percentageOfReferralWinners",
        "offset": 1,
        "slot": "16",
        "type": "t_uint16"
      },
      {
        "astId": 1227,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "lotteryRoundCreator",
        "offset": 3,
        "slot": "16",
        "type": "t_contract(LotteryRoundCreatorInterface)4322"
      },
      {
        "astId": 1667,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "publicRoundRandomNumbersRequestId",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(CyclixRandomizerInterface)892": {
        "encoding": "inplace",
        "label": "contract CyclixRandomizerInterface",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Metadata)251": {
        "encoding": "inplace",
        "label": "contract IERC20Metadata",
        "numberOfBytes": "20"
      },
      "t_contract(LotteryReaderInterface)3253": {
        "encoding": "inplace",
        "label": "contract LotteryReaderInterface",
        "numberOfBytes": "20"
      },
      "t_contract(LotteryRoundCreatorInterface)4322": {
        "encoding": "inplace",
        "label": "contract LotteryRoundCreatorInterface",
        "numberOfBytes": "20"
      },
      "t_enum(LotteryStatuses)997": {
        "encoding": "inplace",
        "label": "enum LotteryStatuses",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint16)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}