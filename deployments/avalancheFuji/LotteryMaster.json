{
  "address": "0x9e7aA89225C86dBCF59eB7B2e6a6e5FBe7e85d89",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cyclixRandomizer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lotteryReader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lotteryRoundCreator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_paymentToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_ticketPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "addBankWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "participant",
          "type": "address[]"
        }
      ],
      "name": "addFreeRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bankWallets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint16[]",
          "name": "chosenNumbers",
          "type": "uint16[]"
        },
        {
          "internalType": "address",
          "name": "referral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        }
      ],
      "name": "buyTicket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint16[]",
          "name": "moreTicketNumbers",
          "type": "uint16[]"
        },
        {
          "internalType": "address",
          "name": "referral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        }
      ],
      "name": "buyTickets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "referralTicketId",
          "type": "uint256"
        }
      ],
      "name": "claimReferralVictory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketId",
          "type": "uint256"
        }
      ],
      "name": "claimVictory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_statusEndTime",
          "type": "uint256"
        }
      ],
      "name": "closeRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counterForBankWallets",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_statusEndTime",
          "type": "uint256"
        }
      ],
      "name": "fetchRoundNumbers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "freeRounds",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "freeRoundsAreEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lotteryRoundCreator",
      "outputs": [
        {
          "internalType": "contract LotteryRoundCreatorInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lotteryStatus",
      "outputs": [
        {
          "internalType": "enum LotteryStatuses",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimingTimeInSeconds",
          "type": "uint256"
        }
      ],
      "name": "markWinners",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentToken",
      "outputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "percentageOfReferralWinners",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "publicRoundRandomNumbersRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randomizer",
      "outputs": [
        {
          "internalType": "contract CyclixRandomizerInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reader",
      "outputs": [
        {
          "internalType": "contract LotteryReaderInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "removeBankWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roundCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rounds",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendCryptoToTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "sendTokenToTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setCrossChainOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "v",
          "type": "bool"
        }
      ],
      "name": "setFreeRoundsOnPurchase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_paymentToken",
          "type": "address"
        }
      ],
      "name": "setPaymentToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "percentage",
          "type": "uint16"
        }
      ],
      "name": "setPercentageOfReferralWinners",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "_poolPercentagesBasePoints",
          "type": "uint16[]"
        }
      ],
      "name": "setPoolPercentagesBasePoints",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ticketPrice",
          "type": "uint256"
        }
      ],
      "name": "setTicketPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "setTreasuryWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_statusEndTime",
          "type": "uint256"
        }
      ],
      "name": "startNewRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "statusEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "statusStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ticketPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryWallets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_teamAddress",
          "type": "address"
        }
      ],
      "name": "updateTeamAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4533f44d2d721d55d953dafbc9992af626e785370a05805fb4ce62fe3d4ce70d",
  "receipt": {
    "to": null,
    "from": "0x4eCa23Ffd5710970E22558C484a0D6943dA5eAa5",
    "contractAddress": "0x9e7aA89225C86dBCF59eB7B2e6a6e5FBe7e85d89",
    "transactionIndex": 1,
    "gasUsed": "5663330",
    "logsBloom": "0x
    "blockHash": "0x1ce67638cceba5894c0ee27115ed8b93927315b0a24ad9d96a2a204a237b815e",
    "transactionHash": "0x4533f44d2d721d55d953dafbc9992af626e785370a05805fb4ce62fe3d4ce70d",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 32598481,
        "transactionHash": "0x4533f44d2d721d55d953dafbc9992af626e785370a05805fb4ce62fe3d4ce70d",
        "address": "0x9e7aA89225C86dBCF59eB7B2e6a6e5FBe7e85d89",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004eca23ffd5710970e22558c484a0d6943da5eaa5"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x1ce67638cceba5894c0ee27115ed8b93927315b0a24ad9d96a2a204a237b815e"
      }
    ],
    "blockNumber": 32598481,
    "cumulativeGasUsed": "5783285",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x634b6fA78617C8131F866822B407B2D606FbE424",
    "0x02B20cB9D09AF0D860084c8959CFCB99E1256e3F",
    "0xdD52ED1A77825fF149445B454321694208a0E60f",
    "0x2e13f2B116b8d4B765D730f20A4aF09d15D8B62e",
    10
  ],
  "numDeployments": 4,
  "solcInputHash": "badce1d8e7635231dc9117a9beb5fee1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cyclixRandomizer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lotteryReader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lotteryRoundCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ticketPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"addBankWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"participant\",\"type\":\"address[]\"}],\"name\":\"addFreeRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bankWallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint16[]\",\"name\":\"chosenNumbers\",\"type\":\"uint16[]\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"buyTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint16[]\",\"name\":\"moreTicketNumbers\",\"type\":\"uint16[]\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"buyTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"referralTicketId\",\"type\":\"uint256\"}],\"name\":\"claimReferralVictory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"}],\"name\":\"claimVictory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_statusEndTime\",\"type\":\"uint256\"}],\"name\":\"closeRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counterForBankWallets\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_statusEndTime\",\"type\":\"uint256\"}],\"name\":\"fetchRoundNumbers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"freeRounds\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeRoundsAreEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryRoundCreator\",\"outputs\":[{\"internalType\":\"contract LotteryRoundCreatorInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryStatus\",\"outputs\":[{\"internalType\":\"enum LotteryStatuses\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimingTimeInSeconds\",\"type\":\"uint256\"}],\"name\":\"markWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentToken\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentageOfReferralWinners\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"publicRoundRandomNumbersRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomizer\",\"outputs\":[{\"internalType\":\"contract CyclixRandomizerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reader\",\"outputs\":[{\"internalType\":\"contract LotteryReaderInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"removeBankWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendCryptoToTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sendTokenToTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setCrossChainOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"v\",\"type\":\"bool\"}],\"name\":\"setFreeRoundsOnPurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"}],\"name\":\"setPaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"percentage\",\"type\":\"uint16\"}],\"name\":\"setPercentageOfReferralWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"_poolPercentagesBasePoints\",\"type\":\"uint16[]\"}],\"name\":\"setPoolPercentagesBasePoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ticketPrice\",\"type\":\"uint256\"}],\"name\":\"setTicketPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_statusEndTime\",\"type\":\"uint256\"}],\"name\":\"startNewRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"statusEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"statusStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teamAddress\",\"type\":\"address\"}],\"name\":\"updateTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LotteryMaster.sol\":\"LotteryMaster\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/CyclixRandomizerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface CyclixRandomizerInterface {\\n    function requestRandomWords(uint32 numWords) external returns (uint256 requestId);\\n    function getRequestStatus(uint256 _requestId) external view returns (bool fulfilled, uint256[] memory randomWords);\\n    function registerGameContract(address gameAddress, string calldata name) external;\\n    function getLastRequestIdForCaller() external view returns (uint256);\\n}\",\"keccak256\":\"0x066c0e37e0bd528ce42d23ee3b5815f550f44571c61f1be89a4b844f1d52f71f\",\"license\":\"MIT\"},\"contracts/LotteryCommon.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\n    enum RoundVictoryTier {\\n        NO_WIN,\\n        Tier5_1,\\n        Tier5,\\n        Tier4_1,\\n        Tier4,\\n        Tier3_1,\\n        Tier3,\\n        Referrer,\\n        PublicPool,\\n        TokenHolders,\\n        Treasury\\n    }\\n\\n    struct Round {\\n        uint256 id;\\n        uint256 startTime;\\n        uint256 endTime;\\n        bool ended;\\n        uint16[] roundNumbers;\\n        uint16[] referralWinnersNumber;\\n        uint16 referralWinnersNumberCount;\\n        uint256[] ticketIds;\\n        uint16 ticketsCount;\\n        uint256[] referralTicketIds;\\n        uint16 referralCounts;\\n    }\\n\\n    struct Ticket {\\n        uint256 id;\\n        address participantAddress;\\n        address referralAddress;\\n        bool claimed;\\n        uint256 chainId;\\n        RoundVictoryTier victoryTier;\\n    }\\n\\n    struct TicketResults {\\n        uint256 ticketId;\\n        RoundVictoryTier victoryTier;\\n    }\\n\\n    struct ReferralTicket {\\n        uint256 id;\\n        address referralAddress;\\n        uint16 referralTicketNumber;\\n        bool winner;\\n        bool claimed;\\n    }\\n\\n    struct ReferralTicketResults {\\n        uint256 referralTicketId;\\n        bool won;\\n    }\",\"keccak256\":\"0x20e8b7859bdc7f7d3d7aff78c3a0d9953316d0a2a8850f886fe8e273820b32ec\",\"license\":\"UNLICENSED\"},\"contracts/LotteryMaster.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {CyclixRandomizerInterface} from \\\"./CyclixRandomizerInterface.sol\\\";\\nimport {EmergencyFunctions} from \\\"./utils/EmergencyFunctions.sol\\\";\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\nimport { LotteryRoundInterface } from \\\"./LotteryRoundInterface.sol\\\";\\nimport { LotteryReaderInterface } from \\\"./LotteryReaderInterface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./LotteryRoundCreatorInterface.sol\\\";\\nenum LotteryStatuses {\\n    DrawOpen,\\n    EvaluatingResults,\\n    ResultsEvaluated,\\n    ClaimInProgress\\n}\\n\\ncontract LotteryMaster is EmergencyFunctions {\\n\\n    uint256 public roundCount;\\n    address[] public rounds;\\n    LotteryStatuses public lotteryStatus;\\n    uint256 public statusStartTime;\\n    uint256 public statusEndTime;\\n\\n    mapping(address => uint16) public freeRounds;\\n    mapping(address => bool) crossChainOperator;\\n    function setCrossChainOperator(address operator, bool value) public onlyOwner {\\n        crossChainOperator[operator] = value;\\n    }\\n\\n    uint16 public counterForBankWallets;\\n    address[] public bankWallets;\\n    function addBankWallet(address wallet) public onlyOwner {\\n        for (uint i = 0; i < bankWallets.length; i++) {\\n            if (bankWallets[i] == wallet) {\\n                require(false, \\\"Wallet already added\\\");\\n            }\\n        }\\n        bankWallets.push(wallet);\\n    }\\n    function removeBankWallet(address wallet) public onlyOwner {\\n        for (uint i = 0; i < bankWallets.length; i++) {\\n            if (bankWallets[i] == wallet) {\\n                bankWallets[i] = bankWallets[bankWallets.length - 1];\\n                bankWallets.pop();\\n            }\\n        }\\n    }\\n    address public treasuryWallets;\\n    function setTreasuryWallet(address wallet) public onlyOwner {\\n        treasuryWallets = wallet;\\n    }\\n    IERC20Metadata public paymentToken;\\n    function setPaymentToken(address _paymentToken) public onlyOwner {\\n        paymentToken = IERC20Metadata(_paymentToken);\\n    }\\n    CyclixRandomizerInterface public randomizer;\\n    LotteryReaderInterface public reader;\\n    uint256 public ticketPrice;\\n    function setTicketPrice(uint256 _ticketPrice) public onlyOwner {\\n        ticketPrice = _ticketPrice;\\n    }\\n\\n    bool public freeRoundsAreEnabled = false;\\n    function setFreeRoundsOnPurchase(bool v) public onlyOwner {\\n        freeRoundsAreEnabled = v;\\n    }\\n\\n    uint16 public percentageOfReferralWinners = 10;\\n    function setPercentageOfReferralWinners(uint16 percentage) public onlyOwner {\\n        percentageOfReferralWinners = percentage;\\n    }\\n\\n    function setPoolPercentagesBasePoints(uint16[] memory _poolPercentagesBasePoints) public onlyOwner {\\n        LotteryRoundInterface(rounds[roundCount - 1]).setPoolPercentagesBasePoints(_poolPercentagesBasePoints);\\n    }\\n\\n    LotteryRoundCreatorInterface public lotteryRoundCreator;\\n\\n    constructor(address cyclixRandomizer, address lotteryReader, address _lotteryRoundCreator, address _paymentToken, uint256 _ticketPrice)\\n    EmergencyFunctions(msg.sender) {\\n        randomizer = CyclixRandomizerInterface(cyclixRandomizer);\\n        randomizer.registerGameContract(address(this), \\\"LotteryMasterV0.1\\\");\\n        reader = LotteryReaderInterface(lotteryReader);\\n        lotteryRoundCreator = LotteryRoundCreatorInterface(_lotteryRoundCreator);\\n        paymentToken = IERC20Metadata(_paymentToken);\\n        ticketPrice = _ticketPrice * (10 ** uint256(paymentToken.decimals()));\\n        treasuryWallets = msg.sender;\\n        bankWallets.push(msg.sender);\\n    }\\n\\n    function startNewRound(uint256 _statusEndTime) public onlyOwner {\\n        roundCount++;\\n        if (roundCount > 1) {\\n            rounds.push(lotteryRoundCreator.startNewRound(_statusEndTime, rounds[roundCount - 2]));\\n            require(LotteryRoundInterface(rounds[roundCount - 2]).getRound().ended, \\\"Previous round not ended\\\");\\n            require(rounds[roundCount - 2] == LotteryRoundInterface(rounds[roundCount - 1]).previousRound(), \\\"Previous round not propagated correctly\\\");\\n        } else {\\n            rounds.push(lotteryRoundCreator.startNewRound(_statusEndTime, address(0)));\\n        }\\n        lotteryStatus = LotteryStatuses.DrawOpen;\\n        statusStartTime = block.timestamp;\\n        statusEndTime = block.timestamp + _statusEndTime;\\n    }\\n\\n    function buyTickets(uint256 chainId, uint16[] memory moreTicketNumbers, address referral, address buyer) public {\\n        for (uint i = 0; i < moreTicketNumbers.length; i += 6) {\\n            uint16[] memory chosenNumbers = new uint16[](6);\\n            for (uint j = 0; j < 6; j++) {\\n                chosenNumbers[j] = moreTicketNumbers[i + j];\\n            }\\n            buyTicket(chainId, chosenNumbers, referral, buyer);\\n        }\\n    }\\n\\n    function buyTicket(uint256 chainId, uint16[] memory chosenNumbers, address referral, address buyer) public {\\n        require(freeRounds[buyer] > 0\\n        || paymentToken.allowance(buyer, address(this)) >= ticketPrice\\n        || crossChainOperator[msg.sender], \\\"Missing Allowance\\\");\\n        LotteryRoundInterface lotteryRound = LotteryRoundInterface(rounds[roundCount - 1]);\\n        if (freeRounds[buyer] > 0) {\\n            freeRounds[buyer]--;\\n        } else {\\n            if (!crossChainOperator[msg.sender]) {\\n                require(paymentToken.balanceOf(tx.origin) >= ticketPrice, \\\"Insufficient funds\\\");\\n                counterForBankWallets = uint16(counterForBankWallets++ % bankWallets.length);\\n                uint256 treasuryAmount = lotteryRound.treasuryAmountOnTicket(ticketPrice);\\n                SafeERC20.safeTransferFrom(paymentToken, buyer, bankWallets[counterForBankWallets], ticketPrice - treasuryAmount);\\n                SafeERC20.safeTransferFrom(paymentToken, buyer, treasuryWallets, treasuryAmount);\\n            }\\n            lotteryRound.updateVictoryPoolForTicket(ticketPrice);\\n            addFreeRoundForBuyTicket(buyer, referral);\\n        }\\n\\n        lotteryRound.buyTicket(chainId, chosenNumbers, referral, buyer);\\n    }\\n\\n    function addFreeRoundForBuyTicket(address buyer, address referral) internal {\\n        if (referral != address(0) && freeRoundsAreEnabled) {\\n            freeRounds[buyer]++;\\n            freeRounds[referral]++;\\n        }\\n    }\\n\\n    function addFreeRound(address[] calldata participant) public onlyOwner {\\n        for (uint i = 0; i < participant.length; i++) {\\n            freeRounds[participant[i]]++;\\n        }\\n    }\\n\\n    mapping(uint256 => uint256) public publicRoundRandomNumbersRequestId;\\n\\n    function closeRound(uint256 _statusEndTime) external onlyOwner {\\n        LotteryRoundInterface lotteryRound = LotteryRoundInterface(rounds[roundCount - 1]);\\n        lotteryRound.closeRound();\\n        uint16 referralWinners = reader.numberOfReferralWinnersForRoundId(roundCount);\\n        publicRoundRandomNumbersRequestId[roundCount] = randomizer.requestRandomWords(6 + referralWinners);\\n        lotteryStatus = LotteryStatuses.EvaluatingResults;\\n        statusStartTime = block.timestamp;\\n        statusEndTime = block.timestamp + _statusEndTime;\\n    }\\n\\n    function fetchRoundNumbers(uint256 roundId, uint256 _statusEndTime) external onlyOwner {\\n        LotteryRoundInterface round = LotteryRoundInterface(rounds[roundId - 1]);\\n        round.couldReceiveWinningNumbers();\\n        (bool fulfilled, uint256[] memory randomWords) = randomizer.getRequestStatus(publicRoundRandomNumbersRequestId[roundId]);\\n        require(fulfilled, \\\"Random numbers not ready\\\");\\n        uint16[] memory roundNumbers = new uint16[](6);\\n        uint16[] memory referralWinnersNumber = new uint16[](randomWords.length - 6);\\n        if (fulfilled) {\\n            for (uint i = 0; i < 6; i++) {\\n                roundNumbers[i] = reader.getRandomUniqueNumberInArrayForMaxValue(randomWords[i], 69, roundNumbers);\\n            }\\n            roundNumbers[5] = uint16(randomWords[5] % 26 + 1);\\n            for (uint i = 6; i < randomWords.length; i++) {\\n                referralWinnersNumber [i - 6] = reader.getRandomUniqueNumberInArrayForMaxValue(randomWords[i],\\n                    round.getRound().referralCounts, referralWinnersNumber);\\n            }\\n        }\\n        round.storeWinningNumbers(roundNumbers, referralWinnersNumber);\\n        lotteryStatus = LotteryStatuses.ResultsEvaluated;\\n        statusStartTime = block.timestamp;\\n        statusEndTime = block.timestamp + _statusEndTime;\\n    }\\n\\n    function markWinners(uint256 roundId, uint256 claimingTimeInSeconds) public onlyOwner {\\n        LotteryRoundInterface(rounds[roundId - 1]).markWinners(reader.evaluateWonResultsForTickets(roundId), reader.evaluateWonResultsForReferral(roundId));\\n        lotteryStatus = LotteryStatuses.ClaimInProgress;\\n        statusStartTime = block.timestamp;\\n        statusEndTime = block.timestamp + claimingTimeInSeconds;\\n    }\\n\\n    function claimVictory(uint256 ticketId) public {\\n        LotteryRoundInterface lotteryRound = LotteryRoundInterface(rounds[roundCount - 1]);\\n        Ticket memory ticket = lotteryRound.ticketById(ticketId);\\n        require(ticket.id == ticketId, \\\"Invalid ticket id\\\");\\n        require(ticket.participantAddress == msg.sender, \\\"Invalid ticket owner\\\");\\n        require(!ticket.claimed, \\\"Ticket already claimed\\\");\\n        require(lotteryRound.getRound().ended, \\\"Round not ended\\\");\\n        require(lotteryStatus == LotteryStatuses.ClaimInProgress, \\\"Claim not started\\\");\\n        require(block.timestamp > statusStartTime, \\\"Claim not started: too early\\\");\\n        require(block.timestamp < statusEndTime, \\\"Claim not started: too late\\\");\\n        require(ticket.victoryTier != RoundVictoryTier.NO_WIN, \\\"No prize for this ticket\\\");\\n        require(ticket.victoryTier == reader.evaluateWonResultsForOneTicket(lotteryRound.getRound().id, ticketId).victoryTier, \\\"Invalid ticket tier\\\");\\n        unchecked {\\n            uint256 amountWon = lotteryRound.victoryTierAmounts(ticket.victoryTier) / lotteryRound.winnersForEachTier(ticket.victoryTier);\\n            require(paymentToken.balanceOf(address(this)) >= amountWon, \\\"Not enough funds on contract\\\");\\n            LotteryRoundInterface(rounds[roundCount - 1]).markVictoryClaimed(ticketId, amountWon);\\n            paymentToken.transfer(msg.sender, amountWon);\\n        }\\n    }\\n\\n    function claimReferralVictory(uint256 referralTicketId) public {\\n        LotteryRoundInterface lotteryRound = LotteryRoundInterface(rounds[roundCount - 1]);\\n        ReferralTicket memory referralTicket = lotteryRound.referralTicketById(referralTicketId);\\n        require(referralTicket.id == referralTicketId, \\\"Invalid ticket id\\\");\\n        require(referralTicket.referralAddress == msg.sender, \\\"Invalid ticket owner\\\");\\n        require(!referralTicket.claimed, \\\"Ticket already claimed\\\");\\n        require(lotteryRound.getRound().ended, \\\"Round not ended\\\");\\n        require(referralTicket.winner == true, \\\"No prize for this ticket\\\");\\n        require(referralTicket.winner == reader.evaluateWonResultsForOneReferralTicket(lotteryRound.getRound().id, referralTicketId).won, \\\"Invalid ticket tier\\\");\\n        unchecked {\\n            uint256 amountWon = lotteryRound.victoryTierAmounts(RoundVictoryTier.Referrer) / reader.numberOfReferralWinnersForRoundId(lotteryRound.getRound().id);\\n            require(paymentToken.balanceOf(address(this)) >= amountWon, \\\"Not enough funds on contract\\\");\\n            LotteryRoundInterface(rounds[roundCount - 1]).markReferralVictoryClaimed(referralTicketId, amountWon);\\n            paymentToken.transfer(msg.sender, amountWon);\\n        }\\n    }\\n}\",\"keccak256\":\"0x9c5de79ae5642aa676181c14cb73aa0181492303f5294e39492a2fa60f36a4ae\",\"license\":\"UNLICENSED\"},\"contracts/LotteryReaderInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {TestFunctions} from \\\"./utils/TestUtils.sol\\\";\\nimport {CyclixRandomizerInterface} from \\\"./CyclixRandomizerInterface.sol\\\";\\nimport {EmergencyFunctions} from \\\"./utils/EmergencyFunctions.sol\\\";\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\n\\ninterface LotteryReaderInterface {\\n    function poolForVictoryTier(uint256 roundId, RoundVictoryTier victoryTier) external view returns(uint256) ;\\n    function poolForReferral(uint256 roundId) external view returns(uint256) ;\\n    function tokenHoldersPoolAmount(uint256 roundId) external view returns (uint256) ;\\n    function treasuryPoolAmount(uint256 roundId) external view returns (uint256) ;\\n    function numberOfReferralWinnersForRoundId(uint256 roundId) external view returns (uint16) ;\\n    function existInArrayNumber(uint16 num, uint16[] memory arr) external pure returns (bool) ;\\n    function notExistInArrayNumber(uint16 num, uint16[] memory arr) external pure returns (bool) ;\\n    function getRandomUniqueNumberInArrayForMaxValue(uint256 randomNumber, uint16 maxValue, uint16[] memory arr) external pure returns (uint16) ;\\n    function tierFromResults(uint16 rightNumbersForTicket, bool powerNumberFound) external pure returns (RoundVictoryTier) ;\\n    function evaluateWonResultsForOneTicket(uint256 roundId, uint256 ticketId) external view returns (TicketResults memory);\\n    function evaluateWonResultsForTickets(uint256 roundId) external view returns (TicketResults[] memory);\\n    function evaluateWonResultsForOneReferralTicket(uint256 roundId, uint256 referralTicketId) external view returns (ReferralTicketResults memory);\\n    function evaluateWonResultsForReferral(uint256 roundId) external view returns (ReferralTicketResults[] memory);\\n    function amountWonInRound(uint256 roundId) external view returns (uint256) ;\\n}\",\"keccak256\":\"0x3a2614be9037e4f45b023a1701fe19d1c1f9ecaf3c9103e35764d7c1ada244a4\",\"license\":\"UNLICENSED\"},\"contracts/LotteryRoundCreatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\ninterface LotteryRoundCreatorInterface {\\n   function startNewRound(uint256 roundDurationInSeconds, address previousRoundAddress) external returns(address);\\n}\",\"keccak256\":\"0x758edc675f9d3b6e91d052e64cf4ea0495d6639542acf1d41ddb2a4c825a392a\",\"license\":\"UNLICENSED\"},\"contracts/LotteryRoundInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\n\\ninterface LotteryRoundInterface {\\n    function getRound() external returns(Round memory);\\n    function previousRound() external returns(address);\\n    function markWinners(TicketResults[] memory ticketResults, ReferralTicketResults[] memory referralTicketResults) external;\\n    function markVictoryClaimed(uint256 ticketId, uint256 amountClaimed) external;\\n    function markReferralVictoryClaimed(uint256 referralTicketId, uint256 amountClaimed) external;\\n    function treasuryAmountOnTicket(uint256 paymentTokenAmount) external view returns (uint256);\\n    function updateVictoryPoolForTicket(uint256 paymentTokenAmount) external;\\n    function buyTicket(uint256 chainId, uint16[] memory chosenNumbers, address referral, address buyer) external;\\n    function closeRound() external;\\n    function couldReceiveWinningNumbers() external view;\\n    function storeWinningNumbers(uint16[] memory roundNumbers, uint16[] memory referralWinnersNumber) external;\\n    function ticketById(uint256 ticketId) external view returns (Ticket memory);\\n    function numbersForTicketId(uint256 ticketId) external view returns (uint16[] memory);\\n    function referralTicketById(uint256 index) external view returns (ReferralTicket memory);\\n    function victoryTierAmounts(RoundVictoryTier tier) external view returns (uint256);\\n    function winnersForEachTier(RoundVictoryTier tier) external returns(uint256);\\n    function setPoolPercentagesBasePoints(uint16[] memory _poolPercentagesBasePoints) external;\\n}\",\"keccak256\":\"0xaf0ab80798c6142a9cf867a7f998c58ab2a980ef5b81ac2451ac83da18e20457\",\"license\":\"UNLICENSED\"},\"contracts/utils/EmergencyFunctions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract EmergencyFunctions is Ownable {\\n    address internal teamAddress;\\n    constructor(address _teamAddress) Ownable(_teamAddress) {\\n        teamAddress = _teamAddress;\\n    }\\n\\n    function updateTeamAddress(address _teamAddress) public onlyOwner {\\n        teamAddress = _teamAddress;\\n    }\\n\\n    // Emergency Functions\\n    function sendTokenToTeam(address _token) public onlyOwner {\\n        uint256 amount = IERC20(_token).balanceOf(address(this));\\n        if (amount > 0) {\\n            SafeERC20.safeTransfer(IERC20(_token), teamAddress, amount);\\n        }\\n    }\\n\\n    function sendCryptoToTeam() public onlyOwner {\\n        if (address(this).balance > 0) {\\n            payable(teamAddress).transfer(address(this).balance);\\n        }\\n    }\\n\\n    /** @notice Check if an address is a contract */\\n    function _isContract(address _addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x68dcc6a4104e2905f65c342fdb2dbde1908113d10c006f5857b52dc0bbefd419\",\"license\":\"MIT\"},\"contracts/utils/TestUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.x <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IERC20Extension {\\n    function decimals() external view returns (uint8);\\n}\\n\\ncontract TestFunctions is Ownable {\\n    constructor() Ownable(msg.sender) {}\\n    //Used for mock testing, contract ownership will be renounced on release\\n    uint public currentTimestampOverride;\\n    function updateCurrentTimestampOverride(uint _v) external onlyOwner {\\n        currentTimestampOverride = _v;\\n    }\\n    function currentTimestamp() public view returns(uint) {\\n        if (currentTimestampOverride > 0) {\\n            return currentTimestampOverride;\\n        }\\n        return block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x8edb22ef91efc1d38ffbd50b48821f4fe23bdaf84a14de75d0df8231eb772bc4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000601060006101000a81548160ff021916908315150217905550600a601060016101000a81548161ffff021916908361ffff1602179055503480156200004a57600080fd5b506040516200691c3803806200691c8339818101604052810190620000709190620005a0565b3380600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000e75760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000de919062000639565b60405180910390fd5b620000f8816200043760201b60201c565b5080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505084600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cd0f2311306040518263ffffffff1660e01b8152600401620001d99190620006b7565b600060405180830381600087803b158015620001f457600080fd5b505af115801562000209573d6000803e3d6000fd5b5050505083600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082601060036101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200033e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000364919062000727565b60ff16600a620003759190620008dc565b816200038291906200092d565b600f8190555033600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600a339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505062000978565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200052d8262000500565b9050919050565b6200053f8162000520565b81146200054b57600080fd5b50565b6000815190506200055f8162000534565b92915050565b6000819050919050565b6200057a8162000565565b81146200058657600080fd5b50565b6000815190506200059a816200056f565b92915050565b600080600080600060a08688031215620005bf57620005be620004fb565b5b6000620005cf888289016200054e565b9550506020620005e2888289016200054e565b9450506040620005f5888289016200054e565b935050606062000608888289016200054e565b92505060806200061b8882890162000589565b9150509295509295909350565b620006338162000520565b82525050565b600060208201905062000650600083018462000628565b92915050565b600082825260208201905092915050565b7f4c6f74746572794d617374657256302e31000000000000000000000000000000600082015250565b60006200069f60118362000656565b9150620006ac8262000667565b602082019050919050565b6000604082019050620006ce600083018462000628565b8181036020830152620006e18162000690565b905092915050565b600060ff82169050919050565b6200070181620006e9565b81146200070d57600080fd5b50565b6000815190506200072181620006f6565b92915050565b60006020828403121562000740576200073f620004fb565b5b6000620007508482850162000710565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115620007e757808604811115620007bf57620007be62000759565b5b6001851615620007cf5780820291505b8081029050620007df8562000788565b94506200079f565b94509492505050565b600082620008025760019050620008d5565b81620008125760009050620008d5565b81600181146200082b576002811462000836576200086c565b6001915050620008d5565b60ff8411156200084b576200084a62000759565b5b8360020a91508482111562000865576200086462000759565b5b50620008d5565b5060208310610133831016604e8410600b8410161715620008a65782820a905083811115620008a0576200089f62000759565b5b620008d5565b620008b5848484600162000795565b92509050818404811115620008cf57620008ce62000759565b5b81810290505b9392505050565b6000620008e98262000565565b9150620008f68362000565565b9250620009257fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484620007f0565b905092915050565b60006200093a8262000565565b9150620009478362000565565b9250828202620009578162000565565b9150828204841483151762000971576200097062000759565b5b5092915050565b615f9480620009886000396000f3fe608060405234801561001057600080fd5b50600436106102535760003560e01c806388e01a9811610146578063b62fe01b116100c3578063d4fc42c611610087578063d4fc42c61461066c578063e03d753a1461068a578063eb7165fa146106a8578063f10fb584146106c4578063f2fde38b146106e2578063f4dec22b146106fe57610253565b8063b62fe01b146105de578063ba968494146105fa578063bbd1783a14610616578063c96acb5a14610620578063cedd1bc31461063c57610253565b8063998da3e91161010a578063998da3e914610552578063a8602fea1461056e578063a8eed12d1461058a578063b086f3c0146105a6578063b33d8c54146105c257610253565b806388e01a98146104ae5780638c65c81f146104ca5780638da5cb5b146104fa57806392566fdd146105185780639469f2931461053657610253565b8063258799f8116101d45780634ff776b8116101985780634ff776b8146104325780636a326ab11461044e578063715018a61461046a5780637a5ed7211461047457806387da46f11461049057610253565b8063258799f81461038e5780633013ce29146103be57806339c834e9146103dc5780633fda7d95146103f85780634615102c1461041657610253565b806314eb76ac1161021b57806314eb76ac146102ec57806315981650146103085780631e410ddb146103245780631fcebf6814610340578063224294291461037057610253565b80630d683dd9146102585780630f5c49de14610276578063104dc360146102925780631209b1f6146102b0578063127f0b3f146102ce575b600080fd5b61026061071c565b60405161026d9190613f8f565b60405180910390f35b610290600480360381019061028b9190613ff6565b61072f565b005b61029a610754565b6040516102a79190614064565b60405180910390f35b6102b861077a565b6040516102c59190614098565b60405180910390f35b6102d6610780565b6040516102e39190614098565b60405180910390f35b610306600480360381019061030191906140df565b610786565b005b610322600480360381019061031d9190614138565b6107d2565b005b61033e6004803603810190610339919061419f565b6107e4565b005b61035a600480360381019061035591906140df565b61080c565b60405161036791906141db565b60405180910390f35b61037861082d565b6040516103859190614098565b60405180910390f35b6103a860048036038101906103a39190614138565b610833565b6040516103b59190614064565b60405180910390f35b6103c6610872565b6040516103d39190614255565b60405180910390f35b6103f660048036038101906103f191906140df565b610898565b005b610400610a26565b60405161040d9190614098565b60405180910390f35b610430600480360381019061042b9190614138565b610a2c565b005b61044c60048036038101906104479190614138565b610f6d565b005b610468600480360381019061046391906140df565b611823565b005b61047261186f565b005b61048e600480360381019061048991906143c9565b611883565b005b61049861196e565b6040516104a5919061446d565b60405180910390f35b6104c860048036038101906104c39190614138565b611994565b005b6104e460048036038101906104df9190614138565b611bfb565b6040516104f19190614064565b60405180910390f35b610502611c3a565b60405161050f9190614064565b60405180910390f35b610520611c63565b60405161052d91906141db565b60405180910390f35b610550600480360381019061054b9190614488565b611c77565b005b61056c600480360381019061056791906140df565b611d39565b005b610588600480360381019061058391906140df565b611dfa565b005b6105a4600480360381019061059f91906144d1565b611e46565b005b6105c060048036038101906105bb9190614138565b611ea9565b005b6105dc60048036038101906105d7919061456c565b6126b8565b005b6105f860048036038101906105f391906145b9565b61277f565b005b610614600480360381019061060f91906140df565b612d7b565b005b61061e612eba565b005b61063a600480360381019061063591906145b9565b612f37565b005b61065660048036038101906106519190614138565b61317e565b6040516106639190614098565b60405180910390f35b610674613196565b604051610681919061461a565b60405180910390f35b6106926131bc565b60405161069f9190614644565b60405180910390f35b6106c260048036038101906106bd91906143c9565b6131cf565b005b6106cc613873565b6040516106d99190614680565b60405180910390f35b6106fc60048036038101906106f791906140df565b613899565b005b61070661391f565b60405161071391906141db565b60405180910390f35b600460009054906101000a900460ff1681565b610737613933565b80601060006101000a81548160ff02191690831515021790555050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600f5481565b60025481565b61078e613933565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6107da613933565b80600f8190555050565b6107ec613933565b80601060016101000a81548161ffff021916908361ffff16021790555050565b60076020528060005260406000206000915054906101000a900461ffff1681565b60065481565b600a818154811061084357600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6108a0613933565b60005b600a80549050811015610a22578173ffffffffffffffffffffffffffffffffffffffff16600a82815481106108db576108da61469b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610a1557600a6001600a8054905061093591906146f9565b815481106109465761094561469b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a82815481106109855761098461469b565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600a8054806109df576109de61472d565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590555b80806001019150506108a3565b5050565b60055481565b610a34613933565b60026000815480929190610a479061475c565b919050555060016002541115610e22576003601060039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166363ea940f83600360028054610aa891906146f9565b81548110610ab957610ab861469b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401610b019291906147a4565b6020604051808303816000875af1158015610b20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4491906147e2565b9080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360028054610bb491906146f9565b81548110610bc557610bc461469b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b81526004016000604051808303816000875af1158015610c3c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610c659190614b2e565b60600151610ca8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9f90614bd4565b60405180910390fd5b60036001600254610cb991906146f9565b81548110610cca57610cc961469b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b288e1a96040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610d41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6591906147e2565b73ffffffffffffffffffffffffffffffffffffffff16600360028054610d8b91906146f9565b81548110610d9c57610d9b61469b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610e1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1490614c66565b60405180910390fd5b610f26565b6003601060039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166363ea940f8360006040518363ffffffff1660e01b8152600401610e829291906147a4565b6020604051808303816000875af1158015610ea1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec591906147e2565b9080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6000600460006101000a81548160ff02191690836003811115610f4c57610f4b613f18565b5b0217905550426005819055508042610f649190614c86565b60068190555050565b600060036001600254610f8091906146f9565b81548110610f9157610f9061469b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff16639b7be8fc846040518263ffffffff1660e01b8152600401610ff99190614098565b60c060405180830381865afa158015611016573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103a9190614d7f565b905082816000015114611082576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107990614df8565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff16146110f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110eb90614e64565b60405180910390fd5b806060015115611139576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113090614ed0565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b81526004016000604051808303816000875af1158015611186573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906111af9190614b2e565b606001516111f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e990614f3c565b60405180910390fd5b60038081111561120557611204613f18565b5b600460009054906101000a900460ff16600381111561122757611226613f18565b5b14611267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125e90614fa8565b60405180910390fd5b60055442116112ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a290615014565b60405180910390fd5b60065442106112ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e690615080565b60405180910390fd5b6000600a81111561130357611302613f18565b5b8160a00151600a81111561131a57611319613f18565b5b0361135a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611351906150ec565b60405180910390fd5b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632aa601708373ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b81526004016000604051808303816000875af11580156113e5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061140e9190614b2e565b60000151856040518363ffffffff1660e01b815260040161143092919061510c565b6040805180830381865afa15801561144c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114709190615185565b60200151600a81111561148657611485613f18565b5b8160a00151600a81111561149d5761149c613f18565b5b146114dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d4906151fe565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1663efa3d5318360a001516040518263ffffffff1660e01b815260040161151c9190615266565b6020604051808303816000875af115801561153b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155f9190615281565b8373ffffffffffffffffffffffffffffffffffffffff1663e2e308308460a001516040518263ffffffff1660e01b815260040161159c9190615266565b602060405180830381865afa1580156115b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115dd9190615281565b816115eb576115ea6152ae565b5b04905080600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161164a9190614064565b602060405180830381865afa158015611667573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168b9190615281565b10156116cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116c390615329565b60405180910390fd5b6003600160025403815481106116e5576116e461469b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382e5892385836040518363ffffffff1660e01b815260040161174a92919061510c565b600060405180830381600087803b15801561176457600080fd5b505af1158015611778573d6000803e3d6000fd5b50505050600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016117d9929190615349565b6020604051808303816000875af11580156117f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181c9190615372565b5050505050565b61182b613933565b80600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611877613933565b61188160006139ba565b565b60005b8351811015611967576000600667ffffffffffffffff8111156118ac576118ab614286565b5b6040519080825280602002602001820160405280156118da5781602001602082028036833780820191505090505b50905060005b6006811015611945578581846118f69190614c86565b815181106119075761190661469b565b5b60200260200101518282815181106119225761192161469b565b5b602002602001019061ffff16908161ffff168152505080806001019150506118e0565b50611952868286866131cf565b506006816119609190614c86565b9050611886565b5050505050565b601060039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61199c613933565b6000600360016002546119af91906146f9565b815481106119c0576119bf61469b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663e278fe6f6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611a3557600080fd5b505af1158015611a49573d6000803e3d6000fd5b505050506000600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f1664df66002546040518263ffffffff1660e01b8152600401611aac9190614098565b602060405180830381865afa158015611ac9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aed919061539f565b9050600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e726f2e1826006611b3a91906153cc565b6040518263ffffffff1660e01b8152600401611b569190615443565b6020604051808303816000875af1158015611b75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b999190615281565b601160006002548152602001908152602001600020819055506001600460006101000a81548160ff02191690836003811115611bd857611bd7613f18565b5b0217905550426005819055508242611bf09190614c86565b600681905550505050565b60038181548110611c0b57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600960009054906101000a900461ffff1681565b611c7f613933565b60036001600254611c9091906146f9565b81548110611ca157611ca061469b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639469f293826040518263ffffffff1660e01b8152600401611d04919061551c565b600060405180830381600087803b158015611d1e57600080fd5b505af1158015611d32573d6000803e3d6000fd5b5050505050565b611d41613933565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611d7c9190614064565b602060405180830381865afa158015611d99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dbd9190615281565b90506000811115611df657611df582600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683613a7e565b5b5050565b611e02613933565b80600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611e4e613933565b80600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600060036001600254611ebc91906146f9565b81548110611ecd57611ecc61469b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663dd85ae5f846040518263ffffffff1660e01b8152600401611f359190614098565b60a060405180830381865afa158015611f52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7691906155ca565b905082816000015114611fbe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fb590614df8565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1614612030576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161202790614e64565b60405180910390fd5b806080015115612075576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161206c90614ed0565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b81526004016000604051808303816000875af11580156120c2573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906120eb9190614b2e565b6060015161212e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161212590614f3c565b60405180910390fd5b600115158160600151151514612179576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612170906150ec565b60405180910390fd5b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663078a6dbf8373ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b81526004016000604051808303816000875af1158015612204573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061222d9190614b2e565b60000151856040518363ffffffff1660e01b815260040161224f92919061510c565b6040805180830381865afa15801561226b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061228f9190615647565b60200151151581606001511515146122dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122d3906151fe565b60405180910390fd5b6000600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f1664df68473ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b81526004016000604051808303816000875af1158015612369573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906123929190614b2e565b600001516040518263ffffffff1660e01b81526004016123b29190614098565b602060405180830381865afa1580156123cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123f3919061539f565b61ffff168373ffffffffffffffffffffffffffffffffffffffff1663e2e3083060076040518263ffffffff1660e01b81526004016124319190615266565b602060405180830381865afa15801561244e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124729190615281565b816124805761247f6152ae565b5b04905080600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016124df9190614064565b602060405180830381865afa1580156124fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125209190615281565b1015612561576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161255890615329565b60405180910390fd5b60036001600254038154811061257a5761257961469b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630cee803c85836040518363ffffffff1660e01b81526004016125df92919061510c565b600060405180830381600087803b1580156125f957600080fd5b505af115801561260d573d6000803e3d6000fd5b50505050600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161266e929190615349565b6020604051808303816000875af115801561268d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126b19190615372565b5050505050565b6126c0613933565b60005b8282905081101561277a57600760008484848181106126e5576126e461469b565b5b90506020020160208101906126fa91906140df565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081819054906101000a900461ffff168092919061275290615674565b91906101000a81548161ffff021916908361ffff1602179055505080806001019150506126c3565b505050565b612787613933565b6000600360018461279891906146f9565b815481106127a9576127a861469b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663343f25666040518163ffffffff1660e01b815260040160006040518083038186803b15801561281c57600080fd5b505afa158015612830573d6000803e3d6000fd5b50505050600080600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d8a4676f60116000888152602001908152602001600020546040518263ffffffff1660e01b81526004016128a59190614098565b600060405180830381865afa1580156128c2573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906128eb919061569e565b915091508161292f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161292690615746565b60405180910390fd5b6000600667ffffffffffffffff81111561294c5761294b614286565b5b60405190808252806020026020018201604052801561297a5781602001602082028036833780820191505090505b50905060006006835161298d91906146f9565b67ffffffffffffffff8111156129a6576129a5614286565b5b6040519080825280602002602001820160405280156129d45781602001602082028036833780820191505090505b5090508315612cc15760005b6006811015612ada57600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c746a8a858381518110612a3a57612a3961469b565b5b60200260200101516045866040518463ffffffff1660e01b8152600401612a63939291906157a1565b602060405180830381865afa158015612a80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aa4919061539f565b838281518110612ab757612ab661469b565b5b602002602001019061ffff16908161ffff168152505080806001019150506129e0565b506001601a84600581518110612af357612af261469b565b5b6020026020010151612b0591906157df565b612b0f9190614c86565b82600581518110612b2357612b2261469b565b5b602002602001019061ffff16908161ffff16815250506000600690505b8351811015612cbf57600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c746a8a858381518110612b9a57612b9961469b565b5b60200260200101518873ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b81526004016000604051808303816000875af1158015612bef573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612c189190614b2e565b6101400151856040518463ffffffff1660e01b8152600401612c3c93929190615810565b602060405180830381865afa158015612c59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c7d919061539f565b82600683612c8b91906146f9565b81518110612c9c57612c9b61469b565b5b602002602001019061ffff16908161ffff16815250508080600101915050612b40565b505b8473ffffffffffffffffffffffffffffffffffffffff16632724d10483836040518363ffffffff1660e01b8152600401612cfc92919061584e565b600060405180830381600087803b158015612d1657600080fd5b505af1158015612d2a573d6000803e3d6000fd5b505050506002600460006101000a81548160ff02191690836003811115612d5457612d53613f18565b5b0217905550426005819055508542612d6c9190614c86565b60068190555050505050505050565b612d83613933565b60005b600a80549050811015612e53578173ffffffffffffffffffffffffffffffffffffffff16600a8281548110612dbe57612dbd61469b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603612e46576000612e45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e3c906158d1565b60405180910390fd5b5b8080600101915050612d86565b50600a819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b612ec2613933565b6000471115612f3557600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015612f33573d6000803e3d6000fd5b505b565b612f3f613933565b6003600183612f4e91906146f9565b81548110612f5f57612f5e61469b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633590bd3c600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c099ae19856040518263ffffffff1660e01b81526004016130009190614098565b600060405180830381865afa15801561301d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061304691906159b4565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d856f0d5866040518263ffffffff1660e01b81526004016130a19190614098565b600060405180830381865afa1580156130be573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906130e79190615ac0565b6040518363ffffffff1660e01b8152600401613104929190615cf2565b600060405180830381600087803b15801561311e57600080fd5b505af1158015613132573d6000803e3d6000fd5b505050506003600460006101000a81548160ff0219169083600381111561315c5761315b613f18565b5b02179055504260058190555080426131749190614c86565b6006819055505050565b60116020528060005260406000206000915090505481565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601060009054906101000a900460ff1681565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900461ffff1661ffff1611806132ce5750600f54600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e83306040518363ffffffff1660e01b815260040161328a929190615d29565b602060405180830381865afa1580156132a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132cb9190615281565b10155b806133225750600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b613361576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161335890615d9e565b60405180910390fd5b60006003600160025461337491906146f9565b815481106133855761338461469b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900461ffff1661ffff16111561348957600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081819054906101000a900461ffff168092919061346990615dbe565b91906101000a81548161ffff021916908361ffff160217905550506137fb565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661378357600f54600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231326040518263ffffffff1660e01b81526004016135389190614064565b602060405180830381865afa158015613555573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135799190615281565b10156135ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135b190615e33565b60405180910390fd5b600a805490506009600081819054906101000a900461ffff16809291906135e090615674565b91906101000a81548161ffff021916908361ffff16021790555061ffff1661360891906157df565b600960006101000a81548161ffff021916908361ffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff1663af33d08f600f546040518263ffffffff1660e01b81526004016136619190614098565b602060405180830381865afa15801561367e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136a29190615281565b9050613731600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600a600960009054906101000a900461ffff1661ffff16815481106136f3576136f261469b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600f5461372c91906146f9565b613afd565b613781600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684613afd565b505b8073ffffffffffffffffffffffffffffffffffffffff1663b56c12b4600f546040518263ffffffff1660e01b81526004016137be9190614098565b600060405180830381600087803b1580156137d857600080fd5b505af11580156137ec573d6000803e3d6000fd5b505050506137fa8284613b7f565b5b8073ffffffffffffffffffffffffffffffffffffffff1663eb7165fa868686866040518563ffffffff1660e01b815260040161383a9493929190615e53565b600060405180830381600087803b15801561385457600080fd5b505af1158015613868573d6000803e3d6000fd5b505050505050505050565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6138a1613933565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036139135760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161390a9190614064565b60405180910390fd5b61391c816139ba565b50565b601060019054906101000a900461ffff1681565b61393b613cc2565b73ffffffffffffffffffffffffffffffffffffffff16613959611c3a565b73ffffffffffffffffffffffffffffffffffffffff16146139b85761397c613cc2565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016139af9190614064565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b613af8838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401613ab1929190615349565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613cca565b505050565b613b79848573ffffffffffffffffffffffffffffffffffffffff166323b872dd868686604051602401613b3293929190615e9f565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613cca565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015613bc85750601060009054906101000a900460ff165b15613cbe57600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081819054906101000a900461ffff1680929190613c2a90615674565b91906101000a81548161ffff021916908361ffff16021790555050600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081819054906101000a900461ffff1680929190613ca290615674565b91906101000a81548161ffff021916908361ffff160217905550505b5050565b600033905090565b6000613cf5828473ffffffffffffffffffffffffffffffffffffffff16613d6190919063ffffffff16565b90506000815114158015613d1a575080806020019051810190613d189190615372565b155b15613d5c57826040517f5274afe7000000000000000000000000000000000000000000000000000000008152600401613d539190614064565b60405180910390fd5b505050565b6060613d6f83836000613d77565b905092915050565b606081471015613dbe57306040517fcd786059000000000000000000000000000000000000000000000000000000008152600401613db59190614064565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff168486604051613de79190615f47565b60006040518083038185875af1925050503d8060008114613e24576040519150601f19603f3d011682016040523d82523d6000602084013e613e29565b606091505b5091509150613e39868383613e44565b925050509392505050565b606082613e5957613e5482613ed3565b613ecb565b60008251148015613e81575060008473ffffffffffffffffffffffffffffffffffffffff163b145b15613ec357836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401613eba9190614064565b60405180910390fd5b819050613ecc565b5b9392505050565b600081511115613ee65780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110613f5857613f57613f18565b5b50565b6000819050613f6982613f47565b919050565b6000613f7982613f5b565b9050919050565b613f8981613f6e565b82525050565b6000602082019050613fa46000830184613f80565b92915050565b6000604051905090565b600080fd5b600080fd5b60008115159050919050565b613fd381613fbe565b8114613fde57600080fd5b50565b600081359050613ff081613fca565b92915050565b60006020828403121561400c5761400b613fb4565b5b600061401a84828501613fe1565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061404e82614023565b9050919050565b61405e81614043565b82525050565b60006020820190506140796000830184614055565b92915050565b6000819050919050565b6140928161407f565b82525050565b60006020820190506140ad6000830184614089565b92915050565b6140bc81614043565b81146140c757600080fd5b50565b6000813590506140d9816140b3565b92915050565b6000602082840312156140f5576140f4613fb4565b5b6000614103848285016140ca565b91505092915050565b6141158161407f565b811461412057600080fd5b50565b6000813590506141328161410c565b92915050565b60006020828403121561414e5761414d613fb4565b5b600061415c84828501614123565b91505092915050565b600061ffff82169050919050565b61417c81614165565b811461418757600080fd5b50565b60008135905061419981614173565b92915050565b6000602082840312156141b5576141b4613fb4565b5b60006141c38482850161418a565b91505092915050565b6141d581614165565b82525050565b60006020820190506141f060008301846141cc565b92915050565b6000819050919050565b600061421b61421661421184614023565b6141f6565b614023565b9050919050565b600061422d82614200565b9050919050565b600061423f82614222565b9050919050565b61424f81614234565b82525050565b600060208201905061426a6000830184614246565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6142be82614275565b810181811067ffffffffffffffff821117156142dd576142dc614286565b5b80604052505050565b60006142f0613faa565b90506142fc82826142b5565b919050565b600067ffffffffffffffff82111561431c5761431b614286565b5b602082029050602081019050919050565b600080fd5b600061434561434084614301565b6142e6565b905080838252602082019050602084028301858111156143685761436761432d565b5b835b81811015614391578061437d888261418a565b84526020840193505060208101905061436a565b5050509392505050565b600082601f8301126143b0576143af614270565b5b81356143c0848260208601614332565b91505092915050565b600080600080608085870312156143e3576143e2613fb4565b5b60006143f187828801614123565b945050602085013567ffffffffffffffff81111561441257614411613fb9565b5b61441e8782880161439b565b935050604061442f878288016140ca565b9250506060614440878288016140ca565b91505092959194509250565b600061445782614222565b9050919050565b6144678161444c565b82525050565b6000602082019050614482600083018461445e565b92915050565b60006020828403121561449e5761449d613fb4565b5b600082013567ffffffffffffffff8111156144bc576144bb613fb9565b5b6144c88482850161439b565b91505092915050565b600080604083850312156144e8576144e7613fb4565b5b60006144f6858286016140ca565b925050602061450785828601613fe1565b9150509250929050565b600080fd5b60008083601f84011261452c5761452b614270565b5b8235905067ffffffffffffffff81111561454957614548614511565b5b6020830191508360208202830111156145655761456461432d565b5b9250929050565b6000806020838503121561458357614582613fb4565b5b600083013567ffffffffffffffff8111156145a1576145a0613fb9565b5b6145ad85828601614516565b92509250509250929050565b600080604083850312156145d0576145cf613fb4565b5b60006145de85828601614123565b92505060206145ef85828601614123565b9150509250929050565b600061460482614222565b9050919050565b614614816145f9565b82525050565b600060208201905061462f600083018461460b565b92915050565b61463e81613fbe565b82525050565b60006020820190506146596000830184614635565b92915050565b600061466a82614222565b9050919050565b61467a8161465f565b82525050565b60006020820190506146956000830184614671565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006147048261407f565b915061470f8361407f565b9250828203905081811115614727576147266146ca565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60006147678261407f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614799576147986146ca565b5b600182019050919050565b60006040820190506147b96000830185614089565b6147c66020830184614055565b9392505050565b6000815190506147dc816140b3565b92915050565b6000602082840312156147f8576147f7613fb4565b5b6000614806848285016147cd565b91505092915050565b600080fd5b600080fd5b6000815190506148288161410c565b92915050565b60008151905061483d81613fca565b92915050565b60008151905061485281614173565b92915050565b600061486b61486684614301565b6142e6565b9050808382526020820190506020840283018581111561488e5761488d61432d565b5b835b818110156148b757806148a38882614843565b845260208401935050602081019050614890565b5050509392505050565b600082601f8301126148d6576148d5614270565b5b81516148e6848260208601614858565b91505092915050565b600067ffffffffffffffff82111561490a57614909614286565b5b602082029050602081019050919050565b600061492e614929846148ef565b6142e6565b905080838252602082019050602084028301858111156149515761495061432d565b5b835b8181101561497a57806149668882614819565b845260208401935050602081019050614953565b5050509392505050565b600082601f83011261499957614998614270565b5b81516149a984826020860161491b565b91505092915050565b600061016082840312156149c9576149c861480f565b5b6149d46101606142e6565b905060006149e484828501614819565b60008301525060206149f884828501614819565b6020830152506040614a0c84828501614819565b6040830152506060614a208482850161482e565b606083015250608082015167ffffffffffffffff811115614a4457614a43614814565b5b614a50848285016148c1565b60808301525060a082015167ffffffffffffffff811115614a7457614a73614814565b5b614a80848285016148c1565b60a08301525060c0614a9484828501614843565b60c08301525060e082015167ffffffffffffffff811115614ab857614ab7614814565b5b614ac484828501614984565b60e083015250610100614ad984828501614843565b6101008301525061012082015167ffffffffffffffff811115614aff57614afe614814565b5b614b0b84828501614984565b61012083015250610140614b2184828501614843565b6101408301525092915050565b600060208284031215614b4457614b43613fb4565b5b600082015167ffffffffffffffff811115614b6257614b61613fb9565b5b614b6e848285016149b2565b91505092915050565b600082825260208201905092915050565b7f50726576696f757320726f756e64206e6f7420656e6465640000000000000000600082015250565b6000614bbe601883614b77565b9150614bc982614b88565b602082019050919050565b60006020820190508181036000830152614bed81614bb1565b9050919050565b7f50726576696f757320726f756e64206e6f742070726f7061676174656420636f60008201527f72726563746c7900000000000000000000000000000000000000000000000000602082015250565b6000614c50602783614b77565b9150614c5b82614bf4565b604082019050919050565b60006020820190508181036000830152614c7f81614c43565b9050919050565b6000614c918261407f565b9150614c9c8361407f565b9250828201905080821115614cb457614cb36146ca565b5b92915050565b600b8110614cc757600080fd5b50565b600081519050614cd981614cba565b92915050565b600060c08284031215614cf557614cf461480f565b5b614cff60c06142e6565b90506000614d0f84828501614819565b6000830152506020614d23848285016147cd565b6020830152506040614d37848285016147cd565b6040830152506060614d4b8482850161482e565b6060830152506080614d5f84828501614819565b60808301525060a0614d7384828501614cca565b60a08301525092915050565b600060c08284031215614d9557614d94613fb4565b5b6000614da384828501614cdf565b91505092915050565b7f496e76616c6964207469636b6574206964000000000000000000000000000000600082015250565b6000614de2601183614b77565b9150614ded82614dac565b602082019050919050565b60006020820190508181036000830152614e1181614dd5565b9050919050565b7f496e76616c6964207469636b6574206f776e6572000000000000000000000000600082015250565b6000614e4e601483614b77565b9150614e5982614e18565b602082019050919050565b60006020820190508181036000830152614e7d81614e41565b9050919050565b7f5469636b657420616c726561647920636c61696d656400000000000000000000600082015250565b6000614eba601683614b77565b9150614ec582614e84565b602082019050919050565b60006020820190508181036000830152614ee981614ead565b9050919050565b7f526f756e64206e6f7420656e6465640000000000000000000000000000000000600082015250565b6000614f26600f83614b77565b9150614f3182614ef0565b602082019050919050565b60006020820190508181036000830152614f5581614f19565b9050919050565b7f436c61696d206e6f742073746172746564000000000000000000000000000000600082015250565b6000614f92601183614b77565b9150614f9d82614f5c565b602082019050919050565b60006020820190508181036000830152614fc181614f85565b9050919050565b7f436c61696d206e6f7420737461727465643a20746f6f206561726c7900000000600082015250565b6000614ffe601c83614b77565b915061500982614fc8565b602082019050919050565b6000602082019050818103600083015261502d81614ff1565b9050919050565b7f436c61696d206e6f7420737461727465643a20746f6f206c6174650000000000600082015250565b600061506a601b83614b77565b915061507582615034565b602082019050919050565b600060208201905081810360008301526150998161505d565b9050919050565b7f4e6f207072697a6520666f722074686973207469636b65740000000000000000600082015250565b60006150d6601883614b77565b91506150e1826150a0565b602082019050919050565b60006020820190508181036000830152615105816150c9565b9050919050565b60006040820190506151216000830185614089565b61512e6020830184614089565b9392505050565b60006040828403121561514b5761514a61480f565b5b61515560406142e6565b9050600061516584828501614819565b600083015250602061517984828501614cca565b60208301525092915050565b60006040828403121561519b5761519a613fb4565b5b60006151a984828501615135565b91505092915050565b7f496e76616c6964207469636b6574207469657200000000000000000000000000600082015250565b60006151e8601383614b77565b91506151f3826151b2565b602082019050919050565b60006020820190508181036000830152615217816151db565b9050919050565b600b811061522f5761522e613f18565b5b50565b60008190506152408261521e565b919050565b600061525082615232565b9050919050565b61526081615245565b82525050565b600060208201905061527b6000830184615257565b92915050565b60006020828403121561529757615296613fb4565b5b60006152a584828501614819565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e6f7420656e6f7567682066756e6473206f6e20636f6e747261637400000000600082015250565b6000615313601c83614b77565b915061531e826152dd565b602082019050919050565b6000602082019050818103600083015261534281615306565b9050919050565b600060408201905061535e6000830185614055565b61536b6020830184614089565b9392505050565b60006020828403121561538857615387613fb4565b5b60006153968482850161482e565b91505092915050565b6000602082840312156153b5576153b4613fb4565b5b60006153c384828501614843565b91505092915050565b60006153d782614165565b91506153e283614165565b9250828201905061ffff8111156153fc576153fb6146ca565b5b92915050565b600063ffffffff82169050919050565b600061542d61542861542384614165565b6141f6565b615402565b9050919050565b61543d81615412565b82525050565b60006020820190506154586000830184615434565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61549381614165565b82525050565b60006154a5838361548a565b60208301905092915050565b6000602082019050919050565b60006154c98261545e565b6154d38185615469565b93506154de8361547a565b8060005b8381101561550f5781516154f68882615499565b9750615501836154b1565b9250506001810190506154e2565b5085935050505092915050565b6000602082019050818103600083015261553681846154be565b905092915050565b600060a082840312156155545761555361480f565b5b61555e60a06142e6565b9050600061556e84828501614819565b6000830152506020615582848285016147cd565b602083015250604061559684828501614843565b60408301525060606155aa8482850161482e565b60608301525060806155be8482850161482e565b60808301525092915050565b600060a082840312156155e0576155df613fb4565b5b60006155ee8482850161553e565b91505092915050565b60006040828403121561560d5761560c61480f565b5b61561760406142e6565b9050600061562784828501614819565b600083015250602061563b8482850161482e565b60208301525092915050565b60006040828403121561565d5761565c613fb4565b5b600061566b848285016155f7565b91505092915050565b600061567f82614165565b915061ffff8203615693576156926146ca565b5b600182019050919050565b600080604083850312156156b5576156b4613fb4565b5b60006156c38582860161482e565b925050602083015167ffffffffffffffff8111156156e4576156e3613fb9565b5b6156f085828601614984565b9150509250929050565b7f52616e646f6d206e756d62657273206e6f742072656164790000000000000000600082015250565b6000615730601883614b77565b915061573b826156fa565b602082019050919050565b6000602082019050818103600083015261575f81615723565b9050919050565b6000819050919050565b600061578b61578661578184615766565b6141f6565b614165565b9050919050565b61579b81615770565b82525050565b60006060820190506157b66000830186614089565b6157c36020830185615792565b81810360408301526157d581846154be565b9050949350505050565b60006157ea8261407f565b91506157f58361407f565b925082615805576158046152ae565b5b828206905092915050565b60006060820190506158256000830186614089565b61583260208301856141cc565b818103604083015261584481846154be565b9050949350505050565b6000604082019050818103600083015261586881856154be565b9050818103602083015261587c81846154be565b90509392505050565b7f57616c6c657420616c7265616479206164646564000000000000000000000000600082015250565b60006158bb601483614b77565b91506158c682615885565b602082019050919050565b600060208201905081810360008301526158ea816158ae565b9050919050565b600067ffffffffffffffff82111561590c5761590b614286565b5b602082029050602081019050919050565b600061593061592b846158f1565b6142e6565b905080838252602082019050604084028301858111156159535761595261432d565b5b835b8181101561597c57806159688882615135565b845260208401935050604081019050615955565b5050509392505050565b600082601f83011261599b5761599a614270565b5b81516159ab84826020860161591d565b91505092915050565b6000602082840312156159ca576159c9613fb4565b5b600082015167ffffffffffffffff8111156159e8576159e7613fb9565b5b6159f484828501615986565b91505092915050565b600067ffffffffffffffff821115615a1857615a17614286565b5b602082029050602081019050919050565b6000615a3c615a37846159fd565b6142e6565b90508083825260208201905060408402830185811115615a5f57615a5e61432d565b5b835b81811015615a885780615a7488826155f7565b845260208401935050604081019050615a61565b5050509392505050565b600082601f830112615aa757615aa6614270565b5b8151615ab7848260208601615a29565b91505092915050565b600060208284031215615ad657615ad5613fb4565b5b600082015167ffffffffffffffff811115615af457615af3613fb9565b5b615b0084828501615a92565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b615b3e8161407f565b82525050565b615b4d81615245565b82525050565b604082016000820151615b696000850182615b35565b506020820151615b7c6020850182615b44565b50505050565b6000615b8e8383615b53565b60408301905092915050565b6000602082019050919050565b6000615bb282615b09565b615bbc8185615b14565b9350615bc783615b25565b8060005b83811015615bf8578151615bdf8882615b82565b9750615bea83615b9a565b925050600181019050615bcb565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b615c3a81613fbe565b82525050565b604082016000820151615c566000850182615b35565b506020820151615c696020850182615c31565b50505050565b6000615c7b8383615c40565b60408301905092915050565b6000602082019050919050565b6000615c9f82615c05565b615ca98185615c10565b9350615cb483615c21565b8060005b83811015615ce5578151615ccc8882615c6f565b9750615cd783615c87565b925050600181019050615cb8565b5085935050505092915050565b60006040820190508181036000830152615d0c8185615ba7565b90508181036020830152615d208184615c94565b90509392505050565b6000604082019050615d3e6000830185614055565b615d4b6020830184614055565b9392505050565b7f4d697373696e6720416c6c6f77616e6365000000000000000000000000000000600082015250565b6000615d88601183614b77565b9150615d9382615d52565b602082019050919050565b60006020820190508181036000830152615db781615d7b565b9050919050565b6000615dc982614165565b915060008203615ddc57615ddb6146ca565b5b600182039050919050565b7f496e73756666696369656e742066756e64730000000000000000000000000000600082015250565b6000615e1d601283614b77565b9150615e2882615de7565b602082019050919050565b60006020820190508181036000830152615e4c81615e10565b9050919050565b6000608082019050615e686000830187614089565b8181036020830152615e7a81866154be565b9050615e896040830185614055565b615e966060830184614055565b95945050505050565b6000606082019050615eb46000830186614055565b615ec16020830185614055565b615ece6040830184614089565b949350505050565b600081519050919050565b600081905092915050565b60005b83811015615f0a578082015181840152602081019050615eef565b60008484015250505050565b6000615f2182615ed6565b615f2b8185615ee1565b9350615f3b818560208601615eec565b80840191505092915050565b6000615f538284615f16565b91508190509291505056fea2646970667358221220c0b829ea11e7950801e460c1d41c3fc00cd308dc702889a55b48b6626b29aa1064736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102535760003560e01c806388e01a9811610146578063b62fe01b116100c3578063d4fc42c611610087578063d4fc42c61461066c578063e03d753a1461068a578063eb7165fa146106a8578063f10fb584146106c4578063f2fde38b146106e2578063f4dec22b146106fe57610253565b8063b62fe01b146105de578063ba968494146105fa578063bbd1783a14610616578063c96acb5a14610620578063cedd1bc31461063c57610253565b8063998da3e91161010a578063998da3e914610552578063a8602fea1461056e578063a8eed12d1461058a578063b086f3c0146105a6578063b33d8c54146105c257610253565b806388e01a98146104ae5780638c65c81f146104ca5780638da5cb5b146104fa57806392566fdd146105185780639469f2931461053657610253565b8063258799f8116101d45780634ff776b8116101985780634ff776b8146104325780636a326ab11461044e578063715018a61461046a5780637a5ed7211461047457806387da46f11461049057610253565b8063258799f81461038e5780633013ce29146103be57806339c834e9146103dc5780633fda7d95146103f85780634615102c1461041657610253565b806314eb76ac1161021b57806314eb76ac146102ec57806315981650146103085780631e410ddb146103245780631fcebf6814610340578063224294291461037057610253565b80630d683dd9146102585780630f5c49de14610276578063104dc360146102925780631209b1f6146102b0578063127f0b3f146102ce575b600080fd5b61026061071c565b60405161026d9190613f8f565b60405180910390f35b610290600480360381019061028b9190613ff6565b61072f565b005b61029a610754565b6040516102a79190614064565b60405180910390f35b6102b861077a565b6040516102c59190614098565b60405180910390f35b6102d6610780565b6040516102e39190614098565b60405180910390f35b610306600480360381019061030191906140df565b610786565b005b610322600480360381019061031d9190614138565b6107d2565b005b61033e6004803603810190610339919061419f565b6107e4565b005b61035a600480360381019061035591906140df565b61080c565b60405161036791906141db565b60405180910390f35b61037861082d565b6040516103859190614098565b60405180910390f35b6103a860048036038101906103a39190614138565b610833565b6040516103b59190614064565b60405180910390f35b6103c6610872565b6040516103d39190614255565b60405180910390f35b6103f660048036038101906103f191906140df565b610898565b005b610400610a26565b60405161040d9190614098565b60405180910390f35b610430600480360381019061042b9190614138565b610a2c565b005b61044c60048036038101906104479190614138565b610f6d565b005b610468600480360381019061046391906140df565b611823565b005b61047261186f565b005b61048e600480360381019061048991906143c9565b611883565b005b61049861196e565b6040516104a5919061446d565b60405180910390f35b6104c860048036038101906104c39190614138565b611994565b005b6104e460048036038101906104df9190614138565b611bfb565b6040516104f19190614064565b60405180910390f35b610502611c3a565b60405161050f9190614064565b60405180910390f35b610520611c63565b60405161052d91906141db565b60405180910390f35b610550600480360381019061054b9190614488565b611c77565b005b61056c600480360381019061056791906140df565b611d39565b005b610588600480360381019061058391906140df565b611dfa565b005b6105a4600480360381019061059f91906144d1565b611e46565b005b6105c060048036038101906105bb9190614138565b611ea9565b005b6105dc60048036038101906105d7919061456c565b6126b8565b005b6105f860048036038101906105f391906145b9565b61277f565b005b610614600480360381019061060f91906140df565b612d7b565b005b61061e612eba565b005b61063a600480360381019061063591906145b9565b612f37565b005b61065660048036038101906106519190614138565b61317e565b6040516106639190614098565b60405180910390f35b610674613196565b604051610681919061461a565b60405180910390f35b6106926131bc565b60405161069f9190614644565b60405180910390f35b6106c260048036038101906106bd91906143c9565b6131cf565b005b6106cc613873565b6040516106d99190614680565b60405180910390f35b6106fc60048036038101906106f791906140df565b613899565b005b61070661391f565b60405161071391906141db565b60405180910390f35b600460009054906101000a900460ff1681565b610737613933565b80601060006101000a81548160ff02191690831515021790555050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600f5481565b60025481565b61078e613933565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6107da613933565b80600f8190555050565b6107ec613933565b80601060016101000a81548161ffff021916908361ffff16021790555050565b60076020528060005260406000206000915054906101000a900461ffff1681565b60065481565b600a818154811061084357600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6108a0613933565b60005b600a80549050811015610a22578173ffffffffffffffffffffffffffffffffffffffff16600a82815481106108db576108da61469b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610a1557600a6001600a8054905061093591906146f9565b815481106109465761094561469b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a82815481106109855761098461469b565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600a8054806109df576109de61472d565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590555b80806001019150506108a3565b5050565b60055481565b610a34613933565b60026000815480929190610a479061475c565b919050555060016002541115610e22576003601060039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166363ea940f83600360028054610aa891906146f9565b81548110610ab957610ab861469b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401610b019291906147a4565b6020604051808303816000875af1158015610b20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b4491906147e2565b9080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360028054610bb491906146f9565b81548110610bc557610bc461469b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b81526004016000604051808303816000875af1158015610c3c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610c659190614b2e565b60600151610ca8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9f90614bd4565b60405180910390fd5b60036001600254610cb991906146f9565b81548110610cca57610cc961469b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b288e1a96040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610d41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6591906147e2565b73ffffffffffffffffffffffffffffffffffffffff16600360028054610d8b91906146f9565b81548110610d9c57610d9b61469b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610e1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1490614c66565b60405180910390fd5b610f26565b6003601060039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166363ea940f8360006040518363ffffffff1660e01b8152600401610e829291906147a4565b6020604051808303816000875af1158015610ea1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec591906147e2565b9080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b6000600460006101000a81548160ff02191690836003811115610f4c57610f4b613f18565b5b0217905550426005819055508042610f649190614c86565b60068190555050565b600060036001600254610f8091906146f9565b81548110610f9157610f9061469b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff16639b7be8fc846040518263ffffffff1660e01b8152600401610ff99190614098565b60c060405180830381865afa158015611016573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103a9190614d7f565b905082816000015114611082576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107990614df8565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff16146110f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110eb90614e64565b60405180910390fd5b806060015115611139576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113090614ed0565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b81526004016000604051808303816000875af1158015611186573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906111af9190614b2e565b606001516111f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111e990614f3c565b60405180910390fd5b60038081111561120557611204613f18565b5b600460009054906101000a900460ff16600381111561122757611226613f18565b5b14611267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125e90614fa8565b60405180910390fd5b60055442116112ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a290615014565b60405180910390fd5b60065442106112ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e690615080565b60405180910390fd5b6000600a81111561130357611302613f18565b5b8160a00151600a81111561131a57611319613f18565b5b0361135a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611351906150ec565b60405180910390fd5b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632aa601708373ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b81526004016000604051808303816000875af11580156113e5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061140e9190614b2e565b60000151856040518363ffffffff1660e01b815260040161143092919061510c565b6040805180830381865afa15801561144c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114709190615185565b60200151600a81111561148657611485613f18565b5b8160a00151600a81111561149d5761149c613f18565b5b146114dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114d4906151fe565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1663efa3d5318360a001516040518263ffffffff1660e01b815260040161151c9190615266565b6020604051808303816000875af115801561153b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155f9190615281565b8373ffffffffffffffffffffffffffffffffffffffff1663e2e308308460a001516040518263ffffffff1660e01b815260040161159c9190615266565b602060405180830381865afa1580156115b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115dd9190615281565b816115eb576115ea6152ae565b5b04905080600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161164a9190614064565b602060405180830381865afa158015611667573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168b9190615281565b10156116cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116c390615329565b60405180910390fd5b6003600160025403815481106116e5576116e461469b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382e5892385836040518363ffffffff1660e01b815260040161174a92919061510c565b600060405180830381600087803b15801561176457600080fd5b505af1158015611778573d6000803e3d6000fd5b50505050600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016117d9929190615349565b6020604051808303816000875af11580156117f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181c9190615372565b5050505050565b61182b613933565b80600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611877613933565b61188160006139ba565b565b60005b8351811015611967576000600667ffffffffffffffff8111156118ac576118ab614286565b5b6040519080825280602002602001820160405280156118da5781602001602082028036833780820191505090505b50905060005b6006811015611945578581846118f69190614c86565b815181106119075761190661469b565b5b60200260200101518282815181106119225761192161469b565b5b602002602001019061ffff16908161ffff168152505080806001019150506118e0565b50611952868286866131cf565b506006816119609190614c86565b9050611886565b5050505050565b601060039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61199c613933565b6000600360016002546119af91906146f9565b815481106119c0576119bf61469b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663e278fe6f6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611a3557600080fd5b505af1158015611a49573d6000803e3d6000fd5b505050506000600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f1664df66002546040518263ffffffff1660e01b8152600401611aac9190614098565b602060405180830381865afa158015611ac9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aed919061539f565b9050600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e726f2e1826006611b3a91906153cc565b6040518263ffffffff1660e01b8152600401611b569190615443565b6020604051808303816000875af1158015611b75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b999190615281565b601160006002548152602001908152602001600020819055506001600460006101000a81548160ff02191690836003811115611bd857611bd7613f18565b5b0217905550426005819055508242611bf09190614c86565b600681905550505050565b60038181548110611c0b57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600960009054906101000a900461ffff1681565b611c7f613933565b60036001600254611c9091906146f9565b81548110611ca157611ca061469b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639469f293826040518263ffffffff1660e01b8152600401611d04919061551c565b600060405180830381600087803b158015611d1e57600080fd5b505af1158015611d32573d6000803e3d6000fd5b5050505050565b611d41613933565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611d7c9190614064565b602060405180830381865afa158015611d99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dbd9190615281565b90506000811115611df657611df582600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683613a7e565b5b5050565b611e02613933565b80600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611e4e613933565b80600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600060036001600254611ebc91906146f9565b81548110611ecd57611ecc61469b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663dd85ae5f846040518263ffffffff1660e01b8152600401611f359190614098565b60a060405180830381865afa158015611f52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7691906155ca565b905082816000015114611fbe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fb590614df8565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1614612030576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161202790614e64565b60405180910390fd5b806080015115612075576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161206c90614ed0565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b81526004016000604051808303816000875af11580156120c2573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906120eb9190614b2e565b6060015161212e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161212590614f3c565b60405180910390fd5b600115158160600151151514612179576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612170906150ec565b60405180910390fd5b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663078a6dbf8373ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b81526004016000604051808303816000875af1158015612204573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061222d9190614b2e565b60000151856040518363ffffffff1660e01b815260040161224f92919061510c565b6040805180830381865afa15801561226b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061228f9190615647565b60200151151581606001511515146122dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122d3906151fe565b60405180910390fd5b6000600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f1664df68473ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b81526004016000604051808303816000875af1158015612369573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906123929190614b2e565b600001516040518263ffffffff1660e01b81526004016123b29190614098565b602060405180830381865afa1580156123cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123f3919061539f565b61ffff168373ffffffffffffffffffffffffffffffffffffffff1663e2e3083060076040518263ffffffff1660e01b81526004016124319190615266565b602060405180830381865afa15801561244e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124729190615281565b816124805761247f6152ae565b5b04905080600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016124df9190614064565b602060405180830381865afa1580156124fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125209190615281565b1015612561576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161255890615329565b60405180910390fd5b60036001600254038154811061257a5761257961469b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630cee803c85836040518363ffffffff1660e01b81526004016125df92919061510c565b600060405180830381600087803b1580156125f957600080fd5b505af115801561260d573d6000803e3d6000fd5b50505050600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161266e929190615349565b6020604051808303816000875af115801561268d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126b19190615372565b5050505050565b6126c0613933565b60005b8282905081101561277a57600760008484848181106126e5576126e461469b565b5b90506020020160208101906126fa91906140df565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081819054906101000a900461ffff168092919061275290615674565b91906101000a81548161ffff021916908361ffff1602179055505080806001019150506126c3565b505050565b612787613933565b6000600360018461279891906146f9565b815481106127a9576127a861469b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663343f25666040518163ffffffff1660e01b815260040160006040518083038186803b15801561281c57600080fd5b505afa158015612830573d6000803e3d6000fd5b50505050600080600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d8a4676f60116000888152602001908152602001600020546040518263ffffffff1660e01b81526004016128a59190614098565b600060405180830381865afa1580156128c2573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906128eb919061569e565b915091508161292f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161292690615746565b60405180910390fd5b6000600667ffffffffffffffff81111561294c5761294b614286565b5b60405190808252806020026020018201604052801561297a5781602001602082028036833780820191505090505b50905060006006835161298d91906146f9565b67ffffffffffffffff8111156129a6576129a5614286565b5b6040519080825280602002602001820160405280156129d45781602001602082028036833780820191505090505b5090508315612cc15760005b6006811015612ada57600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c746a8a858381518110612a3a57612a3961469b565b5b60200260200101516045866040518463ffffffff1660e01b8152600401612a63939291906157a1565b602060405180830381865afa158015612a80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aa4919061539f565b838281518110612ab757612ab661469b565b5b602002602001019061ffff16908161ffff168152505080806001019150506129e0565b506001601a84600581518110612af357612af261469b565b5b6020026020010151612b0591906157df565b612b0f9190614c86565b82600581518110612b2357612b2261469b565b5b602002602001019061ffff16908161ffff16815250506000600690505b8351811015612cbf57600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c746a8a858381518110612b9a57612b9961469b565b5b60200260200101518873ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b81526004016000604051808303816000875af1158015612bef573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612c189190614b2e565b6101400151856040518463ffffffff1660e01b8152600401612c3c93929190615810565b602060405180830381865afa158015612c59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c7d919061539f565b82600683612c8b91906146f9565b81518110612c9c57612c9b61469b565b5b602002602001019061ffff16908161ffff16815250508080600101915050612b40565b505b8473ffffffffffffffffffffffffffffffffffffffff16632724d10483836040518363ffffffff1660e01b8152600401612cfc92919061584e565b600060405180830381600087803b158015612d1657600080fd5b505af1158015612d2a573d6000803e3d6000fd5b505050506002600460006101000a81548160ff02191690836003811115612d5457612d53613f18565b5b0217905550426005819055508542612d6c9190614c86565b60068190555050505050505050565b612d83613933565b60005b600a80549050811015612e53578173ffffffffffffffffffffffffffffffffffffffff16600a8281548110612dbe57612dbd61469b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603612e46576000612e45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e3c906158d1565b60405180910390fd5b5b8080600101915050612d86565b50600a819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b612ec2613933565b6000471115612f3557600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015612f33573d6000803e3d6000fd5b505b565b612f3f613933565b6003600183612f4e91906146f9565b81548110612f5f57612f5e61469b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633590bd3c600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c099ae19856040518263ffffffff1660e01b81526004016130009190614098565b600060405180830381865afa15801561301d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061304691906159b4565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d856f0d5866040518263ffffffff1660e01b81526004016130a19190614098565b600060405180830381865afa1580156130be573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906130e79190615ac0565b6040518363ffffffff1660e01b8152600401613104929190615cf2565b600060405180830381600087803b15801561311e57600080fd5b505af1158015613132573d6000803e3d6000fd5b505050506003600460006101000a81548160ff0219169083600381111561315c5761315b613f18565b5b02179055504260058190555080426131749190614c86565b6006819055505050565b60116020528060005260406000206000915090505481565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601060009054906101000a900460ff1681565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900461ffff1661ffff1611806132ce5750600f54600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e83306040518363ffffffff1660e01b815260040161328a929190615d29565b602060405180830381865afa1580156132a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132cb9190615281565b10155b806133225750600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b613361576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161335890615d9e565b60405180910390fd5b60006003600160025461337491906146f9565b815481106133855761338461469b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900461ffff1661ffff16111561348957600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081819054906101000a900461ffff168092919061346990615dbe565b91906101000a81548161ffff021916908361ffff160217905550506137fb565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661378357600f54600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231326040518263ffffffff1660e01b81526004016135389190614064565b602060405180830381865afa158015613555573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135799190615281565b10156135ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135b190615e33565b60405180910390fd5b600a805490506009600081819054906101000a900461ffff16809291906135e090615674565b91906101000a81548161ffff021916908361ffff16021790555061ffff1661360891906157df565b600960006101000a81548161ffff021916908361ffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff1663af33d08f600f546040518263ffffffff1660e01b81526004016136619190614098565b602060405180830381865afa15801561367e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136a29190615281565b9050613731600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600a600960009054906101000a900461ffff1661ffff16815481106136f3576136f261469b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600f5461372c91906146f9565b613afd565b613781600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684613afd565b505b8073ffffffffffffffffffffffffffffffffffffffff1663b56c12b4600f546040518263ffffffff1660e01b81526004016137be9190614098565b600060405180830381600087803b1580156137d857600080fd5b505af11580156137ec573d6000803e3d6000fd5b505050506137fa8284613b7f565b5b8073ffffffffffffffffffffffffffffffffffffffff1663eb7165fa868686866040518563ffffffff1660e01b815260040161383a9493929190615e53565b600060405180830381600087803b15801561385457600080fd5b505af1158015613868573d6000803e3d6000fd5b505050505050505050565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6138a1613933565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036139135760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161390a9190614064565b60405180910390fd5b61391c816139ba565b50565b601060019054906101000a900461ffff1681565b61393b613cc2565b73ffffffffffffffffffffffffffffffffffffffff16613959611c3a565b73ffffffffffffffffffffffffffffffffffffffff16146139b85761397c613cc2565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016139af9190614064565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b613af8838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401613ab1929190615349565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613cca565b505050565b613b79848573ffffffffffffffffffffffffffffffffffffffff166323b872dd868686604051602401613b3293929190615e9f565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613cca565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015613bc85750601060009054906101000a900460ff165b15613cbe57600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081819054906101000a900461ffff1680929190613c2a90615674565b91906101000a81548161ffff021916908361ffff16021790555050600760008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081819054906101000a900461ffff1680929190613ca290615674565b91906101000a81548161ffff021916908361ffff160217905550505b5050565b600033905090565b6000613cf5828473ffffffffffffffffffffffffffffffffffffffff16613d6190919063ffffffff16565b90506000815114158015613d1a575080806020019051810190613d189190615372565b155b15613d5c57826040517f5274afe7000000000000000000000000000000000000000000000000000000008152600401613d539190614064565b60405180910390fd5b505050565b6060613d6f83836000613d77565b905092915050565b606081471015613dbe57306040517fcd786059000000000000000000000000000000000000000000000000000000008152600401613db59190614064565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff168486604051613de79190615f47565b60006040518083038185875af1925050503d8060008114613e24576040519150601f19603f3d011682016040523d82523d6000602084013e613e29565b606091505b5091509150613e39868383613e44565b925050509392505050565b606082613e5957613e5482613ed3565b613ecb565b60008251148015613e81575060008473ffffffffffffffffffffffffffffffffffffffff163b145b15613ec357836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401613eba9190614064565b60405180910390fd5b819050613ecc565b5b9392505050565b600081511115613ee65780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110613f5857613f57613f18565b5b50565b6000819050613f6982613f47565b919050565b6000613f7982613f5b565b9050919050565b613f8981613f6e565b82525050565b6000602082019050613fa46000830184613f80565b92915050565b6000604051905090565b600080fd5b600080fd5b60008115159050919050565b613fd381613fbe565b8114613fde57600080fd5b50565b600081359050613ff081613fca565b92915050565b60006020828403121561400c5761400b613fb4565b5b600061401a84828501613fe1565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061404e82614023565b9050919050565b61405e81614043565b82525050565b60006020820190506140796000830184614055565b92915050565b6000819050919050565b6140928161407f565b82525050565b60006020820190506140ad6000830184614089565b92915050565b6140bc81614043565b81146140c757600080fd5b50565b6000813590506140d9816140b3565b92915050565b6000602082840312156140f5576140f4613fb4565b5b6000614103848285016140ca565b91505092915050565b6141158161407f565b811461412057600080fd5b50565b6000813590506141328161410c565b92915050565b60006020828403121561414e5761414d613fb4565b5b600061415c84828501614123565b91505092915050565b600061ffff82169050919050565b61417c81614165565b811461418757600080fd5b50565b60008135905061419981614173565b92915050565b6000602082840312156141b5576141b4613fb4565b5b60006141c38482850161418a565b91505092915050565b6141d581614165565b82525050565b60006020820190506141f060008301846141cc565b92915050565b6000819050919050565b600061421b61421661421184614023565b6141f6565b614023565b9050919050565b600061422d82614200565b9050919050565b600061423f82614222565b9050919050565b61424f81614234565b82525050565b600060208201905061426a6000830184614246565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6142be82614275565b810181811067ffffffffffffffff821117156142dd576142dc614286565b5b80604052505050565b60006142f0613faa565b90506142fc82826142b5565b919050565b600067ffffffffffffffff82111561431c5761431b614286565b5b602082029050602081019050919050565b600080fd5b600061434561434084614301565b6142e6565b905080838252602082019050602084028301858111156143685761436761432d565b5b835b81811015614391578061437d888261418a565b84526020840193505060208101905061436a565b5050509392505050565b600082601f8301126143b0576143af614270565b5b81356143c0848260208601614332565b91505092915050565b600080600080608085870312156143e3576143e2613fb4565b5b60006143f187828801614123565b945050602085013567ffffffffffffffff81111561441257614411613fb9565b5b61441e8782880161439b565b935050604061442f878288016140ca565b9250506060614440878288016140ca565b91505092959194509250565b600061445782614222565b9050919050565b6144678161444c565b82525050565b6000602082019050614482600083018461445e565b92915050565b60006020828403121561449e5761449d613fb4565b5b600082013567ffffffffffffffff8111156144bc576144bb613fb9565b5b6144c88482850161439b565b91505092915050565b600080604083850312156144e8576144e7613fb4565b5b60006144f6858286016140ca565b925050602061450785828601613fe1565b9150509250929050565b600080fd5b60008083601f84011261452c5761452b614270565b5b8235905067ffffffffffffffff81111561454957614548614511565b5b6020830191508360208202830111156145655761456461432d565b5b9250929050565b6000806020838503121561458357614582613fb4565b5b600083013567ffffffffffffffff8111156145a1576145a0613fb9565b5b6145ad85828601614516565b92509250509250929050565b600080604083850312156145d0576145cf613fb4565b5b60006145de85828601614123565b92505060206145ef85828601614123565b9150509250929050565b600061460482614222565b9050919050565b614614816145f9565b82525050565b600060208201905061462f600083018461460b565b92915050565b61463e81613fbe565b82525050565b60006020820190506146596000830184614635565b92915050565b600061466a82614222565b9050919050565b61467a8161465f565b82525050565b60006020820190506146956000830184614671565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006147048261407f565b915061470f8361407f565b9250828203905081811115614727576147266146ca565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60006147678261407f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614799576147986146ca565b5b600182019050919050565b60006040820190506147b96000830185614089565b6147c66020830184614055565b9392505050565b6000815190506147dc816140b3565b92915050565b6000602082840312156147f8576147f7613fb4565b5b6000614806848285016147cd565b91505092915050565b600080fd5b600080fd5b6000815190506148288161410c565b92915050565b60008151905061483d81613fca565b92915050565b60008151905061485281614173565b92915050565b600061486b61486684614301565b6142e6565b9050808382526020820190506020840283018581111561488e5761488d61432d565b5b835b818110156148b757806148a38882614843565b845260208401935050602081019050614890565b5050509392505050565b600082601f8301126148d6576148d5614270565b5b81516148e6848260208601614858565b91505092915050565b600067ffffffffffffffff82111561490a57614909614286565b5b602082029050602081019050919050565b600061492e614929846148ef565b6142e6565b905080838252602082019050602084028301858111156149515761495061432d565b5b835b8181101561497a57806149668882614819565b845260208401935050602081019050614953565b5050509392505050565b600082601f83011261499957614998614270565b5b81516149a984826020860161491b565b91505092915050565b600061016082840312156149c9576149c861480f565b5b6149d46101606142e6565b905060006149e484828501614819565b60008301525060206149f884828501614819565b6020830152506040614a0c84828501614819565b6040830152506060614a208482850161482e565b606083015250608082015167ffffffffffffffff811115614a4457614a43614814565b5b614a50848285016148c1565b60808301525060a082015167ffffffffffffffff811115614a7457614a73614814565b5b614a80848285016148c1565b60a08301525060c0614a9484828501614843565b60c08301525060e082015167ffffffffffffffff811115614ab857614ab7614814565b5b614ac484828501614984565b60e083015250610100614ad984828501614843565b6101008301525061012082015167ffffffffffffffff811115614aff57614afe614814565b5b614b0b84828501614984565b61012083015250610140614b2184828501614843565b6101408301525092915050565b600060208284031215614b4457614b43613fb4565b5b600082015167ffffffffffffffff811115614b6257614b61613fb9565b5b614b6e848285016149b2565b91505092915050565b600082825260208201905092915050565b7f50726576696f757320726f756e64206e6f7420656e6465640000000000000000600082015250565b6000614bbe601883614b77565b9150614bc982614b88565b602082019050919050565b60006020820190508181036000830152614bed81614bb1565b9050919050565b7f50726576696f757320726f756e64206e6f742070726f7061676174656420636f60008201527f72726563746c7900000000000000000000000000000000000000000000000000602082015250565b6000614c50602783614b77565b9150614c5b82614bf4565b604082019050919050565b60006020820190508181036000830152614c7f81614c43565b9050919050565b6000614c918261407f565b9150614c9c8361407f565b9250828201905080821115614cb457614cb36146ca565b5b92915050565b600b8110614cc757600080fd5b50565b600081519050614cd981614cba565b92915050565b600060c08284031215614cf557614cf461480f565b5b614cff60c06142e6565b90506000614d0f84828501614819565b6000830152506020614d23848285016147cd565b6020830152506040614d37848285016147cd565b6040830152506060614d4b8482850161482e565b6060830152506080614d5f84828501614819565b60808301525060a0614d7384828501614cca565b60a08301525092915050565b600060c08284031215614d9557614d94613fb4565b5b6000614da384828501614cdf565b91505092915050565b7f496e76616c6964207469636b6574206964000000000000000000000000000000600082015250565b6000614de2601183614b77565b9150614ded82614dac565b602082019050919050565b60006020820190508181036000830152614e1181614dd5565b9050919050565b7f496e76616c6964207469636b6574206f776e6572000000000000000000000000600082015250565b6000614e4e601483614b77565b9150614e5982614e18565b602082019050919050565b60006020820190508181036000830152614e7d81614e41565b9050919050565b7f5469636b657420616c726561647920636c61696d656400000000000000000000600082015250565b6000614eba601683614b77565b9150614ec582614e84565b602082019050919050565b60006020820190508181036000830152614ee981614ead565b9050919050565b7f526f756e64206e6f7420656e6465640000000000000000000000000000000000600082015250565b6000614f26600f83614b77565b9150614f3182614ef0565b602082019050919050565b60006020820190508181036000830152614f5581614f19565b9050919050565b7f436c61696d206e6f742073746172746564000000000000000000000000000000600082015250565b6000614f92601183614b77565b9150614f9d82614f5c565b602082019050919050565b60006020820190508181036000830152614fc181614f85565b9050919050565b7f436c61696d206e6f7420737461727465643a20746f6f206561726c7900000000600082015250565b6000614ffe601c83614b77565b915061500982614fc8565b602082019050919050565b6000602082019050818103600083015261502d81614ff1565b9050919050565b7f436c61696d206e6f7420737461727465643a20746f6f206c6174650000000000600082015250565b600061506a601b83614b77565b915061507582615034565b602082019050919050565b600060208201905081810360008301526150998161505d565b9050919050565b7f4e6f207072697a6520666f722074686973207469636b65740000000000000000600082015250565b60006150d6601883614b77565b91506150e1826150a0565b602082019050919050565b60006020820190508181036000830152615105816150c9565b9050919050565b60006040820190506151216000830185614089565b61512e6020830184614089565b9392505050565b60006040828403121561514b5761514a61480f565b5b61515560406142e6565b9050600061516584828501614819565b600083015250602061517984828501614cca565b60208301525092915050565b60006040828403121561519b5761519a613fb4565b5b60006151a984828501615135565b91505092915050565b7f496e76616c6964207469636b6574207469657200000000000000000000000000600082015250565b60006151e8601383614b77565b91506151f3826151b2565b602082019050919050565b60006020820190508181036000830152615217816151db565b9050919050565b600b811061522f5761522e613f18565b5b50565b60008190506152408261521e565b919050565b600061525082615232565b9050919050565b61526081615245565b82525050565b600060208201905061527b6000830184615257565b92915050565b60006020828403121561529757615296613fb4565b5b60006152a584828501614819565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e6f7420656e6f7567682066756e6473206f6e20636f6e747261637400000000600082015250565b6000615313601c83614b77565b915061531e826152dd565b602082019050919050565b6000602082019050818103600083015261534281615306565b9050919050565b600060408201905061535e6000830185614055565b61536b6020830184614089565b9392505050565b60006020828403121561538857615387613fb4565b5b60006153968482850161482e565b91505092915050565b6000602082840312156153b5576153b4613fb4565b5b60006153c384828501614843565b91505092915050565b60006153d782614165565b91506153e283614165565b9250828201905061ffff8111156153fc576153fb6146ca565b5b92915050565b600063ffffffff82169050919050565b600061542d61542861542384614165565b6141f6565b615402565b9050919050565b61543d81615412565b82525050565b60006020820190506154586000830184615434565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61549381614165565b82525050565b60006154a5838361548a565b60208301905092915050565b6000602082019050919050565b60006154c98261545e565b6154d38185615469565b93506154de8361547a565b8060005b8381101561550f5781516154f68882615499565b9750615501836154b1565b9250506001810190506154e2565b5085935050505092915050565b6000602082019050818103600083015261553681846154be565b905092915050565b600060a082840312156155545761555361480f565b5b61555e60a06142e6565b9050600061556e84828501614819565b6000830152506020615582848285016147cd565b602083015250604061559684828501614843565b60408301525060606155aa8482850161482e565b60608301525060806155be8482850161482e565b60808301525092915050565b600060a082840312156155e0576155df613fb4565b5b60006155ee8482850161553e565b91505092915050565b60006040828403121561560d5761560c61480f565b5b61561760406142e6565b9050600061562784828501614819565b600083015250602061563b8482850161482e565b60208301525092915050565b60006040828403121561565d5761565c613fb4565b5b600061566b848285016155f7565b91505092915050565b600061567f82614165565b915061ffff8203615693576156926146ca565b5b600182019050919050565b600080604083850312156156b5576156b4613fb4565b5b60006156c38582860161482e565b925050602083015167ffffffffffffffff8111156156e4576156e3613fb9565b5b6156f085828601614984565b9150509250929050565b7f52616e646f6d206e756d62657273206e6f742072656164790000000000000000600082015250565b6000615730601883614b77565b915061573b826156fa565b602082019050919050565b6000602082019050818103600083015261575f81615723565b9050919050565b6000819050919050565b600061578b61578661578184615766565b6141f6565b614165565b9050919050565b61579b81615770565b82525050565b60006060820190506157b66000830186614089565b6157c36020830185615792565b81810360408301526157d581846154be565b9050949350505050565b60006157ea8261407f565b91506157f58361407f565b925082615805576158046152ae565b5b828206905092915050565b60006060820190506158256000830186614089565b61583260208301856141cc565b818103604083015261584481846154be565b9050949350505050565b6000604082019050818103600083015261586881856154be565b9050818103602083015261587c81846154be565b90509392505050565b7f57616c6c657420616c7265616479206164646564000000000000000000000000600082015250565b60006158bb601483614b77565b91506158c682615885565b602082019050919050565b600060208201905081810360008301526158ea816158ae565b9050919050565b600067ffffffffffffffff82111561590c5761590b614286565b5b602082029050602081019050919050565b600061593061592b846158f1565b6142e6565b905080838252602082019050604084028301858111156159535761595261432d565b5b835b8181101561597c57806159688882615135565b845260208401935050604081019050615955565b5050509392505050565b600082601f83011261599b5761599a614270565b5b81516159ab84826020860161591d565b91505092915050565b6000602082840312156159ca576159c9613fb4565b5b600082015167ffffffffffffffff8111156159e8576159e7613fb9565b5b6159f484828501615986565b91505092915050565b600067ffffffffffffffff821115615a1857615a17614286565b5b602082029050602081019050919050565b6000615a3c615a37846159fd565b6142e6565b90508083825260208201905060408402830185811115615a5f57615a5e61432d565b5b835b81811015615a885780615a7488826155f7565b845260208401935050604081019050615a61565b5050509392505050565b600082601f830112615aa757615aa6614270565b5b8151615ab7848260208601615a29565b91505092915050565b600060208284031215615ad657615ad5613fb4565b5b600082015167ffffffffffffffff811115615af457615af3613fb9565b5b615b0084828501615a92565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b615b3e8161407f565b82525050565b615b4d81615245565b82525050565b604082016000820151615b696000850182615b35565b506020820151615b7c6020850182615b44565b50505050565b6000615b8e8383615b53565b60408301905092915050565b6000602082019050919050565b6000615bb282615b09565b615bbc8185615b14565b9350615bc783615b25565b8060005b83811015615bf8578151615bdf8882615b82565b9750615bea83615b9a565b925050600181019050615bcb565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b615c3a81613fbe565b82525050565b604082016000820151615c566000850182615b35565b506020820151615c696020850182615c31565b50505050565b6000615c7b8383615c40565b60408301905092915050565b6000602082019050919050565b6000615c9f82615c05565b615ca98185615c10565b9350615cb483615c21565b8060005b83811015615ce5578151615ccc8882615c6f565b9750615cd783615c87565b925050600181019050615cb8565b5085935050505092915050565b60006040820190508181036000830152615d0c8185615ba7565b90508181036020830152615d208184615c94565b90509392505050565b6000604082019050615d3e6000830185614055565b615d4b6020830184614055565b9392505050565b7f4d697373696e6720416c6c6f77616e6365000000000000000000000000000000600082015250565b6000615d88601183614b77565b9150615d9382615d52565b602082019050919050565b60006020820190508181036000830152615db781615d7b565b9050919050565b6000615dc982614165565b915060008203615ddc57615ddb6146ca565b5b600182039050919050565b7f496e73756666696369656e742066756e64730000000000000000000000000000600082015250565b6000615e1d601283614b77565b9150615e2882615de7565b602082019050919050565b60006020820190508181036000830152615e4c81615e10565b9050919050565b6000608082019050615e686000830187614089565b8181036020830152615e7a81866154be565b9050615e896040830185614055565b615e966060830184614055565b95945050505050565b6000606082019050615eb46000830186614055565b615ec16020830185614055565b615ece6040830184614089565b949350505050565b600081519050919050565b600081905092915050565b60005b83811015615f0a578082015181840152602081019050615eef565b60008484015250505050565b6000615f2182615ed6565b615f2b8185615ee1565b9350615f3b818560208601615eec565b80840191505092915050565b6000615f538284615f16565b91508190509291505056fea2646970667358221220c0b829ea11e7950801e460c1d41c3fc00cd308dc702889a55b48b6626b29aa1064736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4468,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "teamAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1001,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "roundCount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1004,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "rounds",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1007,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "lotteryStatus",
        "offset": 0,
        "slot": "4",
        "type": "t_enum(LotteryStatuses)997"
      },
      {
        "astId": 1009,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "statusStartTime",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1011,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "statusEndTime",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1015,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "freeRounds",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint16)"
      },
      {
        "astId": 1019,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "crossChainOperator",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1037,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "counterForBankWallets",
        "offset": 0,
        "slot": "9",
        "type": "t_uint16"
      },
      {
        "astId": 1040,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "bankWallets",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1125,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "treasuryWallets",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 1140,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "paymentToken",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IERC20Metadata)251"
      },
      {
        "astId": 1157,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "randomizer",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(CyclixRandomizerInterface)892"
      },
      {
        "astId": 1160,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "reader",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(LotteryReaderInterface)3253"
      },
      {
        "astId": 1162,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "ticketPrice",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 1177,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "freeRoundsAreEnabled",
        "offset": 0,
        "slot": "16",
        "type": "t_bool"
      },
      {
        "astId": 1192,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "percentageOfReferralWinners",
        "offset": 1,
        "slot": "16",
        "type": "t_uint16"
      },
      {
        "astId": 1227,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "lotteryRoundCreator",
        "offset": 3,
        "slot": "16",
        "type": "t_contract(LotteryRoundCreatorInterface)4328"
      },
      {
        "astId": 1667,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "publicRoundRandomNumbersRequestId",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(CyclixRandomizerInterface)892": {
        "encoding": "inplace",
        "label": "contract CyclixRandomizerInterface",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Metadata)251": {
        "encoding": "inplace",
        "label": "contract IERC20Metadata",
        "numberOfBytes": "20"
      },
      "t_contract(LotteryReaderInterface)3253": {
        "encoding": "inplace",
        "label": "contract LotteryReaderInterface",
        "numberOfBytes": "20"
      },
      "t_contract(LotteryRoundCreatorInterface)4328": {
        "encoding": "inplace",
        "label": "contract LotteryRoundCreatorInterface",
        "numberOfBytes": "20"
      },
      "t_enum(LotteryStatuses)997": {
        "encoding": "inplace",
        "label": "enum LotteryStatuses",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint16)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}