{
  "address": "0xA8A33858DBF243cdDFfF6d73f00053ddDe57Cc7d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cyclixRandomizer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lotteryReader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lotteryRoundCreator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_paymentToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_ticketPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_freeRoundsAreEnabled",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "participant",
          "type": "address[]"
        }
      ],
      "name": "addFreeRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bankWallets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint16[]",
          "name": "chosenNumbers",
          "type": "uint16[]"
        },
        {
          "internalType": "address",
          "name": "referral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        }
      ],
      "name": "buyTicket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint16[]",
          "name": "moreTicketNumbers",
          "type": "uint16[]"
        },
        {
          "internalType": "address",
          "name": "referral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        }
      ],
      "name": "buyTickets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "referralTicketId",
          "type": "uint256"
        }
      ],
      "name": "claimReferralVictory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketId",
          "type": "uint256"
        }
      ],
      "name": "claimVictory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_statusEndTime",
          "type": "uint256"
        }
      ],
      "name": "closeRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counterForBankWallets",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "crossChainOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_statusEndTime",
          "type": "uint256"
        }
      ],
      "name": "fetchRoundNumbers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "freeRounds",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "freeRoundsAreEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lotteryRoundCreator",
      "outputs": [
        {
          "internalType": "contract LotteryRoundCreatorInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lotteryStatus",
      "outputs": [
        {
          "internalType": "enum LotteryStatuses",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_statusEndTime",
          "type": "uint256"
        }
      ],
      "name": "markWinners",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentToken",
      "outputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "percentageOfReferralWinners",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "publicRoundRandomNumbersRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randomizer",
      "outputs": [
        {
          "internalType": "contract CyclixRandomizerInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reader",
      "outputs": [
        {
          "internalType": "contract LotteryReaderInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roundCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rounds",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendCryptoToTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "sendTokenToTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "add",
          "type": "bool"
        }
      ],
      "name": "setBankWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setCrossChainOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_statusEndTime",
          "type": "uint256"
        }
      ],
      "name": "startNewRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "statusEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "statusStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ticketPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryWallets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cyclixRandomizer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lotteryReader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lotteryRoundCreator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_paymentToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_ticketPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_treasuryWallet",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_percentageOfReferralWinners",
          "type": "uint16"
        },
        {
          "internalType": "uint16[]",
          "name": "_poolPercentagesBasePoints",
          "type": "uint16[]"
        },
        {
          "internalType": "bool",
          "name": "_freeRoundsAreEnabled",
          "type": "bool"
        }
      ],
      "name": "updateSetup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_teamAddress",
          "type": "address"
        }
      ],
      "name": "updateTeamAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4db63d87faf47af8ff1bd47dc27013a406988ea16c202a54af829e3e6957c30d",
  "receipt": {
    "to": null,
    "from": "0x4eCa23Ffd5710970E22558C484a0D6943dA5eAa5",
    "contractAddress": "0xA8A33858DBF243cdDFfF6d73f00053ddDe57Cc7d",
    "transactionIndex": 1,
    "gasUsed": "5675979",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000900000000000000000000000008000000000000000000000000000000000000000000000002000000000000000000000000000000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000008000000000000000000",
    "blockHash": "0xbcf280783fbdae515901084e7affa5cf39d71104784f5ad3175c438d41b124fd",
    "transactionHash": "0x4db63d87faf47af8ff1bd47dc27013a406988ea16c202a54af829e3e6957c30d",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 32728560,
        "transactionHash": "0x4db63d87faf47af8ff1bd47dc27013a406988ea16c202a54af829e3e6957c30d",
        "address": "0xA8A33858DBF243cdDFfF6d73f00053ddDe57Cc7d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004eca23ffd5710970e22558c484a0d6943da5eaa5"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xbcf280783fbdae515901084e7affa5cf39d71104784f5ad3175c438d41b124fd"
      }
    ],
    "blockNumber": 32728560,
    "cumulativeGasUsed": "5696979",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4A4ae7f7c3266c8A335A253Ab6bfa65287E4c664",
    "0x57ed10E20A9B9Dc6BB91a10d559Ff3AF49D20C59",
    "0x6b583B9FFd371C5D31De85eD23be3e0A9e481fc5",
    "0x82Cc3CA12c0AB40b1FCC7705D9D9B97a86d25f6b",
    10,
    true
  ],
  "numDeployments": 1,
  "solcInputHash": "8124dcdb5f315553f250863dca0a030f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cyclixRandomizer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lotteryReader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lotteryRoundCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_freeRoundsAreEnabled\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"participant\",\"type\":\"address[]\"}],\"name\":\"addFreeRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bankWallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint16[]\",\"name\":\"chosenNumbers\",\"type\":\"uint16[]\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"buyTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint16[]\",\"name\":\"moreTicketNumbers\",\"type\":\"uint16[]\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"buyTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"referralTicketId\",\"type\":\"uint256\"}],\"name\":\"claimReferralVictory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"}],\"name\":\"claimVictory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_statusEndTime\",\"type\":\"uint256\"}],\"name\":\"closeRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counterForBankWallets\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"crossChainOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_statusEndTime\",\"type\":\"uint256\"}],\"name\":\"fetchRoundNumbers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"freeRounds\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeRoundsAreEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryRoundCreator\",\"outputs\":[{\"internalType\":\"contract LotteryRoundCreatorInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryStatus\",\"outputs\":[{\"internalType\":\"enum LotteryStatuses\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_statusEndTime\",\"type\":\"uint256\"}],\"name\":\"markWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentToken\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentageOfReferralWinners\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"publicRoundRandomNumbersRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomizer\",\"outputs\":[{\"internalType\":\"contract CyclixRandomizerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reader\",\"outputs\":[{\"internalType\":\"contract LotteryReaderInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendCryptoToTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sendTokenToTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"}],\"name\":\"setBankWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setCrossChainOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_statusEndTime\",\"type\":\"uint256\"}],\"name\":\"startNewRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"statusEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"statusStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cyclixRandomizer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lotteryReader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lotteryRoundCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_treasuryWallet\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_percentageOfReferralWinners\",\"type\":\"uint16\"},{\"internalType\":\"uint16[]\",\"name\":\"_poolPercentagesBasePoints\",\"type\":\"uint16[]\"},{\"internalType\":\"bool\",\"name\":\"_freeRoundsAreEnabled\",\"type\":\"bool\"}],\"name\":\"updateSetup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teamAddress\",\"type\":\"address\"}],\"name\":\"updateTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LotteryMaster.sol\":\"LotteryMaster\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/CyclixRandomizerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface CyclixRandomizerInterface {\\n    function requestRandomWords(uint32 numWords) external returns (uint256 requestId);\\n    function getRequestStatus(uint256 _requestId) external view returns (bool fulfilled, uint256[] memory randomWords);\\n    function registerGameContract(address gameAddress, string calldata name) external;\\n    function getLastRequestIdForCaller(address _gameAddress) external view returns (uint256);\\n    function recoverLostNumberRequest(uint256 _requestId) external returns (uint256);\\n}\",\"keccak256\":\"0xc71c2b020044355f41cc53069e9a6f9f2778311e8d601a29bcc608301a0dfe24\",\"license\":\"MIT\"},\"contracts/LotteryCommon.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\n    enum RoundVictoryTier {\\n        NO_WIN,\\n        Tier5_1,\\n        Tier5,\\n        Tier4_1,\\n        Tier4,\\n        Tier3_1,\\n        Tier3,\\n        Referrer,\\n        PublicPool,\\n        TokenHolders,\\n        Treasury\\n    }\\n\\n    struct Round {\\n        uint256 id;\\n        uint256 startTime;\\n        uint256 endTime;\\n        bool ended;\\n        uint16[] roundNumbers;\\n        uint16[] referralWinnersNumber;\\n        uint16 referralWinnersNumberCount;\\n        uint256[] ticketIds;\\n        uint16 ticketsCount;\\n        uint256[] referralTicketIds;\\n        uint16 referralCounts;\\n    }\\n\\n    struct Ticket {\\n        uint256 id;\\n        address participantAddress;\\n        address referralAddress;\\n        bool claimed;\\n        uint256 chainId;\\n        RoundVictoryTier victoryTier;\\n    }\\n\\n    struct TicketResults {\\n        uint256 ticketId;\\n        address participantAddress;\\n        RoundVictoryTier victoryTier;\\n    }\\n\\n    struct ReferralTicket {\\n        uint256 id;\\n        address referralAddress;\\n        uint16 referralTicketNumber;\\n        bool winner;\\n        bool claimed;\\n    }\\n\\n    struct ReferralTicketResults {\\n        uint256 referralTicketId;\\n        address referralAddress;\\n        bool won;\\n    }\",\"keccak256\":\"0x678d80db11135f1af83c4fe484e4f1c48a8c9be8695152f8023b1ed2b5117788\",\"license\":\"UNLICENSED\"},\"contracts/LotteryMaster.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {CyclixRandomizerInterface} from \\\"./CyclixRandomizerInterface.sol\\\";\\nimport {EmergencyFunctions} from \\\"./utils/EmergencyFunctions.sol\\\";\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\nimport { LotteryRoundInterface } from \\\"./LotteryRoundInterface.sol\\\";\\nimport { LotteryReaderInterface } from \\\"./LotteryReaderInterface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./LotteryRoundCreatorInterface.sol\\\";\\n    enum LotteryStatuses {\\n        DrawOpen,\\n        EvaluatingResults,\\n        ResultsEvaluated,\\n        ClaimInProgress\\n    }\\n\\ncontract LotteryMaster is EmergencyFunctions {\\n\\n    uint256 public roundCount;\\n    address[] public rounds;\\n    LotteryStatuses public lotteryStatus;\\n    uint256 public statusStartTime;\\n    uint256 public statusEndTime;\\n\\n    mapping(address => uint16) public freeRounds;\\n    mapping(address => bool) public crossChainOperator;\\n    function setCrossChainOperator(address operator, bool value) public onlyOwner {\\n        crossChainOperator[operator] = value;\\n    }\\n\\n    uint16 public counterForBankWallets;\\n    address[] public bankWallets;\\n    function setBankWallet(address wallet, bool add) public onlyOwner {\\n        for (uint i = 0; i < bankWallets.length; i++) {\\n            if (bankWallets[i] == wallet) {\\n                if (add) {\\n                    require(false, \\\"Wallet already added\\\");\\n                } else {\\n                    bankWallets[i] = bankWallets[bankWallets.length - 1];\\n                    bankWallets.pop();\\n                }\\n            }\\n        }\\n        if (add) {\\n            bankWallets.push(wallet);\\n        }\\n    }\\n\\n    address public treasuryWallets;\\n    IERC20Metadata public paymentToken;\\n    CyclixRandomizerInterface public randomizer;\\n    LotteryReaderInterface public reader;\\n    uint256 public ticketPrice;\\n    bool public freeRoundsAreEnabled = false;\\n    uint16 public percentageOfReferralWinners = 10;\\n    LotteryRoundCreatorInterface public lotteryRoundCreator;\\n\\n    constructor(address cyclixRandomizer, address lotteryReader, address _lotteryRoundCreator, address _paymentToken, uint256 _ticketPrice, bool _freeRoundsAreEnabled)\\n    EmergencyFunctions(msg.sender) {\\n        randomizer = CyclixRandomizerInterface(cyclixRandomizer);\\n        randomizer.registerGameContract(address(this), \\\"LotteryMasterV0.1\\\");\\n        reader = LotteryReaderInterface(lotteryReader);\\n        lotteryRoundCreator = LotteryRoundCreatorInterface(_lotteryRoundCreator);\\n        paymentToken = IERC20Metadata(_paymentToken);\\n        ticketPrice = _ticketPrice * (10 ** uint256(paymentToken.decimals()));\\n        freeRoundsAreEnabled = _freeRoundsAreEnabled;\\n        treasuryWallets = msg.sender;\\n        bankWallets.push(msg.sender);\\n    }\\n\\n    function updateSetup(address cyclixRandomizer, address lotteryReader, address _lotteryRoundCreator, address _paymentToken, uint256 _ticketPrice,\\n        address _treasuryWallet, uint16 _percentageOfReferralWinners, uint16[] memory _poolPercentagesBasePoints, bool _freeRoundsAreEnabled) public onlyOwner {\\n        if (address(randomizer) != cyclixRandomizer) {\\n            randomizer = CyclixRandomizerInterface(cyclixRandomizer);\\n            randomizer.registerGameContract(address(this), \\\"LotteryMasterV0.1\\\");\\n        }\\n        reader = LotteryReaderInterface(lotteryReader);\\n        lotteryRoundCreator = LotteryRoundCreatorInterface(_lotteryRoundCreator);\\n        paymentToken = IERC20Metadata(_paymentToken);\\n        ticketPrice = _ticketPrice * (10 ** uint256(paymentToken.decimals()));\\n        treasuryWallets = _treasuryWallet;\\n        percentageOfReferralWinners = _percentageOfReferralWinners;\\n        LotteryRoundInterface(rounds[roundCount - 1]).setPoolPercentagesBasePoints(_poolPercentagesBasePoints);\\n        freeRoundsAreEnabled = _freeRoundsAreEnabled;\\n    }\\n\\n    function startNewRound(uint256 _statusEndTime) public onlyOwner {\\n        roundCount++;\\n        if (roundCount > 1) {\\n            rounds.push(lotteryRoundCreator.startNewRound(_statusEndTime, rounds[roundCount - 2]));\\n            require(lotteryStatus == LotteryStatuses.ClaimInProgress && statusEndTime < block.timestamp, \\\"Previous round not ended\\\");\\n        } else {\\n            rounds.push(lotteryRoundCreator.startNewRound(_statusEndTime, address(0)));\\n        }\\n        setLotteryStatus(LotteryStatuses.DrawOpen, _statusEndTime);\\n    }\\n\\n    function setLotteryStatus(LotteryStatuses _lotteryStatus, uint256 _statusEndTime) internal onlyOwner {\\n        lotteryStatus = _lotteryStatus;\\n        statusStartTime = block.timestamp;\\n        statusEndTime = block.timestamp + _statusEndTime;\\n    }\\n\\n    function buyTickets(uint256 chainId, uint16[] memory moreTicketNumbers, address referral, address buyer) public {\\n        for (uint i = 0; i < moreTicketNumbers.length; i += 6) {\\n            uint16[] memory chosenNumbers = new uint16[](6);\\n            for (uint j = 0; j < 6; j++) {\\n                chosenNumbers[j] = moreTicketNumbers[i + j];\\n            }\\n            buyTicket(chainId, chosenNumbers, referral, buyer);\\n        }\\n    }\\n\\n    function buyTicket(uint256 chainId, uint16[] memory chosenNumbers, address referral, address buyer) public {\\n        require(freeRounds[buyer] > 0\\n        || paymentToken.allowance(buyer, address(this)) >= ticketPrice\\n        || crossChainOperator[msg.sender], \\\"Missing Allowance\\\");\\n        LotteryRoundInterface lotteryRound = LotteryRoundInterface(rounds[roundCount - 1]);\\n        if (freeRounds[buyer] > 0) {\\n            freeRounds[buyer]--;\\n        } else {\\n            if (!crossChainOperator[msg.sender]) {\\n                require(paymentToken.balanceOf(tx.origin) >= ticketPrice, \\\"Insufficient funds\\\");\\n                counterForBankWallets = uint16(counterForBankWallets++ % bankWallets.length);\\n                uint256 treasuryAmount = lotteryRound.treasuryAmountOnTicket(ticketPrice);\\n                SafeERC20.safeTransferFrom(paymentToken, buyer, bankWallets[counterForBankWallets], ticketPrice - treasuryAmount);\\n                SafeERC20.safeTransferFrom(paymentToken, buyer, treasuryWallets, treasuryAmount);\\n            }\\n            lotteryRound.updateVictoryPoolForTicket(ticketPrice);\\n\\n            if (referral != address(0) && freeRoundsAreEnabled) {\\n                freeRounds[buyer]++;\\n                freeRounds[referral]++;\\n            }\\n        }\\n\\n        lotteryRound.buyTicket(chainId, chosenNumbers, referral, buyer);\\n    }\\n\\n    function addFreeRound(address[] calldata participant) public onlyOwner {\\n        for (uint i = 0; i < participant.length; i++) {\\n            freeRounds[participant[i]]++;\\n        }\\n    }\\n\\n    mapping(uint256 => uint256) public publicRoundRandomNumbersRequestId;\\n\\n    function closeRound(uint256 _statusEndTime) external onlyOwner {\\n        LotteryRoundInterface lotteryRound = LotteryRoundInterface(rounds[roundCount - 1]);\\n        lotteryRound.closeRound();\\n        uint16 referralWinners = reader.numberOfReferralWinnersForRoundId(roundCount);\\n        publicRoundRandomNumbersRequestId[roundCount] = randomizer.requestRandomWords(6 + referralWinners);\\n        setLotteryStatus(LotteryStatuses.EvaluatingResults, _statusEndTime);\\n    }\\n\\n    function fetchRoundNumbers(uint256 roundId, uint256 _statusEndTime) external onlyOwner {\\n        LotteryRoundInterface round = LotteryRoundInterface(rounds[roundId - 1]);\\n        round.couldReceiveWinningNumbers();\\n        (bool fulfilled, uint256[] memory randomWords) = randomizer.getRequestStatus(publicRoundRandomNumbersRequestId[roundId]);\\n        require(fulfilled, \\\"Random numbers not ready\\\");\\n        uint16[] memory roundNumbers = new uint16[](6);\\n        uint16[] memory referralWinnersNumber = new uint16[](randomWords.length - 6);\\n        if (fulfilled) {\\n            for (uint i = 0; i < 6; i++) {\\n                roundNumbers[i] = reader.getRandomUniqueNumberInArrayForMaxValue(randomWords[i], 69, roundNumbers);\\n            }\\n            roundNumbers[5] = uint16(randomWords[5] % 26 + 1);\\n            for (uint i = 6; i < randomWords.length; i++) {\\n                referralWinnersNumber [i - 6] = reader.getRandomUniqueNumberInArrayForMaxValue(randomWords[i],\\n                    round.getRound().referralCounts, referralWinnersNumber);\\n            }\\n        }\\n        round.storeWinningNumbers(roundNumbers, referralWinnersNumber);\\n        setLotteryStatus(LotteryStatuses.ResultsEvaluated, _statusEndTime);\\n    }\\n\\n    function markWinners(uint256 roundId, uint256 _statusEndTime) public onlyOwner {\\n        LotteryRoundInterface(rounds[roundId - 1]).markWinners(reader.evaluateWonResultsForTickets(roundId), reader.evaluateWonResultsForReferral(roundId));\\n        setLotteryStatus(LotteryStatuses.ClaimInProgress, _statusEndTime);\\n    }\\n\\n    function claimVictory(uint256 ticketId) public {\\n        LotteryRoundInterface lotteryRound = LotteryRoundInterface(rounds[roundCount - 1]);\\n        Ticket memory ticket = lotteryRound.ticketById(ticketId);\\n        require(ticket.participantAddress == msg.sender, \\\"Invalid ticket owner\\\");\\n        require(!ticket.claimed, \\\"Ticket already claimed\\\");\\n        require(lotteryRound.getRound().ended, \\\"Round not ended\\\");\\n        require(lotteryStatus == LotteryStatuses.ClaimInProgress, \\\"Claim not started\\\");\\n        require(block.timestamp < statusEndTime, \\\"Claim has ended\\\");\\n        require(ticket.victoryTier != RoundVictoryTier.NO_WIN, \\\"No prize for this ticket\\\");\\n        require(ticket.victoryTier == reader.evaluateWonResultsForOneTicket(lotteryRound.getRound().id, ticketId).victoryTier, \\\"Invalid ticket tier\\\");\\n        unchecked {\\n            uint256 amountWon = lotteryRound.victoryTierAmounts(ticket.victoryTier) / lotteryRound.winnersForEachTier(ticket.victoryTier);\\n            require(paymentToken.balanceOf(address(this)) >= amountWon, \\\"Not enough funds on contract\\\");\\n            LotteryRoundInterface(rounds[roundCount - 1]).markVictoryClaimed(ticketId, amountWon);\\n            paymentToken.transfer(msg.sender, amountWon);\\n        }\\n    }\\n\\n    function claimReferralVictory(uint256 referralTicketId) public {\\n        LotteryRoundInterface lotteryRound = LotteryRoundInterface(rounds[roundCount - 1]);\\n        ReferralTicket memory referralTicket = lotteryRound.referralTicketById(referralTicketId);\\n        require(referralTicket.id == referralTicketId, \\\"Invalid ticket id\\\");\\n        require(referralTicket.referralAddress == msg.sender, \\\"Invalid ticket owner\\\");\\n        require(!referralTicket.claimed, \\\"Ticket already claimed\\\");\\n        require(lotteryRound.getRound().ended, \\\"Round not ended\\\");\\n        require(referralTicket.winner == true, \\\"No prize for this ticket\\\");\\n        require(referralTicket.winner == reader.evaluateWonResultsForOneReferralTicket(lotteryRound.getRound().id, referralTicketId).won, \\\"Invalid ticket tier\\\");\\n        unchecked {\\n            uint256 amountWon = lotteryRound.victoryTierAmounts(RoundVictoryTier.Referrer) / reader.numberOfReferralWinnersForRoundId(lotteryRound.getRound().id);\\n            require(paymentToken.balanceOf(address(this)) >= amountWon, \\\"Not enough funds on contract\\\");\\n            LotteryRoundInterface(rounds[roundCount - 1]).markReferralVictoryClaimed(referralTicketId, amountWon);\\n            paymentToken.transfer(msg.sender, amountWon);\\n        }\\n    }\\n}\",\"keccak256\":\"0x8350e121f19ca914e026231159bbee272c9148d748b32ba12a828a95e536b1b6\",\"license\":\"UNLICENSED\"},\"contracts/LotteryReaderInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {TestFunctions} from \\\"./utils/TestUtils.sol\\\";\\nimport {CyclixRandomizerInterface} from \\\"./CyclixRandomizerInterface.sol\\\";\\nimport {EmergencyFunctions} from \\\"./utils/EmergencyFunctions.sol\\\";\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\n\\ninterface LotteryReaderInterface {\\n    function poolForVictoryTier(uint256 roundId, RoundVictoryTier victoryTier) external view returns(uint256) ;\\n    function poolForReferral(uint256 roundId) external view returns(uint256) ;\\n    function tokenHoldersPoolAmount(uint256 roundId) external view returns (uint256) ;\\n    function treasuryPoolAmount(uint256 roundId) external view returns (uint256) ;\\n    function numberOfReferralWinnersForRoundId(uint256 roundId) external view returns (uint16) ;\\n    function existInArrayNumber(uint16 num, uint16[] memory arr) external pure returns (bool) ;\\n    function notExistInArrayNumber(uint16 num, uint16[] memory arr) external pure returns (bool) ;\\n    function getRandomUniqueNumberInArrayForMaxValue(uint256 randomNumber, uint16 maxValue, uint16[] memory arr) external pure returns (uint16) ;\\n    function tierFromResults(uint16 rightNumbersForTicket, bool powerNumberFound) external pure returns (RoundVictoryTier) ;\\n    function evaluateWonResultsForOneTicket(uint256 roundId, uint256 ticketId) external view returns (TicketResults memory);\\n    function evaluateWonResultsForTickets(uint256 roundId) external view returns (TicketResults[] memory);\\n    function evaluateWonResultsForOneReferralTicket(uint256 roundId, uint256 referralTicketId) external view returns (ReferralTicketResults memory);\\n    function evaluateWonResultsForReferral(uint256 roundId) external view returns (ReferralTicketResults[] memory);\\n    function amountWonInRound(uint256 roundId) external view returns (uint256) ;\\n    function roundNumbers(uint256 roundId) external view returns(uint16[] memory);\\n    function referralWinnersNumber(uint256 roundId) external view returns(uint16[] memory);\\n}\",\"keccak256\":\"0xa8081ad5eb434225fa4cf47b8a51926edd1929b5b75f8e2475f40411ec7bafaa\",\"license\":\"UNLICENSED\"},\"contracts/LotteryRoundCreatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\ninterface LotteryRoundCreatorInterface {\\n   function startNewRound(uint256 roundDurationInSeconds, address previousRoundAddress) external returns(address);\\n}\",\"keccak256\":\"0x758edc675f9d3b6e91d052e64cf4ea0495d6639542acf1d41ddb2a4c825a392a\",\"license\":\"UNLICENSED\"},\"contracts/LotteryRoundInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\n\\ninterface LotteryRoundInterface {\\n    function getRound() external returns(Round memory);\\n    function previousRound() external returns(address);\\n    function markWinners(TicketResults[] memory ticketResults, ReferralTicketResults[] memory referralTicketResults) external;\\n    function markVictoryClaimed(uint256 ticketId, uint256 amountClaimed) external;\\n    function markReferralVictoryClaimed(uint256 referralTicketId, uint256 amountClaimed) external;\\n    function treasuryAmountOnTicket(uint256 paymentTokenAmount) external view returns (uint256);\\n    function updateVictoryPoolForTicket(uint256 paymentTokenAmount) external;\\n    function buyTicket(uint256 chainId, uint16[] memory chosenNumbers, address referral, address buyer) external;\\n    function closeRound() external;\\n    function couldReceiveWinningNumbers() external view;\\n    function storeWinningNumbers(uint16[] memory roundNumbers, uint16[] memory referralWinnersNumber) external;\\n    function ticketById(uint256 ticketId) external view returns (Ticket memory);\\n    function numbersForTicketId(uint256 ticketId) external view returns (uint16[] memory);\\n    function referralTicketById(uint256 index) external view returns (ReferralTicket memory);\\n    function victoryTierAmounts(RoundVictoryTier tier) external view returns (uint256);\\n    function winnersForEachTier(RoundVictoryTier tier) external returns(uint256);\\n    function setPoolPercentagesBasePoints(uint16[] memory _poolPercentagesBasePoints) external;\\n}\",\"keccak256\":\"0xaf0ab80798c6142a9cf867a7f998c58ab2a980ef5b81ac2451ac83da18e20457\",\"license\":\"UNLICENSED\"},\"contracts/utils/EmergencyFunctions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract EmergencyFunctions is Ownable {\\n    address internal teamAddress;\\n    constructor(address _teamAddress) Ownable(_teamAddress) {\\n        teamAddress = _teamAddress;\\n    }\\n\\n    function updateTeamAddress(address _teamAddress) public onlyOwner {\\n        teamAddress = _teamAddress;\\n    }\\n\\n    // Emergency Functions\\n    function sendTokenToTeam(address _token) public onlyOwner {\\n        uint256 amount = IERC20(_token).balanceOf(address(this));\\n        if (amount > 0) {\\n            SafeERC20.safeTransfer(IERC20(_token), teamAddress, amount);\\n        }\\n    }\\n\\n    function sendCryptoToTeam() public onlyOwner {\\n        if (address(this).balance > 0) {\\n            payable(teamAddress).transfer(address(this).balance);\\n        }\\n    }\\n\\n    /** @notice Check if an address is a contract */\\n    function _isContract(address _addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x68dcc6a4104e2905f65c342fdb2dbde1908113d10c006f5857b52dc0bbefd419\",\"license\":\"MIT\"},\"contracts/utils/TestUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.x <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IERC20Extension {\\n    function decimals() external view returns (uint8);\\n}\\n\\ncontract TestFunctions is Ownable {\\n    constructor() Ownable(msg.sender) {}\\n    //Used for mock testing, contract ownership will be renounced on release\\n    uint public currentTimestampOverride;\\n    function updateCurrentTimestampOverride(uint _v) external onlyOwner {\\n        currentTimestampOverride = _v;\\n    }\\n    function currentTimestamp() public view returns(uint) {\\n        if (currentTimestampOverride > 0) {\\n            return currentTimestampOverride;\\n        }\\n        return block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x8edb22ef91efc1d38ffbd50b48821f4fe23bdaf84a14de75d0df8231eb772bc4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061021c5760003560e01c80638c65c81f11610125578063c96acb5a116100ad578063e91484241161007c578063e9148424146105dd578063eb7165fa146105f9578063f10fb58414610615578063f2fde38b14610633578063f4dec22b1461064f5761021c565b8063c96acb5a14610555578063cedd1bc314610571578063d4fc42c6146105a1578063e03d753a146105bf5761021c565b8063a8eed12d116100f4578063a8eed12d146104db578063b086f3c0146104f7578063b33d8c5414610513578063b62fe01b1461052f578063bbd1783a1461054b5761021c565b80638c65c81f146104535780638da5cb5b1461048357806392566fdd146104a1578063998da3e9146104bf5761021c565b80633013ce29116101a8578063715018a611610177578063715018a6146103c357806375e5460d146103cd5780637a5ed721146103fd57806387da46f11461041957806388e01a98146104375761021c565b80633013ce291461034f5780633fda7d951461036d5780634615102c1461038b5780634ff776b8146103a75761021c565b806314eb76ac116101ef57806314eb76ac146102995780631ed15aa4146102b55780631fcebf68146102d15780632242942914610301578063258799f81461031f5761021c565b80630d683dd914610221578063104dc3601461023f5780631209b1f61461025d578063127f0b3f1461027b575b600080fd5b61022961066d565b6040516102369190613d78565b60405180910390f35b610247610680565b6040516102549190613dd4565b60405180910390f35b6102656106a6565b6040516102729190613e08565b60405180910390f35b6102836106ac565b6040516102909190613e08565b60405180910390f35b6102b360048036038101906102ae9190613e63565b6106b2565b005b6102cf60048036038101906102ca9190613ec8565b6106fe565b005b6102eb60048036038101906102e69190613e63565b610944565b6040516102f89190613f25565b60405180910390f35b610309610965565b6040516103169190613e08565b60405180910390f35b61033960048036038101906103349190613f6c565b61096b565b6040516103469190613dd4565b60405180910390f35b6103576109aa565b6040516103649190613ff8565b60405180910390f35b6103756109d0565b6040516103829190613e08565b60405180910390f35b6103a560048036038101906103a09190613f6c565b6109d6565b005b6103c160048036038101906103bc9190613f6c565b610ce7565b005b6103cb611514565b005b6103e760048036038101906103e29190613e63565b611528565b6040516103f49190614022565b60405180910390f35b610417600480360381019061041291906141c2565b611548565b005b610421611633565b60405161042e9190614266565b60405180910390f35b610451600480360381019061044c9190613f6c565b611659565b005b61046d60048036038101906104689190613f6c565b611887565b60405161047a9190613dd4565b60405180910390f35b61048b6118c6565b6040516104989190613dd4565b60405180910390f35b6104a96118ef565b6040516104b69190613f25565b60405180910390f35b6104d960048036038101906104d49190613e63565b611903565b005b6104f560048036038101906104f09190613ec8565b6119c4565b005b610511600480360381019061050c9190613f6c565b611a27565b005b61052d600480360381019061052891906142dc565b612237565b005b61054960048036038101906105449190614329565b6122fe565b005b6105536128c1565b005b61056f600480360381019061056a9190614329565b61293e565b005b61058b60048036038101906105869190613f6c565b612b4c565b6040516105989190613e08565b60405180910390f35b6105a9612b64565b6040516105b6919061438a565b60405180910390f35b6105c7612b8a565b6040516105d49190614022565b60405180910390f35b6105f760048036038101906105f291906143a5565b612b9d565b005b610613600480360381019061060e91906141c2565b612f77565b005b61061d613750565b60405161062a91906144ac565b60405180910390f35b61064d60048036038101906106489190613e63565b613776565b005b6106576137fc565b6040516106649190613f25565b60405180910390f35b600460009054906101000a900460ff1681565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600f5481565b60025481565b6106ba613810565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610706613810565b60005b600a805490508110156108d5578273ffffffffffffffffffffffffffffffffffffffff16600a8281548110610741576107406144c7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036108c85781156107d35760006107ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c590614553565b60405180910390fd5b6108c7565b600a6001600a805490506107e791906145a2565b815481106107f8576107f76144c7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a8281548110610837576108366144c7565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600a805480610891576108906145d6565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590555b5b8080600101915050610709565b50801561094057600a829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5050565b60076020528060005260406000206000915054906101000a900461ffff1681565b60065481565b600a818154811061097b57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b6109de613810565b600260008154809291906109f190614605565b919050555060016002541115610bd5576003601060039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166363ea940f83600360028054610a5291906145a2565b81548110610a6357610a626144c7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401610aab92919061464d565b6020604051808303816000875af1158015610aca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aee919061468b565b9080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600380811115610b6157610b60613d01565b5b600460009054906101000a900460ff166003811115610b8357610b82613d01565b5b148015610b91575042600654105b610bd0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc790614704565b60405180910390fd5b610cd9565b6003601060039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166363ea940f8360006040518363ffffffff1660e01b8152600401610c3592919061464d565b6020604051808303816000875af1158015610c54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c78919061468b565b9080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b610ce4600082613897565b50565b600060036001600254610cfa91906145a2565b81548110610d0b57610d0a6144c7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff16639b7be8fc846040518263ffffffff1660e01b8152600401610d739190613e08565b60c060405180830381865afa158015610d90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db4919061481d565b90503373ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1614610e28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1f90614896565b60405180910390fd5b806060015115610e6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6490614902565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b81526004016000604051808303816000875af1158015610eba573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610ee39190614c0d565b60600151610f26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1d90614ca2565b60405180910390fd5b600380811115610f3957610f38613d01565b5b600460009054906101000a900460ff166003811115610f5b57610f5a613d01565b5b14610f9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9290614d0e565b60405180910390fd5b6006544210610fdf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd690614d7a565b60405180910390fd5b6000600a811115610ff357610ff2613d01565b5b8160a00151600a81111561100a57611009613d01565b5b0361104a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104190614de6565b60405180910390fd5b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632aa601708373ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b81526004016000604051808303816000875af11580156110d5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906110fe9190614c0d565b60000151856040518363ffffffff1660e01b8152600401611120929190614e06565b606060405180830381865afa15801561113d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111619190614e93565b60400151600a81111561117757611176613d01565b5b8160a00151600a81111561118e5761118d613d01565b5b146111ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c590614f0c565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1663efa3d5318360a001516040518263ffffffff1660e01b815260040161120d9190614f74565b6020604051808303816000875af115801561122c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112509190614f8f565b8373ffffffffffffffffffffffffffffffffffffffff1663e2e308308460a001516040518263ffffffff1660e01b815260040161128d9190614f74565b602060405180830381865afa1580156112aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ce9190614f8f565b816112dc576112db614fbc565b5b04905080600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161133b9190613dd4565b602060405180830381865afa158015611358573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137c9190614f8f565b10156113bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b490615037565b60405180910390fd5b6003600160025403815481106113d6576113d56144c7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382e5892385836040518363ffffffff1660e01b815260040161143b929190614e06565b600060405180830381600087803b15801561145557600080fd5b505af1158015611469573d6000803e3d6000fd5b50505050600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016114ca929190615057565b6020604051808303816000875af11580156114e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150d9190615080565b5050505050565b61151c613810565b61152660006138e6565b565b60086020528060005260406000206000915054906101000a900460ff1681565b60005b835181101561162c576000600667ffffffffffffffff81111561157157611570614053565b5b60405190808252806020026020018201604052801561159f5781602001602082028036833780820191505090505b50905060005b600681101561160a578581846115bb91906150ad565b815181106115cc576115cb6144c7565b5b60200260200101518282815181106115e7576115e66144c7565b5b602002602001019061ffff16908161ffff168152505080806001019150506115a5565b5061161786828686612f77565b5060068161162591906150ad565b905061154b565b5050505050565b601060039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611661613810565b60006003600160025461167491906145a2565b81548110611685576116846144c7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663e278fe6f6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156116fa57600080fd5b505af115801561170e573d6000803e3d6000fd5b505050506000600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f1664df66002546040518263ffffffff1660e01b81526004016117719190613e08565b602060405180830381865afa15801561178e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b291906150e1565b9050600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e726f2e18260066117ff919061510e565b6040518263ffffffff1660e01b815260040161181b9190615185565b6020604051808303816000875af115801561183a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185e9190614f8f565b60116000600254815260200190815260200160002081905550611882600184613897565b505050565b6003818154811061189757600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600960009054906101000a900461ffff1681565b61190b613810565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016119469190613dd4565b602060405180830381865afa158015611963573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119879190614f8f565b905060008111156119c0576119bf82600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836139aa565b5b5050565b6119cc613810565b80600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600060036001600254611a3a91906145a2565b81548110611a4b57611a4a6144c7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663dd85ae5f846040518263ffffffff1660e01b8152600401611ab39190613e08565b60a060405180830381865afa158015611ad0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af4919061522c565b905082816000015114611b3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b33906152a5565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1614611bae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ba590614896565b60405180910390fd5b806080015115611bf3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bea90614902565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b81526004016000604051808303816000875af1158015611c40573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611c699190614c0d565b60600151611cac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ca390614ca2565b60405180910390fd5b600115158160600151151514611cf7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cee90614de6565b60405180910390fd5b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663078a6dbf8373ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b81526004016000604051808303816000875af1158015611d82573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611dab9190614c0d565b60000151856040518363ffffffff1660e01b8152600401611dcd929190614e06565b606060405180830381865afa158015611dea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e0e9190615329565b6040015115158160600151151514611e5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e5290614f0c565b60405180910390fd5b6000600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f1664df68473ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b81526004016000604051808303816000875af1158015611ee8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611f119190614c0d565b600001516040518263ffffffff1660e01b8152600401611f319190613e08565b602060405180830381865afa158015611f4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7291906150e1565b61ffff168373ffffffffffffffffffffffffffffffffffffffff1663e2e3083060076040518263ffffffff1660e01b8152600401611fb09190614f74565b602060405180830381865afa158015611fcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff19190614f8f565b81611fff57611ffe614fbc565b5b04905080600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161205e9190613dd4565b602060405180830381865afa15801561207b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061209f9190614f8f565b10156120e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120d790615037565b60405180910390fd5b6003600160025403815481106120f9576120f86144c7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630cee803c85836040518363ffffffff1660e01b815260040161215e929190614e06565b600060405180830381600087803b15801561217857600080fd5b505af115801561218c573d6000803e3d6000fd5b50505050600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016121ed929190615057565b6020604051808303816000875af115801561220c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122309190615080565b5050505050565b61223f613810565b60005b828290508110156122f95760076000848484818110612264576122636144c7565b5b90506020020160208101906122799190613e63565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081819054906101000a900461ffff16809291906122d190615356565b91906101000a81548161ffff021916908361ffff160217905550508080600101915050612242565b505050565b612306613810565b6000600360018461231791906145a2565b81548110612328576123276144c7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663343f25666040518163ffffffff1660e01b815260040160006040518083038186803b15801561239b57600080fd5b505afa1580156123af573d6000803e3d6000fd5b50505050600080600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d8a4676f60116000888152602001908152602001600020546040518263ffffffff1660e01b81526004016124249190613e08565b600060405180830381865afa158015612441573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061246a9190615380565b91509150816124ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124a590615428565b60405180910390fd5b6000600667ffffffffffffffff8111156124cb576124ca614053565b5b6040519080825280602002602001820160405280156124f95781602001602082028036833780820191505090505b50905060006006835161250c91906145a2565b67ffffffffffffffff81111561252557612524614053565b5b6040519080825280602002602001820160405280156125535781602001602082028036833780820191505090505b50905083156128405760005b600681101561265957600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c746a8a8583815181106125b9576125b86144c7565b5b60200260200101516045866040518463ffffffff1660e01b81526004016125e293929190615541565b602060405180830381865afa1580156125ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061262391906150e1565b838281518110612636576126356144c7565b5b602002602001019061ffff16908161ffff1681525050808060010191505061255f565b506001601a84600581518110612672576126716144c7565b5b6020026020010151612684919061557f565b61268e91906150ad565b826005815181106126a2576126a16144c7565b5b602002602001019061ffff16908161ffff16815250506000600690505b835181101561283e57600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c746a8a858381518110612719576127186144c7565b5b60200260200101518873ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b81526004016000604051808303816000875af115801561276e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906127979190614c0d565b6101400151856040518463ffffffff1660e01b81526004016127bb939291906155b0565b602060405180830381865afa1580156127d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127fc91906150e1565b8260068361280a91906145a2565b8151811061281b5761281a6144c7565b5b602002602001019061ffff16908161ffff168152505080806001019150506126bf565b505b8473ffffffffffffffffffffffffffffffffffffffff16632724d10483836040518363ffffffff1660e01b815260040161287b9291906155ee565b600060405180830381600087803b15801561289557600080fd5b505af11580156128a9573d6000803e3d6000fd5b505050506128b8600287613897565b50505050505050565b6128c9613810565b600047111561293c57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561293a573d6000803e3d6000fd5b505b565b612946613810565b600360018361295591906145a2565b81548110612966576129656144c7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634cafa085600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c099ae19856040518263ffffffff1660e01b8152600401612a079190613e08565b600060405180830381865afa158015612a24573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612a4d91906156e8565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d856f0d5866040518263ffffffff1660e01b8152600401612aa89190613e08565b600060405180830381865afa158015612ac5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612aee91906157f4565b6040518363ffffffff1660e01b8152600401612b0b929190615a5b565b600060405180830381600087803b158015612b2557600080fd5b505af1158015612b39573d6000803e3d6000fd5b50505050612b48600382613897565b5050565b60116020528060005260406000206000915090505481565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601060009054906101000a900460ff1681565b612ba5613810565b8873ffffffffffffffffffffffffffffffffffffffff16600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612cc95788600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cd0f2311306040518263ffffffff1660e01b8152600401612c969190615ade565b600060405180830381600087803b158015612cb057600080fd5b505af1158015612cc4573d6000803e3d6000fd5b505050505b87600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086601060036101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612df9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e1d9190615b45565b60ff16600a612e2c9190615ca5565b85612e379190615cf0565b600f8190555083600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082601060016101000a81548161ffff021916908361ffff16021790555060036001600254612eac91906145a2565b81548110612ebd57612ebc6144c7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639469f293836040518263ffffffff1660e01b8152600401612f209190615d32565b600060405180830381600087803b158015612f3a57600080fd5b505af1158015612f4e573d6000803e3d6000fd5b5050505080601060006101000a81548160ff021916908315150217905550505050505050505050565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900461ffff1661ffff1611806130765750600f54600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e83306040518363ffffffff1660e01b8152600401613032929190615d54565b602060405180830381865afa15801561304f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130739190614f8f565b10155b806130ca5750600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b613109576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161310090615dc9565b60405180910390fd5b60006003600160025461311c91906145a2565b8154811061312d5761312c6144c7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900461ffff1661ffff16111561323157600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081819054906101000a900461ffff168092919061321190615de9565b91906101000a81548161ffff021916908361ffff160217905550506136d8565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661352b57600f54600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231326040518263ffffffff1660e01b81526004016132e09190613dd4565b602060405180830381865afa1580156132fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133219190614f8f565b1015613362576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161335990615e5e565b60405180910390fd5b600a805490506009600081819054906101000a900461ffff168092919061338890615356565b91906101000a81548161ffff021916908361ffff16021790555061ffff166133b0919061557f565b600960006101000a81548161ffff021916908361ffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff1663af33d08f600f546040518263ffffffff1660e01b81526004016134099190613e08565b602060405180830381865afa158015613426573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061344a9190614f8f565b90506134d9600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600a600960009054906101000a900461ffff1661ffff168154811061349b5761349a6144c7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600f546134d491906145a2565b613a29565b613529600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684613a29565b505b8073ffffffffffffffffffffffffffffffffffffffff1663b56c12b4600f546040518263ffffffff1660e01b81526004016135669190613e08565b600060405180830381600087803b15801561358057600080fd5b505af1158015613594573d6000803e3d6000fd5b50505050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156135e15750601060009054906101000a900460ff165b156136d757600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081819054906101000a900461ffff168092919061364390615356565b91906101000a81548161ffff021916908361ffff16021790555050600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081819054906101000a900461ffff16809291906136bb90615356565b91906101000a81548161ffff021916908361ffff160217905550505b5b8073ffffffffffffffffffffffffffffffffffffffff1663eb7165fa868686866040518563ffffffff1660e01b81526004016137179493929190615e7e565b600060405180830381600087803b15801561373157600080fd5b505af1158015613745573d6000803e3d6000fd5b505050505050505050565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61377e613810565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036137f05760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016137e79190613dd4565b60405180910390fd5b6137f9816138e6565b50565b601060019054906101000a900461ffff1681565b613818613aab565b73ffffffffffffffffffffffffffffffffffffffff166138366118c6565b73ffffffffffffffffffffffffffffffffffffffff161461389557613859613aab565b6040517f118cdaa700000000000000000000000000000000000000000000000000000000815260040161388c9190613dd4565b60405180910390fd5b565b61389f613810565b81600460006101000a81548160ff021916908360038111156138c4576138c3613d01565b5b02179055504260058190555080426138dc91906150ad565b6006819055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b613a24838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040516024016139dd929190615057565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613ab3565b505050565b613aa5848573ffffffffffffffffffffffffffffffffffffffff166323b872dd868686604051602401613a5e93929190615eca565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613ab3565b50505050565b600033905090565b6000613ade828473ffffffffffffffffffffffffffffffffffffffff16613b4a90919063ffffffff16565b90506000815114158015613b03575080806020019051810190613b019190615080565b155b15613b4557826040517f5274afe7000000000000000000000000000000000000000000000000000000008152600401613b3c9190613dd4565b60405180910390fd5b505050565b6060613b5883836000613b60565b905092915050565b606081471015613ba757306040517fcd786059000000000000000000000000000000000000000000000000000000008152600401613b9e9190613dd4565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff168486604051613bd09190615f72565b60006040518083038185875af1925050503d8060008114613c0d576040519150601f19603f3d011682016040523d82523d6000602084013e613c12565b606091505b5091509150613c22868383613c2d565b925050509392505050565b606082613c4257613c3d82613cbc565b613cb4565b60008251148015613c6a575060008473ffffffffffffffffffffffffffffffffffffffff163b145b15613cac57836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401613ca39190613dd4565b60405180910390fd5b819050613cb5565b5b9392505050565b600081511115613ccf5780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110613d4157613d40613d01565b5b50565b6000819050613d5282613d30565b919050565b6000613d6282613d44565b9050919050565b613d7281613d57565b82525050565b6000602082019050613d8d6000830184613d69565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613dbe82613d93565b9050919050565b613dce81613db3565b82525050565b6000602082019050613de96000830184613dc5565b92915050565b6000819050919050565b613e0281613def565b82525050565b6000602082019050613e1d6000830184613df9565b92915050565b6000604051905090565b600080fd5b600080fd5b613e4081613db3565b8114613e4b57600080fd5b50565b600081359050613e5d81613e37565b92915050565b600060208284031215613e7957613e78613e2d565b5b6000613e8784828501613e4e565b91505092915050565b60008115159050919050565b613ea581613e90565b8114613eb057600080fd5b50565b600081359050613ec281613e9c565b92915050565b60008060408385031215613edf57613ede613e2d565b5b6000613eed85828601613e4e565b9250506020613efe85828601613eb3565b9150509250929050565b600061ffff82169050919050565b613f1f81613f08565b82525050565b6000602082019050613f3a6000830184613f16565b92915050565b613f4981613def565b8114613f5457600080fd5b50565b600081359050613f6681613f40565b92915050565b600060208284031215613f8257613f81613e2d565b5b6000613f9084828501613f57565b91505092915050565b6000819050919050565b6000613fbe613fb9613fb484613d93565b613f99565b613d93565b9050919050565b6000613fd082613fa3565b9050919050565b6000613fe282613fc5565b9050919050565b613ff281613fd7565b82525050565b600060208201905061400d6000830184613fe9565b92915050565b61401c81613e90565b82525050565b60006020820190506140376000830184614013565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61408b82614042565b810181811067ffffffffffffffff821117156140aa576140a9614053565b5b80604052505050565b60006140bd613e23565b90506140c98282614082565b919050565b600067ffffffffffffffff8211156140e9576140e8614053565b5b602082029050602081019050919050565b600080fd5b61410881613f08565b811461411357600080fd5b50565b600081359050614125816140ff565b92915050565b600061413e614139846140ce565b6140b3565b90508083825260208201905060208402830185811115614161576141606140fa565b5b835b8181101561418a57806141768882614116565b845260208401935050602081019050614163565b5050509392505050565b600082601f8301126141a9576141a861403d565b5b81356141b984826020860161412b565b91505092915050565b600080600080608085870312156141dc576141db613e2d565b5b60006141ea87828801613f57565b945050602085013567ffffffffffffffff81111561420b5761420a613e32565b5b61421787828801614194565b935050604061422887828801613e4e565b925050606061423987828801613e4e565b91505092959194509250565b600061425082613fc5565b9050919050565b61426081614245565b82525050565b600060208201905061427b6000830184614257565b92915050565b600080fd5b60008083601f84011261429c5761429b61403d565b5b8235905067ffffffffffffffff8111156142b9576142b8614281565b5b6020830191508360208202830111156142d5576142d46140fa565b5b9250929050565b600080602083850312156142f3576142f2613e2d565b5b600083013567ffffffffffffffff81111561431157614310613e32565b5b61431d85828601614286565b92509250509250929050565b600080604083850312156143405761433f613e2d565b5b600061434e85828601613f57565b925050602061435f85828601613f57565b9150509250929050565b600061437482613fc5565b9050919050565b61438481614369565b82525050565b600060208201905061439f600083018461437b565b92915050565b60008060008060008060008060006101208a8c0312156143c8576143c7613e2d565b5b60006143d68c828d01613e4e565b99505060206143e78c828d01613e4e565b98505060406143f88c828d01613e4e565b97505060606144098c828d01613e4e565b965050608061441a8c828d01613f57565b95505060a061442b8c828d01613e4e565b94505060c061443c8c828d01614116565b93505060e08a013567ffffffffffffffff81111561445d5761445c613e32565b5b6144698c828d01614194565b92505061010061447b8c828d01613eb3565b9150509295985092959850929598565b600061449682613fc5565b9050919050565b6144a68161448b565b82525050565b60006020820190506144c1600083018461449d565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f57616c6c657420616c7265616479206164646564000000000000000000000000600082015250565b600061453d6014836144f6565b915061454882614507565b602082019050919050565b6000602082019050818103600083015261456c81614530565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006145ad82613def565b91506145b883613def565b92508282039050818111156145d0576145cf614573565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600061461082613def565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361464257614641614573565b5b600182019050919050565b60006040820190506146626000830185613df9565b61466f6020830184613dc5565b9392505050565b60008151905061468581613e37565b92915050565b6000602082840312156146a1576146a0613e2d565b5b60006146af84828501614676565b91505092915050565b7f50726576696f757320726f756e64206e6f7420656e6465640000000000000000600082015250565b60006146ee6018836144f6565b91506146f9826146b8565b602082019050919050565b6000602082019050818103600083015261471d816146e1565b9050919050565b600080fd5b600080fd5b60008151905061473d81613f40565b92915050565b60008151905061475281613e9c565b92915050565b600b811061476557600080fd5b50565b60008151905061477781614758565b92915050565b600060c0828403121561479357614792614724565b5b61479d60c06140b3565b905060006147ad8482850161472e565b60008301525060206147c184828501614676565b60208301525060406147d584828501614676565b60408301525060606147e984828501614743565b60608301525060806147fd8482850161472e565b60808301525060a061481184828501614768565b60a08301525092915050565b600060c0828403121561483357614832613e2d565b5b60006148418482850161477d565b91505092915050565b7f496e76616c6964207469636b6574206f776e6572000000000000000000000000600082015250565b60006148806014836144f6565b915061488b8261484a565b602082019050919050565b600060208201905081810360008301526148af81614873565b9050919050565b7f5469636b657420616c726561647920636c61696d656400000000000000000000600082015250565b60006148ec6016836144f6565b91506148f7826148b6565b602082019050919050565b6000602082019050818103600083015261491b816148df565b9050919050565b600081519050614931816140ff565b92915050565b600061494a614945846140ce565b6140b3565b9050808382526020820190506020840283018581111561496d5761496c6140fa565b5b835b8181101561499657806149828882614922565b84526020840193505060208101905061496f565b5050509392505050565b600082601f8301126149b5576149b461403d565b5b81516149c5848260208601614937565b91505092915050565b600067ffffffffffffffff8211156149e9576149e8614053565b5b602082029050602081019050919050565b6000614a0d614a08846149ce565b6140b3565b90508083825260208201905060208402830185811115614a3057614a2f6140fa565b5b835b81811015614a595780614a45888261472e565b845260208401935050602081019050614a32565b5050509392505050565b600082601f830112614a7857614a7761403d565b5b8151614a888482602086016149fa565b91505092915050565b60006101608284031215614aa857614aa7614724565b5b614ab36101606140b3565b90506000614ac38482850161472e565b6000830152506020614ad78482850161472e565b6020830152506040614aeb8482850161472e565b6040830152506060614aff84828501614743565b606083015250608082015167ffffffffffffffff811115614b2357614b22614729565b5b614b2f848285016149a0565b60808301525060a082015167ffffffffffffffff811115614b5357614b52614729565b5b614b5f848285016149a0565b60a08301525060c0614b7384828501614922565b60c08301525060e082015167ffffffffffffffff811115614b9757614b96614729565b5b614ba384828501614a63565b60e083015250610100614bb884828501614922565b6101008301525061012082015167ffffffffffffffff811115614bde57614bdd614729565b5b614bea84828501614a63565b61012083015250610140614c0084828501614922565b6101408301525092915050565b600060208284031215614c2357614c22613e2d565b5b600082015167ffffffffffffffff811115614c4157614c40613e32565b5b614c4d84828501614a91565b91505092915050565b7f526f756e64206e6f7420656e6465640000000000000000000000000000000000600082015250565b6000614c8c600f836144f6565b9150614c9782614c56565b602082019050919050565b60006020820190508181036000830152614cbb81614c7f565b9050919050565b7f436c61696d206e6f742073746172746564000000000000000000000000000000600082015250565b6000614cf86011836144f6565b9150614d0382614cc2565b602082019050919050565b60006020820190508181036000830152614d2781614ceb565b9050919050565b7f436c61696d2068617320656e6465640000000000000000000000000000000000600082015250565b6000614d64600f836144f6565b9150614d6f82614d2e565b602082019050919050565b60006020820190508181036000830152614d9381614d57565b9050919050565b7f4e6f207072697a6520666f722074686973207469636b65740000000000000000600082015250565b6000614dd06018836144f6565b9150614ddb82614d9a565b602082019050919050565b60006020820190508181036000830152614dff81614dc3565b9050919050565b6000604082019050614e1b6000830185613df9565b614e286020830184613df9565b9392505050565b600060608284031215614e4557614e44614724565b5b614e4f60606140b3565b90506000614e5f8482850161472e565b6000830152506020614e7384828501614676565b6020830152506040614e8784828501614768565b60408301525092915050565b600060608284031215614ea957614ea8613e2d565b5b6000614eb784828501614e2f565b91505092915050565b7f496e76616c6964207469636b6574207469657200000000000000000000000000600082015250565b6000614ef66013836144f6565b9150614f0182614ec0565b602082019050919050565b60006020820190508181036000830152614f2581614ee9565b9050919050565b600b8110614f3d57614f3c613d01565b5b50565b6000819050614f4e82614f2c565b919050565b6000614f5e82614f40565b9050919050565b614f6e81614f53565b82525050565b6000602082019050614f896000830184614f65565b92915050565b600060208284031215614fa557614fa4613e2d565b5b6000614fb38482850161472e565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e6f7420656e6f7567682066756e6473206f6e20636f6e747261637400000000600082015250565b6000615021601c836144f6565b915061502c82614feb565b602082019050919050565b6000602082019050818103600083015261505081615014565b9050919050565b600060408201905061506c6000830185613dc5565b6150796020830184613df9565b9392505050565b60006020828403121561509657615095613e2d565b5b60006150a484828501614743565b91505092915050565b60006150b882613def565b91506150c383613def565b92508282019050808211156150db576150da614573565b5b92915050565b6000602082840312156150f7576150f6613e2d565b5b600061510584828501614922565b91505092915050565b600061511982613f08565b915061512483613f08565b9250828201905061ffff81111561513e5761513d614573565b5b92915050565b600063ffffffff82169050919050565b600061516f61516a61516584613f08565b613f99565b615144565b9050919050565b61517f81615154565b82525050565b600060208201905061519a6000830184615176565b92915050565b600060a082840312156151b6576151b5614724565b5b6151c060a06140b3565b905060006151d08482850161472e565b60008301525060206151e484828501614676565b60208301525060406151f884828501614922565b604083015250606061520c84828501614743565b606083015250608061522084828501614743565b60808301525092915050565b600060a0828403121561524257615241613e2d565b5b6000615250848285016151a0565b91505092915050565b7f496e76616c6964207469636b6574206964000000000000000000000000000000600082015250565b600061528f6011836144f6565b915061529a82615259565b602082019050919050565b600060208201905081810360008301526152be81615282565b9050919050565b6000606082840312156152db576152da614724565b5b6152e560606140b3565b905060006152f58482850161472e565b600083015250602061530984828501614676565b602083015250604061531d84828501614743565b60408301525092915050565b60006060828403121561533f5761533e613e2d565b5b600061534d848285016152c5565b91505092915050565b600061536182613f08565b915061ffff820361537557615374614573565b5b600182019050919050565b6000806040838503121561539757615396613e2d565b5b60006153a585828601614743565b925050602083015167ffffffffffffffff8111156153c6576153c5613e32565b5b6153d285828601614a63565b9150509250929050565b7f52616e646f6d206e756d62657273206e6f742072656164790000000000000000600082015250565b60006154126018836144f6565b915061541d826153dc565b602082019050919050565b6000602082019050818103600083015261544181615405565b9050919050565b6000819050919050565b600061546d61546861546384615448565b613f99565b613f08565b9050919050565b61547d81615452565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6154b881613f08565b82525050565b60006154ca83836154af565b60208301905092915050565b6000602082019050919050565b60006154ee82615483565b6154f8818561548e565b93506155038361549f565b8060005b8381101561553457815161551b88826154be565b9750615526836154d6565b925050600181019050615507565b5085935050505092915050565b60006060820190506155566000830186613df9565b6155636020830185615474565b818103604083015261557581846154e3565b9050949350505050565b600061558a82613def565b915061559583613def565b9250826155a5576155a4614fbc565b5b828206905092915050565b60006060820190506155c56000830186613df9565b6155d26020830185613f16565b81810360408301526155e481846154e3565b9050949350505050565b6000604082019050818103600083015261560881856154e3565b9050818103602083015261561c81846154e3565b90509392505050565b600067ffffffffffffffff8211156156405761563f614053565b5b602082029050602081019050919050565b600061566461565f84615625565b6140b3565b90508083825260208201905060608402830185811115615687576156866140fa565b5b835b818110156156b0578061569c8882614e2f565b845260208401935050606081019050615689565b5050509392505050565b600082601f8301126156cf576156ce61403d565b5b81516156df848260208601615651565b91505092915050565b6000602082840312156156fe576156fd613e2d565b5b600082015167ffffffffffffffff81111561571c5761571b613e32565b5b615728848285016156ba565b91505092915050565b600067ffffffffffffffff82111561574c5761574b614053565b5b602082029050602081019050919050565b600061577061576b84615731565b6140b3565b90508083825260208201905060608402830185811115615793576157926140fa565b5b835b818110156157bc57806157a888826152c5565b845260208401935050606081019050615795565b5050509392505050565b600082601f8301126157db576157da61403d565b5b81516157eb84826020860161575d565b91505092915050565b60006020828403121561580a57615809613e2d565b5b600082015167ffffffffffffffff81111561582857615827613e32565b5b615834848285016157c6565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61587281613def565b82525050565b61588181613db3565b82525050565b61589081614f53565b82525050565b6060820160008201516158ac6000850182615869565b5060208201516158bf6020850182615878565b5060408201516158d26040850182615887565b50505050565b60006158e48383615896565b60608301905092915050565b6000602082019050919050565b60006159088261583d565b6159128185615848565b935061591d83615859565b8060005b8381101561594e57815161593588826158d8565b9750615940836158f0565b925050600181019050615921565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61599081613e90565b82525050565b6060820160008201516159ac6000850182615869565b5060208201516159bf6020850182615878565b5060408201516159d26040850182615987565b50505050565b60006159e48383615996565b60608301905092915050565b6000602082019050919050565b6000615a088261595b565b615a128185615966565b9350615a1d83615977565b8060005b83811015615a4e578151615a3588826159d8565b9750615a40836159f0565b925050600181019050615a21565b5085935050505092915050565b60006040820190508181036000830152615a7581856158fd565b90508181036020830152615a8981846159fd565b90509392505050565b7f4c6f74746572794d617374657256302e31000000000000000000000000000000600082015250565b6000615ac86011836144f6565b9150615ad382615a92565b602082019050919050565b6000604082019050615af36000830184613dc5565b8181036020830152615b0481615abb565b905092915050565b600060ff82169050919050565b615b2281615b0c565b8114615b2d57600080fd5b50565b600081519050615b3f81615b19565b92915050565b600060208284031215615b5b57615b5a613e2d565b5b6000615b6984828501615b30565b91505092915050565b60008160011c9050919050565b6000808291508390505b6001851115615bc957808604811115615ba557615ba4614573565b5b6001851615615bb45780820291505b8081029050615bc285615b72565b9450615b89565b94509492505050565b600082615be25760019050615c9e565b81615bf05760009050615c9e565b8160018114615c065760028114615c1057615c3f565b6001915050615c9e565b60ff841115615c2257615c21614573565b5b8360020a915084821115615c3957615c38614573565b5b50615c9e565b5060208310610133831016604e8410600b8410161715615c745782820a905083811115615c6f57615c6e614573565b5b615c9e565b615c818484846001615b7f565b92509050818404811115615c9857615c97614573565b5b81810290505b9392505050565b6000615cb082613def565b9150615cbb83613def565b9250615ce87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484615bd2565b905092915050565b6000615cfb82613def565b9150615d0683613def565b9250828202615d1481613def565b91508282048414831517615d2b57615d2a614573565b5b5092915050565b60006020820190508181036000830152615d4c81846154e3565b905092915050565b6000604082019050615d696000830185613dc5565b615d766020830184613dc5565b9392505050565b7f4d697373696e6720416c6c6f77616e6365000000000000000000000000000000600082015250565b6000615db36011836144f6565b9150615dbe82615d7d565b602082019050919050565b60006020820190508181036000830152615de281615da6565b9050919050565b6000615df482613f08565b915060008203615e0757615e06614573565b5b600182039050919050565b7f496e73756666696369656e742066756e64730000000000000000000000000000600082015250565b6000615e486012836144f6565b9150615e5382615e12565b602082019050919050565b60006020820190508181036000830152615e7781615e3b565b9050919050565b6000608082019050615e936000830187613df9565b8181036020830152615ea581866154e3565b9050615eb46040830185613dc5565b615ec16060830184613dc5565b95945050505050565b6000606082019050615edf6000830186613dc5565b615eec6020830185613dc5565b615ef96040830184613df9565b949350505050565b600081519050919050565b600081905092915050565b60005b83811015615f35578082015181840152602081019050615f1a565b60008484015250505050565b6000615f4c82615f01565b615f568185615f0c565b9350615f66818560208601615f17565b80840191505092915050565b6000615f7e8284615f41565b91508190509291505056fea2646970667358221220b0608700c4d9a700ab12959cd6ded4d0c8817023712661888747427683e9916f64736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4677,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "teamAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1014,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "roundCount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1017,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "rounds",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1020,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "lotteryStatus",
        "offset": 0,
        "slot": "4",
        "type": "t_enum(LotteryStatuses)1010"
      },
      {
        "astId": 1022,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "statusStartTime",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1024,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "statusEndTime",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1028,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "freeRounds",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint16)"
      },
      {
        "astId": 1032,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "crossChainOperator",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1050,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "counterForBankWallets",
        "offset": 0,
        "slot": "9",
        "type": "t_uint16"
      },
      {
        "astId": 1053,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "bankWallets",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1119,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "treasuryWallets",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 1122,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "paymentToken",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IERC20Metadata)251"
      },
      {
        "astId": 1125,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "randomizer",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(CyclixRandomizerInterface)901"
      },
      {
        "astId": 1128,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "reader",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(LotteryReaderInterface)3468"
      },
      {
        "astId": 1130,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "ticketPrice",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 1133,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "freeRoundsAreEnabled",
        "offset": 0,
        "slot": "16",
        "type": "t_bool"
      },
      {
        "astId": 1136,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "percentageOfReferralWinners",
        "offset": 1,
        "slot": "16",
        "type": "t_uint16"
      },
      {
        "astId": 1139,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "lotteryRoundCreator",
        "offset": 3,
        "slot": "16",
        "type": "t_contract(LotteryRoundCreatorInterface)4537"
      },
      {
        "astId": 1672,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "publicRoundRandomNumbersRequestId",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(CyclixRandomizerInterface)901": {
        "encoding": "inplace",
        "label": "contract CyclixRandomizerInterface",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Metadata)251": {
        "encoding": "inplace",
        "label": "contract IERC20Metadata",
        "numberOfBytes": "20"
      },
      "t_contract(LotteryReaderInterface)3468": {
        "encoding": "inplace",
        "label": "contract LotteryReaderInterface",
        "numberOfBytes": "20"
      },
      "t_contract(LotteryRoundCreatorInterface)4537": {
        "encoding": "inplace",
        "label": "contract LotteryRoundCreatorInterface",
        "numberOfBytes": "20"
      },
      "t_enum(LotteryStatuses)1010": {
        "encoding": "inplace",
        "label": "enum LotteryStatuses",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint16)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}