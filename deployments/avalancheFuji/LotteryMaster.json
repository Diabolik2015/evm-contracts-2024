{
  "address": "0x522524C7dC1786C776d373248A9E463cbe6908e2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cyclixRandomizer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lotteryReader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lotteryRoundCreator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_paymentToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_ticketPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_freeRoundsAreEnabled",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "participant",
          "type": "address[]"
        }
      ],
      "name": "addFreeRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bankWallets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint16[]",
          "name": "moreTicketNumbers",
          "type": "uint16[]"
        },
        {
          "internalType": "address",
          "name": "referral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        }
      ],
      "name": "buyTickets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimVictory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_statusEndTime",
          "type": "uint256"
        }
      ],
      "name": "closeRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counterForBankWallets",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "crossChainOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_statusEndTime",
          "type": "uint256"
        }
      ],
      "name": "fetchRoundNumbers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "freeRounds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "freeRoundsAreEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lotteryRoundCreator",
      "outputs": [
        {
          "internalType": "contract LotteryRoundCreatorInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lotteryStatus",
      "outputs": [
        {
          "internalType": "enum LotteryStatuses",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_statusEndTime",
          "type": "uint256"
        }
      ],
      "name": "markWinners",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentToken",
      "outputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "percentageOfReferralWinners",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "publicRoundRandomNumbersRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randomizer",
      "outputs": [
        {
          "internalType": "contract CyclixRandomizerInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reader",
      "outputs": [
        {
          "internalType": "contract LotteryReaderInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roundCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rounds",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendCryptoToTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "sendTokenToTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "add",
          "type": "bool"
        }
      ],
      "name": "setBankWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setCrossChainOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_statusEndTime",
          "type": "uint256"
        }
      ],
      "name": "startNewRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_statusEndTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "previousRound",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "forcedUiIdForUpgrade",
          "type": "uint256"
        }
      ],
      "name": "startNewRoundForUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "statusEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "statusStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ticketPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cyclixRandomizer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lotteryReader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lotteryRoundCreator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_paymentToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_ticketPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_percentageOfReferralWinners",
          "type": "uint16"
        },
        {
          "internalType": "uint16[]",
          "name": "_poolPercentagesBasePoints",
          "type": "uint16[]"
        },
        {
          "internalType": "bool",
          "name": "_freeRoundsAreEnabled",
          "type": "bool"
        }
      ],
      "name": "updateSetup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_teamAddress",
          "type": "address"
        }
      ],
      "name": "updateTeamAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x72522a0b61123557ae8d8a45d888e3f1c72a7ccbce6ea64ff69f3caf7908b865",
  "receipt": {
    "to": null,
    "from": "0x4eCa23Ffd5710970E22558C484a0D6943dA5eAa5",
    "contractAddress": "0x522524C7dC1786C776d373248A9E463cbe6908e2",
    "transactionIndex": 13,
    "gasUsed": "4847745",
    "logsBloom": "0x
    "blockHash": "0x1bf5f04484c94cfd8b95d6976bc76611fbf1632131699473176634bbcdcb629b",
    "transactionHash": "0x72522a0b61123557ae8d8a45d888e3f1c72a7ccbce6ea64ff69f3caf7908b865",
    "logs": [
      {
        "transactionIndex": 13,
        "blockNumber": 33027322,
        "transactionHash": "0x72522a0b61123557ae8d8a45d888e3f1c72a7ccbce6ea64ff69f3caf7908b865",
        "address": "0x522524C7dC1786C776d373248A9E463cbe6908e2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004eca23ffd5710970e22558c484a0d6943da5eaa5"
        ],
        "data": "0x",
        "logIndex": 49,
        "blockHash": "0x1bf5f04484c94cfd8b95d6976bc76611fbf1632131699473176634bbcdcb629b"
      }
    ],
    "blockNumber": 33027322,
    "cumulativeGasUsed": "7087966",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb64956dd359F30123B4f1B8057f3F1515C5627bc",
    "0x2d65BF73F4eC168F361f8e175f60A7F5bd0B92c6",
    "0xc2D29E37545642551D5Aa6eB0333070fF0015cCb",
    "0x44DA6D90C4E70f013E78526fFFbafD01FA735FDb",
    10,
    true
  ],
  "numDeployments": 1,
  "solcInputHash": "797b9c502b6304311e881f95a6a81299",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cyclixRandomizer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lotteryReader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lotteryRoundCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_freeRoundsAreEnabled\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"participant\",\"type\":\"address[]\"}],\"name\":\"addFreeRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bankWallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint16[]\",\"name\":\"moreTicketNumbers\",\"type\":\"uint16[]\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"buyTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimVictory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_statusEndTime\",\"type\":\"uint256\"}],\"name\":\"closeRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counterForBankWallets\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"crossChainOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_statusEndTime\",\"type\":\"uint256\"}],\"name\":\"fetchRoundNumbers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"freeRounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeRoundsAreEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryRoundCreator\",\"outputs\":[{\"internalType\":\"contract LotteryRoundCreatorInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryStatus\",\"outputs\":[{\"internalType\":\"enum LotteryStatuses\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_statusEndTime\",\"type\":\"uint256\"}],\"name\":\"markWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentToken\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentageOfReferralWinners\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"publicRoundRandomNumbersRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomizer\",\"outputs\":[{\"internalType\":\"contract CyclixRandomizerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reader\",\"outputs\":[{\"internalType\":\"contract LotteryReaderInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendCryptoToTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sendTokenToTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"}],\"name\":\"setBankWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setCrossChainOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_statusEndTime\",\"type\":\"uint256\"}],\"name\":\"startNewRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_statusEndTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"previousRound\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"forcedUiIdForUpgrade\",\"type\":\"uint256\"}],\"name\":\"startNewRoundForUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"statusEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"statusStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cyclixRandomizer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lotteryReader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lotteryRoundCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_percentageOfReferralWinners\",\"type\":\"uint16\"},{\"internalType\":\"uint16[]\",\"name\":\"_poolPercentagesBasePoints\",\"type\":\"uint16[]\"},{\"internalType\":\"bool\",\"name\":\"_freeRoundsAreEnabled\",\"type\":\"bool\"}],\"name\":\"updateSetup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teamAddress\",\"type\":\"address\"}],\"name\":\"updateTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LotteryMaster.sol\":\"LotteryMaster\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/CyclixRandomizerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface CyclixRandomizerInterface {\\n    function requestRandomWords(uint32 numWords) external returns (uint256 requestId);\\n    function getRequestStatus(uint256 _requestId) external view returns (bool fulfilled, uint256[] memory randomWords);\\n    function registerGameContract(address gameAddress, string calldata name) external;\\n    function getLastRequestIdForCaller(address _gameAddress) external view returns (uint256);\\n    function recoverLostNumberRequest(uint256 _requestId) external returns (uint256);\\n}\",\"keccak256\":\"0xc71c2b020044355f41cc53069e9a6f9f2778311e8d601a29bcc608301a0dfe24\",\"license\":\"MIT\"},\"contracts/LotteryCommon.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\n    enum RoundVictoryTier {\\n        Tier5_1,\\n        Tier5,\\n        Tier4_1,\\n        Tier4,\\n        Tier3_1,\\n        Tier3,\\n        Referrer,\\n        TokenHolders,\\n        Treasury,\\n        NO_WIN\\n    }\\n\\n    struct Round {\\n        uint256 id;\\n        uint256 uiId;\\n        uint256 startTime;\\n        uint256 endTime;\\n        bool ended;\\n        uint16[] roundNumbers;\\n        uint256[] referralWinnersNumber;\\n        uint16 referralWinnersNumberCount;\\n        uint256[] ticketIds;\\n        uint16 ticketsCount;\\n        uint256[] referralTicketIds;\\n        uint16 referralCounts;\\n    }\\n\\n    struct Ticket {\\n        uint256 id;\\n        address participantAddress;\\n        address referralAddress;\\n        bool claimed;\\n        uint256 chainId;\\n        RoundVictoryTier victoryTier;\\n    }\\n\\n    struct TicketResults {\\n        uint256 ticketId;\\n        address participantAddress;\\n        RoundVictoryTier victoryTier;\\n        bool won;\\n        bool claimed;\\n        uint256 amountWon;\\n    }\\n\\n    struct ReferralTicket {\\n        uint256 id;\\n        address buyerAddress;\\n        address referralAddress;\\n        uint256 referralTicketNumber;\\n        bool winner;\\n        bool claimed;\\n    }\\n\\n    struct ReferralTicketResults {\\n        uint256 referralTicketId;\\n        address buyerAddress;\\n        address referralAddress;\\n        uint256 referralTicketNumber;\\n        bool won;\\n        bool claimed;\\n        uint256 amountWon;\\n    }\",\"keccak256\":\"0x18f928f2fd3df4033c8a3ee722d2eb90b69d7b12ebd66a09d60fc679425c2a0c\",\"license\":\"UNLICENSED\"},\"contracts/LotteryMaster.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {CyclixRandomizerInterface} from \\\"./CyclixRandomizerInterface.sol\\\";\\nimport {EmergencyFunctions} from \\\"./utils/EmergencyFunctions.sol\\\";\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\nimport { LotteryRoundInterface } from \\\"./LotteryRoundInterface.sol\\\";\\nimport { LotteryReaderInterface } from \\\"./LotteryReaderInterface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./LotteryRoundCreatorInterface.sol\\\";\\n    enum LotteryStatuses {\\n        DrawOpen,\\n        EvaluatingResults,\\n        ResultsEvaluated,\\n        ClaimInProgress\\n    }\\n\\ncontract LotteryMaster is EmergencyFunctions {\\n\\n    uint256 public roundCount;\\n    address[] public rounds;\\n    LotteryStatuses public lotteryStatus;\\n    uint256 public statusStartTime;\\n    uint256 public statusEndTime;\\n\\n    mapping(address => uint256) public freeRounds;\\n    mapping(address => bool) public crossChainOperator;\\n    function setCrossChainOperator(address operator, bool value) public onlyOwner {\\n        crossChainOperator[operator] = value;\\n    }\\n\\n    uint16 public counterForBankWallets;\\n    address[] public bankWallets;\\n    function setBankWallet(address wallet, bool add) public onlyOwner {\\n        for (uint i = 0; i < bankWallets.length; i++) {\\n            if (bankWallets[i] == wallet) {\\n                if (add) {\\n                    require(false, \\\"Wallet already added\\\");\\n                } else {\\n                    bankWallets[i] = bankWallets[bankWallets.length - 1];\\n                    bankWallets.pop();\\n                }\\n            }\\n        }\\n        if (add) {\\n            bankWallets.push(wallet);\\n        }\\n    }\\n\\n    IERC20Metadata public paymentToken;\\n    CyclixRandomizerInterface public randomizer;\\n    LotteryReaderInterface public reader;\\n    uint256 public ticketPrice;\\n    bool public freeRoundsAreEnabled = false;\\n    uint16 public percentageOfReferralWinners = 10;\\n    LotteryRoundCreatorInterface public lotteryRoundCreator;\\n\\n    constructor(address cyclixRandomizer, address lotteryReader, address _lotteryRoundCreator, address _paymentToken, uint256 _ticketPrice, bool _freeRoundsAreEnabled)\\n    EmergencyFunctions(msg.sender) {\\n        randomizer = CyclixRandomizerInterface(cyclixRandomizer);\\n        randomizer.registerGameContract(address(this), \\\"LotteryMasterV0.1\\\");\\n        reader = LotteryReaderInterface(lotteryReader);\\n        lotteryRoundCreator = LotteryRoundCreatorInterface(_lotteryRoundCreator);\\n        paymentToken = IERC20Metadata(_paymentToken);\\n        ticketPrice = _ticketPrice * (10 ** uint256(paymentToken.decimals()));\\n        freeRoundsAreEnabled = _freeRoundsAreEnabled;\\n        bankWallets.push(msg.sender);\\n    }\\n\\n    function updateSetup(address cyclixRandomizer, address lotteryReader, address _lotteryRoundCreator, address _paymentToken, uint256 _ticketPrice,\\n        uint16 _percentageOfReferralWinners, uint16[] memory _poolPercentagesBasePoints, bool _freeRoundsAreEnabled) public onlyOwner {\\n        if (address(randomizer) != cyclixRandomizer) {\\n            randomizer = CyclixRandomizerInterface(cyclixRandomizer);\\n            randomizer.registerGameContract(address(this), \\\"LotteryMasterV0.1\\\");\\n        }\\n        reader = LotteryReaderInterface(lotteryReader);\\n        lotteryRoundCreator = LotteryRoundCreatorInterface(_lotteryRoundCreator);\\n        paymentToken = IERC20Metadata(_paymentToken);\\n        ticketPrice = _ticketPrice * (10 ** uint256(paymentToken.decimals()));\\n        percentageOfReferralWinners = _percentageOfReferralWinners;\\n        LotteryRoundInterface(rounds[roundCount - 1]).setPoolPercentagesBasePoints(_poolPercentagesBasePoints);\\n        freeRoundsAreEnabled = _freeRoundsAreEnabled;\\n    }\\n\\n    function startNewRound(uint256 _statusEndTime) public onlyOwner {\\n        if (roundCount > 0) {\\n            startNewRoundForUpgrade(_statusEndTime, rounds[roundCount - 1], 0);\\n        } else {\\n            startNewRoundForUpgrade(_statusEndTime, address(0), 0);\\n        }\\n    }\\n\\n    function startNewRoundForUpgrade(uint256 _statusEndTime, address previousRound, uint256 forcedUiIdForUpgrade) public onlyOwner {\\n        roundCount++;\\n        rounds.push(lotteryRoundCreator.startNewRound(_statusEndTime, previousRound, forcedUiIdForUpgrade));\\n        require(previousRound == address(0) || forcedUiIdForUpgrade > 0 || (lotteryStatus == LotteryStatuses.ClaimInProgress && statusEndTime < block.timestamp), \\\"Previous round not ended\\\");\\n        setLotteryStatus(LotteryStatuses.DrawOpen, _statusEndTime);\\n    }\\n\\n    function setLotteryStatus(LotteryStatuses _lotteryStatus, uint256 _statusEndTime) internal onlyOwner {\\n        lotteryStatus = _lotteryStatus;\\n        statusStartTime = block.timestamp;\\n        statusEndTime = block.timestamp + _statusEndTime;\\n    }\\n\\n    function buyTickets(uint256 chainId, uint16[] memory moreTicketNumbers, address referral, address buyer) public {\\n        bool paidWithFreeTicket = false;\\n        for (uint i = 0; i < moreTicketNumbers.length; i += 6) {\\n            uint16[] memory chosenNumbers = new uint16[](6);\\n            for (uint j = 0; j < 6; j++) {\\n                chosenNumbers[j] = moreTicketNumbers[i + j];\\n            }\\n            paidWithFreeTicket = buyTicket(chainId, chosenNumbers, referral, buyer);\\n        }\\n\\n        if (referral != address(0) && freeRoundsAreEnabled && !paidWithFreeTicket) {\\n            unchecked {\\n                freeRounds[buyer] = freeRounds[buyer] + moreTicketNumbers.length / 6;\\n                freeRounds[referral] = freeRounds[referral] + moreTicketNumbers.length / 6;\\n            }\\n        }\\n    }\\n\\n    function buyTicket(uint256 chainId, uint16[] memory chosenNumbers, address referral, address buyer) internal returns(bool) {\\n        require(freeRounds[buyer] > 0\\n        || paymentToken.allowance(buyer, address(this)) >= ticketPrice\\n        || crossChainOperator[msg.sender], \\\"Missing Allowance\\\");\\n        LotteryRoundInterface lotteryRound = LotteryRoundInterface(rounds[roundCount - 1]);\\n        bool paidWithFreeTicket = false;\\n        if (freeRounds[buyer] > 0) {\\n            freeRounds[buyer]--;\\n            paidWithFreeTicket = true;\\n        } else {\\n            if (!crossChainOperator[msg.sender]) {\\n                require(paymentToken.balanceOf(tx.origin) >= ticketPrice, \\\"Insufficient funds\\\");\\n                counterForBankWallets = uint16(counterForBankWallets++ % bankWallets.length);\\n                SafeERC20.safeTransferFrom(paymentToken, buyer, bankWallets[counterForBankWallets], ticketPrice);\\n            }\\n            lotteryRound.updateVictoryPoolForTicket(ticketPrice);\\n        }\\n\\n        if (paidWithFreeTicket) {\\n            lotteryRound.buyTicket(chainId, chosenNumbers, address(0), buyer);\\n        } else {\\n            lotteryRound.buyTicket(chainId, chosenNumbers, referral, buyer);\\n        }\\n        return paidWithFreeTicket;\\n    }\\n\\n    function addFreeRound(address[] calldata participant) public onlyOwner {\\n        for (uint i = 0; i < participant.length; i++) {\\n            freeRounds[participant[i]]++;\\n        }\\n    }\\n\\n    mapping(uint256 => uint256) public publicRoundRandomNumbersRequestId;\\n\\n    function closeRound(uint256 _statusEndTime) external onlyOwner {\\n        LotteryRoundInterface lotteryRound = LotteryRoundInterface(rounds[roundCount - 1]);\\n        lotteryRound.closeRound();\\n        uint16 referralWinners = reader.numberOfReferralWinnersForRoundId(roundCount);\\n        publicRoundRandomNumbersRequestId[roundCount] = randomizer.requestRandomWords(6 + referralWinners);\\n        setLotteryStatus(LotteryStatuses.EvaluatingResults, _statusEndTime);\\n    }\\n\\n    function fetchRoundNumbers(uint256 roundId, uint256 _statusEndTime) external onlyOwner {\\n        LotteryRoundInterface round = LotteryRoundInterface(rounds[roundId - 1]);\\n        round.couldReceiveWinningNumbers();\\n        (bool fulfilled, uint256[] memory randomWords) = randomizer.getRequestStatus(publicRoundRandomNumbersRequestId[roundId]);\\n        require(fulfilled, \\\"Random numbers not ready\\\");\\n        uint16[] memory roundNumbers = new uint16[](6);\\n        uint16[] memory referralWinnersNumber = new uint16[](randomWords.length - 6);\\n        if (fulfilled) {\\n            for (uint i = 0; i < 6; i++) {\\n                roundNumbers[i] = reader.getRandomUniqueNumberInArrayForMaxValue(randomWords[i], 69, roundNumbers);\\n            }\\n            roundNumbers[5] = uint16(randomWords[5] % 26 + 1);\\n            for (uint i = 6; i < randomWords.length; i++) {\\n                referralWinnersNumber [i - 6] = reader.getRandomUniqueNumberInArrayForMaxValue(randomWords[i],\\n                    round.getRound().referralCounts, referralWinnersNumber);\\n            }\\n        }\\n        round.storeWinningNumbers(roundNumbers, referralWinnersNumber);\\n        setLotteryStatus(LotteryStatuses.ResultsEvaluated, _statusEndTime);\\n    }\\n\\n    function markWinners(uint256 roundId, uint256 _statusEndTime) public onlyOwner {\\n        LotteryRoundInterface(rounds[roundId - 1]).markWinners(reader.evaluateWonTicketsForRound(roundId), reader.evaluateWonReferralForRound(roundId));\\n        setLotteryStatus(LotteryStatuses.ClaimInProgress, _statusEndTime);\\n    }\\n\\n    function claimVictory() public {\\n        require(lotteryStatus == LotteryStatuses.ClaimInProgress, \\\"Lottery is not in claim period\\\");\\n        require(statusEndTime > block.timestamp, \\\"Claim Period ended\\\");\\n        uint256 amountForEntries = reader.evaluateWonTicketsAmountForWallet(roundCount, msg.sender, false);\\n        uint256 amountForReferral = reader.evaluateWonReferralAmountForWallet(roundCount, msg.sender, false);\\n        require(amountForEntries > 0 || amountForReferral > 0, \\\"Nothing to claim for this wallet\\\");\\n        require(paymentToken.balanceOf(address(this)) >= amountForEntries + amountForReferral, \\\"Not enough funds on contract\\\");\\n        LotteryRoundInterface(rounds[roundCount - 1]).markVictoryClaimed(\\n            reader.evaluateWonTicketsForWallet(roundCount, msg.sender),\\n            reader.evaluateWonReferralFoWallet(roundCount, msg.sender)\\n        );\\n        paymentToken.transfer(msg.sender, amountForEntries + amountForReferral);\\n    }\\n}\",\"keccak256\":\"0xf6e04ea20ffdc68a8a7ff3ddeb03fe597e587ee746fb1537324bcd232a5474cf\",\"license\":\"UNLICENSED\"},\"contracts/LotteryReaderInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {TestFunctions} from \\\"./utils/TestUtils.sol\\\";\\nimport {CyclixRandomizerInterface} from \\\"./CyclixRandomizerInterface.sol\\\";\\nimport {EmergencyFunctions} from \\\"./utils/EmergencyFunctions.sol\\\";\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\n\\ninterface LotteryReaderInterface {\\n    function poolForVictoryTier(uint256 roundId, RoundVictoryTier victoryTier) external view returns(uint256) ;\\n    function poolForReferral(uint256 roundId) external view returns(uint256) ;\\n    function tokenHoldersPoolAmount(uint256 roundId) external view returns (uint256) ;\\n    function treasuryPoolAmount(uint256 roundId) external view returns (uint256) ;\\n    function numberOfReferralWinnersForRoundId(uint256 roundId) external view returns (uint16) ;\\n    function existInArrayBigNumber(uint256 num, uint256[] memory arr) external pure returns (bool) ;\\n    function existInArrayNumber(uint16 num, uint16[] memory arr) external pure returns (bool) ;\\n    function notExistInArrayNumber(uint16 num, uint16[] memory arr) external pure returns (bool) ;\\n    function getRandomUniqueNumberInArrayForMaxValue(uint256 randomNumber, uint16 maxValue, uint16[] memory arr) external pure returns (uint16) ;\\n    function tierFromResults(uint16 rightNumbersForTicket, bool powerNumberFound) external pure returns (RoundVictoryTier) ;\\n    function getTicketsForRound(uint256 roundId) external view returns(Ticket[] memory);\\n    function getAllTicketsNumbersForRound(uint256 roundId) external view returns(uint16[] memory);\\n    function getReferralTicketsForRound(uint256 roundId) external view returns(ReferralTicket[] memory);\\n    function evaluateWonTicketsForRound(uint256 roundId) external view returns (TicketResults[] memory);\\n    function evaluateWonTicketsAmountForWallet(uint256 roundId, address wallet, bool claimed) external view returns(uint256);\\n    function evaluateWonTicketsForWallet(uint256 roundId, address wallet) external view returns(TicketResults[] memory);\\n    function evaluateWonReferralForRound(uint256 roundId) external view returns (ReferralTicketResults[] memory);\\n    function evaluateWonReferralAmountForWallet(uint256 roundId, address wallet, bool claimed) external view returns(uint256);\\n    function evaluateWonReferralFoWallet(uint256 roundId, address wallet) external view returns (ReferralTicketResults[] memory);\\n    function amountWonInRound(uint256 roundId) external view returns (uint256) ;\\n    function roundNumbers(uint256 roundId) external view returns(uint16[] memory);\\n    function referralWinnersNumber(uint256 roundId) external view returns(uint256[] memory);\\n}\",\"keccak256\":\"0x815fb0592bae303a980a5bdc44ae9d50653a6606c310f1b51e6096e8f83fbb1a\",\"license\":\"UNLICENSED\"},\"contracts/LotteryRoundCreatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\ninterface LotteryRoundCreatorInterface {\\n   function startNewRound(uint256 roundDurationInSeconds, address previousRoundAddress, uint256 forcedUiIdForUpgrade) external returns(address);\\n}\",\"keccak256\":\"0xe927e4ac71030ab7137f7ea7a19f7cb8b6f074ae449fc03188237d3f2f2222fd\",\"license\":\"UNLICENSED\"},\"contracts/LotteryRoundInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\n\\ninterface LotteryRoundInterface {\\n    function getRound() external returns(Round memory);\\n    function markWinners(TicketResults[] memory ticketResults, ReferralTicketResults[] memory referralTicketResults) external;\\n    function markVictoryClaimed(TicketResults[] memory ticketResults, ReferralTicketResults[] memory referralTicketResults) external;\\n    function markReferralVictoryClaimed(uint256 referralTicketId, uint256 amountClaimed) external;\\n    function treasuryAmountOnTicket(uint256 paymentTokenAmount) external view returns (uint256);\\n    function updateVictoryPoolForTicket(uint256 paymentTokenAmount) external;\\n    function buyTicket(uint256 chainId, uint16[] memory chosenNumbers, address referral, address buyer) external;\\n    function closeRound() external;\\n    function couldReceiveWinningNumbers() external view;\\n    function storeWinningNumbers(uint16[] memory roundNumbers, uint16[] memory referralWinnersNumber) external;\\n    function ticketById(uint256 ticketId) external view returns (Ticket memory);\\n    function numbersForTicketId(uint256 ticketId) external view returns (uint16[] memory);\\n    function referralTicketById(uint256 index) external view returns (ReferralTicket memory);\\n    function setPoolPercentagesBasePoints(uint16[] memory _poolPercentagesBasePoints) external;\\n}\",\"keccak256\":\"0x5910a9ac432e27e783c9f6b5f9c595fa03d7be09a908e1d13376a76315c90e1e\",\"license\":\"UNLICENSED\"},\"contracts/utils/EmergencyFunctions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract EmergencyFunctions is Ownable {\\n    address internal teamAddress;\\n    constructor(address _teamAddress) Ownable(_teamAddress) {\\n        teamAddress = _teamAddress;\\n    }\\n\\n    function updateTeamAddress(address _teamAddress) public onlyOwner {\\n        teamAddress = _teamAddress;\\n    }\\n\\n    // Emergency Functions\\n    function sendTokenToTeam(address _token) public onlyOwner {\\n        uint256 amount = IERC20(_token).balanceOf(address(this));\\n        if (amount > 0) {\\n            SafeERC20.safeTransfer(IERC20(_token), teamAddress, amount);\\n        }\\n    }\\n\\n    function sendCryptoToTeam() public onlyOwner {\\n        if (address(this).balance > 0) {\\n            payable(teamAddress).transfer(address(this).balance);\\n        }\\n    }\\n\\n    /** @notice Check if an address is a contract */\\n    function _isContract(address _addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x68dcc6a4104e2905f65c342fdb2dbde1908113d10c006f5857b52dc0bbefd419\",\"license\":\"MIT\"},\"contracts/utils/TestUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.x <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IERC20Extension {\\n    function decimals() external view returns (uint8);\\n}\\n\\ncontract TestFunctions is Ownable {\\n    constructor() Ownable(msg.sender) {}\\n    //Used for mock testing, contract ownership will be renounced on release\\n    uint public currentTimestampOverride;\\n    function updateCurrentTimestampOverride(uint _v) external onlyOwner {\\n        currentTimestampOverride = _v;\\n    }\\n    function currentTimestamp() public view returns(uint) {\\n        if (currentTimestampOverride > 0) {\\n            return currentTimestampOverride;\\n        }\\n        return block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x8edb22ef91efc1d38ffbd50b48821f4fe23bdaf84a14de75d0df8231eb772bc4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000600f60006101000a81548160ff021916908315150217905550600a600f60016101000a81548161ffff021916908361ffff1602179055503480156200004a57600080fd5b5060405162005acd38038062005acd8339818101604052810190620000709190620005b7565b3380600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000e75760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000de919062000664565b60405180910390fd5b620000f8816200041160201b60201c565b5080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505085600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cd0f2311306040518263ffffffff1660e01b8152600401620001d99190620006e2565b600060405180830381600087803b158015620001f457600080fd5b505af115801562000209573d6000803e3d6000fd5b5050505084600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600f60036101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200033e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000364919062000752565b60ff16600a62000375919062000907565b8262000382919062000958565b600e8190555080600f60006101000a81548160ff021916908315150217905550600a339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050505050620009a3565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200050782620004da565b9050919050565b6200051981620004fa565b81146200052557600080fd5b50565b60008151905062000539816200050e565b92915050565b6000819050919050565b62000554816200053f565b81146200056057600080fd5b50565b600081519050620005748162000549565b92915050565b60008115159050919050565b62000591816200057a565b81146200059d57600080fd5b50565b600081519050620005b18162000586565b92915050565b60008060008060008060c08789031215620005d757620005d6620004d5565b5b6000620005e789828a0162000528565b9650506020620005fa89828a0162000528565b95505060406200060d89828a0162000528565b94505060606200062089828a0162000528565b93505060806200063389828a0162000563565b92505060a06200064689828a01620005a0565b9150509295509295509295565b6200065e81620004fa565b82525050565b60006020820190506200067b600083018462000653565b92915050565b600082825260208201905092915050565b7f4c6f74746572794d617374657256302e31000000000000000000000000000000600082015250565b6000620006ca60118362000681565b9150620006d78262000692565b602082019050919050565b6000604082019050620006f9600083018462000653565b81810360208301526200070c81620006bb565b905092915050565b600060ff82169050919050565b6200072c8162000714565b81146200073857600080fd5b50565b6000815190506200074c8162000721565b92915050565b6000602082840312156200076b576200076a620004d5565b5b60006200077b848285016200073b565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b60018511156200081257808604811115620007ea57620007e962000784565b5b6001851615620007fa5780820291505b80810290506200080a85620007b3565b9450620007ca565b94509492505050565b6000826200082d576001905062000900565b816200083d576000905062000900565b8160018114620008565760028114620008615762000897565b600191505062000900565b60ff84111562000876576200087562000784565b5b8360020a91508482111562000890576200088f62000784565b5b5062000900565b5060208310610133831016604e8410600b8410161715620008d15782820a905083811115620008cb57620008ca62000784565b5b62000900565b620008e08484846001620007c0565b92509050818404811115620008fa57620008f962000784565b5b81810290505b9392505050565b600062000914826200053f565b915062000921836200053f565b9250620009507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846200081b565b905092915050565b600062000965826200053f565b915062000972836200053f565b925082820262000982816200053f565b915082820484148315176200099c576200099b62000784565b5b5092915050565b61511a80620009b36000396000f3fe608060405234801561001057600080fd5b50600436106102065760003560e01c806387da46f11161011a578063b62fe01b116100ad578063d4fc42c61161007c578063d4fc42c614610577578063e03d753a14610595578063f10fb584146105b3578063f2fde38b146105d1578063f4dec22b146105ed57610206565b8063b62fe01b14610505578063bbd1783a14610521578063c96acb5a1461052b578063cedd1bc31461054757610206565b806392566fdd116100e957806392566fdd14610493578063998da3e9146104b1578063a8eed12d146104cd578063b33d8c54146104e957610206565b806387da46f11461040b57806388e01a98146104295780638c65c81f146104455780638da5cb5b1461047557610206565b8063258799f81161019d57806362cd30d11161016c57806362cd30d11461037d578063715018a61461039957806375e5460d146103a35780637a5ed721146103d3578063839163ae146103ef57610206565b8063258799f8146102f55780633013ce29146103255780633fda7d95146103435780634615102c1461036157610206565b80631abddf33116101d95780631abddf33146102815780631ed15aa41461028b5780631fcebf68146102a757806322429429146102d757610206565b80630d683dd91461020b5780631209b1f614610229578063127f0b3f1461024757806314eb76ac14610265575b600080fd5b61021361060b565b604051610220919061314e565b60405180910390f35b61023161061e565b60405161023e9190613182565b60405180910390f35b61024f610624565b60405161025c9190613182565b60405180910390f35b61027f600480360381019061027a919061320f565b61062a565b005b610289610676565b005b6102a560048036038101906102a09190613274565b610c65565b005b6102c160048036038101906102bc919061320f565b610eab565b6040516102ce9190613182565b60405180910390f35b6102df610ec3565b6040516102ec9190613182565b60405180910390f35b61030f600480360381019061030a91906132e0565b610ec9565b60405161031c919061331c565b60405180910390f35b61032d610f08565b60405161033a9190613396565b60405180910390f35b61034b610f2e565b6040516103589190613182565b60405180910390f35b61037b600480360381019061037691906132e0565b610f34565b005b61039760048036038101906103929190613544565b610fb4565b005b6103a161134c565b005b6103bd60048036038101906103b8919061320f565b611360565b6040516103ca9190613625565b60405180910390f35b6103ed60048036038101906103e89190613640565b611380565b005b610409600480360381019061040491906136c3565b6115f6565b005b6104136117ee565b6040516104209190613737565b60405180910390f35b610443600480360381019061043e91906132e0565b611814565b005b61045f600480360381019061045a91906132e0565b611a42565b60405161046c919061331c565b60405180910390f35b61047d611a81565b60405161048a919061331c565b60405180910390f35b61049b611aaa565b6040516104a89190613761565b60405180910390f35b6104cb60048036038101906104c6919061320f565b611abe565b005b6104e760048036038101906104e29190613274565b611b7f565b005b61050360048036038101906104fe91906137d7565b611be2565b005b61051f600480360381019061051a9190613824565b611c86565b005b610529612249565b005b61054560048036038101906105409190613824565b6122c6565b005b610561600480360381019061055c91906132e0565b6124d4565b60405161056e9190613182565b60405180910390f35b61057f6124ec565b60405161058c9190613885565b60405180910390f35b61059d612512565b6040516105aa9190613625565b60405180910390f35b6105bb612525565b6040516105c891906138c1565b60405180910390f35b6105eb60048036038101906105e6919061320f565b61254b565b005b6105f56125d1565b6040516106029190613761565b60405180910390f35b600460009054906101000a900460ff1681565b600e5481565b60025481565b6106326125e5565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600380811115610689576106886130d7565b5b600460009054906101000a900460ff1660038111156106ab576106aa6130d7565b5b146106eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e290613939565b60405180910390fd5b426006541161072f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610726906139a5565b60405180910390fd5b6000600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b7991e336002543360006040518463ffffffff1660e01b8152600401610793939291906139c5565b602060405180830381865afa1580156107b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d49190613a11565b90506000600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a521dc956002543360006040518463ffffffff1660e01b815260040161083a939291906139c5565b602060405180830381865afa158015610857573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087b9190613a11565b9050600082118061088c5750600081115b6108cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c290613a8a565b60405180910390fd5b80826108d79190613ad9565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610932919061331c565b602060405180830381865afa15801561094f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109739190613a11565b10156109b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ab90613b59565b60405180910390fd5b600360016002546109c59190613b79565b815481106109d6576109d5613bad565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b82e18ff600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663eed25896600254336040518363ffffffff1660e01b8152600401610a7b929190613bdc565b600060405180830381865afa158015610a98573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610ac19190613dc1565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166317ba3b7d600254336040518363ffffffff1660e01b8152600401610b20929190613bdc565b600060405180830381865afa158015610b3d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610b669190613f81565b6040518363ffffffff1660e01b8152600401610b839291906142a6565b600060405180830381600087803b158015610b9d57600080fd5b505af1158015610bb1573d6000803e3d6000fd5b50505050600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338385610c009190613ad9565b6040518363ffffffff1660e01b8152600401610c1d9291906142dd565b6020604051808303816000875af1158015610c3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c609190614306565b505050565b610c6d6125e5565b60005b600a80549050811015610e3c578273ffffffffffffffffffffffffffffffffffffffff16600a8281548110610ca857610ca7613bad565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610e2f578115610d3a576000610d35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2c9061437f565b60405180910390fd5b610e2e565b600a6001600a80549050610d4e9190613b79565b81548110610d5f57610d5e613bad565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a8281548110610d9e57610d9d613bad565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600a805480610df857610df761439f565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590555b5b8080600101915050610c70565b508015610ea757600a829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5050565b60076020528060005260406000206000915090505481565b60065481565b600a8181548110610ed957600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b610f3c6125e5565b60006002541115610fa457610f9f8160036001600254610f5c9190613b79565b81548110610f6d57610f6c613bad565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660006115f6565b610fb1565b610fb0816000806115f6565b5b50565b610fbc6125e5565b8773ffffffffffffffffffffffffffffffffffffffff16600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146110e05787600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cd0f2311306040518263ffffffff1660e01b81526004016110ad919061441a565b600060405180830381600087803b1580156110c757600080fd5b505af11580156110db573d6000803e3d6000fd5b505050505b86600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600f60036101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611210573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112349190614481565b60ff16600a61124391906145e1565b8461124e919061462c565b600e8190555082600f60016101000a81548161ffff021916908361ffff160217905550600360016002546112829190613b79565b8154811061129357611292613bad565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639469f293836040518263ffffffff1660e01b81526004016112f6919061472c565b600060405180830381600087803b15801561131057600080fd5b505af1158015611324573d6000803e3d6000fd5b5050505080600f60006101000a81548160ff0219169083151502179055505050505050505050565b6113546125e5565b61135e600061266c565b565b60086020528060005260406000206000915054906101000a900460ff1681565b6000805b8451811015611467576000600667ffffffffffffffff8111156113aa576113a9613401565b5b6040519080825280602002602001820160405280156113d85781602001602082028036833780820191505090505b50905060005b6006811015611443578681846113f49190613ad9565b8151811061140557611404613bad565b5b60200260200101518282815181106114205761141f613bad565b5b602002602001019061ffff16908161ffff168152505080806001019150506113de565b5061145087828787612730565b9250506006816114609190613ad9565b9050611384565b50600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156114b15750600f60009054906101000a900460ff165b80156114bb575080155b156115ef5760068451816114d2576114d161474e565b5b04600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060068451816115695761156861474e565b5b04600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5050505050565b6115fe6125e5565b600260008154809291906116119061477d565b91905055506003600f60039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f199f5308585856040518463ffffffff1660e01b8152600401611677939291906147c5565b6020604051808303816000875af1158015611696573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ba91906147fc565b9080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614806117555750600081115b8061179f575060038081111561176e5761176d6130d7565b5b600460009054906101000a900460ff1660038111156117905761178f6130d7565b5b14801561179e575042600654105b5b6117de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117d590614875565b60405180910390fd5b6117e9600084612d31565b505050565b600f60039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61181c6125e5565b60006003600160025461182f9190613b79565b815481106118405761183f613bad565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663e278fe6f6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156118b557600080fd5b505af11580156118c9573d6000803e3d6000fd5b505050506000600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f1664df66002546040518263ffffffff1660e01b815260040161192c9190613182565b602060405180830381865afa158015611949573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196d91906148aa565b9050600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e726f2e18260066119ba91906148d7565b6040518263ffffffff1660e01b81526004016119d6919061494e565b6020604051808303816000875af11580156119f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a199190613a11565b60106000600254815260200190815260200160002081905550611a3d600184612d31565b505050565b60038181548110611a5257600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600960009054906101000a900461ffff1681565b611ac66125e5565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611b01919061331c565b602060405180830381865afa158015611b1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b429190613a11565b90506000811115611b7b57611b7a82600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683612d80565b5b5050565b611b876125e5565b80600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b611bea6125e5565b60005b82829050811015611c815760076000848484818110611c0f57611c0e613bad565b5b9050602002016020810190611c24919061320f565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190611c6f9061477d565b91905055508080600101915050611bed565b505050565b611c8e6125e5565b60006003600184611c9f9190613b79565b81548110611cb057611caf613bad565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663343f25666040518163ffffffff1660e01b815260040160006040518083038186803b158015611d2357600080fd5b505afa158015611d37573d6000803e3d6000fd5b50505050600080600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d8a4676f60106000888152602001908152602001600020546040518263ffffffff1660e01b8152600401611dac9190613182565b600060405180830381865afa158015611dc9573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611df29190614a2c565b9150915081611e36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e2d90614ad4565b60405180910390fd5b6000600667ffffffffffffffff811115611e5357611e52613401565b5b604051908082528060200260200182016040528015611e815781602001602082028036833780820191505090505b509050600060068351611e949190613b79565b67ffffffffffffffff811115611ead57611eac613401565b5b604051908082528060200260200182016040528015611edb5781602001602082028036833780820191505090505b50905083156121c85760005b6006811015611fe157600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c746a8a858381518110611f4157611f40613bad565b5b60200260200101516045866040518463ffffffff1660e01b8152600401611f6a93929190614b2f565b602060405180830381865afa158015611f87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fab91906148aa565b838281518110611fbe57611fbd613bad565b5b602002602001019061ffff16908161ffff16815250508080600101915050611ee7565b506001601a84600581518110611ffa57611ff9613bad565b5b602002602001015161200c9190614b6d565b6120169190613ad9565b8260058151811061202a57612029613bad565b5b602002602001019061ffff16908161ffff16815250506000600690505b83518110156121c657600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c746a8a8583815181106120a1576120a0613bad565b5b60200260200101518873ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b81526004016000604051808303816000875af11580156120f6573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061211f9190614dc7565b6101600151856040518463ffffffff1660e01b815260040161214393929190614e10565b602060405180830381865afa158015612160573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061218491906148aa565b826006836121929190613b79565b815181106121a3576121a2613bad565b5b602002602001019061ffff16908161ffff16815250508080600101915050612047565b505b8473ffffffffffffffffffffffffffffffffffffffff16632724d10483836040518363ffffffff1660e01b8152600401612203929190614e4e565b600060405180830381600087803b15801561221d57600080fd5b505af1158015612231573d6000803e3d6000fd5b50505050612240600287612d31565b50505050505050565b6122516125e5565b60004711156122c457600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156122c2573d6000803e3d6000fd5b505b565b6122ce6125e5565b60036001836122dd9190613b79565b815481106122ee576122ed613bad565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166327e4de61600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639f75e5c9856040518263ffffffff1660e01b815260040161238f9190613182565b600060405180830381865afa1580156123ac573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906123d59190613dc1565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166348b2e35c866040518263ffffffff1660e01b81526004016124309190613182565b600060405180830381865afa15801561244d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906124769190613f81565b6040518363ffffffff1660e01b81526004016124939291906142a6565b600060405180830381600087803b1580156124ad57600080fd5b505af11580156124c1573d6000803e3d6000fd5b505050506124d0600382612d31565b5050565b60106020528060005260406000206000915090505481565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600f60009054906101000a900460ff1681565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6125536125e5565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036125c55760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016125bc919061331c565b60405180910390fd5b6125ce8161266c565b50565b600f60019054906101000a900461ffff1681565b6125ed612dff565b73ffffffffffffffffffffffffffffffffffffffff1661260b611a81565b73ffffffffffffffffffffffffffffffffffffffff161461266a5761262e612dff565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401612661919061331c565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054118061281e5750600e54600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e84306040518363ffffffff1660e01b81526004016127da929190614e85565b602060405180830381865afa1580156127f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061281b9190613a11565b10155b806128725750600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6128b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128a890614efa565b60405180910390fd5b6000600360016002546128c49190613b79565b815481106128d5576128d4613bad565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600080600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411156129a957600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919061299b90614f1a565b919050555060019050612c35565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16612bc757600e54600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231326040518263ffffffff1660e01b8152600401612a58919061331c565b602060405180830381865afa158015612a75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a999190613a11565b1015612ada576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ad190614f8f565b60405180910390fd5b600a805490506009600081819054906101000a900461ffff1680929190612b0090614faf565b91906101000a81548161ffff021916908361ffff16021790555061ffff16612b289190614b6d565b600960006101000a81548161ffff021916908361ffff160217905550612bc6600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685600a600960009054906101000a900461ffff1661ffff1681548110612b9357612b92613bad565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600e54612e07565b5b8173ffffffffffffffffffffffffffffffffffffffff1663b56c12b4600e546040518263ffffffff1660e01b8152600401612c029190613182565b600060405180830381600087803b158015612c1c57600080fd5b505af1158015612c30573d6000803e3d6000fd5b505050505b8015612cb2578173ffffffffffffffffffffffffffffffffffffffff1663eb7165fa88886000886040518563ffffffff1660e01b8152600401612c7b9493929190614fd9565b600060405180830381600087803b158015612c9557600080fd5b505af1158015612ca9573d6000803e3d6000fd5b50505050612d24565b8173ffffffffffffffffffffffffffffffffffffffff1663eb7165fa888888886040518563ffffffff1660e01b8152600401612cf19493929190614fd9565b600060405180830381600087803b158015612d0b57600080fd5b505af1158015612d1f573d6000803e3d6000fd5b505050505b8092505050949350505050565b612d396125e5565b81600460006101000a81548160ff02191690836003811115612d5e57612d5d6130d7565b5b0217905550426005819055508042612d769190613ad9565b6006819055505050565b612dfa838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401612db39291906142dd565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612e89565b505050565b600033905090565b612e83848573ffffffffffffffffffffffffffffffffffffffff166323b872dd868686604051602401612e3c93929190615025565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612e89565b50505050565b6000612eb4828473ffffffffffffffffffffffffffffffffffffffff16612f2090919063ffffffff16565b90506000815114158015612ed9575080806020019051810190612ed79190614306565b155b15612f1b57826040517f5274afe7000000000000000000000000000000000000000000000000000000008152600401612f12919061331c565b60405180910390fd5b505050565b6060612f2e83836000612f36565b905092915050565b606081471015612f7d57306040517fcd786059000000000000000000000000000000000000000000000000000000008152600401612f74919061331c565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff168486604051612fa691906150cd565b60006040518083038185875af1925050503d8060008114612fe3576040519150601f19603f3d011682016040523d82523d6000602084013e612fe8565b606091505b5091509150612ff8868383613003565b925050509392505050565b6060826130185761301382613092565b61308a565b60008251148015613040575060008473ffffffffffffffffffffffffffffffffffffffff163b145b1561308257836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401613079919061331c565b60405180910390fd5b81905061308b565b5b9392505050565b6000815111156130a55780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110613117576131166130d7565b5b50565b600081905061312882613106565b919050565b60006131388261311a565b9050919050565b6131488161312d565b82525050565b6000602082019050613163600083018461313f565b92915050565b6000819050919050565b61317c81613169565b82525050565b60006020820190506131976000830184613173565b92915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006131dc826131b1565b9050919050565b6131ec816131d1565b81146131f757600080fd5b50565b600081359050613209816131e3565b92915050565b600060208284031215613225576132246131a7565b5b6000613233848285016131fa565b91505092915050565b60008115159050919050565b6132518161323c565b811461325c57600080fd5b50565b60008135905061326e81613248565b92915050565b6000806040838503121561328b5761328a6131a7565b5b6000613299858286016131fa565b92505060206132aa8582860161325f565b9150509250929050565b6132bd81613169565b81146132c857600080fd5b50565b6000813590506132da816132b4565b92915050565b6000602082840312156132f6576132f56131a7565b5b6000613304848285016132cb565b91505092915050565b613316816131d1565b82525050565b6000602082019050613331600083018461330d565b92915050565b6000819050919050565b600061335c613357613352846131b1565b613337565b6131b1565b9050919050565b600061336e82613341565b9050919050565b600061338082613363565b9050919050565b61339081613375565b82525050565b60006020820190506133ab6000830184613387565b92915050565b600061ffff82169050919050565b6133c8816133b1565b81146133d357600080fd5b50565b6000813590506133e5816133bf565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613439826133f0565b810181811067ffffffffffffffff8211171561345857613457613401565b5b80604052505050565b600061346b61319d565b90506134778282613430565b919050565b600067ffffffffffffffff82111561349757613496613401565b5b602082029050602081019050919050565b600080fd5b60006134c06134bb8461347c565b613461565b905080838252602082019050602084028301858111156134e3576134e26134a8565b5b835b8181101561350c57806134f888826133d6565b8452602084019350506020810190506134e5565b5050509392505050565b600082601f83011261352b5761352a6133eb565b5b813561353b8482602086016134ad565b91505092915050565b600080600080600080600080610100898b031215613565576135646131a7565b5b60006135738b828c016131fa565b98505060206135848b828c016131fa565b97505060406135958b828c016131fa565b96505060606135a68b828c016131fa565b95505060806135b78b828c016132cb565b94505060a06135c88b828c016133d6565b93505060c089013567ffffffffffffffff8111156135e9576135e86131ac565b5b6135f58b828c01613516565b92505060e06136068b828c0161325f565b9150509295985092959890939650565b61361f8161323c565b82525050565b600060208201905061363a6000830184613616565b92915050565b6000806000806080858703121561365a576136596131a7565b5b6000613668878288016132cb565b945050602085013567ffffffffffffffff811115613689576136886131ac565b5b61369587828801613516565b93505060406136a6878288016131fa565b92505060606136b7878288016131fa565b91505092959194509250565b6000806000606084860312156136dc576136db6131a7565b5b60006136ea868287016132cb565b93505060206136fb868287016131fa565b925050604061370c868287016132cb565b9150509250925092565b600061372182613363565b9050919050565b61373181613716565b82525050565b600060208201905061374c6000830184613728565b92915050565b61375b816133b1565b82525050565b60006020820190506137766000830184613752565b92915050565b600080fd5b60008083601f840112613797576137966133eb565b5b8235905067ffffffffffffffff8111156137b4576137b361377c565b5b6020830191508360208202830111156137d0576137cf6134a8565b5b9250929050565b600080602083850312156137ee576137ed6131a7565b5b600083013567ffffffffffffffff81111561380c5761380b6131ac565b5b61381885828601613781565b92509250509250929050565b6000806040838503121561383b5761383a6131a7565b5b6000613849858286016132cb565b925050602061385a858286016132cb565b9150509250929050565b600061386f82613363565b9050919050565b61387f81613864565b82525050565b600060208201905061389a6000830184613876565b92915050565b60006138ab82613363565b9050919050565b6138bb816138a0565b82525050565b60006020820190506138d660008301846138b2565b92915050565b600082825260208201905092915050565b7f4c6f7474657279206973206e6f7420696e20636c61696d20706572696f640000600082015250565b6000613923601e836138dc565b915061392e826138ed565b602082019050919050565b6000602082019050818103600083015261395281613916565b9050919050565b7f436c61696d20506572696f6420656e6465640000000000000000000000000000600082015250565b600061398f6012836138dc565b915061399a82613959565b602082019050919050565b600060208201905081810360008301526139be81613982565b9050919050565b60006060820190506139da6000830186613173565b6139e7602083018561330d565b6139f46040830184613616565b949350505050565b600081519050613a0b816132b4565b92915050565b600060208284031215613a2757613a266131a7565b5b6000613a35848285016139fc565b91505092915050565b7f4e6f7468696e6720746f20636c61696d20666f7220746869732077616c6c6574600082015250565b6000613a746020836138dc565b9150613a7f82613a3e565b602082019050919050565b60006020820190508181036000830152613aa381613a67565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613ae482613169565b9150613aef83613169565b9250828201905080821115613b0757613b06613aaa565b5b92915050565b7f4e6f7420656e6f7567682066756e6473206f6e20636f6e747261637400000000600082015250565b6000613b43601c836138dc565b9150613b4e82613b0d565b602082019050919050565b60006020820190508181036000830152613b7281613b36565b9050919050565b6000613b8482613169565b9150613b8f83613169565b9250828203905081811115613ba757613ba6613aaa565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000604082019050613bf16000830185613173565b613bfe602083018461330d565b9392505050565b600067ffffffffffffffff821115613c2057613c1f613401565b5b602082029050602081019050919050565b600080fd5b600080fd5b600081519050613c4a816131e3565b92915050565b600a8110613c5d57600080fd5b50565b600081519050613c6f81613c50565b92915050565b600081519050613c8481613248565b92915050565b600060c08284031215613ca057613c9f613c31565b5b613caa60c0613461565b90506000613cba848285016139fc565b6000830152506020613cce84828501613c3b565b6020830152506040613ce284828501613c60565b6040830152506060613cf684828501613c75565b6060830152506080613d0a84828501613c75565b60808301525060a0613d1e848285016139fc565b60a08301525092915050565b6000613d3d613d3884613c05565b613461565b90508083825260208201905060c08402830185811115613d6057613d5f6134a8565b5b835b81811015613d895780613d758882613c8a565b84526020840193505060c081019050613d62565b5050509392505050565b600082601f830112613da857613da76133eb565b5b8151613db8848260208601613d2a565b91505092915050565b600060208284031215613dd757613dd66131a7565b5b600082015167ffffffffffffffff811115613df557613df46131ac565b5b613e0184828501613d93565b91505092915050565b600067ffffffffffffffff821115613e2557613e24613401565b5b602082029050602081019050919050565b600060e08284031215613e4c57613e4b613c31565b5b613e5660e0613461565b90506000613e66848285016139fc565b6000830152506020613e7a84828501613c3b565b6020830152506040613e8e84828501613c3b565b6040830152506060613ea2848285016139fc565b6060830152506080613eb684828501613c75565b60808301525060a0613eca84828501613c75565b60a08301525060c0613ede848285016139fc565b60c08301525092915050565b6000613efd613ef884613e0a565b613461565b90508083825260208201905060e08402830185811115613f2057613f1f6134a8565b5b835b81811015613f495780613f358882613e36565b84526020840193505060e081019050613f22565b5050509392505050565b600082601f830112613f6857613f676133eb565b5b8151613f78848260208601613eea565b91505092915050565b600060208284031215613f9757613f966131a7565b5b600082015167ffffffffffffffff811115613fb557613fb46131ac565b5b613fc184828501613f53565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613fff81613169565b82525050565b61400e816131d1565b82525050565b600a8110614025576140246130d7565b5b50565b600081905061403682614014565b919050565b600061404682614028565b9050919050565b6140568161403b565b82525050565b6140658161323c565b82525050565b60c0820160008201516140816000850182613ff6565b5060208201516140946020850182614005565b5060408201516140a7604085018261404d565b5060608201516140ba606085018261405c565b5060808201516140cd608085018261405c565b5060a08201516140e060a0850182613ff6565b50505050565b60006140f2838361406b565b60c08301905092915050565b6000602082019050919050565b600061411682613fca565b6141208185613fd5565b935061412b83613fe6565b8060005b8381101561415c57815161414388826140e6565b975061414e836140fe565b92505060018101905061412f565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60e0820160008201516141ab6000850182613ff6565b5060208201516141be6020850182614005565b5060408201516141d16040850182614005565b5060608201516141e46060850182613ff6565b5060808201516141f7608085018261405c565b5060a082015161420a60a085018261405c565b5060c082015161421d60c0850182613ff6565b50505050565b600061422f8383614195565b60e08301905092915050565b6000602082019050919050565b600061425382614169565b61425d8185614174565b935061426883614185565b8060005b838110156142995781516142808882614223565b975061428b8361423b565b92505060018101905061426c565b5085935050505092915050565b600060408201905081810360008301526142c0818561410b565b905081810360208301526142d48184614248565b90509392505050565b60006040820190506142f2600083018561330d565b6142ff6020830184613173565b9392505050565b60006020828403121561431c5761431b6131a7565b5b600061432a84828501613c75565b91505092915050565b7f57616c6c657420616c7265616479206164646564000000000000000000000000600082015250565b60006143696014836138dc565b915061437482614333565b602082019050919050565b600060208201905081810360008301526143988161435c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4c6f74746572794d617374657256302e31000000000000000000000000000000600082015250565b60006144046011836138dc565b915061440f826143ce565b602082019050919050565b600060408201905061442f600083018461330d565b8181036020830152614440816143f7565b905092915050565b600060ff82169050919050565b61445e81614448565b811461446957600080fd5b50565b60008151905061447b81614455565b92915050565b600060208284031215614497576144966131a7565b5b60006144a58482850161446c565b91505092915050565b60008160011c9050919050565b6000808291508390505b6001851115614505578086048111156144e1576144e0613aaa565b5b60018516156144f05780820291505b80810290506144fe856144ae565b94506144c5565b94509492505050565b60008261451e57600190506145da565b8161452c57600090506145da565b8160018114614542576002811461454c5761457b565b60019150506145da565b60ff84111561455e5761455d613aaa565b5b8360020a91508482111561457557614574613aaa565b5b506145da565b5060208310610133831016604e8410600b84101617156145b05782820a9050838111156145ab576145aa613aaa565b5b6145da565b6145bd84848460016144bb565b925090508184048111156145d4576145d3613aaa565b5b81810290505b9392505050565b60006145ec82613169565b91506145f783613169565b92506146247fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461450e565b905092915050565b600061463782613169565b915061464283613169565b925082820261465081613169565b9150828204841483151761466757614666613aaa565b5b5092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6146a3816133b1565b82525050565b60006146b5838361469a565b60208301905092915050565b6000602082019050919050565b60006146d98261466e565b6146e38185614679565b93506146ee8361468a565b8060005b8381101561471f57815161470688826146a9565b9750614711836146c1565b9250506001810190506146f2565b5085935050505092915050565b6000602082019050818103600083015261474681846146ce565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061478882613169565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036147ba576147b9613aaa565b5b600182019050919050565b60006060820190506147da6000830186613173565b6147e7602083018561330d565b6147f46040830184613173565b949350505050565b600060208284031215614812576148116131a7565b5b600061482084828501613c3b565b91505092915050565b7f50726576696f757320726f756e64206e6f7420656e6465640000000000000000600082015250565b600061485f6018836138dc565b915061486a82614829565b602082019050919050565b6000602082019050818103600083015261488e81614852565b9050919050565b6000815190506148a4816133bf565b92915050565b6000602082840312156148c0576148bf6131a7565b5b60006148ce84828501614895565b91505092915050565b60006148e2826133b1565b91506148ed836133b1565b9250828201905061ffff81111561490757614906613aaa565b5b92915050565b600063ffffffff82169050919050565b600061493861493361492e846133b1565b613337565b61490d565b9050919050565b6149488161491d565b82525050565b6000602082019050614963600083018461493f565b92915050565b600067ffffffffffffffff82111561498457614983613401565b5b602082029050602081019050919050565b60006149a86149a384614969565b613461565b905080838252602082019050602084028301858111156149cb576149ca6134a8565b5b835b818110156149f457806149e088826139fc565b8452602084019350506020810190506149cd565b5050509392505050565b600082601f830112614a1357614a126133eb565b5b8151614a23848260208601614995565b91505092915050565b60008060408385031215614a4357614a426131a7565b5b6000614a5185828601613c75565b925050602083015167ffffffffffffffff811115614a7257614a716131ac565b5b614a7e858286016149fe565b9150509250929050565b7f52616e646f6d206e756d62657273206e6f742072656164790000000000000000600082015250565b6000614abe6018836138dc565b9150614ac982614a88565b602082019050919050565b60006020820190508181036000830152614aed81614ab1565b9050919050565b6000819050919050565b6000614b19614b14614b0f84614af4565b613337565b6133b1565b9050919050565b614b2981614afe565b82525050565b6000606082019050614b446000830186613173565b614b516020830185614b20565b8181036040830152614b6381846146ce565b9050949350505050565b6000614b7882613169565b9150614b8383613169565b925082614b9357614b9261474e565b5b828206905092915050565b6000614bb1614bac8461347c565b613461565b90508083825260208201905060208402830185811115614bd457614bd36134a8565b5b835b81811015614bfd5780614be98882614895565b845260208401935050602081019050614bd6565b5050509392505050565b600082601f830112614c1c57614c1b6133eb565b5b8151614c2c848260208601614b9e565b91505092915050565b60006101808284031215614c4c57614c4b613c31565b5b614c57610180613461565b90506000614c67848285016139fc565b6000830152506020614c7b848285016139fc565b6020830152506040614c8f848285016139fc565b6040830152506060614ca3848285016139fc565b6060830152506080614cb784828501613c75565b60808301525060a082015167ffffffffffffffff811115614cdb57614cda613c36565b5b614ce784828501614c07565b60a08301525060c082015167ffffffffffffffff811115614d0b57614d0a613c36565b5b614d17848285016149fe565b60c08301525060e0614d2b84828501614895565b60e08301525061010082015167ffffffffffffffff811115614d5057614d4f613c36565b5b614d5c848285016149fe565b61010083015250610120614d7284828501614895565b6101208301525061014082015167ffffffffffffffff811115614d9857614d97613c36565b5b614da4848285016149fe565b61014083015250610160614dba84828501614895565b6101608301525092915050565b600060208284031215614ddd57614ddc6131a7565b5b600082015167ffffffffffffffff811115614dfb57614dfa6131ac565b5b614e0784828501614c35565b91505092915050565b6000606082019050614e256000830186613173565b614e326020830185613752565b8181036040830152614e4481846146ce565b9050949350505050565b60006040820190508181036000830152614e6881856146ce565b90508181036020830152614e7c81846146ce565b90509392505050565b6000604082019050614e9a600083018561330d565b614ea7602083018461330d565b9392505050565b7f4d697373696e6720416c6c6f77616e6365000000000000000000000000000000600082015250565b6000614ee46011836138dc565b9150614eef82614eae565b602082019050919050565b60006020820190508181036000830152614f1381614ed7565b9050919050565b6000614f2582613169565b915060008203614f3857614f37613aaa565b5b600182039050919050565b7f496e73756666696369656e742066756e64730000000000000000000000000000600082015250565b6000614f796012836138dc565b9150614f8482614f43565b602082019050919050565b60006020820190508181036000830152614fa881614f6c565b9050919050565b6000614fba826133b1565b915061ffff8203614fce57614fcd613aaa565b5b600182019050919050565b6000608082019050614fee6000830187613173565b818103602083015261500081866146ce565b905061500f604083018561330d565b61501c606083018461330d565b95945050505050565b600060608201905061503a600083018661330d565b615047602083018561330d565b6150546040830184613173565b949350505050565b600081519050919050565b600081905092915050565b60005b83811015615090578082015181840152602081019050615075565b60008484015250505050565b60006150a78261505c565b6150b18185615067565b93506150c1818560208601615072565b80840191505092915050565b60006150d9828461509c565b91508190509291505056fea264697066735822122059268a9db22a03b69bae6b79afbb6f7a1e61b62fff3796c24e831cdf27b3f79964736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102065760003560e01c806387da46f11161011a578063b62fe01b116100ad578063d4fc42c61161007c578063d4fc42c614610577578063e03d753a14610595578063f10fb584146105b3578063f2fde38b146105d1578063f4dec22b146105ed57610206565b8063b62fe01b14610505578063bbd1783a14610521578063c96acb5a1461052b578063cedd1bc31461054757610206565b806392566fdd116100e957806392566fdd14610493578063998da3e9146104b1578063a8eed12d146104cd578063b33d8c54146104e957610206565b806387da46f11461040b57806388e01a98146104295780638c65c81f146104455780638da5cb5b1461047557610206565b8063258799f81161019d57806362cd30d11161016c57806362cd30d11461037d578063715018a61461039957806375e5460d146103a35780637a5ed721146103d3578063839163ae146103ef57610206565b8063258799f8146102f55780633013ce29146103255780633fda7d95146103435780634615102c1461036157610206565b80631abddf33116101d95780631abddf33146102815780631ed15aa41461028b5780631fcebf68146102a757806322429429146102d757610206565b80630d683dd91461020b5780631209b1f614610229578063127f0b3f1461024757806314eb76ac14610265575b600080fd5b61021361060b565b604051610220919061314e565b60405180910390f35b61023161061e565b60405161023e9190613182565b60405180910390f35b61024f610624565b60405161025c9190613182565b60405180910390f35b61027f600480360381019061027a919061320f565b61062a565b005b610289610676565b005b6102a560048036038101906102a09190613274565b610c65565b005b6102c160048036038101906102bc919061320f565b610eab565b6040516102ce9190613182565b60405180910390f35b6102df610ec3565b6040516102ec9190613182565b60405180910390f35b61030f600480360381019061030a91906132e0565b610ec9565b60405161031c919061331c565b60405180910390f35b61032d610f08565b60405161033a9190613396565b60405180910390f35b61034b610f2e565b6040516103589190613182565b60405180910390f35b61037b600480360381019061037691906132e0565b610f34565b005b61039760048036038101906103929190613544565b610fb4565b005b6103a161134c565b005b6103bd60048036038101906103b8919061320f565b611360565b6040516103ca9190613625565b60405180910390f35b6103ed60048036038101906103e89190613640565b611380565b005b610409600480360381019061040491906136c3565b6115f6565b005b6104136117ee565b6040516104209190613737565b60405180910390f35b610443600480360381019061043e91906132e0565b611814565b005b61045f600480360381019061045a91906132e0565b611a42565b60405161046c919061331c565b60405180910390f35b61047d611a81565b60405161048a919061331c565b60405180910390f35b61049b611aaa565b6040516104a89190613761565b60405180910390f35b6104cb60048036038101906104c6919061320f565b611abe565b005b6104e760048036038101906104e29190613274565b611b7f565b005b61050360048036038101906104fe91906137d7565b611be2565b005b61051f600480360381019061051a9190613824565b611c86565b005b610529612249565b005b61054560048036038101906105409190613824565b6122c6565b005b610561600480360381019061055c91906132e0565b6124d4565b60405161056e9190613182565b60405180910390f35b61057f6124ec565b60405161058c9190613885565b60405180910390f35b61059d612512565b6040516105aa9190613625565b60405180910390f35b6105bb612525565b6040516105c891906138c1565b60405180910390f35b6105eb60048036038101906105e6919061320f565b61254b565b005b6105f56125d1565b6040516106029190613761565b60405180910390f35b600460009054906101000a900460ff1681565b600e5481565b60025481565b6106326125e5565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600380811115610689576106886130d7565b5b600460009054906101000a900460ff1660038111156106ab576106aa6130d7565b5b146106eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e290613939565b60405180910390fd5b426006541161072f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610726906139a5565b60405180910390fd5b6000600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b7991e336002543360006040518463ffffffff1660e01b8152600401610793939291906139c5565b602060405180830381865afa1580156107b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d49190613a11565b90506000600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a521dc956002543360006040518463ffffffff1660e01b815260040161083a939291906139c5565b602060405180830381865afa158015610857573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087b9190613a11565b9050600082118061088c5750600081115b6108cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c290613a8a565b60405180910390fd5b80826108d79190613ad9565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610932919061331c565b602060405180830381865afa15801561094f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109739190613a11565b10156109b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ab90613b59565b60405180910390fd5b600360016002546109c59190613b79565b815481106109d6576109d5613bad565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b82e18ff600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663eed25896600254336040518363ffffffff1660e01b8152600401610a7b929190613bdc565b600060405180830381865afa158015610a98573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610ac19190613dc1565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166317ba3b7d600254336040518363ffffffff1660e01b8152600401610b20929190613bdc565b600060405180830381865afa158015610b3d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610b669190613f81565b6040518363ffffffff1660e01b8152600401610b839291906142a6565b600060405180830381600087803b158015610b9d57600080fd5b505af1158015610bb1573d6000803e3d6000fd5b50505050600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338385610c009190613ad9565b6040518363ffffffff1660e01b8152600401610c1d9291906142dd565b6020604051808303816000875af1158015610c3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c609190614306565b505050565b610c6d6125e5565b60005b600a80549050811015610e3c578273ffffffffffffffffffffffffffffffffffffffff16600a8281548110610ca857610ca7613bad565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610e2f578115610d3a576000610d35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2c9061437f565b60405180910390fd5b610e2e565b600a6001600a80549050610d4e9190613b79565b81548110610d5f57610d5e613bad565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a8281548110610d9e57610d9d613bad565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600a805480610df857610df761439f565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590555b5b8080600101915050610c70565b508015610ea757600a829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5050565b60076020528060005260406000206000915090505481565b60065481565b600a8181548110610ed957600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b610f3c6125e5565b60006002541115610fa457610f9f8160036001600254610f5c9190613b79565b81548110610f6d57610f6c613bad565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660006115f6565b610fb1565b610fb0816000806115f6565b5b50565b610fbc6125e5565b8773ffffffffffffffffffffffffffffffffffffffff16600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146110e05787600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cd0f2311306040518263ffffffff1660e01b81526004016110ad919061441a565b600060405180830381600087803b1580156110c757600080fd5b505af11580156110db573d6000803e3d6000fd5b505050505b86600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600f60036101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611210573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112349190614481565b60ff16600a61124391906145e1565b8461124e919061462c565b600e8190555082600f60016101000a81548161ffff021916908361ffff160217905550600360016002546112829190613b79565b8154811061129357611292613bad565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639469f293836040518263ffffffff1660e01b81526004016112f6919061472c565b600060405180830381600087803b15801561131057600080fd5b505af1158015611324573d6000803e3d6000fd5b5050505080600f60006101000a81548160ff0219169083151502179055505050505050505050565b6113546125e5565b61135e600061266c565b565b60086020528060005260406000206000915054906101000a900460ff1681565b6000805b8451811015611467576000600667ffffffffffffffff8111156113aa576113a9613401565b5b6040519080825280602002602001820160405280156113d85781602001602082028036833780820191505090505b50905060005b6006811015611443578681846113f49190613ad9565b8151811061140557611404613bad565b5b60200260200101518282815181106114205761141f613bad565b5b602002602001019061ffff16908161ffff168152505080806001019150506113de565b5061145087828787612730565b9250506006816114609190613ad9565b9050611384565b50600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156114b15750600f60009054906101000a900460ff165b80156114bb575080155b156115ef5760068451816114d2576114d161474e565b5b04600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060068451816115695761156861474e565b5b04600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5050505050565b6115fe6125e5565b600260008154809291906116119061477d565b91905055506003600f60039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f199f5308585856040518463ffffffff1660e01b8152600401611677939291906147c5565b6020604051808303816000875af1158015611696573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ba91906147fc565b9080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614806117555750600081115b8061179f575060038081111561176e5761176d6130d7565b5b600460009054906101000a900460ff1660038111156117905761178f6130d7565b5b14801561179e575042600654105b5b6117de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117d590614875565b60405180910390fd5b6117e9600084612d31565b505050565b600f60039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61181c6125e5565b60006003600160025461182f9190613b79565b815481106118405761183f613bad565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663e278fe6f6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156118b557600080fd5b505af11580156118c9573d6000803e3d6000fd5b505050506000600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f1664df66002546040518263ffffffff1660e01b815260040161192c9190613182565b602060405180830381865afa158015611949573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196d91906148aa565b9050600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e726f2e18260066119ba91906148d7565b6040518263ffffffff1660e01b81526004016119d6919061494e565b6020604051808303816000875af11580156119f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a199190613a11565b60106000600254815260200190815260200160002081905550611a3d600184612d31565b505050565b60038181548110611a5257600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600960009054906101000a900461ffff1681565b611ac66125e5565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611b01919061331c565b602060405180830381865afa158015611b1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b429190613a11565b90506000811115611b7b57611b7a82600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683612d80565b5b5050565b611b876125e5565b80600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b611bea6125e5565b60005b82829050811015611c815760076000848484818110611c0f57611c0e613bad565b5b9050602002016020810190611c24919061320f565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190611c6f9061477d565b91905055508080600101915050611bed565b505050565b611c8e6125e5565b60006003600184611c9f9190613b79565b81548110611cb057611caf613bad565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663343f25666040518163ffffffff1660e01b815260040160006040518083038186803b158015611d2357600080fd5b505afa158015611d37573d6000803e3d6000fd5b50505050600080600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d8a4676f60106000888152602001908152602001600020546040518263ffffffff1660e01b8152600401611dac9190613182565b600060405180830381865afa158015611dc9573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611df29190614a2c565b9150915081611e36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e2d90614ad4565b60405180910390fd5b6000600667ffffffffffffffff811115611e5357611e52613401565b5b604051908082528060200260200182016040528015611e815781602001602082028036833780820191505090505b509050600060068351611e949190613b79565b67ffffffffffffffff811115611ead57611eac613401565b5b604051908082528060200260200182016040528015611edb5781602001602082028036833780820191505090505b50905083156121c85760005b6006811015611fe157600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c746a8a858381518110611f4157611f40613bad565b5b60200260200101516045866040518463ffffffff1660e01b8152600401611f6a93929190614b2f565b602060405180830381865afa158015611f87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fab91906148aa565b838281518110611fbe57611fbd613bad565b5b602002602001019061ffff16908161ffff16815250508080600101915050611ee7565b506001601a84600581518110611ffa57611ff9613bad565b5b602002602001015161200c9190614b6d565b6120169190613ad9565b8260058151811061202a57612029613bad565b5b602002602001019061ffff16908161ffff16815250506000600690505b83518110156121c657600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c746a8a8583815181106120a1576120a0613bad565b5b60200260200101518873ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b81526004016000604051808303816000875af11580156120f6573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061211f9190614dc7565b6101600151856040518463ffffffff1660e01b815260040161214393929190614e10565b602060405180830381865afa158015612160573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061218491906148aa565b826006836121929190613b79565b815181106121a3576121a2613bad565b5b602002602001019061ffff16908161ffff16815250508080600101915050612047565b505b8473ffffffffffffffffffffffffffffffffffffffff16632724d10483836040518363ffffffff1660e01b8152600401612203929190614e4e565b600060405180830381600087803b15801561221d57600080fd5b505af1158015612231573d6000803e3d6000fd5b50505050612240600287612d31565b50505050505050565b6122516125e5565b60004711156122c457600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156122c2573d6000803e3d6000fd5b505b565b6122ce6125e5565b60036001836122dd9190613b79565b815481106122ee576122ed613bad565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166327e4de61600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639f75e5c9856040518263ffffffff1660e01b815260040161238f9190613182565b600060405180830381865afa1580156123ac573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906123d59190613dc1565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166348b2e35c866040518263ffffffff1660e01b81526004016124309190613182565b600060405180830381865afa15801561244d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906124769190613f81565b6040518363ffffffff1660e01b81526004016124939291906142a6565b600060405180830381600087803b1580156124ad57600080fd5b505af11580156124c1573d6000803e3d6000fd5b505050506124d0600382612d31565b5050565b60106020528060005260406000206000915090505481565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600f60009054906101000a900460ff1681565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6125536125e5565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036125c55760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016125bc919061331c565b60405180910390fd5b6125ce8161266c565b50565b600f60019054906101000a900461ffff1681565b6125ed612dff565b73ffffffffffffffffffffffffffffffffffffffff1661260b611a81565b73ffffffffffffffffffffffffffffffffffffffff161461266a5761262e612dff565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401612661919061331c565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054118061281e5750600e54600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e84306040518363ffffffff1660e01b81526004016127da929190614e85565b602060405180830381865afa1580156127f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061281b9190613a11565b10155b806128725750600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6128b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128a890614efa565b60405180910390fd5b6000600360016002546128c49190613b79565b815481106128d5576128d4613bad565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600080600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411156129a957600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919061299b90614f1a565b919050555060019050612c35565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16612bc757600e54600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231326040518263ffffffff1660e01b8152600401612a58919061331c565b602060405180830381865afa158015612a75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a999190613a11565b1015612ada576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ad190614f8f565b60405180910390fd5b600a805490506009600081819054906101000a900461ffff1680929190612b0090614faf565b91906101000a81548161ffff021916908361ffff16021790555061ffff16612b289190614b6d565b600960006101000a81548161ffff021916908361ffff160217905550612bc6600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685600a600960009054906101000a900461ffff1661ffff1681548110612b9357612b92613bad565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600e54612e07565b5b8173ffffffffffffffffffffffffffffffffffffffff1663b56c12b4600e546040518263ffffffff1660e01b8152600401612c029190613182565b600060405180830381600087803b158015612c1c57600080fd5b505af1158015612c30573d6000803e3d6000fd5b505050505b8015612cb2578173ffffffffffffffffffffffffffffffffffffffff1663eb7165fa88886000886040518563ffffffff1660e01b8152600401612c7b9493929190614fd9565b600060405180830381600087803b158015612c9557600080fd5b505af1158015612ca9573d6000803e3d6000fd5b50505050612d24565b8173ffffffffffffffffffffffffffffffffffffffff1663eb7165fa888888886040518563ffffffff1660e01b8152600401612cf19493929190614fd9565b600060405180830381600087803b158015612d0b57600080fd5b505af1158015612d1f573d6000803e3d6000fd5b505050505b8092505050949350505050565b612d396125e5565b81600460006101000a81548160ff02191690836003811115612d5e57612d5d6130d7565b5b0217905550426005819055508042612d769190613ad9565b6006819055505050565b612dfa838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401612db39291906142dd565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612e89565b505050565b600033905090565b612e83848573ffffffffffffffffffffffffffffffffffffffff166323b872dd868686604051602401612e3c93929190615025565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612e89565b50505050565b6000612eb4828473ffffffffffffffffffffffffffffffffffffffff16612f2090919063ffffffff16565b90506000815114158015612ed9575080806020019051810190612ed79190614306565b155b15612f1b57826040517f5274afe7000000000000000000000000000000000000000000000000000000008152600401612f12919061331c565b60405180910390fd5b505050565b6060612f2e83836000612f36565b905092915050565b606081471015612f7d57306040517fcd786059000000000000000000000000000000000000000000000000000000008152600401612f74919061331c565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff168486604051612fa691906150cd565b60006040518083038185875af1925050503d8060008114612fe3576040519150601f19603f3d011682016040523d82523d6000602084013e612fe8565b606091505b5091509150612ff8868383613003565b925050509392505050565b6060826130185761301382613092565b61308a565b60008251148015613040575060008473ffffffffffffffffffffffffffffffffffffffff163b145b1561308257836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401613079919061331c565b60405180910390fd5b81905061308b565b5b9392505050565b6000815111156130a55780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110613117576131166130d7565b5b50565b600081905061312882613106565b919050565b60006131388261311a565b9050919050565b6131488161312d565b82525050565b6000602082019050613163600083018461313f565b92915050565b6000819050919050565b61317c81613169565b82525050565b60006020820190506131976000830184613173565b92915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006131dc826131b1565b9050919050565b6131ec816131d1565b81146131f757600080fd5b50565b600081359050613209816131e3565b92915050565b600060208284031215613225576132246131a7565b5b6000613233848285016131fa565b91505092915050565b60008115159050919050565b6132518161323c565b811461325c57600080fd5b50565b60008135905061326e81613248565b92915050565b6000806040838503121561328b5761328a6131a7565b5b6000613299858286016131fa565b92505060206132aa8582860161325f565b9150509250929050565b6132bd81613169565b81146132c857600080fd5b50565b6000813590506132da816132b4565b92915050565b6000602082840312156132f6576132f56131a7565b5b6000613304848285016132cb565b91505092915050565b613316816131d1565b82525050565b6000602082019050613331600083018461330d565b92915050565b6000819050919050565b600061335c613357613352846131b1565b613337565b6131b1565b9050919050565b600061336e82613341565b9050919050565b600061338082613363565b9050919050565b61339081613375565b82525050565b60006020820190506133ab6000830184613387565b92915050565b600061ffff82169050919050565b6133c8816133b1565b81146133d357600080fd5b50565b6000813590506133e5816133bf565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613439826133f0565b810181811067ffffffffffffffff8211171561345857613457613401565b5b80604052505050565b600061346b61319d565b90506134778282613430565b919050565b600067ffffffffffffffff82111561349757613496613401565b5b602082029050602081019050919050565b600080fd5b60006134c06134bb8461347c565b613461565b905080838252602082019050602084028301858111156134e3576134e26134a8565b5b835b8181101561350c57806134f888826133d6565b8452602084019350506020810190506134e5565b5050509392505050565b600082601f83011261352b5761352a6133eb565b5b813561353b8482602086016134ad565b91505092915050565b600080600080600080600080610100898b031215613565576135646131a7565b5b60006135738b828c016131fa565b98505060206135848b828c016131fa565b97505060406135958b828c016131fa565b96505060606135a68b828c016131fa565b95505060806135b78b828c016132cb565b94505060a06135c88b828c016133d6565b93505060c089013567ffffffffffffffff8111156135e9576135e86131ac565b5b6135f58b828c01613516565b92505060e06136068b828c0161325f565b9150509295985092959890939650565b61361f8161323c565b82525050565b600060208201905061363a6000830184613616565b92915050565b6000806000806080858703121561365a576136596131a7565b5b6000613668878288016132cb565b945050602085013567ffffffffffffffff811115613689576136886131ac565b5b61369587828801613516565b93505060406136a6878288016131fa565b92505060606136b7878288016131fa565b91505092959194509250565b6000806000606084860312156136dc576136db6131a7565b5b60006136ea868287016132cb565b93505060206136fb868287016131fa565b925050604061370c868287016132cb565b9150509250925092565b600061372182613363565b9050919050565b61373181613716565b82525050565b600060208201905061374c6000830184613728565b92915050565b61375b816133b1565b82525050565b60006020820190506137766000830184613752565b92915050565b600080fd5b60008083601f840112613797576137966133eb565b5b8235905067ffffffffffffffff8111156137b4576137b361377c565b5b6020830191508360208202830111156137d0576137cf6134a8565b5b9250929050565b600080602083850312156137ee576137ed6131a7565b5b600083013567ffffffffffffffff81111561380c5761380b6131ac565b5b61381885828601613781565b92509250509250929050565b6000806040838503121561383b5761383a6131a7565b5b6000613849858286016132cb565b925050602061385a858286016132cb565b9150509250929050565b600061386f82613363565b9050919050565b61387f81613864565b82525050565b600060208201905061389a6000830184613876565b92915050565b60006138ab82613363565b9050919050565b6138bb816138a0565b82525050565b60006020820190506138d660008301846138b2565b92915050565b600082825260208201905092915050565b7f4c6f7474657279206973206e6f7420696e20636c61696d20706572696f640000600082015250565b6000613923601e836138dc565b915061392e826138ed565b602082019050919050565b6000602082019050818103600083015261395281613916565b9050919050565b7f436c61696d20506572696f6420656e6465640000000000000000000000000000600082015250565b600061398f6012836138dc565b915061399a82613959565b602082019050919050565b600060208201905081810360008301526139be81613982565b9050919050565b60006060820190506139da6000830186613173565b6139e7602083018561330d565b6139f46040830184613616565b949350505050565b600081519050613a0b816132b4565b92915050565b600060208284031215613a2757613a266131a7565b5b6000613a35848285016139fc565b91505092915050565b7f4e6f7468696e6720746f20636c61696d20666f7220746869732077616c6c6574600082015250565b6000613a746020836138dc565b9150613a7f82613a3e565b602082019050919050565b60006020820190508181036000830152613aa381613a67565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613ae482613169565b9150613aef83613169565b9250828201905080821115613b0757613b06613aaa565b5b92915050565b7f4e6f7420656e6f7567682066756e6473206f6e20636f6e747261637400000000600082015250565b6000613b43601c836138dc565b9150613b4e82613b0d565b602082019050919050565b60006020820190508181036000830152613b7281613b36565b9050919050565b6000613b8482613169565b9150613b8f83613169565b9250828203905081811115613ba757613ba6613aaa565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000604082019050613bf16000830185613173565b613bfe602083018461330d565b9392505050565b600067ffffffffffffffff821115613c2057613c1f613401565b5b602082029050602081019050919050565b600080fd5b600080fd5b600081519050613c4a816131e3565b92915050565b600a8110613c5d57600080fd5b50565b600081519050613c6f81613c50565b92915050565b600081519050613c8481613248565b92915050565b600060c08284031215613ca057613c9f613c31565b5b613caa60c0613461565b90506000613cba848285016139fc565b6000830152506020613cce84828501613c3b565b6020830152506040613ce284828501613c60565b6040830152506060613cf684828501613c75565b6060830152506080613d0a84828501613c75565b60808301525060a0613d1e848285016139fc565b60a08301525092915050565b6000613d3d613d3884613c05565b613461565b90508083825260208201905060c08402830185811115613d6057613d5f6134a8565b5b835b81811015613d895780613d758882613c8a565b84526020840193505060c081019050613d62565b5050509392505050565b600082601f830112613da857613da76133eb565b5b8151613db8848260208601613d2a565b91505092915050565b600060208284031215613dd757613dd66131a7565b5b600082015167ffffffffffffffff811115613df557613df46131ac565b5b613e0184828501613d93565b91505092915050565b600067ffffffffffffffff821115613e2557613e24613401565b5b602082029050602081019050919050565b600060e08284031215613e4c57613e4b613c31565b5b613e5660e0613461565b90506000613e66848285016139fc565b6000830152506020613e7a84828501613c3b565b6020830152506040613e8e84828501613c3b565b6040830152506060613ea2848285016139fc565b6060830152506080613eb684828501613c75565b60808301525060a0613eca84828501613c75565b60a08301525060c0613ede848285016139fc565b60c08301525092915050565b6000613efd613ef884613e0a565b613461565b90508083825260208201905060e08402830185811115613f2057613f1f6134a8565b5b835b81811015613f495780613f358882613e36565b84526020840193505060e081019050613f22565b5050509392505050565b600082601f830112613f6857613f676133eb565b5b8151613f78848260208601613eea565b91505092915050565b600060208284031215613f9757613f966131a7565b5b600082015167ffffffffffffffff811115613fb557613fb46131ac565b5b613fc184828501613f53565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613fff81613169565b82525050565b61400e816131d1565b82525050565b600a8110614025576140246130d7565b5b50565b600081905061403682614014565b919050565b600061404682614028565b9050919050565b6140568161403b565b82525050565b6140658161323c565b82525050565b60c0820160008201516140816000850182613ff6565b5060208201516140946020850182614005565b5060408201516140a7604085018261404d565b5060608201516140ba606085018261405c565b5060808201516140cd608085018261405c565b5060a08201516140e060a0850182613ff6565b50505050565b60006140f2838361406b565b60c08301905092915050565b6000602082019050919050565b600061411682613fca565b6141208185613fd5565b935061412b83613fe6565b8060005b8381101561415c57815161414388826140e6565b975061414e836140fe565b92505060018101905061412f565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60e0820160008201516141ab6000850182613ff6565b5060208201516141be6020850182614005565b5060408201516141d16040850182614005565b5060608201516141e46060850182613ff6565b5060808201516141f7608085018261405c565b5060a082015161420a60a085018261405c565b5060c082015161421d60c0850182613ff6565b50505050565b600061422f8383614195565b60e08301905092915050565b6000602082019050919050565b600061425382614169565b61425d8185614174565b935061426883614185565b8060005b838110156142995781516142808882614223565b975061428b8361423b565b92505060018101905061426c565b5085935050505092915050565b600060408201905081810360008301526142c0818561410b565b905081810360208301526142d48184614248565b90509392505050565b60006040820190506142f2600083018561330d565b6142ff6020830184613173565b9392505050565b60006020828403121561431c5761431b6131a7565b5b600061432a84828501613c75565b91505092915050565b7f57616c6c657420616c7265616479206164646564000000000000000000000000600082015250565b60006143696014836138dc565b915061437482614333565b602082019050919050565b600060208201905081810360008301526143988161435c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4c6f74746572794d617374657256302e31000000000000000000000000000000600082015250565b60006144046011836138dc565b915061440f826143ce565b602082019050919050565b600060408201905061442f600083018461330d565b8181036020830152614440816143f7565b905092915050565b600060ff82169050919050565b61445e81614448565b811461446957600080fd5b50565b60008151905061447b81614455565b92915050565b600060208284031215614497576144966131a7565b5b60006144a58482850161446c565b91505092915050565b60008160011c9050919050565b6000808291508390505b6001851115614505578086048111156144e1576144e0613aaa565b5b60018516156144f05780820291505b80810290506144fe856144ae565b94506144c5565b94509492505050565b60008261451e57600190506145da565b8161452c57600090506145da565b8160018114614542576002811461454c5761457b565b60019150506145da565b60ff84111561455e5761455d613aaa565b5b8360020a91508482111561457557614574613aaa565b5b506145da565b5060208310610133831016604e8410600b84101617156145b05782820a9050838111156145ab576145aa613aaa565b5b6145da565b6145bd84848460016144bb565b925090508184048111156145d4576145d3613aaa565b5b81810290505b9392505050565b60006145ec82613169565b91506145f783613169565b92506146247fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461450e565b905092915050565b600061463782613169565b915061464283613169565b925082820261465081613169565b9150828204841483151761466757614666613aaa565b5b5092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6146a3816133b1565b82525050565b60006146b5838361469a565b60208301905092915050565b6000602082019050919050565b60006146d98261466e565b6146e38185614679565b93506146ee8361468a565b8060005b8381101561471f57815161470688826146a9565b9750614711836146c1565b9250506001810190506146f2565b5085935050505092915050565b6000602082019050818103600083015261474681846146ce565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061478882613169565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036147ba576147b9613aaa565b5b600182019050919050565b60006060820190506147da6000830186613173565b6147e7602083018561330d565b6147f46040830184613173565b949350505050565b600060208284031215614812576148116131a7565b5b600061482084828501613c3b565b91505092915050565b7f50726576696f757320726f756e64206e6f7420656e6465640000000000000000600082015250565b600061485f6018836138dc565b915061486a82614829565b602082019050919050565b6000602082019050818103600083015261488e81614852565b9050919050565b6000815190506148a4816133bf565b92915050565b6000602082840312156148c0576148bf6131a7565b5b60006148ce84828501614895565b91505092915050565b60006148e2826133b1565b91506148ed836133b1565b9250828201905061ffff81111561490757614906613aaa565b5b92915050565b600063ffffffff82169050919050565b600061493861493361492e846133b1565b613337565b61490d565b9050919050565b6149488161491d565b82525050565b6000602082019050614963600083018461493f565b92915050565b600067ffffffffffffffff82111561498457614983613401565b5b602082029050602081019050919050565b60006149a86149a384614969565b613461565b905080838252602082019050602084028301858111156149cb576149ca6134a8565b5b835b818110156149f457806149e088826139fc565b8452602084019350506020810190506149cd565b5050509392505050565b600082601f830112614a1357614a126133eb565b5b8151614a23848260208601614995565b91505092915050565b60008060408385031215614a4357614a426131a7565b5b6000614a5185828601613c75565b925050602083015167ffffffffffffffff811115614a7257614a716131ac565b5b614a7e858286016149fe565b9150509250929050565b7f52616e646f6d206e756d62657273206e6f742072656164790000000000000000600082015250565b6000614abe6018836138dc565b9150614ac982614a88565b602082019050919050565b60006020820190508181036000830152614aed81614ab1565b9050919050565b6000819050919050565b6000614b19614b14614b0f84614af4565b613337565b6133b1565b9050919050565b614b2981614afe565b82525050565b6000606082019050614b446000830186613173565b614b516020830185614b20565b8181036040830152614b6381846146ce565b9050949350505050565b6000614b7882613169565b9150614b8383613169565b925082614b9357614b9261474e565b5b828206905092915050565b6000614bb1614bac8461347c565b613461565b90508083825260208201905060208402830185811115614bd457614bd36134a8565b5b835b81811015614bfd5780614be98882614895565b845260208401935050602081019050614bd6565b5050509392505050565b600082601f830112614c1c57614c1b6133eb565b5b8151614c2c848260208601614b9e565b91505092915050565b60006101808284031215614c4c57614c4b613c31565b5b614c57610180613461565b90506000614c67848285016139fc565b6000830152506020614c7b848285016139fc565b6020830152506040614c8f848285016139fc565b6040830152506060614ca3848285016139fc565b6060830152506080614cb784828501613c75565b60808301525060a082015167ffffffffffffffff811115614cdb57614cda613c36565b5b614ce784828501614c07565b60a08301525060c082015167ffffffffffffffff811115614d0b57614d0a613c36565b5b614d17848285016149fe565b60c08301525060e0614d2b84828501614895565b60e08301525061010082015167ffffffffffffffff811115614d5057614d4f613c36565b5b614d5c848285016149fe565b61010083015250610120614d7284828501614895565b6101208301525061014082015167ffffffffffffffff811115614d9857614d97613c36565b5b614da4848285016149fe565b61014083015250610160614dba84828501614895565b6101608301525092915050565b600060208284031215614ddd57614ddc6131a7565b5b600082015167ffffffffffffffff811115614dfb57614dfa6131ac565b5b614e0784828501614c35565b91505092915050565b6000606082019050614e256000830186613173565b614e326020830185613752565b8181036040830152614e4481846146ce565b9050949350505050565b60006040820190508181036000830152614e6881856146ce565b90508181036020830152614e7c81846146ce565b90509392505050565b6000604082019050614e9a600083018561330d565b614ea7602083018461330d565b9392505050565b7f4d697373696e6720416c6c6f77616e6365000000000000000000000000000000600082015250565b6000614ee46011836138dc565b9150614eef82614eae565b602082019050919050565b60006020820190508181036000830152614f1381614ed7565b9050919050565b6000614f2582613169565b915060008203614f3857614f37613aaa565b5b600182039050919050565b7f496e73756666696369656e742066756e64730000000000000000000000000000600082015250565b6000614f796012836138dc565b9150614f8482614f43565b602082019050919050565b60006020820190508181036000830152614fa881614f6c565b9050919050565b6000614fba826133b1565b915061ffff8203614fce57614fcd613aaa565b5b600182019050919050565b6000608082019050614fee6000830187613173565b818103602083015261500081866146ce565b905061500f604083018561330d565b61501c606083018461330d565b95945050505050565b600060608201905061503a600083018661330d565b615047602083018561330d565b6150546040830184613173565b949350505050565b600081519050919050565b600081905092915050565b60005b83811015615090578082015181840152602081019050615075565b60008484015250505050565b60006150a78261505c565b6150b18185615067565b93506150c1818560208601615072565b80840191505092915050565b60006150d9828461509c565b91508190509291505056fea264697066735822122059268a9db22a03b69bae6b79afbb6f7a1e61b62fff3796c24e831cdf27b3f79964736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4914,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "teamAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1031,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "roundCount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1034,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "rounds",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1037,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "lotteryStatus",
        "offset": 0,
        "slot": "4",
        "type": "t_enum(LotteryStatuses)1027"
      },
      {
        "astId": 1039,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "statusStartTime",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1041,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "statusEndTime",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1045,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "freeRounds",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1049,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "crossChainOperator",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1067,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "counterForBankWallets",
        "offset": 0,
        "slot": "9",
        "type": "t_uint16"
      },
      {
        "astId": 1070,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "bankWallets",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1137,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "paymentToken",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IERC20Metadata)251"
      },
      {
        "astId": 1140,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "randomizer",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(CyclixRandomizerInterface)901"
      },
      {
        "astId": 1143,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "reader",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(LotteryReaderInterface)3833"
      },
      {
        "astId": 1145,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "ticketPrice",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 1148,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "freeRoundsAreEnabled",
        "offset": 0,
        "slot": "15",
        "type": "t_bool"
      },
      {
        "astId": 1151,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "percentageOfReferralWinners",
        "offset": 1,
        "slot": "15",
        "type": "t_uint16"
      },
      {
        "astId": 1154,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "lotteryRoundCreator",
        "offset": 3,
        "slot": "15",
        "type": "t_contract(LotteryRoundCreatorInterface)4791"
      },
      {
        "astId": 1739,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "publicRoundRandomNumbersRequestId",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(CyclixRandomizerInterface)901": {
        "encoding": "inplace",
        "label": "contract CyclixRandomizerInterface",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Metadata)251": {
        "encoding": "inplace",
        "label": "contract IERC20Metadata",
        "numberOfBytes": "20"
      },
      "t_contract(LotteryReaderInterface)3833": {
        "encoding": "inplace",
        "label": "contract LotteryReaderInterface",
        "numberOfBytes": "20"
      },
      "t_contract(LotteryRoundCreatorInterface)4791": {
        "encoding": "inplace",
        "label": "contract LotteryRoundCreatorInterface",
        "numberOfBytes": "20"
      },
      "t_enum(LotteryStatuses)1027": {
        "encoding": "inplace",
        "label": "enum LotteryStatuses",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}