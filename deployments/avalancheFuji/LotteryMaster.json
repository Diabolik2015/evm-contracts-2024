{
  "address": "0xfe08982682ECB23cb4fDeAB04F86Fd0930834e41",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cyclixRandomizer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lotteryReader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lotteryRoundCreator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_paymentToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_ticketPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "addBankWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "participant",
          "type": "address[]"
        }
      ],
      "name": "addFreeRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bankWallets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint16[]",
          "name": "chosenNumbers",
          "type": "uint16[]"
        },
        {
          "internalType": "uint16",
          "name": "powerNumber",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "referral",
          "type": "address"
        }
      ],
      "name": "buyTicket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint16[]",
          "name": "moreTicketNumbers",
          "type": "uint16[]"
        },
        {
          "internalType": "address",
          "name": "referral",
          "type": "address"
        }
      ],
      "name": "buyTickets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "referralTicketId",
          "type": "uint256"
        }
      ],
      "name": "claimReferralVictory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketId",
          "type": "uint256"
        }
      ],
      "name": "claimVictory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counterForBankWallets",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "fetchRoundNumbers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "freeRounds",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "freeRoundsAreEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentRound",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lotteryRoundCreator",
      "outputs": [
        {
          "internalType": "contract LotteryRoundCreatorInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "markWinners",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentToken",
      "outputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "percentageOfReferralWinners",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "publicRoundRandomNumbersRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randomizer",
      "outputs": [
        {
          "internalType": "contract CyclixRandomizerInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reader",
      "outputs": [
        {
          "internalType": "contract LotteryReaderInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "removeBankWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roundCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "roundForId",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rounds",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendCryptoToTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "sendTokenToTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "v",
          "type": "bool"
        }
      ],
      "name": "setFreeRoundsOnPurchase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_paymentToken",
          "type": "address"
        }
      ],
      "name": "setPaymentToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "percentage",
          "type": "uint16"
        }
      ],
      "name": "setPercentageOfReferralWinners",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ticketPrice",
          "type": "uint256"
        }
      ],
      "name": "setTicketPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "setTreasuryWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundDurationInSeconds",
          "type": "uint256"
        }
      ],
      "name": "startNewRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ticketPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryWallets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_teamAddress",
          "type": "address"
        }
      ],
      "name": "updateTeamAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x90b7f681442bddfe7532827f7304ef3f5b7d4585d48c5594eb41a6b4a4844240",
  "receipt": {
    "to": null,
    "from": "0x4eCa23Ffd5710970E22558C484a0D6943dA5eAa5",
    "contractAddress": "0xfe08982682ECB23cb4fDeAB04F86Fd0930834e41",
    "transactionIndex": 3,
    "gasUsed": "5287718",
    "logsBloom": "0x
    "blockHash": "0xc5753fe48f693d9aab5cca136ad0337721b2b7a478836d45dd1e31fc6e1cdd5a",
    "transactionHash": "0x90b7f681442bddfe7532827f7304ef3f5b7d4585d48c5594eb41a6b4a4844240",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 32489679,
        "transactionHash": "0x90b7f681442bddfe7532827f7304ef3f5b7d4585d48c5594eb41a6b4a4844240",
        "address": "0xfe08982682ECB23cb4fDeAB04F86Fd0930834e41",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004eca23ffd5710970e22558c484a0d6943da5eaa5"
        ],
        "data": "0x",
        "logIndex": 9,
        "blockHash": "0xc5753fe48f693d9aab5cca136ad0337721b2b7a478836d45dd1e31fc6e1cdd5a"
      }
    ],
    "blockNumber": 32489679,
    "cumulativeGasUsed": "5625873",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x603A50cF183cb4c103A95baDfaF011b749e04966",
    "0xC0e83e06d3f42948C5FADc66EdDcdd6434249E1A",
    "0x1437748Abb740421c21561929550cAC8208B7676",
    "0xd6f605b40ba9D2ffB07f192d7eDf4eeB0B21c142",
    10
  ],
  "numDeployments": 5,
  "solcInputHash": "c158eb507bc208406b90aca2701d1d6c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cyclixRandomizer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lotteryReader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lotteryRoundCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ticketPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"addBankWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"participant\",\"type\":\"address[]\"}],\"name\":\"addFreeRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bankWallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint16[]\",\"name\":\"chosenNumbers\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16\",\"name\":\"powerNumber\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"buyTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint16[]\",\"name\":\"moreTicketNumbers\",\"type\":\"uint16[]\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"buyTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"referralTicketId\",\"type\":\"uint256\"}],\"name\":\"claimReferralVictory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"}],\"name\":\"claimVictory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counterForBankWallets\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"fetchRoundNumbers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"freeRounds\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeRoundsAreEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRound\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryRoundCreator\",\"outputs\":[{\"internalType\":\"contract LotteryRoundCreatorInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"markWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentToken\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentageOfReferralWinners\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"publicRoundRandomNumbersRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomizer\",\"outputs\":[{\"internalType\":\"contract CyclixRandomizerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reader\",\"outputs\":[{\"internalType\":\"contract LotteryReaderInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"removeBankWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"roundForId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendCryptoToTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sendTokenToTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"v\",\"type\":\"bool\"}],\"name\":\"setFreeRoundsOnPurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"}],\"name\":\"setPaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"percentage\",\"type\":\"uint16\"}],\"name\":\"setPercentageOfReferralWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ticketPrice\",\"type\":\"uint256\"}],\"name\":\"setTicketPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"setTreasuryWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundDurationInSeconds\",\"type\":\"uint256\"}],\"name\":\"startNewRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teamAddress\",\"type\":\"address\"}],\"name\":\"updateTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LotteryMaster.sol\":\"LotteryMaster\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/CyclixRandomizerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface CyclixRandomizerInterface {\\n    function requestRandomWords(uint32 numWords) external returns (uint256 requestId);\\n    function getRequestStatus(uint256 _requestId) external view returns (bool fulfilled, uint256[] memory randomWords);\\n    function registerGameContract(address gameAddress, string calldata name) external;\\n    function getLastRequestIdForCaller() external view returns (uint256);\\n}\",\"keccak256\":\"0x066c0e37e0bd528ce42d23ee3b5815f550f44571c61f1be89a4b844f1d52f71f\",\"license\":\"MIT\"},\"contracts/LotteryCommon.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\n    enum RoundVictoryTier {\\n        NO_WIN,\\n        Tier5_1,\\n        Tier5,\\n        Tier4_1,\\n        Tier4,\\n        Tier3_1,\\n        Tier3,\\n        Referrer,\\n        PublicPool,\\n        TokenHolders,\\n        Treasury\\n    }\\n\\n    struct Round {\\n        uint256 id;\\n        uint256 startTime;\\n        uint256 endTime;\\n        bool ended;\\n        uint16[] roundNumbers;\\n        uint16 powerNumber;\\n        uint16[] referralWinnersNumber;\\n        uint16 referralWinnersNumberCount;\\n        uint256[] ticketIds;\\n        uint16 ticketsCount;\\n        uint256[] referralTicketIds;\\n        uint16 referralCounts;\\n    }\\n\\n    struct Ticket {\\n        uint256 id;\\n        address participantAddress;\\n        address referralAddress;\\n        bool claimed;\\n        uint256 chainId;\\n        RoundVictoryTier victoryTier;\\n        uint16 powerNumber;\\n    }\\n\\n    struct TicketResults {\\n        uint256 ticketId;\\n        RoundVictoryTier victoryTier;\\n    }\\n\\n    struct ReferralTicket {\\n        uint256 id;\\n        address referralAddress;\\n        uint16 referralTicketNumber;\\n        bool winner;\\n        bool claimed;\\n    }\\n\\n    struct ReferralTicketResults {\\n        uint256 referralTicketId;\\n        bool won;\\n    }\",\"keccak256\":\"0x4a30f56a4b0850bdc3cd7ea3d9d9254038a29ea61c3abc6bf7ab0e2024e44796\",\"license\":\"UNLICENSED\"},\"contracts/LotteryMaster.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {CyclixRandomizerInterface} from \\\"./CyclixRandomizerInterface.sol\\\";\\nimport {EmergencyFunctions} from \\\"./utils/EmergencyFunctions.sol\\\";\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\nimport { LotteryRound } from \\\"./LotteryRound.sol\\\";\\nimport { LotteryReaderInterface } from \\\"./LotteryReaderInterface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./LotteryRoundCreatorInterface.sol\\\";\\n\\ncontract LotteryMaster is EmergencyFunctions {\\n\\n    uint256 public roundCount;\\n    address[] public rounds;\\n    function roundForId(uint256 roundId) public view returns (address) {\\n        return rounds[roundId - 1];\\n    }\\n\\n    function getCurrentRound() public view returns (address) {\\n        return rounds[roundCount - 1];\\n    }\\n    mapping(address => uint16) public freeRounds;\\n\\n    uint16 public counterForBankWallets;\\n    address[] public bankWallets;\\n    function addBankWallet(address wallet) public onlyOwner {\\n        for (uint i = 0; i < bankWallets.length; i++) {\\n            if (bankWallets[i] == wallet) {\\n                require(false, \\\"Wallet already added\\\");\\n            }\\n        }\\n        bankWallets.push(wallet);\\n    }\\n    function removeBankWallet(address wallet) public onlyOwner {\\n        for (uint i = 0; i < bankWallets.length; i++) {\\n            if (bankWallets[i] == wallet) {\\n                bankWallets[i] = bankWallets[bankWallets.length - 1];\\n                bankWallets.pop();\\n            }\\n        }\\n    }\\n    address public treasuryWallets;\\n    function setTreasuryWallet(address wallet) public onlyOwner {\\n        treasuryWallets = wallet;\\n    }\\n    IERC20Metadata public paymentToken;\\n    function setPaymentToken(address _paymentToken) public onlyOwner {\\n        paymentToken = IERC20Metadata(_paymentToken);\\n    }\\n    CyclixRandomizerInterface public randomizer;\\n    LotteryReaderInterface public reader;\\n    uint256 public ticketPrice;\\n    function setTicketPrice(uint256 _ticketPrice) public onlyOwner {\\n        ticketPrice = _ticketPrice;\\n    }\\n\\n    bool public freeRoundsAreEnabled = false;\\n    function setFreeRoundsOnPurchase(bool v) public onlyOwner {\\n        freeRoundsAreEnabled = v;\\n    }\\n\\n    uint16 public percentageOfReferralWinners = 10;\\n    function setPercentageOfReferralWinners(uint16 percentage) public onlyOwner {\\n        percentageOfReferralWinners = percentage;\\n    }\\n\\n    LotteryRoundCreatorInterface public lotteryRoundCreator;\\n\\n    constructor(address cyclixRandomizer, address lotteryReader, address _lotteryRoundCreator, address _paymentToken, uint256 _ticketPrice)\\n    EmergencyFunctions(msg.sender) {\\n        randomizer = CyclixRandomizerInterface(cyclixRandomizer);\\n        randomizer.registerGameContract(address(this), \\\"LotteryMasterV0.1\\\");\\n        reader = LotteryReaderInterface(lotteryReader);\\n        lotteryRoundCreator = LotteryRoundCreatorInterface(_lotteryRoundCreator);\\n        paymentToken = IERC20Metadata(_paymentToken);\\n        ticketPrice = _ticketPrice * (10 ** uint256(paymentToken.decimals()));\\n        treasuryWallets = msg.sender;\\n        bankWallets.push(msg.sender);\\n    }\\n\\n    function startNewRound(uint256 roundDurationInSeconds) public onlyOwner {\\n        roundCount++;\\n        if (roundCount > 1) {\\n            rounds.push(lotteryRoundCreator.startNewRound(roundDurationInSeconds, rounds[roundCount - 2]));\\n            require(LotteryRound(rounds[roundCount - 2]).getRound().ended, \\\"Previous round not ended\\\");\\n            require(rounds[roundCount - 2] == LotteryRound(rounds[roundCount - 1]).previousRound(), \\\"Previous round not propagated correctly\\\");\\n        } else {\\n            rounds.push(lotteryRoundCreator.startNewRound(roundDurationInSeconds, address(0)));\\n        }\\n    }\\n\\n    function buyTickets(uint256 chainId, uint16[] memory moreTicketNumbers, address referral) public {\\n        for (uint i = 0; i < moreTicketNumbers.length; i += 6) {\\n            uint16[] memory chosenNumbers = new uint16[](5);\\n            for (uint j = 0; j < 5; j++) {\\n                chosenNumbers[j] = moreTicketNumbers[i + j];\\n            }\\n            buyTicket(chainId, chosenNumbers, moreTicketNumbers[5], referral);\\n        }\\n    }\\n\\n    function buyTicket(uint256 chainId, uint16[] memory chosenNumbers, uint16 powerNumber, address referral) public {\\n        require(freeRounds[tx.origin] > 0 || paymentToken.allowance(tx.origin, address(this)) >= ticketPrice, \\\"Missing Allowance\\\");\\n        LotteryRound lotteryRound = LotteryRound(rounds[roundCount - 1]);\\n        if (freeRounds[msg.sender] > 0) {\\n            freeRounds[msg.sender]--;\\n        } else {\\n            require(paymentToken.balanceOf(tx.origin) >= ticketPrice, \\\"Insufficient funds\\\");\\n            counterForBankWallets = uint16(counterForBankWallets++ % bankWallets.length);\\n            uint256 treasuryAmount = lotteryRound.treasuryAmountOnTicket(ticketPrice);\\n            SafeERC20.safeTransferFrom(paymentToken, msg.sender, bankWallets[counterForBankWallets], ticketPrice - treasuryAmount);\\n            SafeERC20.safeTransferFrom(paymentToken, msg.sender, treasuryWallets, treasuryAmount);\\n            lotteryRound.updateVictoryPoolForTicket(ticketPrice);\\n            addFreeRoundForBuyTicket(msg.sender, referral);\\n        }\\n\\n        lotteryRound.buyTicket(chainId, chosenNumbers, powerNumber, referral);\\n    }\\n\\n    function addFreeRoundForBuyTicket(address buyer, address referral) internal {\\n        if (referral != address(0) && freeRoundsAreEnabled) {\\n            freeRounds[buyer]++;\\n            freeRounds[referral]++;\\n        }\\n    }\\n\\n    function addFreeRound(address[] calldata participant) public onlyOwner {\\n        for (uint i = 0; i < participant.length; i++) {\\n            freeRounds[participant[i]]++;\\n        }\\n    }\\n\\n    mapping(uint256 => uint256) public publicRoundRandomNumbersRequestId;\\n\\n    function closeRound() external onlyOwner {\\n        LotteryRound lotteryRound = LotteryRound(rounds[roundCount - 1]);\\n        lotteryRound.closeRound();\\n        uint16 referralWinners = reader.numberOfReferralWinnersForRoundId(roundCount);\\n        publicRoundRandomNumbersRequestId[roundCount] = randomizer.requestRandomWords(6 + referralWinners);\\n    }\\n\\n    function fetchRoundNumbers(uint256 roundId) external onlyOwner {\\n        LotteryRound round = LotteryRound(rounds[roundId - 1]);\\n        round.couldReceiveWinningNumbers();\\n        (bool fulfilled, uint256[] memory randomWords) = randomizer.getRequestStatus(publicRoundRandomNumbersRequestId[roundId]);\\n        require(fulfilled, \\\"Random numbers not ready\\\");\\n        uint16[] memory roundNumbers = new uint16[](5);\\n        uint16 powerNumber;\\n        uint16[] memory referralWinnersNumber = new uint16[](randomWords.length - 6);\\n        if (fulfilled) {\\n            for (uint i = 0; i < 5; i++) {\\n                roundNumbers[i] = reader.getRandomUniqueNumberInArrayForMaxValue(randomWords[i], 69, roundNumbers);\\n            }\\n            powerNumber = uint16(randomWords[5] % 26 + 1);\\n            for (uint i = 6; i < randomWords.length; i++) {\\n                referralWinnersNumber [i - 6] = reader.getRandomUniqueNumberInArrayForMaxValue(randomWords[i],\\n                    round.getRound().referralCounts, referralWinnersNumber);\\n            }\\n        }\\n        round.storeWinningNumbers(roundNumbers, powerNumber, referralWinnersNumber);\\n    }\\n\\n    function markWinners(uint256 roundId) public onlyOwner {\\n        LotteryRound(rounds[roundId - 1]).markWinners(reader.evaluateWonResultsForTickets(roundId), reader.evaluateWonResultsForReferral(roundId));\\n    }\\n\\n    function claimVictory(uint256 ticketId) public {\\n        LotteryRound lotteryRound = LotteryRound(getCurrentRound());\\n        Ticket memory ticket = lotteryRound.ticketById(ticketId);\\n        require(ticket.id == ticketId, \\\"Invalid ticket id\\\");\\n        require(ticket.participantAddress == msg.sender, \\\"Invalid ticket owner\\\");\\n        require(!ticket.claimed, \\\"Ticket already claimed\\\");\\n        require(lotteryRound.getRound().ended, \\\"Round not ended\\\");\\n        require(ticket.victoryTier != RoundVictoryTier.NO_WIN, \\\"No prize for this ticket\\\");\\n        require(ticket.victoryTier == reader.evaluateWonResultsForOneTicket(lotteryRound.getRound().id, ticketId).victoryTier, \\\"Invalid ticket tier\\\");\\n        unchecked {\\n            uint256 amountWon = lotteryRound.victoryTierAmounts(ticket.victoryTier) / lotteryRound.winnersForEachTier(ticket.victoryTier);\\n            require(paymentToken.balanceOf(address(this)) >= amountWon, \\\"Not enough funds on contract\\\");\\n            LotteryRound(getCurrentRound()).markVictoryClaimed(ticketId, amountWon);\\n            paymentToken.transfer(msg.sender, amountWon);\\n        }\\n    }\\n\\n    function claimReferralVictory(uint256 referralTicketId) public {\\n        LotteryRound lotteryRound = LotteryRound(getCurrentRound());\\n        ReferralTicket memory referralTicket = lotteryRound.referralTicketById(referralTicketId);\\n        require(referralTicket.id == referralTicketId, \\\"Invalid ticket id\\\");\\n        require(referralTicket.referralAddress == msg.sender, \\\"Invalid ticket owner\\\");\\n        require(!referralTicket.claimed, \\\"Ticket already claimed\\\");\\n        require(lotteryRound.getRound().ended, \\\"Round not ended\\\");\\n        require(referralTicket.winner == true, \\\"No prize for this ticket\\\");\\n        require(referralTicket.winner == reader.evaluateWonResultsForOneReferralTicket(lotteryRound.getRound().id, referralTicketId).won, \\\"Invalid ticket tier\\\");\\n        unchecked {\\n            uint256 amountWon = lotteryRound.victoryTierAmounts(RoundVictoryTier.Referrer) / reader.numberOfReferralWinnersForRoundId(lotteryRound.getRound().id);\\n            require(paymentToken.balanceOf(address(this)) >= amountWon, \\\"Not enough funds on contract\\\");\\n            LotteryRound(getCurrentRound()).markReferralVictoryClaimed(referralTicketId, amountWon);\\n            paymentToken.transfer(msg.sender, amountWon);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xac3ca6aeacce9944822858d9a289ccecceb57a63f88810d788a5cc52c79cde94\",\"license\":\"UNLICENSED\"},\"contracts/LotteryReaderInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {TestFunctions} from \\\"./utils/TestUtils.sol\\\";\\nimport {CyclixRandomizerInterface} from \\\"./CyclixRandomizerInterface.sol\\\";\\nimport {EmergencyFunctions} from \\\"./utils/EmergencyFunctions.sol\\\";\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\n\\ninterface LotteryReaderInterface {\\n    function poolForVictoryTier(uint256 roundId, RoundVictoryTier victoryTier) external view returns(uint256) ;\\n    function poolForReferral(uint256 roundId) external view returns(uint256) ;\\n    function tokenHoldersPoolAmount(uint256 roundId) external view returns (uint256) ;\\n    function treasuryPoolAmount(uint256 roundId) external view returns (uint256) ;\\n    function numberOfReferralWinnersForRoundId(uint256 roundId) external view returns (uint16) ;\\n    function existInArrayNumber(uint16 num, uint16[] memory arr) external pure returns (bool) ;\\n    function notExistInArrayNumber(uint16 num, uint16[] memory arr) external pure returns (bool) ;\\n    function getRandomUniqueNumberInArrayForMaxValue(uint256 randomNumber, uint16 maxValue, uint16[] memory arr) external pure returns (uint16) ;\\n    function tierFromResults(uint16 rightNumbersForTicket, bool powerNumberFound) external pure returns (RoundVictoryTier) ;\\n    function evaluateWonResultsForOneTicket(uint256 roundId, uint256 ticketId) external view returns (TicketResults memory);\\n    function evaluateWonResultsForTickets(uint256 roundId) external view returns (TicketResults[] memory);\\n    function evaluateWonResultsForOneReferralTicket(uint256 roundId, uint256 referralTicketId) external view returns (ReferralTicketResults memory);\\n    function evaluateWonResultsForReferral(uint256 roundId) external view returns (ReferralTicketResults[] memory);\\n    function amountWonInRound(uint256 roundId) external view returns (uint256) ;\\n}\",\"keccak256\":\"0x3a2614be9037e4f45b023a1701fe19d1c1f9ecaf3c9103e35764d7c1ada244a4\",\"license\":\"UNLICENSED\"},\"contracts/LotteryRound.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\n\\ncontract LotteryRound is Ownable {\\n    Round public round;\\n    function getRound() public view returns (Round memory) {\\n        return round;\\n    }\\n\\n    Ticket[] public tickets;\\n    function ticketById(uint256 ticketId) public view returns (Ticket memory) {\\n        return tickets[ticketId];\\n    }\\n    mapping(uint256 => uint16[]) public ticketNumbers;\\n    function numbersForTicketId(uint256 ticketId) public view returns (uint16[] memory) {\\n        return ticketNumbers[ticketId];\\n    }\\n    mapping(address => uint256[]) public roundTicketsByAddress;\\n    mapping(address => uint256) public roundTicketsByAddressCount;\\n\\n    ReferralTicket[] public referralTickets;\\n    function referralTicketById(uint256 index) public view returns (ReferralTicket memory) {\\n        return referralTickets[index];\\n    }\\n    mapping(address => uint256[]) public roundReferralTicketsByAddress;\\n    mapping(address => uint256) public roundReferralTicketsByAddressCount;\\n\\n    mapping(RoundVictoryTier => uint256) public victoryTierAmounts;\\n    mapping(RoundVictoryTier => uint256) public victoryTierAmountsClaimed;\\n    mapping(RoundVictoryTier => uint256) public winnersForEachTier;\\n    address public previousRound;\\n\\n    uint16[]  public  poolPercentagesBasePoints = [7000, 3500, 1500, 1000, 700, 500, 300, 1500, 1000, 5000];\\n    function setPoolPercentagesBasePoints(uint16[] memory _poolPercentagesBasePoints) public onlyOwner {\\n        poolPercentagesBasePoints = _poolPercentagesBasePoints;\\n    }\\n\\n    constructor(address previousRoundAddress, uint256 roundDurationInSeconds) Ownable(msg.sender) {\\n        uint256 id = 1;\\n        previousRound = previousRoundAddress;\\n        if (previousRoundAddress != address(0)) {\\n            LotteryRound previousLotteryRound = LotteryRound(previousRoundAddress);\\n            id = previousLotteryRound.getRound().id + 1;\\n            propagateWinningFromPreviousRound();\\n        }\\n        round = Round({\\n            id: id,\\n            startTime: block.timestamp,\\n            endTime: block.timestamp + roundDurationInSeconds,\\n            ended : false,\\n            roundNumbers: new uint16[](0),\\n            powerNumber: 0,\\n            referralWinnersNumber: new uint16[](0),\\n            referralWinnersNumberCount : 0,\\n            ticketIds : new uint256[](0),\\n            ticketsCount : 0,\\n            referralTicketIds : new uint256[](0),\\n            referralCounts : 0\\n        });\\n    }\\n\\n    function propagateWinningFromPreviousRound() internal {\\n        LotteryRound previousLotteryRound = LotteryRound(previousRound);\\n        victoryTierAmounts[RoundVictoryTier.Tier5_1] += previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Tier5_1) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Tier5_1);\\n        victoryTierAmounts[RoundVictoryTier.Tier5] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Tier5) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Tier5);\\n        victoryTierAmounts[RoundVictoryTier.Tier4_1] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Tier4_1) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Tier4_1);\\n        victoryTierAmounts[RoundVictoryTier.Tier4] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Tier4) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Tier4);\\n        victoryTierAmounts[RoundVictoryTier.Tier3_1] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Tier3_1) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Tier3_1);\\n        victoryTierAmounts[RoundVictoryTier.Tier3] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Tier3) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Tier3);\\n        victoryTierAmounts[RoundVictoryTier.PublicPool] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.PublicPool) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.PublicPool);\\n        victoryTierAmounts[RoundVictoryTier.Referrer] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Referrer) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Referrer);\\n        victoryTierAmounts[RoundVictoryTier.TokenHolders] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.TokenHolders) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.TokenHolders);\\n        victoryTierAmounts[RoundVictoryTier.Treasury] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Treasury) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Treasury);\\n    }\\n\\n    function numberIsInRangeForRound(uint256 number) public pure returns (bool) {\\n        return number > 0 && number <= 69;\\n    }\\n\\n    function numberIsInRangeForPowerNumber(uint256 number) public pure returns (bool) {\\n        return number > 0 && number <= 26;\\n    }\\n\\n    function validateBuyTicket(uint16[] memory numbers, uint16 powerNumber, address referral ) public view onlyOwner {\\n        require(tx.origin != address(0), \\\"Invalid sender\\\");\\n        require(block.timestamp < round.endTime, \\\"Round is over\\\");\\n        require(numbers.length == 5, \\\"Invalid numbers count\\\");\\n        for (uint i = 0; i < numbers.length; i++) {\\n            require(numberIsInRangeForRound(numbers[i]), \\\"Invalid numbers\\\");\\n        }\\n        require(numberIsInRangeForPowerNumber(powerNumber), \\\"Invalid power number\\\");\\n        require(referral != tx.origin, \\\"Referral cannot be the same as the participant\\\");\\n    }\\n\\n    function percentageInBasisPoint(uint256 amount, uint256 basisPoint) public pure returns (uint256) {\\n        return amount * basisPoint / 10000;\\n    }\\n\\n    function treasuryAmountOnTicket(uint256 paymentTokenAmount) public view returns (uint256) {\\n        return percentageInBasisPoint(paymentTokenAmount, poolPercentagesBasePoints[9]);\\n    }\\n\\n    function updateVictoryPoolForTicket(uint256 paymentTokenAmount) public onlyOwner {\\n        uint256 forPublicPool = percentageInBasisPoint(paymentTokenAmount, poolPercentagesBasePoints[0]);\\n        victoryTierAmounts[RoundVictoryTier.Tier5_1] += percentageInBasisPoint(forPublicPool, poolPercentagesBasePoints[1]);\\n        victoryTierAmounts[RoundVictoryTier.Tier5] += percentageInBasisPoint(forPublicPool, poolPercentagesBasePoints[2]);\\n        victoryTierAmounts[RoundVictoryTier.Tier4_1] += percentageInBasisPoint(forPublicPool, poolPercentagesBasePoints[3]);\\n        victoryTierAmounts[RoundVictoryTier.Tier4] += percentageInBasisPoint(forPublicPool, poolPercentagesBasePoints[4]);\\n        victoryTierAmounts[RoundVictoryTier.Tier3_1] += percentageInBasisPoint(forPublicPool, poolPercentagesBasePoints[5]);\\n        victoryTierAmounts[RoundVictoryTier.Tier3] += percentageInBasisPoint(forPublicPool, poolPercentagesBasePoints[6]);\\n        victoryTierAmounts[RoundVictoryTier.PublicPool] += forPublicPool;\\n        victoryTierAmounts[RoundVictoryTier.Referrer] += percentageInBasisPoint(paymentTokenAmount, poolPercentagesBasePoints[7]);\\n        victoryTierAmounts[RoundVictoryTier.TokenHolders] += percentageInBasisPoint(paymentTokenAmount, poolPercentagesBasePoints[8]);\\n        victoryTierAmounts[RoundVictoryTier.Treasury] += treasuryAmountOnTicket(paymentTokenAmount);\\n    }\\n\\n    function buyTicket(uint256 chainId, uint16[] memory chosenNumbers, uint16 powerNumber, address referral) public onlyOwner {\\n        validateBuyTicket(chosenNumbers, powerNumber, referral);\\n\\n        uint256 ticketId = tickets.length;\\n        tickets.push(Ticket({\\n            id: ticketId,\\n            participantAddress: tx.origin,\\n            referralAddress: referral,\\n            claimed: false,\\n            chainId: chainId,\\n            victoryTier: RoundVictoryTier.NO_WIN,\\n            powerNumber: powerNumber\\n        }));\\n        for(uint i = 0; i < chosenNumbers.length; i++) {\\n            ticketNumbers[ticketId].push(chosenNumbers[i]);\\n        }\\n        round.ticketIds.push(ticketId);\\n        round.ticketsCount++;\\n\\n        roundTicketsByAddress[msg.sender].push(tickets.length - 1);\\n        roundTicketsByAddressCount[msg.sender]++;\\n        if (referral != address(0)) {\\n            uint256 referralTicketId = referralTickets.length;\\n            round.referralTicketIds.push(referralTicketId);\\n            round.referralCounts++;\\n            referralTickets.push(ReferralTicket({\\n                id: referralTicketId,\\n                referralAddress: referral,\\n                referralTicketNumber: uint16(round.referralCounts),\\n                winner: false,\\n                claimed: false\\n            }));\\n\\n            roundReferralTicketsByAddress[referral].push(referralTickets.length - 1);\\n            roundReferralTicketsByAddressCount[referral]++;\\n        }\\n    }\\n\\n    function closeRound() public onlyOwner {\\n        require(block.timestamp >= round.endTime, \\\"Round is not over yet\\\");\\n        round.ended = true;\\n    }\\n\\n    function couldReceiveWinningNumbers() public view {\\n        require(block.timestamp >= round.endTime, \\\"Round is not over yet\\\");\\n        require(round.roundNumbers.length == 0, \\\"Winning numbers already set\\\");\\n    }\\n\\n    function storeWinningNumbers(uint16[] memory roundNumbers, uint16 powerNumber, uint16[] memory referralWinnersNumber) public onlyOwner {\\n        round.roundNumbers = roundNumbers;\\n        round.powerNumber = powerNumber;\\n        round.referralWinnersNumber = referralWinnersNumber;\\n        round.referralWinnersNumberCount = uint16(referralWinnersNumber.length);\\n    }\\n\\n    function markWinners(TicketResults[] memory ticketResults, ReferralTicketResults[] memory referralTicketResults) public onlyOwner {\\n        for (uint i = 0; i < ticketResults.length; i++) {\\n            TicketResults memory ticketResult = ticketResults[i];\\n            Ticket storage ticket = tickets[ticketResult.ticketId];\\n            ticket.victoryTier = ticketResult.victoryTier;\\n            winnersForEachTier[ticketResult.victoryTier]++;\\n        }\\n        for (uint i = 0; i < referralTicketResults.length; i++) {\\n            ReferralTicketResults memory referralTicketResult = referralTicketResults[i];\\n            ReferralTicket storage referralTicket = referralTickets[referralTicketResult.referralTicketId];\\n            referralTicket.winner = referralTicketResult.won;\\n            if (referralTicketResult.won) {\\n                winnersForEachTier[RoundVictoryTier.Referrer]++;\\n            }\\n        }\\n    }\\n\\n    function markVictoryClaimed(uint256 ticketId, uint256 amountClaimed) public onlyOwner {\\n        Ticket storage ticket = tickets[ticketId];\\n        ticket.claimed = true;\\n        victoryTierAmountsClaimed[ticket.victoryTier] += amountClaimed;\\n    }\\n\\n    function markReferralVictoryClaimed(uint256 referralTicketId, uint256 amountClaimed) public onlyOwner {\\n        ReferralTicket storage referralTicket = referralTickets[referralTicketId];\\n        referralTicket.claimed = true;\\n        victoryTierAmountsClaimed[RoundVictoryTier.Referrer] += amountClaimed;\\n    }\\n}\",\"keccak256\":\"0x81de9e02ecd466a52b9e1590d9d5473606166bceb9c11885e1a03ce0273e2667\",\"license\":\"UNLICENSED\"},\"contracts/LotteryRoundCreatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\ninterface LotteryRoundCreatorInterface {\\n   function startNewRound(uint256 roundDurationInSeconds, address previousRoundAddress) external returns(address);\\n}\",\"keccak256\":\"0x758edc675f9d3b6e91d052e64cf4ea0495d6639542acf1d41ddb2a4c825a392a\",\"license\":\"UNLICENSED\"},\"contracts/utils/EmergencyFunctions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract EmergencyFunctions is Ownable {\\n    address internal teamAddress;\\n    constructor(address _teamAddress) Ownable(_teamAddress) {\\n        teamAddress = _teamAddress;\\n    }\\n\\n    function updateTeamAddress(address _teamAddress) public onlyOwner {\\n        teamAddress = _teamAddress;\\n    }\\n\\n    // Emergency Functions\\n    function sendTokenToTeam(address _token) public onlyOwner {\\n        uint256 amount = IERC20(_token).balanceOf(address(this));\\n        if (amount > 0) {\\n            SafeERC20.safeTransfer(IERC20(_token), teamAddress, amount);\\n        }\\n    }\\n\\n    function sendCryptoToTeam() public onlyOwner {\\n        if (address(this).balance > 0) {\\n            payable(teamAddress).transfer(address(this).balance);\\n        }\\n    }\\n\\n    /** @notice Check if an address is a contract */\\n    function _isContract(address _addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x68dcc6a4104e2905f65c342fdb2dbde1908113d10c006f5857b52dc0bbefd419\",\"license\":\"MIT\"},\"contracts/utils/TestUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.x <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IERC20Extension {\\n    function decimals() external view returns (uint8);\\n}\\n\\ncontract TestFunctions is Ownable {\\n    constructor() Ownable(msg.sender) {}\\n    //Used for mock testing, contract ownership will be renounced on release\\n    uint public currentTimestampOverride;\\n    function updateCurrentTimestampOverride(uint _v) external onlyOwner {\\n        currentTimestampOverride = _v;\\n    }\\n    function currentTimestamp() public view returns(uint) {\\n        if (currentTimestampOverride > 0) {\\n            return currentTimestampOverride;\\n        }\\n        return block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x8edb22ef91efc1d38ffbd50b48821f4fe23bdaf84a14de75d0df8231eb772bc4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102325760003560e01c80638da5cb5b11610130578063bbd1783a116100b8578063e278fe6f1161007c578063e278fe6f14610613578063f10fb5841461061d578063f2fde38b1461063b578063f4dec22b14610657578063fd12e8cc1461067557610232565b8063bbd1783a14610581578063cedd1bc31461058b578063d4fc42c6146105bb578063dc418485146105d9578063e03d753a146105f557610232565b8063a628f4fd116100ff578063a628f4fd146104f5578063a8602fea14610511578063b086f3c01461052d578063b33d8c5414610549578063ba9684941461056557610232565b80638da5cb5b1461047f57806392566fdd1461049d578063998da3e9146104bb578063a32bf597146104d757610232565b8063266fbf90116101be57806358069bdb1161018257806358069bdb146103ef5780636a326ab11461040b578063715018a61461042757806387da46f1146104315780638c65c81f1461044f57610232565b8063266fbf90146103615780633013ce291461037d57806339c834e91461039b5780634615102c146103b75780634ff776b8146103d357610232565b806314eb76ac1161020557806314eb76ac146102ad57806315981650146102c95780631e410ddb146102e55780631fcebf6814610301578063258799f81461033157610232565b80630f5c49de14610237578063104dc360146102535780631209b1f614610271578063127f0b3f1461028f575b600080fd5b610251600480360381019061024c9190613a7d565b6106a5565b005b61025b6106ca565b6040516102689190613aeb565b60405180910390f35b6102796106f0565b6040516102869190613b1f565b60405180910390f35b6102976106f6565b6040516102a49190613b1f565b60405180910390f35b6102c760048036038101906102c29190613b66565b6106fc565b005b6102e360048036038101906102de9190613bbf565b610748565b005b6102ff60048036038101906102fa9190613c26565b61075a565b005b61031b60048036038101906103169190613b66565b610782565b6040516103289190613c62565b60405180910390f35b61034b60048036038101906103469190613bbf565b6107a3565b6040516103589190613aeb565b60405180910390f35b61037b60048036038101906103769190613dd6565b6107e2565b005b610385610de0565b6040516103929190613eb8565b60405180910390f35b6103b560048036038101906103b09190613b66565b610e06565b005b6103d160048036038101906103cc9190613bbf565b610f94565b005b6103ed60048036038101906103e89190613bbf565b61148d565b005b61040960048036038101906104049190613ed3565b611bbf565b005b61042560048036038101906104209190613b66565b611cc4565b005b61042f611d10565b005b610439611d24565b6040516104469190613f63565b60405180910390f35b61046960048036038101906104649190613bbf565b611d4a565b6040516104769190613aeb565b60405180910390f35b610487611d89565b6040516104949190613aeb565b60405180910390f35b6104a5611db2565b6040516104b29190613c62565b60405180910390f35b6104d560048036038101906104d09190613b66565b611dc6565b005b6104df611e87565b6040516104ec9190613aeb565b60405180910390f35b61050f600480360381019061050a9190613bbf565b611edb565b005b61052b60048036038101906105269190613b66565b6120dd565b005b61054760048036038101906105429190613bbf565b612129565b005b610563600480360381019061055e9190613fd9565b6128b1565b005b61057f600480360381019061057a9190613b66565b612978565b005b610589612ab7565b005b6105a560048036038101906105a09190613bbf565b612b34565b6040516105b29190613b1f565b60405180910390f35b6105c3612b4c565b6040516105d09190614047565b60405180910390f35b6105f360048036038101906105ee9190613bbf565b612b72565b005b6105fd613103565b60405161060a9190614071565b60405180910390f35b61061b613116565b005b610625613338565b60405161063291906140ad565b60405180910390f35b61065560048036038101906106509190613b66565b61335e565b005b61065f6133e4565b60405161066c9190613c62565b60405180910390f35b61068f600480360381019061068a9190613bbf565b6133f8565b60405161069c9190613aeb565b60405180910390f35b6106ad61344c565b80600c60006101000a81548160ff02191690831515021790555050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b5481565b60025481565b61070461344c565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61075061344c565b80600b8190555050565b61076261344c565b80600c60016101000a81548161ffff021916908361ffff16021790555050565b60046020528060005260406000206000915054906101000a900461ffff1681565b600681815481106107b357600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600460003273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900461ffff1661ffff1611806108e15750600b54600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e32306040518363ffffffff1660e01b815260040161089d9291906140c8565b602060405180830381865afa1580156108ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108de9190614106565b10155b610920576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091790614190565b60405180910390fd5b60006003600160025461093391906141df565b8154811061094457610943614213565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900461ffff1661ffff161115610a4857600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081819054906101000a900461ffff1680929190610a2890614242565b91906101000a81548161ffff021916908361ffff16021790555050610d68565b600b54600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231326040518263ffffffff1660e01b8152600401610aa69190613aeb565b602060405180830381865afa158015610ac3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae79190614106565b1015610b28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1f906142b7565b60405180910390fd5b6006805490506005600081819054906101000a900461ffff1680929190610b4e906142d7565b91906101000a81548161ffff021916908361ffff16021790555061ffff16610b769190614330565b600560006101000a81548161ffff021916908361ffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff1663af33d08f600b546040518263ffffffff1660e01b8152600401610bcf9190613b1f565b602060405180830381865afa158015610bec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c109190614106565b9050610c9f600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16336006600560009054906101000a900461ffff1661ffff1681548110610c6157610c60614213565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600b54610c9a91906141df565b6134d3565b610cef600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1633600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846134d3565b8173ffffffffffffffffffffffffffffffffffffffff1663b56c12b4600b546040518263ffffffff1660e01b8152600401610d2a9190613b1f565b600060405180830381600087803b158015610d4457600080fd5b505af1158015610d58573d6000803e3d6000fd5b50505050610d663384613555565b505b8073ffffffffffffffffffffffffffffffffffffffff1663266fbf90868686866040518563ffffffff1660e01b8152600401610da7949392919061441f565b600060405180830381600087803b158015610dc157600080fd5b505af1158015610dd5573d6000803e3d6000fd5b505050505050505050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610e0e61344c565b60005b600680549050811015610f90578173ffffffffffffffffffffffffffffffffffffffff1660068281548110610e4957610e48614213565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610f835760066001600680549050610ea391906141df565b81548110610eb457610eb3614213565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660068281548110610ef357610ef2614213565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506006805480610f4d57610f4c61446b565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590555b8080600101915050610e11565b5050565b610f9c61344c565b60026000815480929190610faf9061449a565b919050555060016002541115611386576003600c60039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166363ea940f8360036002805461101091906141df565b8154811061102157611020614213565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b81526004016110699291906144e2565b6020604051808303816000875af1158015611088573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ac9190614520565b9080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060036002805461111c91906141df565b8154811061112d5761112c614213565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa1580156111a2573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906111cb919061486d565b6060015161120e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120590614902565b60405180910390fd5b6003600160025461121f91906141df565b815481106112305761122f614213565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b288e1a96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c99190614520565b73ffffffffffffffffffffffffffffffffffffffff166003600280546112ef91906141df565b81548110611300576112ff614213565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611381576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137890614994565b60405180910390fd5b61148a565b6003600c60039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166363ea940f8360006040518363ffffffff1660e01b81526004016113e69291906144e2565b6020604051808303816000875af1158015611405573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114299190614520565b9080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b6000611497611e87565b905060008173ffffffffffffffffffffffffffffffffffffffff16639b7be8fc846040518263ffffffff1660e01b81526004016114d49190613b1f565b60e060405180830381865afa1580156114f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115159190614a8d565b90508281600001511461155d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155490614b06565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff16146115cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c690614b72565b60405180910390fd5b806060015115611614576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160b90614bde565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa15801561165f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611688919061486d565b606001516116cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116c290614c4a565b60405180910390fd5b6000600a8111156116df576116de614c6a565b5b8160a00151600a8111156116f6576116f5614c6a565b5b03611736576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172d90614ce5565b60405180910390fd5b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632aa601708373ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa1580156117bf573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906117e8919061486d565b60000151856040518363ffffffff1660e01b815260040161180a929190614d05565b6040805180830381865afa158015611826573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184a9190614d7e565b60200151600a8111156118605761185f614c6a565b5b8160a00151600a81111561187757611876614c6a565b5b146118b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ae90614df7565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1663efa3d5318360a001516040518263ffffffff1660e01b81526004016118f69190614e5f565b602060405180830381865afa158015611913573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119379190614106565b8373ffffffffffffffffffffffffffffffffffffffff1663e2e308308460a001516040518263ffffffff1660e01b81526004016119749190614e5f565b602060405180830381865afa158015611991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b59190614106565b816119c3576119c2614301565b5b04905080600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611a229190613aeb565b602060405180830381865afa158015611a3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a639190614106565b1015611aa4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9b90614ec6565b60405180910390fd5b611aac611e87565b73ffffffffffffffffffffffffffffffffffffffff166382e5892385836040518363ffffffff1660e01b8152600401611ae6929190614d05565b600060405180830381600087803b158015611b0057600080fd5b505af1158015611b14573d6000803e3d6000fd5b50505050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401611b75929190614ee6565b6020604051808303816000875af1158015611b94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb89190614f0f565b5050505050565b60005b8251811015611cbe576000600567ffffffffffffffff811115611be857611be7613c93565b5b604051908082528060200260200182016040528015611c165781602001602082028036833780820191505090505b50905060005b6005811015611c8157848184611c329190614f3c565b81518110611c4357611c42614213565b5b6020026020010151828281518110611c5e57611c5d614213565b5b602002602001019061ffff16908161ffff16815250508080600101915050611c1c565b50611ca9858286600581518110611c9b57611c9a614213565b5b6020026020010151866107e2565b50600681611cb79190614f3c565b9050611bc2565b50505050565b611ccc61344c565b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b611d1861344c565b611d226000613698565b565b600c60039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60038181548110611d5a57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600560009054906101000a900461ffff1681565b611dce61344c565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611e099190613aeb565b602060405180830381865afa158015611e26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4a9190614106565b90506000811115611e8357611e8282600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168361375c565b5b5050565b600060036001600254611e9a91906141df565b81548110611eab57611eaa614213565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611ee361344c565b6003600182611ef291906141df565b81548110611f0357611f02614213565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633590bd3c600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c099ae19846040518263ffffffff1660e01b8152600401611fa49190613b1f565b600060405180830381865afa158015611fc1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611fea9190615033565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d856f0d5856040518263ffffffff1660e01b81526004016120459190613b1f565b600060405180830381865afa158015612062573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061208b919061518f565b6040518363ffffffff1660e01b81526004016120a89291906153c1565b600060405180830381600087803b1580156120c257600080fd5b505af11580156120d6573d6000803e3d6000fd5b5050505050565b6120e561344c565b80600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000612133611e87565b905060008173ffffffffffffffffffffffffffffffffffffffff1663dd85ae5f846040518263ffffffff1660e01b81526004016121709190613b1f565b60a060405180830381865afa15801561218d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b19190615484565b9050828160000151146121f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121f090614b06565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff161461226b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161226290614b72565b60405180910390fd5b8060800151156122b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122a790614bde565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa1580156122fb573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612324919061486d565b60600151612367576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161235e90614c4a565b60405180910390fd5b6001151581606001511515146123b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123a990614ce5565b60405180910390fd5b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663078a6dbf8373ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa15801561243b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612464919061486d565b60000151856040518363ffffffff1660e01b8152600401612486929190614d05565b6040805180830381865afa1580156124a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124c691906154b1565b6020015115158160600151151514612513576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161250a90614df7565b60405180910390fd5b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f1664df68473ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa15801561259e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906125c7919061486d565b600001516040518263ffffffff1660e01b81526004016125e79190613b1f565b602060405180830381865afa158015612604573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061262891906154de565b61ffff168373ffffffffffffffffffffffffffffffffffffffff1663e2e3083060076040518263ffffffff1660e01b81526004016126669190614e5f565b602060405180830381865afa158015612683573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126a79190614106565b816126b5576126b4614301565b5b04905080600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016127149190613aeb565b602060405180830381865afa158015612731573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127559190614106565b1015612796576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161278d90614ec6565b60405180910390fd5b61279e611e87565b73ffffffffffffffffffffffffffffffffffffffff16630cee803c85836040518363ffffffff1660e01b81526004016127d8929190614d05565b600060405180830381600087803b1580156127f257600080fd5b505af1158015612806573d6000803e3d6000fd5b50505050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401612867929190614ee6565b6020604051808303816000875af1158015612886573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128aa9190614f0f565b5050505050565b6128b961344c565b60005b8282905081101561297357600460008484848181106128de576128dd614213565b5b90506020020160208101906128f39190613b66565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081819054906101000a900461ffff168092919061294b906142d7565b91906101000a81548161ffff021916908361ffff1602179055505080806001019150506128bc565b505050565b61298061344c565b60005b600680549050811015612a50578173ffffffffffffffffffffffffffffffffffffffff16600682815481106129bb576129ba614213565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603612a43576000612a42576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a3990615557565b60405180910390fd5b5b8080600101915050612983565b506006819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b612abf61344c565b6000471115612b3257600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015612b30573d6000803e3d6000fd5b505b565b600d6020528060005260406000206000915090505481565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b612b7a61344c565b60006003600183612b8b91906141df565b81548110612b9c57612b9b614213565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663343f25666040518163ffffffff1660e01b815260040160006040518083038186803b158015612c0f57600080fd5b505afa158015612c23573d6000803e3d6000fd5b50505050600080600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d8a4676f600d6000878152602001908152602001600020546040518263ffffffff1660e01b8152600401612c989190613b1f565b600060405180830381865afa158015612cb5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612cde9190615577565b9150915081612d22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d199061561f565b60405180910390fd5b6000600567ffffffffffffffff811115612d3f57612d3e613c93565b5b604051908082528060200260200182016040528015612d6d5781602001602082028036833780820191505090505b50905060008060068451612d8191906141df565b67ffffffffffffffff811115612d9a57612d99613c93565b5b604051908082528060200260200182016040528015612dc85781602001602082028036833780820191505090505b509050841561308b5760005b6005811015612ece57600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c746a8a868381518110612e2e57612e2d614213565b5b60200260200101516045876040518463ffffffff1660e01b8152600401612e579392919061567a565b602060405180830381865afa158015612e74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e9891906154de565b848281518110612eab57612eaa614213565b5b602002602001019061ffff16908161ffff16815250508080600101915050612dd4565b506001601a85600581518110612ee757612ee6614213565b5b6020026020010151612ef99190614330565b612f039190614f3c565b91506000600690505b845181101561308957600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c746a8a868381518110612f6657612f65614213565b5b60200260200101518973ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa158015612fb9573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612fe2919061486d565b6101600151856040518463ffffffff1660e01b8152600401613006939291906156b8565b602060405180830381865afa158015613023573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061304791906154de565b8260068361305591906141df565b8151811061306657613065614213565b5b602002602001019061ffff16908161ffff16815250508080600101915050612f0c565b505b8573ffffffffffffffffffffffffffffffffffffffff16636a65bcda8484846040518463ffffffff1660e01b81526004016130c8939291906156f6565b600060405180830381600087803b1580156130e257600080fd5b505af11580156130f6573d6000803e3d6000fd5b5050505050505050505050565b600c60009054906101000a900460ff1681565b61311e61344c565b60006003600160025461313191906141df565b8154811061314257613141614213565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663e278fe6f6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156131b757600080fd5b505af11580156131cb573d6000803e3d6000fd5b505050506000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f1664df66002546040518263ffffffff1660e01b815260040161322e9190613b1f565b602060405180830381865afa15801561324b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061326f91906154de565b9050600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e726f2e18260066132bc919061573b565b6040518263ffffffff1660e01b81526004016132d891906157b2565b6020604051808303816000875af11580156132f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061331b9190614106565b600d60006002548152602001908152602001600020819055505050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61336661344c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036133d85760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016133cf9190613aeb565b60405180910390fd5b6133e181613698565b50565b600c60019054906101000a900461ffff1681565b6000600360018361340991906141df565b8154811061341a57613419614213565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6134546137db565b73ffffffffffffffffffffffffffffffffffffffff16613472611d89565b73ffffffffffffffffffffffffffffffffffffffff16146134d1576134956137db565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016134c89190613aeb565b60405180910390fd5b565b61354f848573ffffffffffffffffffffffffffffffffffffffff166323b872dd868686604051602401613508939291906157cd565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506137e3565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415801561359e5750600c60009054906101000a900460ff165b1561369457600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081819054906101000a900461ffff1680929190613600906142d7565b91906101000a81548161ffff021916908361ffff16021790555050600460008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081819054906101000a900461ffff1680929190613678906142d7565b91906101000a81548161ffff021916908361ffff160217905550505b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6137d6838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb858560405160240161378f929190614ee6565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506137e3565b505050565b600033905090565b600061380e828473ffffffffffffffffffffffffffffffffffffffff1661387a90919063ffffffff16565b905060008151141580156138335750808060200190518101906138319190614f0f565b155b1561387557826040517f5274afe700000000000000000000000000000000000000000000000000000000815260040161386c9190613aeb565b60405180910390fd5b505050565b606061388883836000613890565b905092915050565b6060814710156138d757306040517fcd7860590000000000000000000000000000000000000000000000000000000081526004016138ce9190613aeb565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1684866040516139009190615875565b60006040518083038185875af1925050503d806000811461393d576040519150601f19603f3d011682016040523d82523d6000602084013e613942565b606091505b509150915061395286838361395d565b925050509392505050565b6060826139725761396d826139ec565b6139e4565b6000825114801561399a575060008473ffffffffffffffffffffffffffffffffffffffff163b145b156139dc57836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016139d39190613aeb565b60405180910390fd5b8190506139e5565b5b9392505050565b6000815111156139ff5780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000604051905090565b600080fd5b600080fd5b60008115159050919050565b613a5a81613a45565b8114613a6557600080fd5b50565b600081359050613a7781613a51565b92915050565b600060208284031215613a9357613a92613a3b565b5b6000613aa184828501613a68565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613ad582613aaa565b9050919050565b613ae581613aca565b82525050565b6000602082019050613b006000830184613adc565b92915050565b6000819050919050565b613b1981613b06565b82525050565b6000602082019050613b346000830184613b10565b92915050565b613b4381613aca565b8114613b4e57600080fd5b50565b600081359050613b6081613b3a565b92915050565b600060208284031215613b7c57613b7b613a3b565b5b6000613b8a84828501613b51565b91505092915050565b613b9c81613b06565b8114613ba757600080fd5b50565b600081359050613bb981613b93565b92915050565b600060208284031215613bd557613bd4613a3b565b5b6000613be384828501613baa565b91505092915050565b600061ffff82169050919050565b613c0381613bec565b8114613c0e57600080fd5b50565b600081359050613c2081613bfa565b92915050565b600060208284031215613c3c57613c3b613a3b565b5b6000613c4a84828501613c11565b91505092915050565b613c5c81613bec565b82525050565b6000602082019050613c776000830184613c53565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613ccb82613c82565b810181811067ffffffffffffffff82111715613cea57613ce9613c93565b5b80604052505050565b6000613cfd613a31565b9050613d098282613cc2565b919050565b600067ffffffffffffffff821115613d2957613d28613c93565b5b602082029050602081019050919050565b600080fd5b6000613d52613d4d84613d0e565b613cf3565b90508083825260208201905060208402830185811115613d7557613d74613d3a565b5b835b81811015613d9e5780613d8a8882613c11565b845260208401935050602081019050613d77565b5050509392505050565b600082601f830112613dbd57613dbc613c7d565b5b8135613dcd848260208601613d3f565b91505092915050565b60008060008060808587031215613df057613def613a3b565b5b6000613dfe87828801613baa565b945050602085013567ffffffffffffffff811115613e1f57613e1e613a40565b5b613e2b87828801613da8565b9350506040613e3c87828801613c11565b9250506060613e4d87828801613b51565b91505092959194509250565b6000819050919050565b6000613e7e613e79613e7484613aaa565b613e59565b613aaa565b9050919050565b6000613e9082613e63565b9050919050565b6000613ea282613e85565b9050919050565b613eb281613e97565b82525050565b6000602082019050613ecd6000830184613ea9565b92915050565b600080600060608486031215613eec57613eeb613a3b565b5b6000613efa86828701613baa565b935050602084013567ffffffffffffffff811115613f1b57613f1a613a40565b5b613f2786828701613da8565b9250506040613f3886828701613b51565b9150509250925092565b6000613f4d82613e85565b9050919050565b613f5d81613f42565b82525050565b6000602082019050613f786000830184613f54565b92915050565b600080fd5b60008083601f840112613f9957613f98613c7d565b5b8235905067ffffffffffffffff811115613fb657613fb5613f7e565b5b602083019150836020820283011115613fd257613fd1613d3a565b5b9250929050565b60008060208385031215613ff057613fef613a3b565b5b600083013567ffffffffffffffff81111561400e5761400d613a40565b5b61401a85828601613f83565b92509250509250929050565b600061403182613e85565b9050919050565b61404181614026565b82525050565b600060208201905061405c6000830184614038565b92915050565b61406b81613a45565b82525050565b60006020820190506140866000830184614062565b92915050565b600061409782613e85565b9050919050565b6140a78161408c565b82525050565b60006020820190506140c2600083018461409e565b92915050565b60006040820190506140dd6000830185613adc565b6140ea6020830184613adc565b9392505050565b60008151905061410081613b93565b92915050565b60006020828403121561411c5761411b613a3b565b5b600061412a848285016140f1565b91505092915050565b600082825260208201905092915050565b7f4d697373696e6720416c6c6f77616e6365000000000000000000000000000000600082015250565b600061417a601183614133565b915061418582614144565b602082019050919050565b600060208201905081810360008301526141a98161416d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006141ea82613b06565b91506141f583613b06565b925082820390508181111561420d5761420c6141b0565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061424d82613bec565b9150600082036142605761425f6141b0565b5b600182039050919050565b7f496e73756666696369656e742066756e64730000000000000000000000000000600082015250565b60006142a1601283614133565b91506142ac8261426b565b602082019050919050565b600060208201905081810360008301526142d081614294565b9050919050565b60006142e282613bec565b915061ffff82036142f6576142f56141b0565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061433b82613b06565b915061434683613b06565b92508261435657614355614301565b5b828206905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61439681613bec565b82525050565b60006143a8838361438d565b60208301905092915050565b6000602082019050919050565b60006143cc82614361565b6143d6818561436c565b93506143e18361437d565b8060005b838110156144125781516143f9888261439c565b9750614404836143b4565b9250506001810190506143e5565b5085935050505092915050565b60006080820190506144346000830187613b10565b818103602083015261444681866143c1565b90506144556040830185613c53565b6144626060830184613adc565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60006144a582613b06565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036144d7576144d66141b0565b5b600182019050919050565b60006040820190506144f76000830185613b10565b6145046020830184613adc565b9392505050565b60008151905061451a81613b3a565b92915050565b60006020828403121561453657614535613a3b565b5b60006145448482850161450b565b91505092915050565b600080fd5b600080fd5b60008151905061456681613a51565b92915050565b60008151905061457b81613bfa565b92915050565b600061459461458f84613d0e565b613cf3565b905080838252602082019050602084028301858111156145b7576145b6613d3a565b5b835b818110156145e057806145cc888261456c565b8452602084019350506020810190506145b9565b5050509392505050565b600082601f8301126145ff576145fe613c7d565b5b815161460f848260208601614581565b91505092915050565b600067ffffffffffffffff82111561463357614632613c93565b5b602082029050602081019050919050565b600061465761465284614618565b613cf3565b9050808382526020820190506020840283018581111561467a57614679613d3a565b5b835b818110156146a3578061468f88826140f1565b84526020840193505060208101905061467c565b5050509392505050565b600082601f8301126146c2576146c1613c7d565b5b81516146d2848260208601614644565b91505092915050565b600061018082840312156146f2576146f161454d565b5b6146fd610180613cf3565b9050600061470d848285016140f1565b6000830152506020614721848285016140f1565b6020830152506040614735848285016140f1565b604083015250606061474984828501614557565b606083015250608082015167ffffffffffffffff81111561476d5761476c614552565b5b614779848285016145ea565b60808301525060a061478d8482850161456c565b60a08301525060c082015167ffffffffffffffff8111156147b1576147b0614552565b5b6147bd848285016145ea565b60c08301525060e06147d18482850161456c565b60e08301525061010082015167ffffffffffffffff8111156147f6576147f5614552565b5b614802848285016146ad565b610100830152506101206148188482850161456c565b6101208301525061014082015167ffffffffffffffff81111561483e5761483d614552565b5b61484a848285016146ad565b610140830152506101606148608482850161456c565b6101608301525092915050565b60006020828403121561488357614882613a3b565b5b600082015167ffffffffffffffff8111156148a1576148a0613a40565b5b6148ad848285016146db565b91505092915050565b7f50726576696f757320726f756e64206e6f7420656e6465640000000000000000600082015250565b60006148ec601883614133565b91506148f7826148b6565b602082019050919050565b6000602082019050818103600083015261491b816148df565b9050919050565b7f50726576696f757320726f756e64206e6f742070726f7061676174656420636f60008201527f72726563746c7900000000000000000000000000000000000000000000000000602082015250565b600061497e602783614133565b915061498982614922565b604082019050919050565b600060208201905081810360008301526149ad81614971565b9050919050565b600b81106149c157600080fd5b50565b6000815190506149d3816149b4565b92915050565b600060e082840312156149ef576149ee61454d565b5b6149f960e0613cf3565b90506000614a09848285016140f1565b6000830152506020614a1d8482850161450b565b6020830152506040614a318482850161450b565b6040830152506060614a4584828501614557565b6060830152506080614a59848285016140f1565b60808301525060a0614a6d848285016149c4565b60a08301525060c0614a818482850161456c565b60c08301525092915050565b600060e08284031215614aa357614aa2613a3b565b5b6000614ab1848285016149d9565b91505092915050565b7f496e76616c6964207469636b6574206964000000000000000000000000000000600082015250565b6000614af0601183614133565b9150614afb82614aba565b602082019050919050565b60006020820190508181036000830152614b1f81614ae3565b9050919050565b7f496e76616c6964207469636b6574206f776e6572000000000000000000000000600082015250565b6000614b5c601483614133565b9150614b6782614b26565b602082019050919050565b60006020820190508181036000830152614b8b81614b4f565b9050919050565b7f5469636b657420616c726561647920636c61696d656400000000000000000000600082015250565b6000614bc8601683614133565b9150614bd382614b92565b602082019050919050565b60006020820190508181036000830152614bf781614bbb565b9050919050565b7f526f756e64206e6f7420656e6465640000000000000000000000000000000000600082015250565b6000614c34600f83614133565b9150614c3f82614bfe565b602082019050919050565b60006020820190508181036000830152614c6381614c27565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e6f207072697a6520666f722074686973207469636b65740000000000000000600082015250565b6000614ccf601883614133565b9150614cda82614c99565b602082019050919050565b60006020820190508181036000830152614cfe81614cc2565b9050919050565b6000604082019050614d1a6000830185613b10565b614d276020830184613b10565b9392505050565b600060408284031215614d4457614d4361454d565b5b614d4e6040613cf3565b90506000614d5e848285016140f1565b6000830152506020614d72848285016149c4565b60208301525092915050565b600060408284031215614d9457614d93613a3b565b5b6000614da284828501614d2e565b91505092915050565b7f496e76616c6964207469636b6574207469657200000000000000000000000000600082015250565b6000614de1601383614133565b9150614dec82614dab565b602082019050919050565b60006020820190508181036000830152614e1081614dd4565b9050919050565b600b8110614e2857614e27614c6a565b5b50565b6000819050614e3982614e17565b919050565b6000614e4982614e2b565b9050919050565b614e5981614e3e565b82525050565b6000602082019050614e746000830184614e50565b92915050565b7f4e6f7420656e6f7567682066756e6473206f6e20636f6e747261637400000000600082015250565b6000614eb0601c83614133565b9150614ebb82614e7a565b602082019050919050565b60006020820190508181036000830152614edf81614ea3565b9050919050565b6000604082019050614efb6000830185613adc565b614f086020830184613b10565b9392505050565b600060208284031215614f2557614f24613a3b565b5b6000614f3384828501614557565b91505092915050565b6000614f4782613b06565b9150614f5283613b06565b9250828201905080821115614f6a57614f696141b0565b5b92915050565b600067ffffffffffffffff821115614f8b57614f8a613c93565b5b602082029050602081019050919050565b6000614faf614faa84614f70565b613cf3565b90508083825260208201905060408402830185811115614fd257614fd1613d3a565b5b835b81811015614ffb5780614fe78882614d2e565b845260208401935050604081019050614fd4565b5050509392505050565b600082601f83011261501a57615019613c7d565b5b815161502a848260208601614f9c565b91505092915050565b60006020828403121561504957615048613a3b565b5b600082015167ffffffffffffffff81111561506757615066613a40565b5b61507384828501615005565b91505092915050565b600067ffffffffffffffff82111561509757615096613c93565b5b602082029050602081019050919050565b6000604082840312156150be576150bd61454d565b5b6150c86040613cf3565b905060006150d8848285016140f1565b60008301525060206150ec84828501614557565b60208301525092915050565b600061510b6151068461507c565b613cf3565b9050808382526020820190506040840283018581111561512e5761512d613d3a565b5b835b81811015615157578061514388826150a8565b845260208401935050604081019050615130565b5050509392505050565b600082601f83011261517657615175613c7d565b5b81516151868482602086016150f8565b91505092915050565b6000602082840312156151a5576151a4613a3b565b5b600082015167ffffffffffffffff8111156151c3576151c2613a40565b5b6151cf84828501615161565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61520d81613b06565b82525050565b61521c81614e3e565b82525050565b6040820160008201516152386000850182615204565b50602082015161524b6020850182615213565b50505050565b600061525d8383615222565b60408301905092915050565b6000602082019050919050565b6000615281826151d8565b61528b81856151e3565b9350615296836151f4565b8060005b838110156152c75781516152ae8882615251565b97506152b983615269565b92505060018101905061529a565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61530981613a45565b82525050565b6040820160008201516153256000850182615204565b5060208201516153386020850182615300565b50505050565b600061534a838361530f565b60408301905092915050565b6000602082019050919050565b600061536e826152d4565b61537881856152df565b9350615383836152f0565b8060005b838110156153b457815161539b888261533e565b97506153a683615356565b925050600181019050615387565b5085935050505092915050565b600060408201905081810360008301526153db8185615276565b905081810360208301526153ef8184615363565b90509392505050565b600060a0828403121561540e5761540d61454d565b5b61541860a0613cf3565b90506000615428848285016140f1565b600083015250602061543c8482850161450b565b60208301525060406154508482850161456c565b604083015250606061546484828501614557565b606083015250608061547884828501614557565b60808301525092915050565b600060a0828403121561549a57615499613a3b565b5b60006154a8848285016153f8565b91505092915050565b6000604082840312156154c7576154c6613a3b565b5b60006154d5848285016150a8565b91505092915050565b6000602082840312156154f4576154f3613a3b565b5b60006155028482850161456c565b91505092915050565b7f57616c6c657420616c7265616479206164646564000000000000000000000000600082015250565b6000615541601483614133565b915061554c8261550b565b602082019050919050565b6000602082019050818103600083015261557081615534565b9050919050565b6000806040838503121561558e5761558d613a3b565b5b600061559c85828601614557565b925050602083015167ffffffffffffffff8111156155bd576155bc613a40565b5b6155c9858286016146ad565b9150509250929050565b7f52616e646f6d206e756d62657273206e6f742072656164790000000000000000600082015250565b6000615609601883614133565b9150615614826155d3565b602082019050919050565b60006020820190508181036000830152615638816155fc565b9050919050565b6000819050919050565b600061566461565f61565a8461563f565b613e59565b613bec565b9050919050565b61567481615649565b82525050565b600060608201905061568f6000830186613b10565b61569c602083018561566b565b81810360408301526156ae81846143c1565b9050949350505050565b60006060820190506156cd6000830186613b10565b6156da6020830185613c53565b81810360408301526156ec81846143c1565b9050949350505050565b6000606082019050818103600083015261571081866143c1565b905061571f6020830185613c53565b818103604083015261573181846143c1565b9050949350505050565b600061574682613bec565b915061575183613bec565b9250828201905061ffff81111561576b5761576a6141b0565b5b92915050565b600063ffffffff82169050919050565b600061579c61579761579284613bec565b613e59565b615771565b9050919050565b6157ac81615781565b82525050565b60006020820190506157c760008301846157a3565b92915050565b60006060820190506157e26000830186613adc565b6157ef6020830185613adc565b6157fc6040830184613b10565b949350505050565b600081519050919050565b600081905092915050565b60005b8381101561583857808201518184015260208101905061581d565b60008484015250505050565b600061584f82615804565b615859818561580f565b935061586981856020860161581a565b80840191505092915050565b60006158818284615844565b91508190509291505056fea2646970667358221220617b511348e79feee931f099b9781c799f77104e2335c5ff4abc27f80a0855f364736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4196,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "teamAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1000,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "roundCount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1003,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "rounds",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1033,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "freeRounds",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint16)"
      },
      {
        "astId": 1035,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "counterForBankWallets",
        "offset": 0,
        "slot": "5",
        "type": "t_uint16"
      },
      {
        "astId": 1038,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "bankWallets",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1123,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "treasuryWallets",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 1138,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "paymentToken",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IERC20Metadata)251"
      },
      {
        "astId": 1155,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "randomizer",
        "offset": 0,
        "slot": "9",
        "type": "t_contract(CyclixRandomizerInterface)892"
      },
      {
        "astId": 1158,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "reader",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(LotteryReaderInterface)3104"
      },
      {
        "astId": 1160,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "ticketPrice",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1175,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "freeRoundsAreEnabled",
        "offset": 0,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 1190,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "percentageOfReferralWinners",
        "offset": 1,
        "slot": "12",
        "type": "t_uint16"
      },
      {
        "astId": 1205,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "lotteryRoundCreator",
        "offset": 3,
        "slot": "12",
        "type": "t_contract(LotteryRoundCreatorInterface)4187"
      },
      {
        "astId": 1623,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "publicRoundRandomNumbersRequestId",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(CyclixRandomizerInterface)892": {
        "encoding": "inplace",
        "label": "contract CyclixRandomizerInterface",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Metadata)251": {
        "encoding": "inplace",
        "label": "contract IERC20Metadata",
        "numberOfBytes": "20"
      },
      "t_contract(LotteryReaderInterface)3104": {
        "encoding": "inplace",
        "label": "contract LotteryReaderInterface",
        "numberOfBytes": "20"
      },
      "t_contract(LotteryRoundCreatorInterface)4187": {
        "encoding": "inplace",
        "label": "contract LotteryRoundCreatorInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint16)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}