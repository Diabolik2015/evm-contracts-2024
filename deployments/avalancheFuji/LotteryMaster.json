{
  "address": "0x86A5c9A532B6f373860697Dd6243d28A1F710417",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cyclixRandomizer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lotteryReader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lotteryRoundCreator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_paymentToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_ticketPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_freeRoundsAreEnabled",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "participant",
          "type": "address[]"
        }
      ],
      "name": "addFreeRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bankWallets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint16[]",
          "name": "chosenNumbers",
          "type": "uint16[]"
        },
        {
          "internalType": "address",
          "name": "referral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        }
      ],
      "name": "buyTicket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint16[]",
          "name": "moreTicketNumbers",
          "type": "uint16[]"
        },
        {
          "internalType": "address",
          "name": "referral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        }
      ],
      "name": "buyTickets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "referralTicketId",
          "type": "uint256"
        }
      ],
      "name": "claimReferralVictory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketId",
          "type": "uint256"
        }
      ],
      "name": "claimVictory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_statusEndTime",
          "type": "uint256"
        }
      ],
      "name": "closeRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counterForBankWallets",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "crossChainOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_statusEndTime",
          "type": "uint256"
        }
      ],
      "name": "fetchRoundNumbers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "freeRounds",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "freeRoundsAreEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lotteryRoundCreator",
      "outputs": [
        {
          "internalType": "contract LotteryRoundCreatorInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lotteryStatus",
      "outputs": [
        {
          "internalType": "enum LotteryStatuses",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_statusEndTime",
          "type": "uint256"
        }
      ],
      "name": "markWinners",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentToken",
      "outputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "percentageOfReferralWinners",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "publicRoundRandomNumbersRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randomizer",
      "outputs": [
        {
          "internalType": "contract CyclixRandomizerInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reader",
      "outputs": [
        {
          "internalType": "contract LotteryReaderInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roundCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rounds",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendCryptoToTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "sendTokenToTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "add",
          "type": "bool"
        }
      ],
      "name": "setBankWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setCrossChainOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_statusEndTime",
          "type": "uint256"
        }
      ],
      "name": "startNewRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "statusEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "statusStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ticketPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryWallets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cyclixRandomizer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lotteryReader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lotteryRoundCreator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_paymentToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_ticketPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_treasuryWallet",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_percentageOfReferralWinners",
          "type": "uint16"
        },
        {
          "internalType": "uint16[]",
          "name": "_poolPercentagesBasePoints",
          "type": "uint16[]"
        },
        {
          "internalType": "bool",
          "name": "_freeRoundsAreEnabled",
          "type": "bool"
        }
      ],
      "name": "updateSetup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_teamAddress",
          "type": "address"
        }
      ],
      "name": "updateTeamAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7dc4994a53fe4e0204226a602a2c27246e3ef72dd8f990a162375993ea195ac7",
  "receipt": {
    "to": null,
    "from": "0x4eCa23Ffd5710970E22558C484a0D6943dA5eAa5",
    "contractAddress": "0x86A5c9A532B6f373860697Dd6243d28A1F710417",
    "transactionIndex": 1,
    "gasUsed": "5636828",
    "logsBloom": "0x
    "blockHash": "0xc92aa12167eb5522959bb465313540e57d0ff7eb310d0c7845c2052e3fb05caf",
    "transactionHash": "0x7dc4994a53fe4e0204226a602a2c27246e3ef72dd8f990a162375993ea195ac7",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 32689461,
        "transactionHash": "0x7dc4994a53fe4e0204226a602a2c27246e3ef72dd8f990a162375993ea195ac7",
        "address": "0x86A5c9A532B6f373860697Dd6243d28A1F710417",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004eca23ffd5710970e22558c484a0d6943da5eaa5"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xc92aa12167eb5522959bb465313540e57d0ff7eb310d0c7845c2052e3fb05caf"
      }
    ],
    "blockNumber": 32689461,
    "cumulativeGasUsed": "5756748",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x261Eb577B743164A850dD2Ed02e2688aE0591c32",
    "0x3777D48B9d3448b951Dfd9D4088fb8218BC90Dd0",
    "0x9208ec0F1C4f54e3Fc15dD37Dba74E945E9C5f98",
    "0x9bc9157Ae3BB95F3A284beE27ea54995F0e28daC",
    10,
    true
  ],
  "numDeployments": 3,
  "solcInputHash": "7d03445158f7d90960adf792c0efa201",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cyclixRandomizer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lotteryReader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lotteryRoundCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_freeRoundsAreEnabled\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"participant\",\"type\":\"address[]\"}],\"name\":\"addFreeRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bankWallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint16[]\",\"name\":\"chosenNumbers\",\"type\":\"uint16[]\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"buyTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint16[]\",\"name\":\"moreTicketNumbers\",\"type\":\"uint16[]\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"buyTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"referralTicketId\",\"type\":\"uint256\"}],\"name\":\"claimReferralVictory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"}],\"name\":\"claimVictory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_statusEndTime\",\"type\":\"uint256\"}],\"name\":\"closeRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counterForBankWallets\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"crossChainOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_statusEndTime\",\"type\":\"uint256\"}],\"name\":\"fetchRoundNumbers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"freeRounds\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeRoundsAreEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryRoundCreator\",\"outputs\":[{\"internalType\":\"contract LotteryRoundCreatorInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryStatus\",\"outputs\":[{\"internalType\":\"enum LotteryStatuses\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_statusEndTime\",\"type\":\"uint256\"}],\"name\":\"markWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentToken\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentageOfReferralWinners\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"publicRoundRandomNumbersRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomizer\",\"outputs\":[{\"internalType\":\"contract CyclixRandomizerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reader\",\"outputs\":[{\"internalType\":\"contract LotteryReaderInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendCryptoToTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sendTokenToTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"}],\"name\":\"setBankWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setCrossChainOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_statusEndTime\",\"type\":\"uint256\"}],\"name\":\"startNewRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"statusEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"statusStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cyclixRandomizer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lotteryReader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lotteryRoundCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_treasuryWallet\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_percentageOfReferralWinners\",\"type\":\"uint16\"},{\"internalType\":\"uint16[]\",\"name\":\"_poolPercentagesBasePoints\",\"type\":\"uint16[]\"},{\"internalType\":\"bool\",\"name\":\"_freeRoundsAreEnabled\",\"type\":\"bool\"}],\"name\":\"updateSetup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teamAddress\",\"type\":\"address\"}],\"name\":\"updateTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LotteryMaster.sol\":\"LotteryMaster\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/CyclixRandomizerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface CyclixRandomizerInterface {\\n    function requestRandomWords(uint32 numWords) external returns (uint256 requestId);\\n    function getRequestStatus(uint256 _requestId) external view returns (bool fulfilled, uint256[] memory randomWords);\\n    function registerGameContract(address gameAddress, string calldata name) external;\\n    function getLastRequestIdForCaller(address _gameAddress) external view returns (uint256);\\n    function recoverLostNumberRequest(uint256 _requestId) external returns (uint256);\\n}\",\"keccak256\":\"0xc71c2b020044355f41cc53069e9a6f9f2778311e8d601a29bcc608301a0dfe24\",\"license\":\"MIT\"},\"contracts/LotteryCommon.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\n    enum RoundVictoryTier {\\n        NO_WIN,\\n        Tier5_1,\\n        Tier5,\\n        Tier4_1,\\n        Tier4,\\n        Tier3_1,\\n        Tier3,\\n        Referrer,\\n        PublicPool,\\n        TokenHolders,\\n        Treasury\\n    }\\n\\n    struct Round {\\n        uint256 id;\\n        uint256 startTime;\\n        uint256 endTime;\\n        bool ended;\\n        uint16[] roundNumbers;\\n        uint16[] referralWinnersNumber;\\n        uint16 referralWinnersNumberCount;\\n        uint256[] ticketIds;\\n        uint16 ticketsCount;\\n        uint256[] referralTicketIds;\\n        uint16 referralCounts;\\n    }\\n\\n    struct Ticket {\\n        uint256 id;\\n        address participantAddress;\\n        address referralAddress;\\n        bool claimed;\\n        uint256 chainId;\\n        RoundVictoryTier victoryTier;\\n    }\\n\\n    struct TicketResults {\\n        uint256 ticketId;\\n        RoundVictoryTier victoryTier;\\n    }\\n\\n    struct ReferralTicket {\\n        uint256 id;\\n        address referralAddress;\\n        uint16 referralTicketNumber;\\n        bool winner;\\n        bool claimed;\\n    }\\n\\n    struct ReferralTicketResults {\\n        uint256 referralTicketId;\\n        bool won;\\n    }\",\"keccak256\":\"0x20e8b7859bdc7f7d3d7aff78c3a0d9953316d0a2a8850f886fe8e273820b32ec\",\"license\":\"UNLICENSED\"},\"contracts/LotteryMaster.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {CyclixRandomizerInterface} from \\\"./CyclixRandomizerInterface.sol\\\";\\nimport {EmergencyFunctions} from \\\"./utils/EmergencyFunctions.sol\\\";\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\nimport { LotteryRoundInterface } from \\\"./LotteryRoundInterface.sol\\\";\\nimport { LotteryReaderInterface } from \\\"./LotteryReaderInterface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./LotteryRoundCreatorInterface.sol\\\";\\n    enum LotteryStatuses {\\n        DrawOpen,\\n        EvaluatingResults,\\n        ResultsEvaluated,\\n        ClaimInProgress\\n    }\\n\\ncontract LotteryMaster is EmergencyFunctions {\\n\\n    uint256 public roundCount;\\n    address[] public rounds;\\n    LotteryStatuses public lotteryStatus;\\n    uint256 public statusStartTime;\\n    uint256 public statusEndTime;\\n\\n    mapping(address => uint16) public freeRounds;\\n    mapping(address => bool) public crossChainOperator;\\n    function setCrossChainOperator(address operator, bool value) public onlyOwner {\\n        crossChainOperator[operator] = value;\\n    }\\n\\n    uint16 public counterForBankWallets;\\n    address[] public bankWallets;\\n    function setBankWallet(address wallet, bool add) public onlyOwner {\\n        for (uint i = 0; i < bankWallets.length; i++) {\\n            if (bankWallets[i] == wallet) {\\n                if (add) {\\n                    require(false, \\\"Wallet already added\\\");\\n                } else {\\n                    bankWallets[i] = bankWallets[bankWallets.length - 1];\\n                    bankWallets.pop();\\n                }\\n            }\\n        }\\n        if (add) {\\n            bankWallets.push(wallet);\\n        }\\n    }\\n\\n    address public treasuryWallets;\\n    IERC20Metadata public paymentToken;\\n    CyclixRandomizerInterface public randomizer;\\n    LotteryReaderInterface public reader;\\n    uint256 public ticketPrice;\\n    bool public freeRoundsAreEnabled = false;\\n    uint16 public percentageOfReferralWinners = 10;\\n    LotteryRoundCreatorInterface public lotteryRoundCreator;\\n\\n    constructor(address cyclixRandomizer, address lotteryReader, address _lotteryRoundCreator, address _paymentToken, uint256 _ticketPrice, bool _freeRoundsAreEnabled)\\n    EmergencyFunctions(msg.sender) {\\n        randomizer = CyclixRandomizerInterface(cyclixRandomizer);\\n        randomizer.registerGameContract(address(this), \\\"LotteryMasterV0.1\\\");\\n        reader = LotteryReaderInterface(lotteryReader);\\n        lotteryRoundCreator = LotteryRoundCreatorInterface(_lotteryRoundCreator);\\n        paymentToken = IERC20Metadata(_paymentToken);\\n        ticketPrice = _ticketPrice * (10 ** uint256(paymentToken.decimals()));\\n        freeRoundsAreEnabled = _freeRoundsAreEnabled;\\n        treasuryWallets = msg.sender;\\n        bankWallets.push(msg.sender);\\n    }\\n\\n    function updateSetup(address cyclixRandomizer, address lotteryReader, address _lotteryRoundCreator, address _paymentToken, uint256 _ticketPrice,\\n        address _treasuryWallet, uint16 _percentageOfReferralWinners, uint16[] memory _poolPercentagesBasePoints, bool _freeRoundsAreEnabled) public onlyOwner {\\n        randomizer = CyclixRandomizerInterface(cyclixRandomizer);\\n        randomizer.registerGameContract(address(this), \\\"LotteryMasterV0.1\\\");\\n        reader = LotteryReaderInterface(lotteryReader);\\n        lotteryRoundCreator = LotteryRoundCreatorInterface(_lotteryRoundCreator);\\n        paymentToken = IERC20Metadata(_paymentToken);\\n        ticketPrice = _ticketPrice * (10 ** uint256(paymentToken.decimals()));\\n        treasuryWallets = _treasuryWallet;\\n        percentageOfReferralWinners = _percentageOfReferralWinners;\\n        LotteryRoundInterface(rounds[roundCount - 1]).setPoolPercentagesBasePoints(_poolPercentagesBasePoints);\\n        freeRoundsAreEnabled = _freeRoundsAreEnabled;\\n    }\\n\\n    function startNewRound(uint256 _statusEndTime) public onlyOwner {\\n        roundCount++;\\n        if (roundCount > 1) {\\n            rounds.push(lotteryRoundCreator.startNewRound(_statusEndTime, rounds[roundCount - 2]));\\n            require(lotteryStatus == LotteryStatuses.ClaimInProgress && statusEndTime < block.timestamp, \\\"Previous round not ended\\\");\\n        } else {\\n            rounds.push(lotteryRoundCreator.startNewRound(_statusEndTime, address(0)));\\n        }\\n        setLotteryStatus(LotteryStatuses.DrawOpen, _statusEndTime);\\n    }\\n\\n    function setLotteryStatus(LotteryStatuses _lotteryStatus, uint256 _statusEndTime) internal onlyOwner {\\n        lotteryStatus = _lotteryStatus;\\n        statusStartTime = block.timestamp;\\n        statusEndTime = block.timestamp + _statusEndTime;\\n    }\\n\\n    function buyTickets(uint256 chainId, uint16[] memory moreTicketNumbers, address referral, address buyer) public {\\n        for (uint i = 0; i < moreTicketNumbers.length; i += 6) {\\n            uint16[] memory chosenNumbers = new uint16[](6);\\n            for (uint j = 0; j < 6; j++) {\\n                chosenNumbers[j] = moreTicketNumbers[i + j];\\n            }\\n            buyTicket(chainId, chosenNumbers, referral, buyer);\\n        }\\n    }\\n\\n    function buyTicket(uint256 chainId, uint16[] memory chosenNumbers, address referral, address buyer) public {\\n        require(freeRounds[buyer] > 0\\n        || paymentToken.allowance(buyer, address(this)) >= ticketPrice\\n        || crossChainOperator[msg.sender], \\\"Missing Allowance\\\");\\n        LotteryRoundInterface lotteryRound = LotteryRoundInterface(rounds[roundCount - 1]);\\n        if (freeRounds[buyer] > 0) {\\n            freeRounds[buyer]--;\\n        } else {\\n            if (!crossChainOperator[msg.sender]) {\\n                require(paymentToken.balanceOf(tx.origin) >= ticketPrice, \\\"Insufficient funds\\\");\\n                counterForBankWallets = uint16(counterForBankWallets++ % bankWallets.length);\\n                uint256 treasuryAmount = lotteryRound.treasuryAmountOnTicket(ticketPrice);\\n                SafeERC20.safeTransferFrom(paymentToken, buyer, bankWallets[counterForBankWallets], ticketPrice - treasuryAmount);\\n                SafeERC20.safeTransferFrom(paymentToken, buyer, treasuryWallets, treasuryAmount);\\n            }\\n            lotteryRound.updateVictoryPoolForTicket(ticketPrice);\\n\\n            if (referral != address(0) && freeRoundsAreEnabled) {\\n                freeRounds[buyer]++;\\n                freeRounds[referral]++;\\n            }\\n        }\\n\\n        lotteryRound.buyTicket(chainId, chosenNumbers, referral, buyer);\\n    }\\n\\n    function addFreeRound(address[] calldata participant) public onlyOwner {\\n        for (uint i = 0; i < participant.length; i++) {\\n            freeRounds[participant[i]]++;\\n        }\\n    }\\n\\n    mapping(uint256 => uint256) public publicRoundRandomNumbersRequestId;\\n\\n    function closeRound(uint256 _statusEndTime) external onlyOwner {\\n        LotteryRoundInterface lotteryRound = LotteryRoundInterface(rounds[roundCount - 1]);\\n        lotteryRound.closeRound();\\n        uint16 referralWinners = reader.numberOfReferralWinnersForRoundId(roundCount);\\n        publicRoundRandomNumbersRequestId[roundCount] = randomizer.requestRandomWords(6 + referralWinners);\\n        setLotteryStatus(LotteryStatuses.EvaluatingResults, _statusEndTime);\\n    }\\n\\n    function fetchRoundNumbers(uint256 roundId, uint256 _statusEndTime) external onlyOwner {\\n        LotteryRoundInterface round = LotteryRoundInterface(rounds[roundId - 1]);\\n        round.couldReceiveWinningNumbers();\\n        (bool fulfilled, uint256[] memory randomWords) = randomizer.getRequestStatus(publicRoundRandomNumbersRequestId[roundId]);\\n        require(fulfilled, \\\"Random numbers not ready\\\");\\n        uint16[] memory roundNumbers = new uint16[](6);\\n        uint16[] memory referralWinnersNumber = new uint16[](randomWords.length - 6);\\n        if (fulfilled) {\\n            for (uint i = 0; i < 6; i++) {\\n                roundNumbers[i] = reader.getRandomUniqueNumberInArrayForMaxValue(randomWords[i], 69, roundNumbers);\\n            }\\n            roundNumbers[5] = uint16(randomWords[5] % 26 + 1);\\n            for (uint i = 6; i < randomWords.length; i++) {\\n                referralWinnersNumber [i - 6] = reader.getRandomUniqueNumberInArrayForMaxValue(randomWords[i],\\n                    round.getRound().referralCounts, referralWinnersNumber);\\n            }\\n        }\\n        round.storeWinningNumbers(roundNumbers, referralWinnersNumber);\\n        setLotteryStatus(LotteryStatuses.ResultsEvaluated, _statusEndTime);\\n    }\\n\\n    function markWinners(uint256 roundId, uint256 _statusEndTime) public onlyOwner {\\n        LotteryRoundInterface(rounds[roundId - 1]).markWinners(reader.evaluateWonResultsForTickets(roundId), reader.evaluateWonResultsForReferral(roundId));\\n        setLotteryStatus(LotteryStatuses.ClaimInProgress, _statusEndTime);\\n    }\\n\\n    function claimVictory(uint256 ticketId) public {\\n        LotteryRoundInterface lotteryRound = LotteryRoundInterface(rounds[roundCount - 1]);\\n        Ticket memory ticket = lotteryRound.ticketById(ticketId);\\n        require(ticket.participantAddress == msg.sender, \\\"Invalid ticket owner\\\");\\n        require(!ticket.claimed, \\\"Ticket already claimed\\\");\\n        require(lotteryRound.getRound().ended, \\\"Round not ended\\\");\\n        require(lotteryStatus == LotteryStatuses.ClaimInProgress, \\\"Claim not started\\\");\\n        require(block.timestamp < statusEndTime, \\\"Claim has ended\\\");\\n        require(ticket.victoryTier != RoundVictoryTier.NO_WIN, \\\"No prize for this ticket\\\");\\n        require(ticket.victoryTier == reader.evaluateWonResultsForOneTicket(lotteryRound.getRound().id, ticketId).victoryTier, \\\"Invalid ticket tier\\\");\\n        unchecked {\\n            uint256 amountWon = lotteryRound.victoryTierAmounts(ticket.victoryTier) / lotteryRound.winnersForEachTier(ticket.victoryTier);\\n            require(paymentToken.balanceOf(address(this)) >= amountWon, \\\"Not enough funds on contract\\\");\\n            LotteryRoundInterface(rounds[roundCount - 1]).markVictoryClaimed(ticketId, amountWon);\\n            paymentToken.transfer(msg.sender, amountWon);\\n        }\\n    }\\n\\n    function claimReferralVictory(uint256 referralTicketId) public {\\n        LotteryRoundInterface lotteryRound = LotteryRoundInterface(rounds[roundCount - 1]);\\n        ReferralTicket memory referralTicket = lotteryRound.referralTicketById(referralTicketId);\\n        require(referralTicket.id == referralTicketId, \\\"Invalid ticket id\\\");\\n        require(referralTicket.referralAddress == msg.sender, \\\"Invalid ticket owner\\\");\\n        require(!referralTicket.claimed, \\\"Ticket already claimed\\\");\\n        require(lotteryRound.getRound().ended, \\\"Round not ended\\\");\\n        require(referralTicket.winner == true, \\\"No prize for this ticket\\\");\\n        require(referralTicket.winner == reader.evaluateWonResultsForOneReferralTicket(lotteryRound.getRound().id, referralTicketId).won, \\\"Invalid ticket tier\\\");\\n        unchecked {\\n            uint256 amountWon = lotteryRound.victoryTierAmounts(RoundVictoryTier.Referrer) / reader.numberOfReferralWinnersForRoundId(lotteryRound.getRound().id);\\n            require(paymentToken.balanceOf(address(this)) >= amountWon, \\\"Not enough funds on contract\\\");\\n            LotteryRoundInterface(rounds[roundCount - 1]).markReferralVictoryClaimed(referralTicketId, amountWon);\\n            paymentToken.transfer(msg.sender, amountWon);\\n        }\\n    }\\n}\",\"keccak256\":\"0x0ca83e6edb548455a9003ec846c820272fc8a3d1ec6400d356bdd16cba25d22f\",\"license\":\"UNLICENSED\"},\"contracts/LotteryReaderInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {TestFunctions} from \\\"./utils/TestUtils.sol\\\";\\nimport {CyclixRandomizerInterface} from \\\"./CyclixRandomizerInterface.sol\\\";\\nimport {EmergencyFunctions} from \\\"./utils/EmergencyFunctions.sol\\\";\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\n\\ninterface LotteryReaderInterface {\\n    function poolForVictoryTier(uint256 roundId, RoundVictoryTier victoryTier) external view returns(uint256) ;\\n    function poolForReferral(uint256 roundId) external view returns(uint256) ;\\n    function tokenHoldersPoolAmount(uint256 roundId) external view returns (uint256) ;\\n    function treasuryPoolAmount(uint256 roundId) external view returns (uint256) ;\\n    function numberOfReferralWinnersForRoundId(uint256 roundId) external view returns (uint16) ;\\n    function existInArrayNumber(uint16 num, uint16[] memory arr) external pure returns (bool) ;\\n    function notExistInArrayNumber(uint16 num, uint16[] memory arr) external pure returns (bool) ;\\n    function getRandomUniqueNumberInArrayForMaxValue(uint256 randomNumber, uint16 maxValue, uint16[] memory arr) external pure returns (uint16) ;\\n    function tierFromResults(uint16 rightNumbersForTicket, bool powerNumberFound) external pure returns (RoundVictoryTier) ;\\n    function evaluateWonResultsForOneTicket(uint256 roundId, uint256 ticketId) external view returns (TicketResults memory);\\n    function evaluateWonResultsForTickets(uint256 roundId) external view returns (TicketResults[] memory);\\n    function evaluateWonResultsForOneReferralTicket(uint256 roundId, uint256 referralTicketId) external view returns (ReferralTicketResults memory);\\n    function evaluateWonResultsForReferral(uint256 roundId) external view returns (ReferralTicketResults[] memory);\\n    function amountWonInRound(uint256 roundId) external view returns (uint256) ;\\n    function roundNumbers(uint256 roundId) external view returns(uint16[] memory);\\n    function referralWinnersNumber(uint256 roundId) external view returns(uint16[] memory);\\n}\",\"keccak256\":\"0xa8081ad5eb434225fa4cf47b8a51926edd1929b5b75f8e2475f40411ec7bafaa\",\"license\":\"UNLICENSED\"},\"contracts/LotteryRoundCreatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\ninterface LotteryRoundCreatorInterface {\\n   function startNewRound(uint256 roundDurationInSeconds, address previousRoundAddress) external returns(address);\\n}\",\"keccak256\":\"0x758edc675f9d3b6e91d052e64cf4ea0495d6639542acf1d41ddb2a4c825a392a\",\"license\":\"UNLICENSED\"},\"contracts/LotteryRoundInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\n\\ninterface LotteryRoundInterface {\\n    function getRound() external returns(Round memory);\\n    function previousRound() external returns(address);\\n    function markWinners(TicketResults[] memory ticketResults, ReferralTicketResults[] memory referralTicketResults) external;\\n    function markVictoryClaimed(uint256 ticketId, uint256 amountClaimed) external;\\n    function markReferralVictoryClaimed(uint256 referralTicketId, uint256 amountClaimed) external;\\n    function treasuryAmountOnTicket(uint256 paymentTokenAmount) external view returns (uint256);\\n    function updateVictoryPoolForTicket(uint256 paymentTokenAmount) external;\\n    function buyTicket(uint256 chainId, uint16[] memory chosenNumbers, address referral, address buyer) external;\\n    function closeRound() external;\\n    function couldReceiveWinningNumbers() external view;\\n    function storeWinningNumbers(uint16[] memory roundNumbers, uint16[] memory referralWinnersNumber) external;\\n    function ticketById(uint256 ticketId) external view returns (Ticket memory);\\n    function numbersForTicketId(uint256 ticketId) external view returns (uint16[] memory);\\n    function referralTicketById(uint256 index) external view returns (ReferralTicket memory);\\n    function victoryTierAmounts(RoundVictoryTier tier) external view returns (uint256);\\n    function winnersForEachTier(RoundVictoryTier tier) external returns(uint256);\\n    function setPoolPercentagesBasePoints(uint16[] memory _poolPercentagesBasePoints) external;\\n}\",\"keccak256\":\"0xaf0ab80798c6142a9cf867a7f998c58ab2a980ef5b81ac2451ac83da18e20457\",\"license\":\"UNLICENSED\"},\"contracts/utils/EmergencyFunctions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract EmergencyFunctions is Ownable {\\n    address internal teamAddress;\\n    constructor(address _teamAddress) Ownable(_teamAddress) {\\n        teamAddress = _teamAddress;\\n    }\\n\\n    function updateTeamAddress(address _teamAddress) public onlyOwner {\\n        teamAddress = _teamAddress;\\n    }\\n\\n    // Emergency Functions\\n    function sendTokenToTeam(address _token) public onlyOwner {\\n        uint256 amount = IERC20(_token).balanceOf(address(this));\\n        if (amount > 0) {\\n            SafeERC20.safeTransfer(IERC20(_token), teamAddress, amount);\\n        }\\n    }\\n\\n    function sendCryptoToTeam() public onlyOwner {\\n        if (address(this).balance > 0) {\\n            payable(teamAddress).transfer(address(this).balance);\\n        }\\n    }\\n\\n    /** @notice Check if an address is a contract */\\n    function _isContract(address _addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x68dcc6a4104e2905f65c342fdb2dbde1908113d10c006f5857b52dc0bbefd419\",\"license\":\"MIT\"},\"contracts/utils/TestUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.x <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IERC20Extension {\\n    function decimals() external view returns (uint8);\\n}\\n\\ncontract TestFunctions is Ownable {\\n    constructor() Ownable(msg.sender) {}\\n    //Used for mock testing, contract ownership will be renounced on release\\n    uint public currentTimestampOverride;\\n    function updateCurrentTimestampOverride(uint _v) external onlyOwner {\\n        currentTimestampOverride = _v;\\n    }\\n    function currentTimestamp() public view returns(uint) {\\n        if (currentTimestampOverride > 0) {\\n            return currentTimestampOverride;\\n        }\\n        return block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x8edb22ef91efc1d38ffbd50b48821f4fe23bdaf84a14de75d0df8231eb772bc4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061021c5760003560e01c80638c65c81f11610125578063c96acb5a116100ad578063e91484241161007c578063e9148424146105dd578063eb7165fa146105f9578063f10fb58414610615578063f2fde38b14610633578063f4dec22b1461064f5761021c565b8063c96acb5a14610555578063cedd1bc314610571578063d4fc42c6146105a1578063e03d753a146105bf5761021c565b8063a8eed12d116100f4578063a8eed12d146104db578063b086f3c0146104f7578063b33d8c5414610513578063b62fe01b1461052f578063bbd1783a1461054b5761021c565b80638c65c81f146104535780638da5cb5b1461048357806392566fdd146104a1578063998da3e9146104bf5761021c565b80633013ce29116101a8578063715018a611610177578063715018a6146103c357806375e5460d146103cd5780637a5ed721146103fd57806387da46f11461041957806388e01a98146104375761021c565b80633013ce291461034f5780633fda7d951461036d5780634615102c1461038b5780634ff776b8146103a75761021c565b806314eb76ac116101ef57806314eb76ac146102995780631ed15aa4146102b55780631fcebf68146102d15780632242942914610301578063258799f81461031f5761021c565b80630d683dd914610221578063104dc3601461023f5780631209b1f61461025d578063127f0b3f1461027b575b600080fd5b61022961066d565b6040516102369190613d20565b60405180910390f35b610247610680565b6040516102549190613d7c565b60405180910390f35b6102656106a6565b6040516102729190613db0565b60405180910390f35b6102836106ac565b6040516102909190613db0565b60405180910390f35b6102b360048036038101906102ae9190613e0b565b6106b2565b005b6102cf60048036038101906102ca9190613e70565b6106fe565b005b6102eb60048036038101906102e69190613e0b565b610944565b6040516102f89190613ecd565b60405180910390f35b610309610965565b6040516103169190613db0565b60405180910390f35b61033960048036038101906103349190613f14565b61096b565b6040516103469190613d7c565b60405180910390f35b6103576109aa565b6040516103649190613fa0565b60405180910390f35b6103756109d0565b6040516103829190613db0565b60405180910390f35b6103a560048036038101906103a09190613f14565b6109d6565b005b6103c160048036038101906103bc9190613f14565b610ce7565b005b6103cb611513565b005b6103e760048036038101906103e29190613e0b565b611527565b6040516103f49190613fca565b60405180910390f35b6104176004803603810190610412919061416a565b611547565b005b610421611632565b60405161042e919061420e565b60405180910390f35b610451600480360381019061044c9190613f14565b611658565b005b61046d60048036038101906104689190613f14565b611886565b60405161047a9190613d7c565b60405180910390f35b61048b6118c5565b6040516104989190613d7c565b60405180910390f35b6104a96118ee565b6040516104b69190613ecd565b60405180910390f35b6104d960048036038101906104d49190613e0b565b611902565b005b6104f560048036038101906104f09190613e70565b6119c3565b005b610511600480360381019061050c9190613f14565b611a26565b005b61052d60048036038101906105289190614284565b612235565b005b610549600480360381019061054491906142d1565b6122fc565b005b6105536128bf565b005b61056f600480360381019061056a91906142d1565b61293c565b005b61058b60048036038101906105869190613f14565b612b4a565b6040516105989190613db0565b60405180910390f35b6105a9612b62565b6040516105b69190614332565b60405180910390f35b6105c7612b88565b6040516105d49190613fca565b60405180910390f35b6105f760048036038101906105f2919061434d565b612b9b565b005b610613600480360381019061060e919061416a565b612f1f565b005b61061d6136f8565b60405161062a9190614454565b60405180910390f35b61064d60048036038101906106489190613e0b565b61371e565b005b6106576137a4565b6040516106649190613ecd565b60405180910390f35b600460009054906101000a900460ff1681565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600f5481565b60025481565b6106ba6137b8565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6107066137b8565b60005b600a805490508110156108d5578273ffffffffffffffffffffffffffffffffffffffff16600a82815481106107415761074061446f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036108c85781156107d35760006107ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c5906144fb565b60405180910390fd5b6108c7565b600a6001600a805490506107e7919061454a565b815481106107f8576107f761446f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a82815481106108375761083661446f565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600a8054806108915761089061457e565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590555b5b8080600101915050610709565b50801561094057600a829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5050565b60076020528060005260406000206000915054906101000a900461ffff1681565b60065481565b600a818154811061097b57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b6109de6137b8565b600260008154809291906109f1906145ad565b919050555060016002541115610bd5576003601060039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166363ea940f83600360028054610a52919061454a565b81548110610a6357610a6261446f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401610aab9291906145f5565b6020604051808303816000875af1158015610aca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aee9190614633565b9080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600380811115610b6157610b60613ca9565b5b600460009054906101000a900460ff166003811115610b8357610b82613ca9565b5b148015610b91575042600654105b610bd0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc7906146ac565b60405180910390fd5b610cd9565b6003601060039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166363ea940f8360006040518363ffffffff1660e01b8152600401610c359291906145f5565b6020604051808303816000875af1158015610c54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c789190614633565b9080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b610ce460008261383f565b50565b600060036001600254610cfa919061454a565b81548110610d0b57610d0a61446f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff16639b7be8fc846040518263ffffffff1660e01b8152600401610d739190613db0565b60c060405180830381865afa158015610d90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db491906147c5565b90503373ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1614610e28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1f9061483e565b60405180910390fd5b806060015115610e6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e64906148aa565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b81526004016000604051808303816000875af1158015610eba573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610ee39190614bb5565b60600151610f26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1d90614c4a565b60405180910390fd5b600380811115610f3957610f38613ca9565b5b600460009054906101000a900460ff166003811115610f5b57610f5a613ca9565b5b14610f9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9290614cb6565b60405180910390fd5b6006544210610fdf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd690614d22565b60405180910390fd5b6000600a811115610ff357610ff2613ca9565b5b8160a00151600a81111561100a57611009613ca9565b5b0361104a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104190614d8e565b60405180910390fd5b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632aa601708373ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b81526004016000604051808303816000875af11580156110d5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906110fe9190614bb5565b60000151856040518363ffffffff1660e01b8152600401611120929190614dae565b6040805180830381865afa15801561113c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111609190614e27565b60200151600a81111561117657611175613ca9565b5b8160a00151600a81111561118d5761118c613ca9565b5b146111cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c490614ea0565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1663efa3d5318360a001516040518263ffffffff1660e01b815260040161120c9190614f08565b6020604051808303816000875af115801561122b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124f9190614f23565b8373ffffffffffffffffffffffffffffffffffffffff1663e2e308308460a001516040518263ffffffff1660e01b815260040161128c9190614f08565b602060405180830381865afa1580156112a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112cd9190614f23565b816112db576112da614f50565b5b04905080600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161133a9190613d7c565b602060405180830381865afa158015611357573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137b9190614f23565b10156113bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b390614fcb565b60405180910390fd5b6003600160025403815481106113d5576113d461446f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382e5892385836040518363ffffffff1660e01b815260040161143a929190614dae565b600060405180830381600087803b15801561145457600080fd5b505af1158015611468573d6000803e3d6000fd5b50505050600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016114c9929190614feb565b6020604051808303816000875af11580156114e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150c9190615014565b5050505050565b61151b6137b8565b611525600061388e565b565b60086020528060005260406000206000915054906101000a900460ff1681565b60005b835181101561162b576000600667ffffffffffffffff8111156115705761156f613ffb565b5b60405190808252806020026020018201604052801561159e5781602001602082028036833780820191505090505b50905060005b6006811015611609578581846115ba9190615041565b815181106115cb576115ca61446f565b5b60200260200101518282815181106115e6576115e561446f565b5b602002602001019061ffff16908161ffff168152505080806001019150506115a4565b5061161686828686612f1f565b506006816116249190615041565b905061154a565b5050505050565b601060039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6116606137b8565b600060036001600254611673919061454a565b815481106116845761168361446f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663e278fe6f6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156116f957600080fd5b505af115801561170d573d6000803e3d6000fd5b505050506000600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f1664df66002546040518263ffffffff1660e01b81526004016117709190613db0565b602060405180830381865afa15801561178d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b19190615075565b9050600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e726f2e18260066117fe91906150a2565b6040518263ffffffff1660e01b815260040161181a9190615119565b6020604051808303816000875af1158015611839573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185d9190614f23565b6011600060025481526020019081526020016000208190555061188160018461383f565b505050565b6003818154811061189657600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600960009054906101000a900461ffff1681565b61190a6137b8565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016119459190613d7c565b602060405180830381865afa158015611962573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119869190614f23565b905060008111156119bf576119be82600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683613952565b5b5050565b6119cb6137b8565b80600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600060036001600254611a39919061454a565b81548110611a4a57611a4961446f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663dd85ae5f846040518263ffffffff1660e01b8152600401611ab29190613db0565b60a060405180830381865afa158015611acf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af391906151c0565b905082816000015114611b3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b3290615239565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1614611bad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ba49061483e565b60405180910390fd5b806080015115611bf2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611be9906148aa565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b81526004016000604051808303816000875af1158015611c3f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611c689190614bb5565b60600151611cab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ca290614c4a565b60405180910390fd5b600115158160600151151514611cf6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ced90614d8e565b60405180910390fd5b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663078a6dbf8373ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b81526004016000604051808303816000875af1158015611d81573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611daa9190614bb5565b60000151856040518363ffffffff1660e01b8152600401611dcc929190614dae565b6040805180830381865afa158015611de8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e0c91906152a9565b6020015115158160600151151514611e59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e5090614ea0565b60405180910390fd5b6000600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f1664df68473ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b81526004016000604051808303816000875af1158015611ee6573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611f0f9190614bb5565b600001516040518263ffffffff1660e01b8152600401611f2f9190613db0565b602060405180830381865afa158015611f4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f709190615075565b61ffff168373ffffffffffffffffffffffffffffffffffffffff1663e2e3083060076040518263ffffffff1660e01b8152600401611fae9190614f08565b602060405180830381865afa158015611fcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fef9190614f23565b81611ffd57611ffc614f50565b5b04905080600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161205c9190613d7c565b602060405180830381865afa158015612079573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061209d9190614f23565b10156120de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120d590614fcb565b60405180910390fd5b6003600160025403815481106120f7576120f661446f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630cee803c85836040518363ffffffff1660e01b815260040161215c929190614dae565b600060405180830381600087803b15801561217657600080fd5b505af115801561218a573d6000803e3d6000fd5b50505050600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016121eb929190614feb565b6020604051808303816000875af115801561220a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222e9190615014565b5050505050565b61223d6137b8565b60005b828290508110156122f757600760008484848181106122625761226161446f565b5b90506020020160208101906122779190613e0b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081819054906101000a900461ffff16809291906122cf906152d6565b91906101000a81548161ffff021916908361ffff160217905550508080600101915050612240565b505050565b6123046137b8565b60006003600184612315919061454a565b815481106123265761232561446f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663343f25666040518163ffffffff1660e01b815260040160006040518083038186803b15801561239957600080fd5b505afa1580156123ad573d6000803e3d6000fd5b50505050600080600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d8a4676f60116000888152602001908152602001600020546040518263ffffffff1660e01b81526004016124229190613db0565b600060405180830381865afa15801561243f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906124689190615300565b91509150816124ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124a3906153a8565b60405180910390fd5b6000600667ffffffffffffffff8111156124c9576124c8613ffb565b5b6040519080825280602002602001820160405280156124f75781602001602082028036833780820191505090505b50905060006006835161250a919061454a565b67ffffffffffffffff81111561252357612522613ffb565b5b6040519080825280602002602001820160405280156125515781602001602082028036833780820191505090505b509050831561283e5760005b600681101561265757600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c746a8a8583815181106125b7576125b661446f565b5b60200260200101516045866040518463ffffffff1660e01b81526004016125e0939291906154c1565b602060405180830381865afa1580156125fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126219190615075565b8382815181106126345761263361446f565b5b602002602001019061ffff16908161ffff1681525050808060010191505061255d565b506001601a846005815181106126705761266f61446f565b5b602002602001015161268291906154ff565b61268c9190615041565b826005815181106126a05761269f61446f565b5b602002602001019061ffff16908161ffff16815250506000600690505b835181101561283c57600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c746a8a8583815181106127175761271661446f565b5b60200260200101518873ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b81526004016000604051808303816000875af115801561276c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906127959190614bb5565b6101400151856040518463ffffffff1660e01b81526004016127b993929190615530565b602060405180830381865afa1580156127d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127fa9190615075565b82600683612808919061454a565b815181106128195761281861446f565b5b602002602001019061ffff16908161ffff168152505080806001019150506126bd565b505b8473ffffffffffffffffffffffffffffffffffffffff16632724d10483836040518363ffffffff1660e01b815260040161287992919061556e565b600060405180830381600087803b15801561289357600080fd5b505af11580156128a7573d6000803e3d6000fd5b505050506128b660028761383f565b50505050505050565b6128c76137b8565b600047111561293a57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015612938573d6000803e3d6000fd5b505b565b6129446137b8565b6003600183612953919061454a565b815481106129645761296361446f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633590bd3c600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c099ae19856040518263ffffffff1660e01b8152600401612a059190613db0565b600060405180830381865afa158015612a22573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612a4b9190615668565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d856f0d5866040518263ffffffff1660e01b8152600401612aa69190613db0565b600060405180830381865afa158015612ac3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612aec9190615774565b6040518363ffffffff1660e01b8152600401612b099291906159a6565b600060405180830381600087803b158015612b2357600080fd5b505af1158015612b37573d6000803e3d6000fd5b50505050612b4660038261383f565b5050565b60116020528060005260406000206000915090505481565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601060009054906101000a900460ff1681565b612ba36137b8565b88600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cd0f2311306040518263ffffffff1660e01b8152600401612c3f9190615a29565b600060405180830381600087803b158015612c5957600080fd5b505af1158015612c6d573d6000803e3d6000fd5b5050505087600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086601060036101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612da1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dc59190615a90565b60ff16600a612dd49190615bf0565b85612ddf9190615c3b565b600f8190555083600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082601060016101000a81548161ffff021916908361ffff16021790555060036001600254612e54919061454a565b81548110612e6557612e6461446f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639469f293836040518263ffffffff1660e01b8152600401612ec89190615c7d565b600060405180830381600087803b158015612ee257600080fd5b505af1158015612ef6573d6000803e3d6000fd5b5050505080601060006101000a81548160ff021916908315150217905550505050505050505050565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900461ffff1661ffff16118061301e5750600f54600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e83306040518363ffffffff1660e01b8152600401612fda929190615c9f565b602060405180830381865afa158015612ff7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061301b9190614f23565b10155b806130725750600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6130b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130a890615d14565b60405180910390fd5b6000600360016002546130c4919061454a565b815481106130d5576130d461446f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900461ffff1661ffff1611156131d957600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081819054906101000a900461ffff16809291906131b990615d34565b91906101000a81548161ffff021916908361ffff16021790555050613680565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166134d357600f54600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231326040518263ffffffff1660e01b81526004016132889190613d7c565b602060405180830381865afa1580156132a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132c99190614f23565b101561330a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161330190615da9565b60405180910390fd5b600a805490506009600081819054906101000a900461ffff1680929190613330906152d6565b91906101000a81548161ffff021916908361ffff16021790555061ffff1661335891906154ff565b600960006101000a81548161ffff021916908361ffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff1663af33d08f600f546040518263ffffffff1660e01b81526004016133b19190613db0565b602060405180830381865afa1580156133ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133f29190614f23565b9050613481600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600a600960009054906101000a900461ffff1661ffff16815481106134435761344261446f565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600f5461347c919061454a565b6139d1565b6134d1600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846139d1565b505b8073ffffffffffffffffffffffffffffffffffffffff1663b56c12b4600f546040518263ffffffff1660e01b815260040161350e9190613db0565b600060405180830381600087803b15801561352857600080fd5b505af115801561353c573d6000803e3d6000fd5b50505050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156135895750601060009054906101000a900460ff165b1561367f57600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081819054906101000a900461ffff16809291906135eb906152d6565b91906101000a81548161ffff021916908361ffff16021790555050600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081819054906101000a900461ffff1680929190613663906152d6565b91906101000a81548161ffff021916908361ffff160217905550505b5b8073ffffffffffffffffffffffffffffffffffffffff1663eb7165fa868686866040518563ffffffff1660e01b81526004016136bf9493929190615dc9565b600060405180830381600087803b1580156136d957600080fd5b505af11580156136ed573d6000803e3d6000fd5b505050505050505050565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6137266137b8565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036137985760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161378f9190613d7c565b60405180910390fd5b6137a18161388e565b50565b601060019054906101000a900461ffff1681565b6137c0613a53565b73ffffffffffffffffffffffffffffffffffffffff166137de6118c5565b73ffffffffffffffffffffffffffffffffffffffff161461383d57613801613a53565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016138349190613d7c565b60405180910390fd5b565b6138476137b8565b81600460006101000a81548160ff0219169083600381111561386c5761386b613ca9565b5b02179055504260058190555080426138849190615041565b6006819055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6139cc838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401613985929190614feb565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613a5b565b505050565b613a4d848573ffffffffffffffffffffffffffffffffffffffff166323b872dd868686604051602401613a0693929190615e15565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613a5b565b50505050565b600033905090565b6000613a86828473ffffffffffffffffffffffffffffffffffffffff16613af290919063ffffffff16565b90506000815114158015613aab575080806020019051810190613aa99190615014565b155b15613aed57826040517f5274afe7000000000000000000000000000000000000000000000000000000008152600401613ae49190613d7c565b60405180910390fd5b505050565b6060613b0083836000613b08565b905092915050565b606081471015613b4f57306040517fcd786059000000000000000000000000000000000000000000000000000000008152600401613b469190613d7c565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff168486604051613b789190615ebd565b60006040518083038185875af1925050503d8060008114613bb5576040519150601f19603f3d011682016040523d82523d6000602084013e613bba565b606091505b5091509150613bca868383613bd5565b925050509392505050565b606082613bea57613be582613c64565b613c5c565b60008251148015613c12575060008473ffffffffffffffffffffffffffffffffffffffff163b145b15613c5457836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401613c4b9190613d7c565b60405180910390fd5b819050613c5d565b5b9392505050565b600081511115613c775780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110613ce957613ce8613ca9565b5b50565b6000819050613cfa82613cd8565b919050565b6000613d0a82613cec565b9050919050565b613d1a81613cff565b82525050565b6000602082019050613d356000830184613d11565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613d6682613d3b565b9050919050565b613d7681613d5b565b82525050565b6000602082019050613d916000830184613d6d565b92915050565b6000819050919050565b613daa81613d97565b82525050565b6000602082019050613dc56000830184613da1565b92915050565b6000604051905090565b600080fd5b600080fd5b613de881613d5b565b8114613df357600080fd5b50565b600081359050613e0581613ddf565b92915050565b600060208284031215613e2157613e20613dd5565b5b6000613e2f84828501613df6565b91505092915050565b60008115159050919050565b613e4d81613e38565b8114613e5857600080fd5b50565b600081359050613e6a81613e44565b92915050565b60008060408385031215613e8757613e86613dd5565b5b6000613e9585828601613df6565b9250506020613ea685828601613e5b565b9150509250929050565b600061ffff82169050919050565b613ec781613eb0565b82525050565b6000602082019050613ee26000830184613ebe565b92915050565b613ef181613d97565b8114613efc57600080fd5b50565b600081359050613f0e81613ee8565b92915050565b600060208284031215613f2a57613f29613dd5565b5b6000613f3884828501613eff565b91505092915050565b6000819050919050565b6000613f66613f61613f5c84613d3b565b613f41565b613d3b565b9050919050565b6000613f7882613f4b565b9050919050565b6000613f8a82613f6d565b9050919050565b613f9a81613f7f565b82525050565b6000602082019050613fb56000830184613f91565b92915050565b613fc481613e38565b82525050565b6000602082019050613fdf6000830184613fbb565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61403382613fea565b810181811067ffffffffffffffff8211171561405257614051613ffb565b5b80604052505050565b6000614065613dcb565b9050614071828261402a565b919050565b600067ffffffffffffffff82111561409157614090613ffb565b5b602082029050602081019050919050565b600080fd5b6140b081613eb0565b81146140bb57600080fd5b50565b6000813590506140cd816140a7565b92915050565b60006140e66140e184614076565b61405b565b90508083825260208201905060208402830185811115614109576141086140a2565b5b835b81811015614132578061411e88826140be565b84526020840193505060208101905061410b565b5050509392505050565b600082601f83011261415157614150613fe5565b5b81356141618482602086016140d3565b91505092915050565b6000806000806080858703121561418457614183613dd5565b5b600061419287828801613eff565b945050602085013567ffffffffffffffff8111156141b3576141b2613dda565b5b6141bf8782880161413c565b93505060406141d087828801613df6565b92505060606141e187828801613df6565b91505092959194509250565b60006141f882613f6d565b9050919050565b614208816141ed565b82525050565b600060208201905061422360008301846141ff565b92915050565b600080fd5b60008083601f84011261424457614243613fe5565b5b8235905067ffffffffffffffff81111561426157614260614229565b5b60208301915083602082028301111561427d5761427c6140a2565b5b9250929050565b6000806020838503121561429b5761429a613dd5565b5b600083013567ffffffffffffffff8111156142b9576142b8613dda565b5b6142c58582860161422e565b92509250509250929050565b600080604083850312156142e8576142e7613dd5565b5b60006142f685828601613eff565b925050602061430785828601613eff565b9150509250929050565b600061431c82613f6d565b9050919050565b61432c81614311565b82525050565b60006020820190506143476000830184614323565b92915050565b60008060008060008060008060006101208a8c0312156143705761436f613dd5565b5b600061437e8c828d01613df6565b995050602061438f8c828d01613df6565b98505060406143a08c828d01613df6565b97505060606143b18c828d01613df6565b96505060806143c28c828d01613eff565b95505060a06143d38c828d01613df6565b94505060c06143e48c828d016140be565b93505060e08a013567ffffffffffffffff81111561440557614404613dda565b5b6144118c828d0161413c565b9250506101006144238c828d01613e5b565b9150509295985092959850929598565b600061443e82613f6d565b9050919050565b61444e81614433565b82525050565b60006020820190506144696000830184614445565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f57616c6c657420616c7265616479206164646564000000000000000000000000600082015250565b60006144e560148361449e565b91506144f0826144af565b602082019050919050565b60006020820190508181036000830152614514816144d8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061455582613d97565b915061456083613d97565b92508282039050818111156145785761457761451b565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60006145b882613d97565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036145ea576145e961451b565b5b600182019050919050565b600060408201905061460a6000830185613da1565b6146176020830184613d6d565b9392505050565b60008151905061462d81613ddf565b92915050565b60006020828403121561464957614648613dd5565b5b60006146578482850161461e565b91505092915050565b7f50726576696f757320726f756e64206e6f7420656e6465640000000000000000600082015250565b600061469660188361449e565b91506146a182614660565b602082019050919050565b600060208201905081810360008301526146c581614689565b9050919050565b600080fd5b600080fd5b6000815190506146e581613ee8565b92915050565b6000815190506146fa81613e44565b92915050565b600b811061470d57600080fd5b50565b60008151905061471f81614700565b92915050565b600060c0828403121561473b5761473a6146cc565b5b61474560c061405b565b90506000614755848285016146d6565b60008301525060206147698482850161461e565b602083015250604061477d8482850161461e565b6040830152506060614791848285016146eb565b60608301525060806147a5848285016146d6565b60808301525060a06147b984828501614710565b60a08301525092915050565b600060c082840312156147db576147da613dd5565b5b60006147e984828501614725565b91505092915050565b7f496e76616c6964207469636b6574206f776e6572000000000000000000000000600082015250565b600061482860148361449e565b9150614833826147f2565b602082019050919050565b600060208201905081810360008301526148578161481b565b9050919050565b7f5469636b657420616c726561647920636c61696d656400000000000000000000600082015250565b600061489460168361449e565b915061489f8261485e565b602082019050919050565b600060208201905081810360008301526148c381614887565b9050919050565b6000815190506148d9816140a7565b92915050565b60006148f26148ed84614076565b61405b565b90508083825260208201905060208402830185811115614915576149146140a2565b5b835b8181101561493e578061492a88826148ca565b845260208401935050602081019050614917565b5050509392505050565b600082601f83011261495d5761495c613fe5565b5b815161496d8482602086016148df565b91505092915050565b600067ffffffffffffffff82111561499157614990613ffb565b5b602082029050602081019050919050565b60006149b56149b084614976565b61405b565b905080838252602082019050602084028301858111156149d8576149d76140a2565b5b835b81811015614a0157806149ed88826146d6565b8452602084019350506020810190506149da565b5050509392505050565b600082601f830112614a2057614a1f613fe5565b5b8151614a308482602086016149a2565b91505092915050565b60006101608284031215614a5057614a4f6146cc565b5b614a5b61016061405b565b90506000614a6b848285016146d6565b6000830152506020614a7f848285016146d6565b6020830152506040614a93848285016146d6565b6040830152506060614aa7848285016146eb565b606083015250608082015167ffffffffffffffff811115614acb57614aca6146d1565b5b614ad784828501614948565b60808301525060a082015167ffffffffffffffff811115614afb57614afa6146d1565b5b614b0784828501614948565b60a08301525060c0614b1b848285016148ca565b60c08301525060e082015167ffffffffffffffff811115614b3f57614b3e6146d1565b5b614b4b84828501614a0b565b60e083015250610100614b60848285016148ca565b6101008301525061012082015167ffffffffffffffff811115614b8657614b856146d1565b5b614b9284828501614a0b565b61012083015250610140614ba8848285016148ca565b6101408301525092915050565b600060208284031215614bcb57614bca613dd5565b5b600082015167ffffffffffffffff811115614be957614be8613dda565b5b614bf584828501614a39565b91505092915050565b7f526f756e64206e6f7420656e6465640000000000000000000000000000000000600082015250565b6000614c34600f8361449e565b9150614c3f82614bfe565b602082019050919050565b60006020820190508181036000830152614c6381614c27565b9050919050565b7f436c61696d206e6f742073746172746564000000000000000000000000000000600082015250565b6000614ca060118361449e565b9150614cab82614c6a565b602082019050919050565b60006020820190508181036000830152614ccf81614c93565b9050919050565b7f436c61696d2068617320656e6465640000000000000000000000000000000000600082015250565b6000614d0c600f8361449e565b9150614d1782614cd6565b602082019050919050565b60006020820190508181036000830152614d3b81614cff565b9050919050565b7f4e6f207072697a6520666f722074686973207469636b65740000000000000000600082015250565b6000614d7860188361449e565b9150614d8382614d42565b602082019050919050565b60006020820190508181036000830152614da781614d6b565b9050919050565b6000604082019050614dc36000830185613da1565b614dd06020830184613da1565b9392505050565b600060408284031215614ded57614dec6146cc565b5b614df7604061405b565b90506000614e07848285016146d6565b6000830152506020614e1b84828501614710565b60208301525092915050565b600060408284031215614e3d57614e3c613dd5565b5b6000614e4b84828501614dd7565b91505092915050565b7f496e76616c6964207469636b6574207469657200000000000000000000000000600082015250565b6000614e8a60138361449e565b9150614e9582614e54565b602082019050919050565b60006020820190508181036000830152614eb981614e7d565b9050919050565b600b8110614ed157614ed0613ca9565b5b50565b6000819050614ee282614ec0565b919050565b6000614ef282614ed4565b9050919050565b614f0281614ee7565b82525050565b6000602082019050614f1d6000830184614ef9565b92915050565b600060208284031215614f3957614f38613dd5565b5b6000614f47848285016146d6565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e6f7420656e6f7567682066756e6473206f6e20636f6e747261637400000000600082015250565b6000614fb5601c8361449e565b9150614fc082614f7f565b602082019050919050565b60006020820190508181036000830152614fe481614fa8565b9050919050565b60006040820190506150006000830185613d6d565b61500d6020830184613da1565b9392505050565b60006020828403121561502a57615029613dd5565b5b6000615038848285016146eb565b91505092915050565b600061504c82613d97565b915061505783613d97565b925082820190508082111561506f5761506e61451b565b5b92915050565b60006020828403121561508b5761508a613dd5565b5b6000615099848285016148ca565b91505092915050565b60006150ad82613eb0565b91506150b883613eb0565b9250828201905061ffff8111156150d2576150d161451b565b5b92915050565b600063ffffffff82169050919050565b60006151036150fe6150f984613eb0565b613f41565b6150d8565b9050919050565b615113816150e8565b82525050565b600060208201905061512e600083018461510a565b92915050565b600060a0828403121561514a576151496146cc565b5b61515460a061405b565b90506000615164848285016146d6565b60008301525060206151788482850161461e565b602083015250604061518c848285016148ca565b60408301525060606151a0848285016146eb565b60608301525060806151b4848285016146eb565b60808301525092915050565b600060a082840312156151d6576151d5613dd5565b5b60006151e484828501615134565b91505092915050565b7f496e76616c6964207469636b6574206964000000000000000000000000000000600082015250565b600061522360118361449e565b915061522e826151ed565b602082019050919050565b6000602082019050818103600083015261525281615216565b9050919050565b60006040828403121561526f5761526e6146cc565b5b615279604061405b565b90506000615289848285016146d6565b600083015250602061529d848285016146eb565b60208301525092915050565b6000604082840312156152bf576152be613dd5565b5b60006152cd84828501615259565b91505092915050565b60006152e182613eb0565b915061ffff82036152f5576152f461451b565b5b600182019050919050565b6000806040838503121561531757615316613dd5565b5b6000615325858286016146eb565b925050602083015167ffffffffffffffff81111561534657615345613dda565b5b61535285828601614a0b565b9150509250929050565b7f52616e646f6d206e756d62657273206e6f742072656164790000000000000000600082015250565b600061539260188361449e565b915061539d8261535c565b602082019050919050565b600060208201905081810360008301526153c181615385565b9050919050565b6000819050919050565b60006153ed6153e86153e3846153c8565b613f41565b613eb0565b9050919050565b6153fd816153d2565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61543881613eb0565b82525050565b600061544a838361542f565b60208301905092915050565b6000602082019050919050565b600061546e82615403565b615478818561540e565b93506154838361541f565b8060005b838110156154b457815161549b888261543e565b97506154a683615456565b925050600181019050615487565b5085935050505092915050565b60006060820190506154d66000830186613da1565b6154e360208301856153f4565b81810360408301526154f58184615463565b9050949350505050565b600061550a82613d97565b915061551583613d97565b92508261552557615524614f50565b5b828206905092915050565b60006060820190506155456000830186613da1565b6155526020830185613ebe565b81810360408301526155648184615463565b9050949350505050565b600060408201905081810360008301526155888185615463565b9050818103602083015261559c8184615463565b90509392505050565b600067ffffffffffffffff8211156155c0576155bf613ffb565b5b602082029050602081019050919050565b60006155e46155df846155a5565b61405b565b90508083825260208201905060408402830185811115615607576156066140a2565b5b835b81811015615630578061561c8882614dd7565b845260208401935050604081019050615609565b5050509392505050565b600082601f83011261564f5761564e613fe5565b5b815161565f8482602086016155d1565b91505092915050565b60006020828403121561567e5761567d613dd5565b5b600082015167ffffffffffffffff81111561569c5761569b613dda565b5b6156a88482850161563a565b91505092915050565b600067ffffffffffffffff8211156156cc576156cb613ffb565b5b602082029050602081019050919050565b60006156f06156eb846156b1565b61405b565b90508083825260208201905060408402830185811115615713576157126140a2565b5b835b8181101561573c57806157288882615259565b845260208401935050604081019050615715565b5050509392505050565b600082601f83011261575b5761575a613fe5565b5b815161576b8482602086016156dd565b91505092915050565b60006020828403121561578a57615789613dd5565b5b600082015167ffffffffffffffff8111156157a8576157a7613dda565b5b6157b484828501615746565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6157f281613d97565b82525050565b61580181614ee7565b82525050565b60408201600082015161581d60008501826157e9565b50602082015161583060208501826157f8565b50505050565b60006158428383615807565b60408301905092915050565b6000602082019050919050565b6000615866826157bd565b61587081856157c8565b935061587b836157d9565b8060005b838110156158ac5781516158938882615836565b975061589e8361584e565b92505060018101905061587f565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6158ee81613e38565b82525050565b60408201600082015161590a60008501826157e9565b50602082015161591d60208501826158e5565b50505050565b600061592f83836158f4565b60408301905092915050565b6000602082019050919050565b6000615953826158b9565b61595d81856158c4565b9350615968836158d5565b8060005b838110156159995781516159808882615923565b975061598b8361593b565b92505060018101905061596c565b5085935050505092915050565b600060408201905081810360008301526159c0818561585b565b905081810360208301526159d48184615948565b90509392505050565b7f4c6f74746572794d617374657256302e31000000000000000000000000000000600082015250565b6000615a1360118361449e565b9150615a1e826159dd565b602082019050919050565b6000604082019050615a3e6000830184613d6d565b8181036020830152615a4f81615a06565b905092915050565b600060ff82169050919050565b615a6d81615a57565b8114615a7857600080fd5b50565b600081519050615a8a81615a64565b92915050565b600060208284031215615aa657615aa5613dd5565b5b6000615ab484828501615a7b565b91505092915050565b60008160011c9050919050565b6000808291508390505b6001851115615b1457808604811115615af057615aef61451b565b5b6001851615615aff5780820291505b8081029050615b0d85615abd565b9450615ad4565b94509492505050565b600082615b2d5760019050615be9565b81615b3b5760009050615be9565b8160018114615b515760028114615b5b57615b8a565b6001915050615be9565b60ff841115615b6d57615b6c61451b565b5b8360020a915084821115615b8457615b8361451b565b5b50615be9565b5060208310610133831016604e8410600b8410161715615bbf5782820a905083811115615bba57615bb961451b565b5b615be9565b615bcc8484846001615aca565b92509050818404811115615be357615be261451b565b5b81810290505b9392505050565b6000615bfb82613d97565b9150615c0683613d97565b9250615c337fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484615b1d565b905092915050565b6000615c4682613d97565b9150615c5183613d97565b9250828202615c5f81613d97565b91508282048414831517615c7657615c7561451b565b5b5092915050565b60006020820190508181036000830152615c978184615463565b905092915050565b6000604082019050615cb46000830185613d6d565b615cc16020830184613d6d565b9392505050565b7f4d697373696e6720416c6c6f77616e6365000000000000000000000000000000600082015250565b6000615cfe60118361449e565b9150615d0982615cc8565b602082019050919050565b60006020820190508181036000830152615d2d81615cf1565b9050919050565b6000615d3f82613eb0565b915060008203615d5257615d5161451b565b5b600182039050919050565b7f496e73756666696369656e742066756e64730000000000000000000000000000600082015250565b6000615d9360128361449e565b9150615d9e82615d5d565b602082019050919050565b60006020820190508181036000830152615dc281615d86565b9050919050565b6000608082019050615dde6000830187613da1565b8181036020830152615df08186615463565b9050615dff6040830185613d6d565b615e0c6060830184613d6d565b95945050505050565b6000606082019050615e2a6000830186613d6d565b615e376020830185613d6d565b615e446040830184613da1565b949350505050565b600081519050919050565b600081905092915050565b60005b83811015615e80578082015181840152602081019050615e65565b60008484015250505050565b6000615e9782615e4c565b615ea18185615e57565b9350615eb1818560208601615e62565b80840191505092915050565b6000615ec98284615e8c565b91508190509291505056fea26469706673582212200d3582a4e06a18a59ec928db9267b10ae1ad6ecd1bf1806ffe5348adc66f742964736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4474,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "teamAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1010,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "roundCount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1013,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "rounds",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1016,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "lotteryStatus",
        "offset": 0,
        "slot": "4",
        "type": "t_enum(LotteryStatuses)1006"
      },
      {
        "astId": 1018,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "statusStartTime",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1020,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "statusEndTime",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1024,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "freeRounds",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint16)"
      },
      {
        "astId": 1028,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "crossChainOperator",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1046,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "counterForBankWallets",
        "offset": 0,
        "slot": "9",
        "type": "t_uint16"
      },
      {
        "astId": 1049,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "bankWallets",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1115,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "treasuryWallets",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 1118,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "paymentToken",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IERC20Metadata)251"
      },
      {
        "astId": 1121,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "randomizer",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(CyclixRandomizerInterface)901"
      },
      {
        "astId": 1124,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "reader",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(LotteryReaderInterface)3265"
      },
      {
        "astId": 1126,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "ticketPrice",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 1129,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "freeRoundsAreEnabled",
        "offset": 0,
        "slot": "16",
        "type": "t_bool"
      },
      {
        "astId": 1132,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "percentageOfReferralWinners",
        "offset": 1,
        "slot": "16",
        "type": "t_uint16"
      },
      {
        "astId": 1135,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "lotteryRoundCreator",
        "offset": 3,
        "slot": "16",
        "type": "t_contract(LotteryRoundCreatorInterface)4334"
      },
      {
        "astId": 1660,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "publicRoundRandomNumbersRequestId",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(CyclixRandomizerInterface)901": {
        "encoding": "inplace",
        "label": "contract CyclixRandomizerInterface",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Metadata)251": {
        "encoding": "inplace",
        "label": "contract IERC20Metadata",
        "numberOfBytes": "20"
      },
      "t_contract(LotteryReaderInterface)3265": {
        "encoding": "inplace",
        "label": "contract LotteryReaderInterface",
        "numberOfBytes": "20"
      },
      "t_contract(LotteryRoundCreatorInterface)4334": {
        "encoding": "inplace",
        "label": "contract LotteryRoundCreatorInterface",
        "numberOfBytes": "20"
      },
      "t_enum(LotteryStatuses)1006": {
        "encoding": "inplace",
        "label": "enum LotteryStatuses",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint16)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}