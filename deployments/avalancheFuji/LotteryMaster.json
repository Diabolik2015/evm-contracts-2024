{
  "address": "0xE3b39F8ca257FF576603718a99AD9f0FB0912F7e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cyclixRandomizer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lotteryReader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lotteryRoundCreator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_paymentToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_ticketPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_freeRoundsAreEnabled",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "participant",
          "type": "address[]"
        }
      ],
      "name": "addFreeRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bankWallets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint16[]",
          "name": "chosenNumbers",
          "type": "uint16[]"
        },
        {
          "internalType": "address",
          "name": "referral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        }
      ],
      "name": "buyTicket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint16[]",
          "name": "moreTicketNumbers",
          "type": "uint16[]"
        },
        {
          "internalType": "address",
          "name": "referral",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        }
      ],
      "name": "buyTickets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "referralTicketId",
          "type": "uint256"
        }
      ],
      "name": "claimReferralVictory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketId",
          "type": "uint256"
        }
      ],
      "name": "claimVictory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_statusEndTime",
          "type": "uint256"
        }
      ],
      "name": "closeRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "counterForBankWallets",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "crossChainOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_statusEndTime",
          "type": "uint256"
        }
      ],
      "name": "fetchRoundNumbers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "freeRounds",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "freeRoundsAreEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lotteryRoundCreator",
      "outputs": [
        {
          "internalType": "contract LotteryRoundCreatorInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lotteryStatus",
      "outputs": [
        {
          "internalType": "enum LotteryStatuses",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_statusEndTime",
          "type": "uint256"
        }
      ],
      "name": "markWinners",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentToken",
      "outputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "percentageOfReferralWinners",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "publicRoundRandomNumbersRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randomizer",
      "outputs": [
        {
          "internalType": "contract CyclixRandomizerInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reader",
      "outputs": [
        {
          "internalType": "contract LotteryReaderInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roundCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rounds",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendCryptoToTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "sendTokenToTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "add",
          "type": "bool"
        }
      ],
      "name": "setBankWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setCrossChainOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_statusEndTime",
          "type": "uint256"
        }
      ],
      "name": "startNewRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "statusEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "statusStartTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ticketPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryWallets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cyclixRandomizer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "lotteryReader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lotteryRoundCreator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_paymentToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_ticketPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_treasuryWallet",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_percentageOfReferralWinners",
          "type": "uint16"
        },
        {
          "internalType": "uint16[]",
          "name": "_poolPercentagesBasePoints",
          "type": "uint16[]"
        },
        {
          "internalType": "bool",
          "name": "_freeRoundsAreEnabled",
          "type": "bool"
        }
      ],
      "name": "updateSetup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_teamAddress",
          "type": "address"
        }
      ],
      "name": "updateTeamAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x476fb0ed1dfe84bb6fb27f437cdb125c5f5e6f898a8f517b7f768845b796bb07",
  "receipt": {
    "to": null,
    "from": "0x4eCa23Ffd5710970E22558C484a0D6943dA5eAa5",
    "contractAddress": "0xE3b39F8ca257FF576603718a99AD9f0FB0912F7e",
    "transactionIndex": 3,
    "gasUsed": "5657333",
    "logsBloom": "0x
    "blockHash": "0x1b343c8908bc84d561e6c5ae0ef2a784d0d1acf81a6bdb45eaf60f0c02c75f25",
    "transactionHash": "0x476fb0ed1dfe84bb6fb27f437cdb125c5f5e6f898a8f517b7f768845b796bb07",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 32719298,
        "transactionHash": "0x476fb0ed1dfe84bb6fb27f437cdb125c5f5e6f898a8f517b7f768845b796bb07",
        "address": "0xE3b39F8ca257FF576603718a99AD9f0FB0912F7e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004eca23ffd5710970e22558c484a0d6943da5eaa5"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x1b343c8908bc84d561e6c5ae0ef2a784d0d1acf81a6bdb45eaf60f0c02c75f25"
      }
    ],
    "blockNumber": 32719298,
    "cumulativeGasUsed": "5962742",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xdFa4aab9d99912E042d2b6c70F5544f3502695aE",
    "0x93da0745f5712abC165Ba7Cea466d718aFAadF8B",
    "0x1148Bcf4C1053b873605a124f5Ada1d5000576Cc",
    "0x9bc9157Ae3BB95F3A284beE27ea54995F0e28daC",
    10,
    true
  ],
  "numDeployments": 5,
  "solcInputHash": "a90ed1be3dee0aecf914d342725083db",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cyclixRandomizer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lotteryReader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lotteryRoundCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_freeRoundsAreEnabled\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"participant\",\"type\":\"address[]\"}],\"name\":\"addFreeRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bankWallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint16[]\",\"name\":\"chosenNumbers\",\"type\":\"uint16[]\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"buyTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint16[]\",\"name\":\"moreTicketNumbers\",\"type\":\"uint16[]\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"buyTickets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"referralTicketId\",\"type\":\"uint256\"}],\"name\":\"claimReferralVictory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"}],\"name\":\"claimVictory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_statusEndTime\",\"type\":\"uint256\"}],\"name\":\"closeRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"counterForBankWallets\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"crossChainOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_statusEndTime\",\"type\":\"uint256\"}],\"name\":\"fetchRoundNumbers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"freeRounds\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeRoundsAreEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryRoundCreator\",\"outputs\":[{\"internalType\":\"contract LotteryRoundCreatorInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryStatus\",\"outputs\":[{\"internalType\":\"enum LotteryStatuses\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_statusEndTime\",\"type\":\"uint256\"}],\"name\":\"markWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentToken\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"percentageOfReferralWinners\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"publicRoundRandomNumbersRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomizer\",\"outputs\":[{\"internalType\":\"contract CyclixRandomizerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reader\",\"outputs\":[{\"internalType\":\"contract LotteryReaderInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roundCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendCryptoToTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sendTokenToTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"add\",\"type\":\"bool\"}],\"name\":\"setBankWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setCrossChainOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_statusEndTime\",\"type\":\"uint256\"}],\"name\":\"startNewRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"statusEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"statusStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryWallets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cyclixRandomizer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lotteryReader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lotteryRoundCreator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ticketPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_treasuryWallet\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_percentageOfReferralWinners\",\"type\":\"uint16\"},{\"internalType\":\"uint16[]\",\"name\":\"_poolPercentagesBasePoints\",\"type\":\"uint16[]\"},{\"internalType\":\"bool\",\"name\":\"_freeRoundsAreEnabled\",\"type\":\"bool\"}],\"name\":\"updateSetup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teamAddress\",\"type\":\"address\"}],\"name\":\"updateTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LotteryMaster.sol\":\"LotteryMaster\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/CyclixRandomizerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface CyclixRandomizerInterface {\\n    function requestRandomWords(uint32 numWords) external returns (uint256 requestId);\\n    function getRequestStatus(uint256 _requestId) external view returns (bool fulfilled, uint256[] memory randomWords);\\n    function registerGameContract(address gameAddress, string calldata name) external;\\n    function getLastRequestIdForCaller(address _gameAddress) external view returns (uint256);\\n    function recoverLostNumberRequest(uint256 _requestId) external returns (uint256);\\n}\",\"keccak256\":\"0xc71c2b020044355f41cc53069e9a6f9f2778311e8d601a29bcc608301a0dfe24\",\"license\":\"MIT\"},\"contracts/LotteryCommon.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\n    enum RoundVictoryTier {\\n        NO_WIN,\\n        Tier5_1,\\n        Tier5,\\n        Tier4_1,\\n        Tier4,\\n        Tier3_1,\\n        Tier3,\\n        Referrer,\\n        PublicPool,\\n        TokenHolders,\\n        Treasury\\n    }\\n\\n    struct Round {\\n        uint256 id;\\n        uint256 startTime;\\n        uint256 endTime;\\n        bool ended;\\n        uint16[] roundNumbers;\\n        uint16[] referralWinnersNumber;\\n        uint16 referralWinnersNumberCount;\\n        uint256[] ticketIds;\\n        uint16 ticketsCount;\\n        uint256[] referralTicketIds;\\n        uint16 referralCounts;\\n    }\\n\\n    struct Ticket {\\n        uint256 id;\\n        address participantAddress;\\n        address referralAddress;\\n        bool claimed;\\n        uint256 chainId;\\n        RoundVictoryTier victoryTier;\\n    }\\n\\n    struct TicketResults {\\n        uint256 ticketId;\\n        address participantAddress;\\n        RoundVictoryTier victoryTier;\\n    }\\n\\n    struct ReferralTicket {\\n        uint256 id;\\n        address referralAddress;\\n        uint16 referralTicketNumber;\\n        bool winner;\\n        bool claimed;\\n    }\\n\\n    struct ReferralTicketResults {\\n        uint256 referralTicketId;\\n        address referralAddress;\\n        bool won;\\n    }\",\"keccak256\":\"0x678d80db11135f1af83c4fe484e4f1c48a8c9be8695152f8023b1ed2b5117788\",\"license\":\"UNLICENSED\"},\"contracts/LotteryMaster.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {CyclixRandomizerInterface} from \\\"./CyclixRandomizerInterface.sol\\\";\\nimport {EmergencyFunctions} from \\\"./utils/EmergencyFunctions.sol\\\";\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\nimport { LotteryRoundInterface } from \\\"./LotteryRoundInterface.sol\\\";\\nimport { LotteryReaderInterface } from \\\"./LotteryReaderInterface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./LotteryRoundCreatorInterface.sol\\\";\\n    enum LotteryStatuses {\\n        DrawOpen,\\n        EvaluatingResults,\\n        ResultsEvaluated,\\n        ClaimInProgress\\n    }\\n\\ncontract LotteryMaster is EmergencyFunctions {\\n\\n    uint256 public roundCount;\\n    address[] public rounds;\\n    LotteryStatuses public lotteryStatus;\\n    uint256 public statusStartTime;\\n    uint256 public statusEndTime;\\n\\n    mapping(address => uint16) public freeRounds;\\n    mapping(address => bool) public crossChainOperator;\\n    function setCrossChainOperator(address operator, bool value) public onlyOwner {\\n        crossChainOperator[operator] = value;\\n    }\\n\\n    uint16 public counterForBankWallets;\\n    address[] public bankWallets;\\n    function setBankWallet(address wallet, bool add) public onlyOwner {\\n        for (uint i = 0; i < bankWallets.length; i++) {\\n            if (bankWallets[i] == wallet) {\\n                if (add) {\\n                    require(false, \\\"Wallet already added\\\");\\n                } else {\\n                    bankWallets[i] = bankWallets[bankWallets.length - 1];\\n                    bankWallets.pop();\\n                }\\n            }\\n        }\\n        if (add) {\\n            bankWallets.push(wallet);\\n        }\\n    }\\n\\n    address public treasuryWallets;\\n    IERC20Metadata public paymentToken;\\n    CyclixRandomizerInterface public randomizer;\\n    LotteryReaderInterface public reader;\\n    uint256 public ticketPrice;\\n    bool public freeRoundsAreEnabled = false;\\n    uint16 public percentageOfReferralWinners = 10;\\n    LotteryRoundCreatorInterface public lotteryRoundCreator;\\n\\n    constructor(address cyclixRandomizer, address lotteryReader, address _lotteryRoundCreator, address _paymentToken, uint256 _ticketPrice, bool _freeRoundsAreEnabled)\\n    EmergencyFunctions(msg.sender) {\\n        randomizer = CyclixRandomizerInterface(cyclixRandomizer);\\n        randomizer.registerGameContract(address(this), \\\"LotteryMasterV0.1\\\");\\n        reader = LotteryReaderInterface(lotteryReader);\\n        lotteryRoundCreator = LotteryRoundCreatorInterface(_lotteryRoundCreator);\\n        paymentToken = IERC20Metadata(_paymentToken);\\n        ticketPrice = _ticketPrice * (10 ** uint256(paymentToken.decimals()));\\n        freeRoundsAreEnabled = _freeRoundsAreEnabled;\\n        treasuryWallets = msg.sender;\\n        bankWallets.push(msg.sender);\\n    }\\n\\n    function updateSetup(address cyclixRandomizer, address lotteryReader, address _lotteryRoundCreator, address _paymentToken, uint256 _ticketPrice,\\n        address _treasuryWallet, uint16 _percentageOfReferralWinners, uint16[] memory _poolPercentagesBasePoints, bool _freeRoundsAreEnabled) public onlyOwner {\\n        randomizer = CyclixRandomizerInterface(cyclixRandomizer);\\n        randomizer.registerGameContract(address(this), \\\"LotteryMasterV0.1\\\");\\n        reader = LotteryReaderInterface(lotteryReader);\\n        lotteryRoundCreator = LotteryRoundCreatorInterface(_lotteryRoundCreator);\\n        paymentToken = IERC20Metadata(_paymentToken);\\n        ticketPrice = _ticketPrice * (10 ** uint256(paymentToken.decimals()));\\n        treasuryWallets = _treasuryWallet;\\n        percentageOfReferralWinners = _percentageOfReferralWinners;\\n        LotteryRoundInterface(rounds[roundCount - 1]).setPoolPercentagesBasePoints(_poolPercentagesBasePoints);\\n        freeRoundsAreEnabled = _freeRoundsAreEnabled;\\n    }\\n\\n    function startNewRound(uint256 _statusEndTime) public onlyOwner {\\n        roundCount++;\\n        if (roundCount > 1) {\\n            rounds.push(lotteryRoundCreator.startNewRound(_statusEndTime, rounds[roundCount - 2]));\\n            require(lotteryStatus == LotteryStatuses.ClaimInProgress && statusEndTime < block.timestamp, \\\"Previous round not ended\\\");\\n        } else {\\n            rounds.push(lotteryRoundCreator.startNewRound(_statusEndTime, address(0)));\\n        }\\n        setLotteryStatus(LotteryStatuses.DrawOpen, _statusEndTime);\\n    }\\n\\n    function setLotteryStatus(LotteryStatuses _lotteryStatus, uint256 _statusEndTime) internal onlyOwner {\\n        lotteryStatus = _lotteryStatus;\\n        statusStartTime = block.timestamp;\\n        statusEndTime = block.timestamp + _statusEndTime;\\n    }\\n\\n    function buyTickets(uint256 chainId, uint16[] memory moreTicketNumbers, address referral, address buyer) public {\\n        for (uint i = 0; i < moreTicketNumbers.length; i += 6) {\\n            uint16[] memory chosenNumbers = new uint16[](6);\\n            for (uint j = 0; j < 6; j++) {\\n                chosenNumbers[j] = moreTicketNumbers[i + j];\\n            }\\n            buyTicket(chainId, chosenNumbers, referral, buyer);\\n        }\\n    }\\n\\n    function buyTicket(uint256 chainId, uint16[] memory chosenNumbers, address referral, address buyer) public {\\n        require(freeRounds[buyer] > 0\\n        || paymentToken.allowance(buyer, address(this)) >= ticketPrice\\n        || crossChainOperator[msg.sender], \\\"Missing Allowance\\\");\\n        LotteryRoundInterface lotteryRound = LotteryRoundInterface(rounds[roundCount - 1]);\\n        if (freeRounds[buyer] > 0) {\\n            freeRounds[buyer]--;\\n        } else {\\n            if (!crossChainOperator[msg.sender]) {\\n                require(paymentToken.balanceOf(tx.origin) >= ticketPrice, \\\"Insufficient funds\\\");\\n                counterForBankWallets = uint16(counterForBankWallets++ % bankWallets.length);\\n                uint256 treasuryAmount = lotteryRound.treasuryAmountOnTicket(ticketPrice);\\n                SafeERC20.safeTransferFrom(paymentToken, buyer, bankWallets[counterForBankWallets], ticketPrice - treasuryAmount);\\n                SafeERC20.safeTransferFrom(paymentToken, buyer, treasuryWallets, treasuryAmount);\\n            }\\n            lotteryRound.updateVictoryPoolForTicket(ticketPrice);\\n\\n            if (referral != address(0) && freeRoundsAreEnabled) {\\n                freeRounds[buyer]++;\\n                freeRounds[referral]++;\\n            }\\n        }\\n\\n        lotteryRound.buyTicket(chainId, chosenNumbers, referral, buyer);\\n    }\\n\\n    function addFreeRound(address[] calldata participant) public onlyOwner {\\n        for (uint i = 0; i < participant.length; i++) {\\n            freeRounds[participant[i]]++;\\n        }\\n    }\\n\\n    mapping(uint256 => uint256) public publicRoundRandomNumbersRequestId;\\n\\n    function closeRound(uint256 _statusEndTime) external onlyOwner {\\n        LotteryRoundInterface lotteryRound = LotteryRoundInterface(rounds[roundCount - 1]);\\n        lotteryRound.closeRound();\\n        uint16 referralWinners = reader.numberOfReferralWinnersForRoundId(roundCount);\\n        publicRoundRandomNumbersRequestId[roundCount] = randomizer.requestRandomWords(6 + referralWinners);\\n        setLotteryStatus(LotteryStatuses.EvaluatingResults, _statusEndTime);\\n    }\\n\\n    function fetchRoundNumbers(uint256 roundId, uint256 _statusEndTime) external onlyOwner {\\n        LotteryRoundInterface round = LotteryRoundInterface(rounds[roundId - 1]);\\n        round.couldReceiveWinningNumbers();\\n        (bool fulfilled, uint256[] memory randomWords) = randomizer.getRequestStatus(publicRoundRandomNumbersRequestId[roundId]);\\n        require(fulfilled, \\\"Random numbers not ready\\\");\\n        uint16[] memory roundNumbers = new uint16[](6);\\n        uint16[] memory referralWinnersNumber = new uint16[](randomWords.length - 6);\\n        if (fulfilled) {\\n            for (uint i = 0; i < 6; i++) {\\n                roundNumbers[i] = reader.getRandomUniqueNumberInArrayForMaxValue(randomWords[i], 69, roundNumbers);\\n            }\\n            roundNumbers[5] = uint16(randomWords[5] % 26 + 1);\\n            for (uint i = 6; i < randomWords.length; i++) {\\n                referralWinnersNumber [i - 6] = reader.getRandomUniqueNumberInArrayForMaxValue(randomWords[i],\\n                    round.getRound().referralCounts, referralWinnersNumber);\\n            }\\n        }\\n        round.storeWinningNumbers(roundNumbers, referralWinnersNumber);\\n        setLotteryStatus(LotteryStatuses.ResultsEvaluated, _statusEndTime);\\n    }\\n\\n    function markWinners(uint256 roundId, uint256 _statusEndTime) public onlyOwner {\\n        LotteryRoundInterface(rounds[roundId - 1]).markWinners(reader.evaluateWonResultsForTickets(roundId), reader.evaluateWonResultsForReferral(roundId));\\n        setLotteryStatus(LotteryStatuses.ClaimInProgress, _statusEndTime);\\n    }\\n\\n    function claimVictory(uint256 ticketId) public {\\n        LotteryRoundInterface lotteryRound = LotteryRoundInterface(rounds[roundCount - 1]);\\n        Ticket memory ticket = lotteryRound.ticketById(ticketId);\\n        require(ticket.participantAddress == msg.sender, \\\"Invalid ticket owner\\\");\\n        require(!ticket.claimed, \\\"Ticket already claimed\\\");\\n        require(lotteryRound.getRound().ended, \\\"Round not ended\\\");\\n        require(lotteryStatus == LotteryStatuses.ClaimInProgress, \\\"Claim not started\\\");\\n        require(block.timestamp < statusEndTime, \\\"Claim has ended\\\");\\n        require(ticket.victoryTier != RoundVictoryTier.NO_WIN, \\\"No prize for this ticket\\\");\\n        require(ticket.victoryTier == reader.evaluateWonResultsForOneTicket(lotteryRound.getRound().id, ticketId).victoryTier, \\\"Invalid ticket tier\\\");\\n        unchecked {\\n            uint256 amountWon = lotteryRound.victoryTierAmounts(ticket.victoryTier) / lotteryRound.winnersForEachTier(ticket.victoryTier);\\n            require(paymentToken.balanceOf(address(this)) >= amountWon, \\\"Not enough funds on contract\\\");\\n            LotteryRoundInterface(rounds[roundCount - 1]).markVictoryClaimed(ticketId, amountWon);\\n            paymentToken.transfer(msg.sender, amountWon);\\n        }\\n    }\\n\\n    function claimReferralVictory(uint256 referralTicketId) public {\\n        LotteryRoundInterface lotteryRound = LotteryRoundInterface(rounds[roundCount - 1]);\\n        ReferralTicket memory referralTicket = lotteryRound.referralTicketById(referralTicketId);\\n        require(referralTicket.id == referralTicketId, \\\"Invalid ticket id\\\");\\n        require(referralTicket.referralAddress == msg.sender, \\\"Invalid ticket owner\\\");\\n        require(!referralTicket.claimed, \\\"Ticket already claimed\\\");\\n        require(lotteryRound.getRound().ended, \\\"Round not ended\\\");\\n        require(referralTicket.winner == true, \\\"No prize for this ticket\\\");\\n        require(referralTicket.winner == reader.evaluateWonResultsForOneReferralTicket(lotteryRound.getRound().id, referralTicketId).won, \\\"Invalid ticket tier\\\");\\n        unchecked {\\n            uint256 amountWon = lotteryRound.victoryTierAmounts(RoundVictoryTier.Referrer) / reader.numberOfReferralWinnersForRoundId(lotteryRound.getRound().id);\\n            require(paymentToken.balanceOf(address(this)) >= amountWon, \\\"Not enough funds on contract\\\");\\n            LotteryRoundInterface(rounds[roundCount - 1]).markReferralVictoryClaimed(referralTicketId, amountWon);\\n            paymentToken.transfer(msg.sender, amountWon);\\n        }\\n    }\\n}\",\"keccak256\":\"0x0ca83e6edb548455a9003ec846c820272fc8a3d1ec6400d356bdd16cba25d22f\",\"license\":\"UNLICENSED\"},\"contracts/LotteryReaderInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {TestFunctions} from \\\"./utils/TestUtils.sol\\\";\\nimport {CyclixRandomizerInterface} from \\\"./CyclixRandomizerInterface.sol\\\";\\nimport {EmergencyFunctions} from \\\"./utils/EmergencyFunctions.sol\\\";\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\n\\ninterface LotteryReaderInterface {\\n    function poolForVictoryTier(uint256 roundId, RoundVictoryTier victoryTier) external view returns(uint256) ;\\n    function poolForReferral(uint256 roundId) external view returns(uint256) ;\\n    function tokenHoldersPoolAmount(uint256 roundId) external view returns (uint256) ;\\n    function treasuryPoolAmount(uint256 roundId) external view returns (uint256) ;\\n    function numberOfReferralWinnersForRoundId(uint256 roundId) external view returns (uint16) ;\\n    function existInArrayNumber(uint16 num, uint16[] memory arr) external pure returns (bool) ;\\n    function notExistInArrayNumber(uint16 num, uint16[] memory arr) external pure returns (bool) ;\\n    function getRandomUniqueNumberInArrayForMaxValue(uint256 randomNumber, uint16 maxValue, uint16[] memory arr) external pure returns (uint16) ;\\n    function tierFromResults(uint16 rightNumbersForTicket, bool powerNumberFound) external pure returns (RoundVictoryTier) ;\\n    function evaluateWonResultsForOneTicket(uint256 roundId, uint256 ticketId) external view returns (TicketResults memory);\\n    function evaluateWonResultsForTickets(uint256 roundId) external view returns (TicketResults[] memory);\\n    function evaluateWonResultsForOneReferralTicket(uint256 roundId, uint256 referralTicketId) external view returns (ReferralTicketResults memory);\\n    function evaluateWonResultsForReferral(uint256 roundId) external view returns (ReferralTicketResults[] memory);\\n    function amountWonInRound(uint256 roundId) external view returns (uint256) ;\\n    function roundNumbers(uint256 roundId) external view returns(uint16[] memory);\\n    function referralWinnersNumber(uint256 roundId) external view returns(uint16[] memory);\\n}\",\"keccak256\":\"0xa8081ad5eb434225fa4cf47b8a51926edd1929b5b75f8e2475f40411ec7bafaa\",\"license\":\"UNLICENSED\"},\"contracts/LotteryRoundCreatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\ninterface LotteryRoundCreatorInterface {\\n   function startNewRound(uint256 roundDurationInSeconds, address previousRoundAddress) external returns(address);\\n}\",\"keccak256\":\"0x758edc675f9d3b6e91d052e64cf4ea0495d6639542acf1d41ddb2a4c825a392a\",\"license\":\"UNLICENSED\"},\"contracts/LotteryRoundInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\n\\ninterface LotteryRoundInterface {\\n    function getRound() external returns(Round memory);\\n    function previousRound() external returns(address);\\n    function markWinners(TicketResults[] memory ticketResults, ReferralTicketResults[] memory referralTicketResults) external;\\n    function markVictoryClaimed(uint256 ticketId, uint256 amountClaimed) external;\\n    function markReferralVictoryClaimed(uint256 referralTicketId, uint256 amountClaimed) external;\\n    function treasuryAmountOnTicket(uint256 paymentTokenAmount) external view returns (uint256);\\n    function updateVictoryPoolForTicket(uint256 paymentTokenAmount) external;\\n    function buyTicket(uint256 chainId, uint16[] memory chosenNumbers, address referral, address buyer) external;\\n    function closeRound() external;\\n    function couldReceiveWinningNumbers() external view;\\n    function storeWinningNumbers(uint16[] memory roundNumbers, uint16[] memory referralWinnersNumber) external;\\n    function ticketById(uint256 ticketId) external view returns (Ticket memory);\\n    function numbersForTicketId(uint256 ticketId) external view returns (uint16[] memory);\\n    function referralTicketById(uint256 index) external view returns (ReferralTicket memory);\\n    function victoryTierAmounts(RoundVictoryTier tier) external view returns (uint256);\\n    function winnersForEachTier(RoundVictoryTier tier) external returns(uint256);\\n    function setPoolPercentagesBasePoints(uint16[] memory _poolPercentagesBasePoints) external;\\n}\",\"keccak256\":\"0xaf0ab80798c6142a9cf867a7f998c58ab2a980ef5b81ac2451ac83da18e20457\",\"license\":\"UNLICENSED\"},\"contracts/utils/EmergencyFunctions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract EmergencyFunctions is Ownable {\\n    address internal teamAddress;\\n    constructor(address _teamAddress) Ownable(_teamAddress) {\\n        teamAddress = _teamAddress;\\n    }\\n\\n    function updateTeamAddress(address _teamAddress) public onlyOwner {\\n        teamAddress = _teamAddress;\\n    }\\n\\n    // Emergency Functions\\n    function sendTokenToTeam(address _token) public onlyOwner {\\n        uint256 amount = IERC20(_token).balanceOf(address(this));\\n        if (amount > 0) {\\n            SafeERC20.safeTransfer(IERC20(_token), teamAddress, amount);\\n        }\\n    }\\n\\n    function sendCryptoToTeam() public onlyOwner {\\n        if (address(this).balance > 0) {\\n            payable(teamAddress).transfer(address(this).balance);\\n        }\\n    }\\n\\n    /** @notice Check if an address is a contract */\\n    function _isContract(address _addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x68dcc6a4104e2905f65c342fdb2dbde1908113d10c006f5857b52dc0bbefd419\",\"license\":\"MIT\"},\"contracts/utils/TestUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.x <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IERC20Extension {\\n    function decimals() external view returns (uint8);\\n}\\n\\ncontract TestFunctions is Ownable {\\n    constructor() Ownable(msg.sender) {}\\n    //Used for mock testing, contract ownership will be renounced on release\\n    uint public currentTimestampOverride;\\n    function updateCurrentTimestampOverride(uint _v) external onlyOwner {\\n        currentTimestampOverride = _v;\\n    }\\n    function currentTimestamp() public view returns(uint) {\\n        if (currentTimestampOverride > 0) {\\n            return currentTimestampOverride;\\n        }\\n        return block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x8edb22ef91efc1d38ffbd50b48821f4fe23bdaf84a14de75d0df8231eb772bc4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061021c5760003560e01c80638c65c81f11610125578063c96acb5a116100ad578063e91484241161007c578063e9148424146105dd578063eb7165fa146105f9578063f10fb58414610615578063f2fde38b14610633578063f4dec22b1461064f5761021c565b8063c96acb5a14610555578063cedd1bc314610571578063d4fc42c6146105a1578063e03d753a146105bf5761021c565b8063a8eed12d116100f4578063a8eed12d146104db578063b086f3c0146104f7578063b33d8c5414610513578063b62fe01b1461052f578063bbd1783a1461054b5761021c565b80638c65c81f146104535780638da5cb5b1461048357806392566fdd146104a1578063998da3e9146104bf5761021c565b80633013ce29116101a8578063715018a611610177578063715018a6146103c357806375e5460d146103cd5780637a5ed721146103fd57806387da46f11461041957806388e01a98146104375761021c565b80633013ce291461034f5780633fda7d951461036d5780634615102c1461038b5780634ff776b8146103a75761021c565b806314eb76ac116101ef57806314eb76ac146102995780631ed15aa4146102b55780631fcebf68146102d15780632242942914610301578063258799f81461031f5761021c565b80630d683dd914610221578063104dc3601461023f5780631209b1f61461025d578063127f0b3f1461027b575b600080fd5b61022961066d565b6040516102369190613d22565b60405180910390f35b610247610680565b6040516102549190613d7e565b60405180910390f35b6102656106a6565b6040516102729190613db2565b60405180910390f35b6102836106ac565b6040516102909190613db2565b60405180910390f35b6102b360048036038101906102ae9190613e0d565b6106b2565b005b6102cf60048036038101906102ca9190613e72565b6106fe565b005b6102eb60048036038101906102e69190613e0d565b610944565b6040516102f89190613ecf565b60405180910390f35b610309610965565b6040516103169190613db2565b60405180910390f35b61033960048036038101906103349190613f16565b61096b565b6040516103469190613d7e565b60405180910390f35b6103576109aa565b6040516103649190613fa2565b60405180910390f35b6103756109d0565b6040516103829190613db2565b60405180910390f35b6103a560048036038101906103a09190613f16565b6109d6565b005b6103c160048036038101906103bc9190613f16565b610ce7565b005b6103cb611514565b005b6103e760048036038101906103e29190613e0d565b611528565b6040516103f49190613fcc565b60405180910390f35b6104176004803603810190610412919061416c565b611548565b005b610421611633565b60405161042e9190614210565b60405180910390f35b610451600480360381019061044c9190613f16565b611659565b005b61046d60048036038101906104689190613f16565b611887565b60405161047a9190613d7e565b60405180910390f35b61048b6118c6565b6040516104989190613d7e565b60405180910390f35b6104a96118ef565b6040516104b69190613ecf565b60405180910390f35b6104d960048036038101906104d49190613e0d565b611903565b005b6104f560048036038101906104f09190613e72565b6119c4565b005b610511600480360381019061050c9190613f16565b611a27565b005b61052d60048036038101906105289190614286565b612237565b005b610549600480360381019061054491906142d3565b6122fe565b005b6105536128c1565b005b61056f600480360381019061056a91906142d3565b61293e565b005b61058b60048036038101906105869190613f16565b612b4c565b6040516105989190613db2565b60405180910390f35b6105a9612b64565b6040516105b69190614334565b60405180910390f35b6105c7612b8a565b6040516105d49190613fcc565b60405180910390f35b6105f760048036038101906105f2919061434f565b612b9d565b005b610613600480360381019061060e919061416c565b612f21565b005b61061d6136fa565b60405161062a9190614456565b60405180910390f35b61064d60048036038101906106489190613e0d565b613720565b005b6106576137a6565b6040516106649190613ecf565b60405180910390f35b600460009054906101000a900460ff1681565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600f5481565b60025481565b6106ba6137ba565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6107066137ba565b60005b600a805490508110156108d5578273ffffffffffffffffffffffffffffffffffffffff16600a828154811061074157610740614471565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036108c85781156107d35760006107ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c5906144fd565b60405180910390fd5b6108c7565b600a6001600a805490506107e7919061454c565b815481106107f8576107f7614471565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600a828154811061083757610836614471565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600a80548061089157610890614580565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590555b5b8080600101915050610709565b50801561094057600a829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b5050565b60076020528060005260406000206000915054906101000a900461ffff1681565b60065481565b600a818154811061097b57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b6109de6137ba565b600260008154809291906109f1906145af565b919050555060016002541115610bd5576003601060039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166363ea940f83600360028054610a52919061454c565b81548110610a6357610a62614471565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b8152600401610aab9291906145f7565b6020604051808303816000875af1158015610aca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aee9190614635565b9080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600380811115610b6157610b60613cab565b5b600460009054906101000a900460ff166003811115610b8357610b82613cab565b5b148015610b91575042600654105b610bd0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc7906146ae565b60405180910390fd5b610cd9565b6003601060039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166363ea940f8360006040518363ffffffff1660e01b8152600401610c359291906145f7565b6020604051808303816000875af1158015610c54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c789190614635565b9080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b610ce4600082613841565b50565b600060036001600254610cfa919061454c565b81548110610d0b57610d0a614471565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff16639b7be8fc846040518263ffffffff1660e01b8152600401610d739190613db2565b60c060405180830381865afa158015610d90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db491906147c7565b90503373ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1614610e28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1f90614840565b60405180910390fd5b806060015115610e6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e64906148ac565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b81526004016000604051808303816000875af1158015610eba573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610ee39190614bb7565b60600151610f26576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1d90614c4c565b60405180910390fd5b600380811115610f3957610f38613cab565b5b600460009054906101000a900460ff166003811115610f5b57610f5a613cab565b5b14610f9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9290614cb8565b60405180910390fd5b6006544210610fdf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd690614d24565b60405180910390fd5b6000600a811115610ff357610ff2613cab565b5b8160a00151600a81111561100a57611009613cab565b5b0361104a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104190614d90565b60405180910390fd5b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632aa601708373ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b81526004016000604051808303816000875af11580156110d5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906110fe9190614bb7565b60000151856040518363ffffffff1660e01b8152600401611120929190614db0565b606060405180830381865afa15801561113d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111619190614e3d565b60400151600a81111561117757611176613cab565b5b8160a00151600a81111561118e5761118d613cab565b5b146111ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c590614eb6565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff1663efa3d5318360a001516040518263ffffffff1660e01b815260040161120d9190614f1e565b6020604051808303816000875af115801561122c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112509190614f39565b8373ffffffffffffffffffffffffffffffffffffffff1663e2e308308460a001516040518263ffffffff1660e01b815260040161128d9190614f1e565b602060405180830381865afa1580156112aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ce9190614f39565b816112dc576112db614f66565b5b04905080600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161133b9190613d7e565b602060405180830381865afa158015611358573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137c9190614f39565b10156113bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b490614fe1565b60405180910390fd5b6003600160025403815481106113d6576113d5614471565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166382e5892385836040518363ffffffff1660e01b815260040161143b929190614db0565b600060405180830381600087803b15801561145557600080fd5b505af1158015611469573d6000803e3d6000fd5b50505050600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016114ca929190615001565b6020604051808303816000875af11580156114e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061150d919061502a565b5050505050565b61151c6137ba565b6115266000613890565b565b60086020528060005260406000206000915054906101000a900460ff1681565b60005b835181101561162c576000600667ffffffffffffffff81111561157157611570613ffd565b5b60405190808252806020026020018201604052801561159f5781602001602082028036833780820191505090505b50905060005b600681101561160a578581846115bb9190615057565b815181106115cc576115cb614471565b5b60200260200101518282815181106115e7576115e6614471565b5b602002602001019061ffff16908161ffff168152505080806001019150506115a5565b5061161786828686612f21565b506006816116259190615057565b905061154b565b5050505050565b601060039054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6116616137ba565b600060036001600254611674919061454c565b8154811061168557611684614471565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663e278fe6f6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156116fa57600080fd5b505af115801561170e573d6000803e3d6000fd5b505050506000600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f1664df66002546040518263ffffffff1660e01b81526004016117719190613db2565b602060405180830381865afa15801561178e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b2919061508b565b9050600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e726f2e18260066117ff91906150b8565b6040518263ffffffff1660e01b815260040161181b919061512f565b6020604051808303816000875af115801561183a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185e9190614f39565b60116000600254815260200190815260200160002081905550611882600184613841565b505050565b6003818154811061189757600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600960009054906101000a900461ffff1681565b61190b6137ba565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016119469190613d7e565b602060405180830381865afa158015611963573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119879190614f39565b905060008111156119c0576119bf82600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683613954565b5b5050565b6119cc6137ba565b80600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600060036001600254611a3a919061454c565b81548110611a4b57611a4a614471565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff1663dd85ae5f846040518263ffffffff1660e01b8152600401611ab39190613db2565b60a060405180830381865afa158015611ad0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611af491906151d6565b905082816000015114611b3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b339061524f565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1614611bae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ba590614840565b60405180910390fd5b806080015115611bf3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bea906148ac565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b81526004016000604051808303816000875af1158015611c40573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611c699190614bb7565b60600151611cac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ca390614c4c565b60405180910390fd5b600115158160600151151514611cf7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cee90614d90565b60405180910390fd5b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663078a6dbf8373ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b81526004016000604051808303816000875af1158015611d82573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611dab9190614bb7565b60000151856040518363ffffffff1660e01b8152600401611dcd929190614db0565b606060405180830381865afa158015611dea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e0e91906152d3565b6040015115158160600151151514611e5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e5290614eb6565b60405180910390fd5b6000600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f1664df68473ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b81526004016000604051808303816000875af1158015611ee8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611f119190614bb7565b600001516040518263ffffffff1660e01b8152600401611f319190613db2565b602060405180830381865afa158015611f4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f72919061508b565b61ffff168373ffffffffffffffffffffffffffffffffffffffff1663e2e3083060076040518263ffffffff1660e01b8152600401611fb09190614f1e565b602060405180830381865afa158015611fcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff19190614f39565b81611fff57611ffe614f66565b5b04905080600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161205e9190613d7e565b602060405180830381865afa15801561207b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061209f9190614f39565b10156120e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120d790614fe1565b60405180910390fd5b6003600160025403815481106120f9576120f8614471565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630cee803c85836040518363ffffffff1660e01b815260040161215e929190614db0565b600060405180830381600087803b15801561217857600080fd5b505af115801561218c573d6000803e3d6000fd5b50505050600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016121ed929190615001565b6020604051808303816000875af115801561220c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612230919061502a565b5050505050565b61223f6137ba565b60005b828290508110156122f9576007600084848481811061226457612263614471565b5b90506020020160208101906122799190613e0d565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081819054906101000a900461ffff16809291906122d190615300565b91906101000a81548161ffff021916908361ffff160217905550508080600101915050612242565b505050565b6123066137ba565b60006003600184612317919061454c565b8154811061232857612327614471565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663343f25666040518163ffffffff1660e01b815260040160006040518083038186803b15801561239b57600080fd5b505afa1580156123af573d6000803e3d6000fd5b50505050600080600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d8a4676f60116000888152602001908152602001600020546040518263ffffffff1660e01b81526004016124249190613db2565b600060405180830381865afa158015612441573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061246a919061532a565b91509150816124ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124a5906153d2565b60405180910390fd5b6000600667ffffffffffffffff8111156124cb576124ca613ffd565b5b6040519080825280602002602001820160405280156124f95781602001602082028036833780820191505090505b50905060006006835161250c919061454c565b67ffffffffffffffff81111561252557612524613ffd565b5b6040519080825280602002602001820160405280156125535781602001602082028036833780820191505090505b50905083156128405760005b600681101561265957600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c746a8a8583815181106125b9576125b8614471565b5b60200260200101516045866040518463ffffffff1660e01b81526004016125e2939291906154eb565b602060405180830381865afa1580156125ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612623919061508b565b83828151811061263657612635614471565b5b602002602001019061ffff16908161ffff1681525050808060010191505061255f565b506001601a8460058151811061267257612671614471565b5b60200260200101516126849190615529565b61268e9190615057565b826005815181106126a2576126a1614471565b5b602002602001019061ffff16908161ffff16815250506000600690505b835181101561283e57600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630c746a8a85838151811061271957612718614471565b5b60200260200101518873ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b81526004016000604051808303816000875af115801561276e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906127979190614bb7565b6101400151856040518463ffffffff1660e01b81526004016127bb9392919061555a565b602060405180830381865afa1580156127d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127fc919061508b565b8260068361280a919061454c565b8151811061281b5761281a614471565b5b602002602001019061ffff16908161ffff168152505080806001019150506126bf565b505b8473ffffffffffffffffffffffffffffffffffffffff16632724d10483836040518363ffffffff1660e01b815260040161287b929190615598565b600060405180830381600087803b15801561289557600080fd5b505af11580156128a9573d6000803e3d6000fd5b505050506128b8600287613841565b50505050505050565b6128c96137ba565b600047111561293c57600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561293a573d6000803e3d6000fd5b505b565b6129466137ba565b6003600183612955919061454c565b8154811061296657612965614471565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634cafa085600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c099ae19856040518263ffffffff1660e01b8152600401612a079190613db2565b600060405180830381865afa158015612a24573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612a4d9190615692565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d856f0d5866040518263ffffffff1660e01b8152600401612aa89190613db2565b600060405180830381865afa158015612ac5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612aee919061579e565b6040518363ffffffff1660e01b8152600401612b0b929190615a05565b600060405180830381600087803b158015612b2557600080fd5b505af1158015612b39573d6000803e3d6000fd5b50505050612b48600382613841565b5050565b60116020528060005260406000206000915090505481565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601060009054906101000a900460ff1681565b612ba56137ba565b88600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cd0f2311306040518263ffffffff1660e01b8152600401612c419190615a88565b600060405180830381600087803b158015612c5b57600080fd5b505af1158015612c6f573d6000803e3d6000fd5b5050505087600e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086601060036101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015612da3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dc79190615aef565b60ff16600a612dd69190615c4f565b85612de19190615c9a565b600f8190555083600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082601060016101000a81548161ffff021916908361ffff16021790555060036001600254612e56919061454c565b81548110612e6757612e66614471565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639469f293836040518263ffffffff1660e01b8152600401612eca9190615cdc565b600060405180830381600087803b158015612ee457600080fd5b505af1158015612ef8573d6000803e3d6000fd5b5050505080601060006101000a81548160ff021916908315150217905550505050505050505050565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900461ffff1661ffff1611806130205750600f54600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e83306040518363ffffffff1660e01b8152600401612fdc929190615cfe565b602060405180830381865afa158015612ff9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061301d9190614f39565b10155b806130745750600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6130b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130aa90615d73565b60405180910390fd5b6000600360016002546130c6919061454c565b815481106130d7576130d6614471565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900461ffff1661ffff1611156131db57600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081819054906101000a900461ffff16809291906131bb90615d93565b91906101000a81548161ffff021916908361ffff16021790555050613682565b600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166134d557600f54600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231326040518263ffffffff1660e01b815260040161328a9190613d7e565b602060405180830381865afa1580156132a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132cb9190614f39565b101561330c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161330390615e08565b60405180910390fd5b600a805490506009600081819054906101000a900461ffff168092919061333290615300565b91906101000a81548161ffff021916908361ffff16021790555061ffff1661335a9190615529565b600960006101000a81548161ffff021916908361ffff16021790555060008173ffffffffffffffffffffffffffffffffffffffff1663af33d08f600f546040518263ffffffff1660e01b81526004016133b39190613db2565b602060405180830381865afa1580156133d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133f49190614f39565b9050613483600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600a600960009054906101000a900461ffff1661ffff168154811061344557613444614471565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600f5461347e919061454c565b6139d3565b6134d3600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846139d3565b505b8073ffffffffffffffffffffffffffffffffffffffff1663b56c12b4600f546040518263ffffffff1660e01b81526004016135109190613db2565b600060405180830381600087803b15801561352a57600080fd5b505af115801561353e573d6000803e3d6000fd5b50505050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561358b5750601060009054906101000a900460ff165b1561368157600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081819054906101000a900461ffff16809291906135ed90615300565b91906101000a81548161ffff021916908361ffff16021790555050600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081819054906101000a900461ffff168092919061366590615300565b91906101000a81548161ffff021916908361ffff160217905550505b5b8073ffffffffffffffffffffffffffffffffffffffff1663eb7165fa868686866040518563ffffffff1660e01b81526004016136c19493929190615e28565b600060405180830381600087803b1580156136db57600080fd5b505af11580156136ef573d6000803e3d6000fd5b505050505050505050565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6137286137ba565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361379a5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016137919190613d7e565b60405180910390fd5b6137a381613890565b50565b601060019054906101000a900461ffff1681565b6137c2613a55565b73ffffffffffffffffffffffffffffffffffffffff166137e06118c6565b73ffffffffffffffffffffffffffffffffffffffff161461383f57613803613a55565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016138369190613d7e565b60405180910390fd5b565b6138496137ba565b81600460006101000a81548160ff0219169083600381111561386e5761386d613cab565b5b02179055504260058190555080426138869190615057565b6006819055505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6139ce838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401613987929190615001565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613a5d565b505050565b613a4f848573ffffffffffffffffffffffffffffffffffffffff166323b872dd868686604051602401613a0893929190615e74565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613a5d565b50505050565b600033905090565b6000613a88828473ffffffffffffffffffffffffffffffffffffffff16613af490919063ffffffff16565b90506000815114158015613aad575080806020019051810190613aab919061502a565b155b15613aef57826040517f5274afe7000000000000000000000000000000000000000000000000000000008152600401613ae69190613d7e565b60405180910390fd5b505050565b6060613b0283836000613b0a565b905092915050565b606081471015613b5157306040517fcd786059000000000000000000000000000000000000000000000000000000008152600401613b489190613d7e565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff168486604051613b7a9190615f1c565b60006040518083038185875af1925050503d8060008114613bb7576040519150601f19603f3d011682016040523d82523d6000602084013e613bbc565b606091505b5091509150613bcc868383613bd7565b925050509392505050565b606082613bec57613be782613c66565b613c5e565b60008251148015613c14575060008473ffffffffffffffffffffffffffffffffffffffff163b145b15613c5657836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401613c4d9190613d7e565b60405180910390fd5b819050613c5f565b5b9392505050565b600081511115613c795780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60048110613ceb57613cea613cab565b5b50565b6000819050613cfc82613cda565b919050565b6000613d0c82613cee565b9050919050565b613d1c81613d01565b82525050565b6000602082019050613d376000830184613d13565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613d6882613d3d565b9050919050565b613d7881613d5d565b82525050565b6000602082019050613d936000830184613d6f565b92915050565b6000819050919050565b613dac81613d99565b82525050565b6000602082019050613dc76000830184613da3565b92915050565b6000604051905090565b600080fd5b600080fd5b613dea81613d5d565b8114613df557600080fd5b50565b600081359050613e0781613de1565b92915050565b600060208284031215613e2357613e22613dd7565b5b6000613e3184828501613df8565b91505092915050565b60008115159050919050565b613e4f81613e3a565b8114613e5a57600080fd5b50565b600081359050613e6c81613e46565b92915050565b60008060408385031215613e8957613e88613dd7565b5b6000613e9785828601613df8565b9250506020613ea885828601613e5d565b9150509250929050565b600061ffff82169050919050565b613ec981613eb2565b82525050565b6000602082019050613ee46000830184613ec0565b92915050565b613ef381613d99565b8114613efe57600080fd5b50565b600081359050613f1081613eea565b92915050565b600060208284031215613f2c57613f2b613dd7565b5b6000613f3a84828501613f01565b91505092915050565b6000819050919050565b6000613f68613f63613f5e84613d3d565b613f43565b613d3d565b9050919050565b6000613f7a82613f4d565b9050919050565b6000613f8c82613f6f565b9050919050565b613f9c81613f81565b82525050565b6000602082019050613fb76000830184613f93565b92915050565b613fc681613e3a565b82525050565b6000602082019050613fe16000830184613fbd565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61403582613fec565b810181811067ffffffffffffffff8211171561405457614053613ffd565b5b80604052505050565b6000614067613dcd565b9050614073828261402c565b919050565b600067ffffffffffffffff82111561409357614092613ffd565b5b602082029050602081019050919050565b600080fd5b6140b281613eb2565b81146140bd57600080fd5b50565b6000813590506140cf816140a9565b92915050565b60006140e86140e384614078565b61405d565b9050808382526020820190506020840283018581111561410b5761410a6140a4565b5b835b81811015614134578061412088826140c0565b84526020840193505060208101905061410d565b5050509392505050565b600082601f83011261415357614152613fe7565b5b81356141638482602086016140d5565b91505092915050565b6000806000806080858703121561418657614185613dd7565b5b600061419487828801613f01565b945050602085013567ffffffffffffffff8111156141b5576141b4613ddc565b5b6141c18782880161413e565b93505060406141d287828801613df8565b92505060606141e387828801613df8565b91505092959194509250565b60006141fa82613f6f565b9050919050565b61420a816141ef565b82525050565b60006020820190506142256000830184614201565b92915050565b600080fd5b60008083601f84011261424657614245613fe7565b5b8235905067ffffffffffffffff8111156142635761426261422b565b5b60208301915083602082028301111561427f5761427e6140a4565b5b9250929050565b6000806020838503121561429d5761429c613dd7565b5b600083013567ffffffffffffffff8111156142bb576142ba613ddc565b5b6142c785828601614230565b92509250509250929050565b600080604083850312156142ea576142e9613dd7565b5b60006142f885828601613f01565b925050602061430985828601613f01565b9150509250929050565b600061431e82613f6f565b9050919050565b61432e81614313565b82525050565b60006020820190506143496000830184614325565b92915050565b60008060008060008060008060006101208a8c03121561437257614371613dd7565b5b60006143808c828d01613df8565b99505060206143918c828d01613df8565b98505060406143a28c828d01613df8565b97505060606143b38c828d01613df8565b96505060806143c48c828d01613f01565b95505060a06143d58c828d01613df8565b94505060c06143e68c828d016140c0565b93505060e08a013567ffffffffffffffff81111561440757614406613ddc565b5b6144138c828d0161413e565b9250506101006144258c828d01613e5d565b9150509295985092959850929598565b600061444082613f6f565b9050919050565b61445081614435565b82525050565b600060208201905061446b6000830184614447565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f57616c6c657420616c7265616479206164646564000000000000000000000000600082015250565b60006144e76014836144a0565b91506144f2826144b1565b602082019050919050565b60006020820190508181036000830152614516816144da565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061455782613d99565b915061456283613d99565b925082820390508181111561457a5761457961451d565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60006145ba82613d99565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036145ec576145eb61451d565b5b600182019050919050565b600060408201905061460c6000830185613da3565b6146196020830184613d6f565b9392505050565b60008151905061462f81613de1565b92915050565b60006020828403121561464b5761464a613dd7565b5b600061465984828501614620565b91505092915050565b7f50726576696f757320726f756e64206e6f7420656e6465640000000000000000600082015250565b60006146986018836144a0565b91506146a382614662565b602082019050919050565b600060208201905081810360008301526146c78161468b565b9050919050565b600080fd5b600080fd5b6000815190506146e781613eea565b92915050565b6000815190506146fc81613e46565b92915050565b600b811061470f57600080fd5b50565b60008151905061472181614702565b92915050565b600060c0828403121561473d5761473c6146ce565b5b61474760c061405d565b90506000614757848285016146d8565b600083015250602061476b84828501614620565b602083015250604061477f84828501614620565b6040830152506060614793848285016146ed565b60608301525060806147a7848285016146d8565b60808301525060a06147bb84828501614712565b60a08301525092915050565b600060c082840312156147dd576147dc613dd7565b5b60006147eb84828501614727565b91505092915050565b7f496e76616c6964207469636b6574206f776e6572000000000000000000000000600082015250565b600061482a6014836144a0565b9150614835826147f4565b602082019050919050565b600060208201905081810360008301526148598161481d565b9050919050565b7f5469636b657420616c726561647920636c61696d656400000000000000000000600082015250565b60006148966016836144a0565b91506148a182614860565b602082019050919050565b600060208201905081810360008301526148c581614889565b9050919050565b6000815190506148db816140a9565b92915050565b60006148f46148ef84614078565b61405d565b90508083825260208201905060208402830185811115614917576149166140a4565b5b835b81811015614940578061492c88826148cc565b845260208401935050602081019050614919565b5050509392505050565b600082601f83011261495f5761495e613fe7565b5b815161496f8482602086016148e1565b91505092915050565b600067ffffffffffffffff82111561499357614992613ffd565b5b602082029050602081019050919050565b60006149b76149b284614978565b61405d565b905080838252602082019050602084028301858111156149da576149d96140a4565b5b835b81811015614a0357806149ef88826146d8565b8452602084019350506020810190506149dc565b5050509392505050565b600082601f830112614a2257614a21613fe7565b5b8151614a328482602086016149a4565b91505092915050565b60006101608284031215614a5257614a516146ce565b5b614a5d61016061405d565b90506000614a6d848285016146d8565b6000830152506020614a81848285016146d8565b6020830152506040614a95848285016146d8565b6040830152506060614aa9848285016146ed565b606083015250608082015167ffffffffffffffff811115614acd57614acc6146d3565b5b614ad98482850161494a565b60808301525060a082015167ffffffffffffffff811115614afd57614afc6146d3565b5b614b098482850161494a565b60a08301525060c0614b1d848285016148cc565b60c08301525060e082015167ffffffffffffffff811115614b4157614b406146d3565b5b614b4d84828501614a0d565b60e083015250610100614b62848285016148cc565b6101008301525061012082015167ffffffffffffffff811115614b8857614b876146d3565b5b614b9484828501614a0d565b61012083015250610140614baa848285016148cc565b6101408301525092915050565b600060208284031215614bcd57614bcc613dd7565b5b600082015167ffffffffffffffff811115614beb57614bea613ddc565b5b614bf784828501614a3b565b91505092915050565b7f526f756e64206e6f7420656e6465640000000000000000000000000000000000600082015250565b6000614c36600f836144a0565b9150614c4182614c00565b602082019050919050565b60006020820190508181036000830152614c6581614c29565b9050919050565b7f436c61696d206e6f742073746172746564000000000000000000000000000000600082015250565b6000614ca26011836144a0565b9150614cad82614c6c565b602082019050919050565b60006020820190508181036000830152614cd181614c95565b9050919050565b7f436c61696d2068617320656e6465640000000000000000000000000000000000600082015250565b6000614d0e600f836144a0565b9150614d1982614cd8565b602082019050919050565b60006020820190508181036000830152614d3d81614d01565b9050919050565b7f4e6f207072697a6520666f722074686973207469636b65740000000000000000600082015250565b6000614d7a6018836144a0565b9150614d8582614d44565b602082019050919050565b60006020820190508181036000830152614da981614d6d565b9050919050565b6000604082019050614dc56000830185613da3565b614dd26020830184613da3565b9392505050565b600060608284031215614def57614dee6146ce565b5b614df9606061405d565b90506000614e09848285016146d8565b6000830152506020614e1d84828501614620565b6020830152506040614e3184828501614712565b60408301525092915050565b600060608284031215614e5357614e52613dd7565b5b6000614e6184828501614dd9565b91505092915050565b7f496e76616c6964207469636b6574207469657200000000000000000000000000600082015250565b6000614ea06013836144a0565b9150614eab82614e6a565b602082019050919050565b60006020820190508181036000830152614ecf81614e93565b9050919050565b600b8110614ee757614ee6613cab565b5b50565b6000819050614ef882614ed6565b919050565b6000614f0882614eea565b9050919050565b614f1881614efd565b82525050565b6000602082019050614f336000830184614f0f565b92915050565b600060208284031215614f4f57614f4e613dd7565b5b6000614f5d848285016146d8565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e6f7420656e6f7567682066756e6473206f6e20636f6e747261637400000000600082015250565b6000614fcb601c836144a0565b9150614fd682614f95565b602082019050919050565b60006020820190508181036000830152614ffa81614fbe565b9050919050565b60006040820190506150166000830185613d6f565b6150236020830184613da3565b9392505050565b6000602082840312156150405761503f613dd7565b5b600061504e848285016146ed565b91505092915050565b600061506282613d99565b915061506d83613d99565b92508282019050808211156150855761508461451d565b5b92915050565b6000602082840312156150a1576150a0613dd7565b5b60006150af848285016148cc565b91505092915050565b60006150c382613eb2565b91506150ce83613eb2565b9250828201905061ffff8111156150e8576150e761451d565b5b92915050565b600063ffffffff82169050919050565b600061511961511461510f84613eb2565b613f43565b6150ee565b9050919050565b615129816150fe565b82525050565b60006020820190506151446000830184615120565b92915050565b600060a082840312156151605761515f6146ce565b5b61516a60a061405d565b9050600061517a848285016146d8565b600083015250602061518e84828501614620565b60208301525060406151a2848285016148cc565b60408301525060606151b6848285016146ed565b60608301525060806151ca848285016146ed565b60808301525092915050565b600060a082840312156151ec576151eb613dd7565b5b60006151fa8482850161514a565b91505092915050565b7f496e76616c6964207469636b6574206964000000000000000000000000000000600082015250565b60006152396011836144a0565b915061524482615203565b602082019050919050565b600060208201905081810360008301526152688161522c565b9050919050565b600060608284031215615285576152846146ce565b5b61528f606061405d565b9050600061529f848285016146d8565b60008301525060206152b384828501614620565b60208301525060406152c7848285016146ed565b60408301525092915050565b6000606082840312156152e9576152e8613dd7565b5b60006152f78482850161526f565b91505092915050565b600061530b82613eb2565b915061ffff820361531f5761531e61451d565b5b600182019050919050565b6000806040838503121561534157615340613dd7565b5b600061534f858286016146ed565b925050602083015167ffffffffffffffff8111156153705761536f613ddc565b5b61537c85828601614a0d565b9150509250929050565b7f52616e646f6d206e756d62657273206e6f742072656164790000000000000000600082015250565b60006153bc6018836144a0565b91506153c782615386565b602082019050919050565b600060208201905081810360008301526153eb816153af565b9050919050565b6000819050919050565b600061541761541261540d846153f2565b613f43565b613eb2565b9050919050565b615427816153fc565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61546281613eb2565b82525050565b60006154748383615459565b60208301905092915050565b6000602082019050919050565b60006154988261542d565b6154a28185615438565b93506154ad83615449565b8060005b838110156154de5781516154c58882615468565b97506154d083615480565b9250506001810190506154b1565b5085935050505092915050565b60006060820190506155006000830186613da3565b61550d602083018561541e565b818103604083015261551f818461548d565b9050949350505050565b600061553482613d99565b915061553f83613d99565b92508261554f5761554e614f66565b5b828206905092915050565b600060608201905061556f6000830186613da3565b61557c6020830185613ec0565b818103604083015261558e818461548d565b9050949350505050565b600060408201905081810360008301526155b2818561548d565b905081810360208301526155c6818461548d565b90509392505050565b600067ffffffffffffffff8211156155ea576155e9613ffd565b5b602082029050602081019050919050565b600061560e615609846155cf565b61405d565b90508083825260208201905060608402830185811115615631576156306140a4565b5b835b8181101561565a57806156468882614dd9565b845260208401935050606081019050615633565b5050509392505050565b600082601f83011261567957615678613fe7565b5b81516156898482602086016155fb565b91505092915050565b6000602082840312156156a8576156a7613dd7565b5b600082015167ffffffffffffffff8111156156c6576156c5613ddc565b5b6156d284828501615664565b91505092915050565b600067ffffffffffffffff8211156156f6576156f5613ffd565b5b602082029050602081019050919050565b600061571a615715846156db565b61405d565b9050808382526020820190506060840283018581111561573d5761573c6140a4565b5b835b818110156157665780615752888261526f565b84526020840193505060608101905061573f565b5050509392505050565b600082601f83011261578557615784613fe7565b5b8151615795848260208601615707565b91505092915050565b6000602082840312156157b4576157b3613dd7565b5b600082015167ffffffffffffffff8111156157d2576157d1613ddc565b5b6157de84828501615770565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61581c81613d99565b82525050565b61582b81613d5d565b82525050565b61583a81614efd565b82525050565b6060820160008201516158566000850182615813565b5060208201516158696020850182615822565b50604082015161587c6040850182615831565b50505050565b600061588e8383615840565b60608301905092915050565b6000602082019050919050565b60006158b2826157e7565b6158bc81856157f2565b93506158c783615803565b8060005b838110156158f85781516158df8882615882565b97506158ea8361589a565b9250506001810190506158cb565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61593a81613e3a565b82525050565b6060820160008201516159566000850182615813565b5060208201516159696020850182615822565b50604082015161597c6040850182615931565b50505050565b600061598e8383615940565b60608301905092915050565b6000602082019050919050565b60006159b282615905565b6159bc8185615910565b93506159c783615921565b8060005b838110156159f85781516159df8882615982565b97506159ea8361599a565b9250506001810190506159cb565b5085935050505092915050565b60006040820190508181036000830152615a1f81856158a7565b90508181036020830152615a3381846159a7565b90509392505050565b7f4c6f74746572794d617374657256302e31000000000000000000000000000000600082015250565b6000615a726011836144a0565b9150615a7d82615a3c565b602082019050919050565b6000604082019050615a9d6000830184613d6f565b8181036020830152615aae81615a65565b905092915050565b600060ff82169050919050565b615acc81615ab6565b8114615ad757600080fd5b50565b600081519050615ae981615ac3565b92915050565b600060208284031215615b0557615b04613dd7565b5b6000615b1384828501615ada565b91505092915050565b60008160011c9050919050565b6000808291508390505b6001851115615b7357808604811115615b4f57615b4e61451d565b5b6001851615615b5e5780820291505b8081029050615b6c85615b1c565b9450615b33565b94509492505050565b600082615b8c5760019050615c48565b81615b9a5760009050615c48565b8160018114615bb05760028114615bba57615be9565b6001915050615c48565b60ff841115615bcc57615bcb61451d565b5b8360020a915084821115615be357615be261451d565b5b50615c48565b5060208310610133831016604e8410600b8410161715615c1e5782820a905083811115615c1957615c1861451d565b5b615c48565b615c2b8484846001615b29565b92509050818404811115615c4257615c4161451d565b5b81810290505b9392505050565b6000615c5a82613d99565b9150615c6583613d99565b9250615c927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484615b7c565b905092915050565b6000615ca582613d99565b9150615cb083613d99565b9250828202615cbe81613d99565b91508282048414831517615cd557615cd461451d565b5b5092915050565b60006020820190508181036000830152615cf6818461548d565b905092915050565b6000604082019050615d136000830185613d6f565b615d206020830184613d6f565b9392505050565b7f4d697373696e6720416c6c6f77616e6365000000000000000000000000000000600082015250565b6000615d5d6011836144a0565b9150615d6882615d27565b602082019050919050565b60006020820190508181036000830152615d8c81615d50565b9050919050565b6000615d9e82613eb2565b915060008203615db157615db061451d565b5b600182039050919050565b7f496e73756666696369656e742066756e64730000000000000000000000000000600082015250565b6000615df26012836144a0565b9150615dfd82615dbc565b602082019050919050565b60006020820190508181036000830152615e2181615de5565b9050919050565b6000608082019050615e3d6000830187613da3565b8181036020830152615e4f818661548d565b9050615e5e6040830185613d6f565b615e6b6060830184613d6f565b95945050505050565b6000606082019050615e896000830186613d6f565b615e966020830185613d6f565b615ea36040830184613da3565b949350505050565b600081519050919050565b600081905092915050565b60005b83811015615edf578082015181840152602081019050615ec4565b60008484015250505050565b6000615ef682615eab565b615f008185615eb6565b9350615f10818560208601615ec1565b80840191505092915050565b6000615f288284615eeb565b91508190509291505056fea26469706673582212200e6c5e1d3770cfa5a864248ab31b3288f19fde6ec27b17f8924a2dca70a6130464736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4621,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "teamAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1014,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "roundCount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1017,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "rounds",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1020,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "lotteryStatus",
        "offset": 0,
        "slot": "4",
        "type": "t_enum(LotteryStatuses)1010"
      },
      {
        "astId": 1022,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "statusStartTime",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1024,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "statusEndTime",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1028,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "freeRounds",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint16)"
      },
      {
        "astId": 1032,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "crossChainOperator",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1050,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "counterForBankWallets",
        "offset": 0,
        "slot": "9",
        "type": "t_uint16"
      },
      {
        "astId": 1053,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "bankWallets",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1119,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "treasuryWallets",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 1122,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "paymentToken",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IERC20Metadata)251"
      },
      {
        "astId": 1125,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "randomizer",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(CyclixRandomizerInterface)901"
      },
      {
        "astId": 1128,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "reader",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(LotteryReaderInterface)3360"
      },
      {
        "astId": 1130,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "ticketPrice",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 1133,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "freeRoundsAreEnabled",
        "offset": 0,
        "slot": "16",
        "type": "t_bool"
      },
      {
        "astId": 1136,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "percentageOfReferralWinners",
        "offset": 1,
        "slot": "16",
        "type": "t_uint16"
      },
      {
        "astId": 1139,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "lotteryRoundCreator",
        "offset": 3,
        "slot": "16",
        "type": "t_contract(LotteryRoundCreatorInterface)4481"
      },
      {
        "astId": 1664,
        "contract": "contracts/LotteryMaster.sol:LotteryMaster",
        "label": "publicRoundRandomNumbersRequestId",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(CyclixRandomizerInterface)901": {
        "encoding": "inplace",
        "label": "contract CyclixRandomizerInterface",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Metadata)251": {
        "encoding": "inplace",
        "label": "contract IERC20Metadata",
        "numberOfBytes": "20"
      },
      "t_contract(LotteryReaderInterface)3360": {
        "encoding": "inplace",
        "label": "contract LotteryReaderInterface",
        "numberOfBytes": "20"
      },
      "t_contract(LotteryRoundCreatorInterface)4481": {
        "encoding": "inplace",
        "label": "contract LotteryRoundCreatorInterface",
        "numberOfBytes": "20"
      },
      "t_enum(LotteryStatuses)1010": {
        "encoding": "inplace",
        "label": "enum LotteryStatuses",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint16)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint16)",
        "numberOfBytes": "32",
        "value": "t_uint16"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}