{
  "address": "0x36DffDfB066e12beE5cCACea900B90F5Af7197e2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "previousRoundAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "roundDurationInSeconds",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint16[]",
          "name": "chosenNumbers",
          "type": "uint16[]"
        },
        {
          "internalType": "uint16",
          "name": "powerNumber",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "referral",
          "type": "address"
        }
      ],
      "name": "buyTicket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "couldReceiveWinningNumbers",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRound",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "ended",
              "type": "bool"
            },
            {
              "internalType": "uint16[]",
              "name": "roundNumbers",
              "type": "uint16[]"
            },
            {
              "internalType": "uint16",
              "name": "powerNumber",
              "type": "uint16"
            },
            {
              "internalType": "uint16[]",
              "name": "referralWinnersNumber",
              "type": "uint16[]"
            },
            {
              "internalType": "uint16",
              "name": "referralWinnersNumberCount",
              "type": "uint16"
            },
            {
              "internalType": "uint256[]",
              "name": "ticketIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint16",
              "name": "ticketsCount",
              "type": "uint16"
            },
            {
              "internalType": "uint256[]",
              "name": "referralTicketIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint16",
              "name": "referralCounts",
              "type": "uint16"
            }
          ],
          "internalType": "struct Round",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "referralTicketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountClaimed",
          "type": "uint256"
        }
      ],
      "name": "markReferralVictoryClaimed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountClaimed",
          "type": "uint256"
        }
      ],
      "name": "markVictoryClaimed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "ticketId",
              "type": "uint256"
            },
            {
              "internalType": "enum RoundVictoryTier",
              "name": "victoryTier",
              "type": "uint8"
            }
          ],
          "internalType": "struct TicketResults[]",
          "name": "ticketResults",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "referralTicketId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "won",
              "type": "bool"
            }
          ],
          "internalType": "struct ReferralTicketResults[]",
          "name": "referralTicketResults",
          "type": "tuple[]"
        }
      ],
      "name": "markWinners",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        }
      ],
      "name": "numberIsInRangeForPowerNumber",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        }
      ],
      "name": "numberIsInRangeForRound",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketId",
          "type": "uint256"
        }
      ],
      "name": "numbersForTicketId",
      "outputs": [
        {
          "internalType": "uint16[]",
          "name": "",
          "type": "uint16[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "basisPoint",
          "type": "uint256"
        }
      ],
      "name": "percentageInBasisPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "previousRound",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "referralTicketById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "referralAddress",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "referralTicketNumber",
              "type": "uint16"
            },
            {
              "internalType": "bool",
              "name": "winner",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "claimed",
              "type": "bool"
            }
          ],
          "internalType": "struct ReferralTicket",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "referralTickets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "referralAddress",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "referralTicketNumber",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "winner",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "claimed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "round",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "ended",
          "type": "bool"
        },
        {
          "internalType": "uint16",
          "name": "powerNumber",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "referralWinnersNumberCount",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "ticketsCount",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "referralCounts",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roundReferralTicketsByAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "roundReferralTicketsByAddressCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roundTicketsByAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "roundTicketsByAddressCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendCryptoToTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "sendTokenToTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "roundNumbers",
          "type": "uint16[]"
        },
        {
          "internalType": "uint16",
          "name": "powerNumber",
          "type": "uint16"
        },
        {
          "internalType": "uint16[]",
          "name": "referralWinnersNumber",
          "type": "uint16[]"
        }
      ],
      "name": "storeWinningNumbers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketId",
          "type": "uint256"
        }
      ],
      "name": "ticketById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "participantAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "referralAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "claimed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "enum RoundVictoryTier",
              "name": "victoryTier",
              "type": "uint8"
            },
            {
              "internalType": "uint16",
              "name": "powerNumber",
              "type": "uint16"
            }
          ],
          "internalType": "struct Ticket",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ticketNumbers",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tickets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "participantAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "referralAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "claimed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "enum RoundVictoryTier",
          "name": "victoryTier",
          "type": "uint8"
        },
        {
          "internalType": "uint16",
          "name": "powerNumber",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "paymentTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "treasuryAmountOnTicket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_teamAddress",
          "type": "address"
        }
      ],
      "name": "updateTeamAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "paymentTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "updateVictoryPoolForTicket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "numbers",
          "type": "uint16[]"
        },
        {
          "internalType": "uint16",
          "name": "powerNumber",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "referral",
          "type": "address"
        }
      ],
      "name": "validateBuyTicket",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum RoundVictoryTier",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "victoryTierAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum RoundVictoryTier",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "victoryTierAmountsClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum RoundVictoryTier",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "winnersForEachTier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x796ee12269f860a0c6ef998d4f2aec4f508babbb32564a63b048b5e95b99542f",
  "receipt": {
    "to": null,
    "from": "0x4eCa23Ffd5710970E22558C484a0D6943dA5eAa5",
    "contractAddress": "0x36DffDfB066e12beE5cCACea900B90F5Af7197e2",
    "transactionIndex": 6,
    "gasUsed": "3764504",
    "logsBloom": "0x
    "blockHash": "0xaf4c57ea61d94986bb6a1f44b12bc70569648461e8bc6509a8d26e3a3d3f33a3",
    "transactionHash": "0x796ee12269f860a0c6ef998d4f2aec4f508babbb32564a63b048b5e95b99542f",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 32403056,
        "transactionHash": "0x796ee12269f860a0c6ef998d4f2aec4f508babbb32564a63b048b5e95b99542f",
        "address": "0x36DffDfB066e12beE5cCACea900B90F5Af7197e2",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004eca23ffd5710970e22558c484a0d6943da5eaa5"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xaf4c57ea61d94986bb6a1f44b12bc70569648461e8bc6509a8d26e3a3d3f33a3"
      }
    ],
    "blockNumber": 32403056,
    "cumulativeGasUsed": "4056925",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000000",
    432000
  ],
  "numDeployments": 1,
  "solcInputHash": "04867362111321919c19caff6a348279",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"previousRoundAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"roundDurationInSeconds\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint16[]\",\"name\":\"chosenNumbers\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16\",\"name\":\"powerNumber\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"buyTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"couldReceiveWinningNumbers\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRound\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"ended\",\"type\":\"bool\"},{\"internalType\":\"uint16[]\",\"name\":\"roundNumbers\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16\",\"name\":\"powerNumber\",\"type\":\"uint16\"},{\"internalType\":\"uint16[]\",\"name\":\"referralWinnersNumber\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16\",\"name\":\"referralWinnersNumberCount\",\"type\":\"uint16\"},{\"internalType\":\"uint256[]\",\"name\":\"ticketIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16\",\"name\":\"ticketsCount\",\"type\":\"uint16\"},{\"internalType\":\"uint256[]\",\"name\":\"referralTicketIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16\",\"name\":\"referralCounts\",\"type\":\"uint16\"}],\"internalType\":\"struct Round\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"referralTicketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"name\":\"markReferralVictoryClaimed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"name\":\"markVictoryClaimed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"},{\"internalType\":\"enum RoundVictoryTier\",\"name\":\"victoryTier\",\"type\":\"uint8\"}],\"internalType\":\"struct TicketResults[]\",\"name\":\"ticketResults\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"referralTicketId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"won\",\"type\":\"bool\"}],\"internalType\":\"struct ReferralTicketResults[]\",\"name\":\"referralTicketResults\",\"type\":\"tuple[]\"}],\"name\":\"markWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"numberIsInRangeForPowerNumber\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"numberIsInRangeForRound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"}],\"name\":\"numbersForTicketId\",\"outputs\":[{\"internalType\":\"uint16[]\",\"name\":\"\",\"type\":\"uint16[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basisPoint\",\"type\":\"uint256\"}],\"name\":\"percentageInBasisPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousRound\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"referralTicketById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referralAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"referralTicketNumber\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"winner\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"internalType\":\"struct ReferralTicket\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referralTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referralAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"referralTicketNumber\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"winner\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"ended\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"powerNumber\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"referralWinnersNumberCount\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"ticketsCount\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"referralCounts\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundReferralTicketsByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"roundReferralTicketsByAddressCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundTicketsByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"roundTicketsByAddressCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendCryptoToTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sendTokenToTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"roundNumbers\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16\",\"name\":\"powerNumber\",\"type\":\"uint16\"},{\"internalType\":\"uint16[]\",\"name\":\"referralWinnersNumber\",\"type\":\"uint16[]\"}],\"name\":\"storeWinningNumbers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"}],\"name\":\"ticketById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"participantAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referralAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"enum RoundVictoryTier\",\"name\":\"victoryTier\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"powerNumber\",\"type\":\"uint16\"}],\"internalType\":\"struct Ticket\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ticketNumbers\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"participantAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referralAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"enum RoundVictoryTier\",\"name\":\"victoryTier\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"powerNumber\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paymentTokenAmount\",\"type\":\"uint256\"}],\"name\":\"treasuryAmountOnTicket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teamAddress\",\"type\":\"address\"}],\"name\":\"updateTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paymentTokenAmount\",\"type\":\"uint256\"}],\"name\":\"updateVictoryPoolForTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"numbers\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16\",\"name\":\"powerNumber\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"validateBuyTicket\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum RoundVictoryTier\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"victoryTierAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum RoundVictoryTier\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"victoryTierAmountsClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum RoundVictoryTier\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"winnersForEachTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LotteryRound.sol\":\"LotteryRound\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/CyclixRandomizerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface CyclixRandomizerInterface {\\n    function requestRandomWords(uint32 numWords) external returns (uint256 requestId);\\n    function getRequestStatus(uint256 _requestId) external view returns (bool fulfilled, uint256[] memory randomWords);\\n    function registerGameContract(address gameAddress, string calldata name) external;\\n    function getLastRequestIdForCaller() external view returns (uint256);\\n}\",\"keccak256\":\"0x066c0e37e0bd528ce42d23ee3b5815f550f44571c61f1be89a4b844f1d52f71f\",\"license\":\"MIT\"},\"contracts/LotteryCommon.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\n    enum RoundVictoryTier {\\n        NO_WIN,\\n        Tier5_1,\\n        Tier5,\\n        Tier4_1,\\n        Tier4,\\n        Tier3_1,\\n        Tier3,\\n        Referrer,\\n        PublicPool,\\n        TokenHolders,\\n        Treasury\\n    }\\n\\n    struct Round {\\n        uint256 id;\\n        uint256 startTime;\\n        uint256 endTime;\\n        bool ended;\\n        uint16[] roundNumbers;\\n        uint16 powerNumber;\\n        uint16[] referralWinnersNumber;\\n        uint16 referralWinnersNumberCount;\\n        uint256[] ticketIds;\\n        uint16 ticketsCount;\\n        uint256[] referralTicketIds;\\n        uint16 referralCounts;\\n    }\\n\\n    struct Ticket {\\n        uint256 id;\\n        address participantAddress;\\n        address referralAddress;\\n        bool claimed;\\n        uint256 chainId;\\n        RoundVictoryTier victoryTier;\\n        uint16 powerNumber;\\n    }\\n\\n    struct TicketResults {\\n        uint256 ticketId;\\n        RoundVictoryTier victoryTier;\\n    }\\n\\n    struct ReferralTicket {\\n        uint256 id;\\n        address referralAddress;\\n        uint16 referralTicketNumber;\\n        bool winner;\\n        bool claimed;\\n    }\\n\\n    struct ReferralTicketResults {\\n        uint256 referralTicketId;\\n        bool won;\\n    }\",\"keccak256\":\"0x4a30f56a4b0850bdc3cd7ea3d9d9254038a29ea61c3abc6bf7ab0e2024e44796\",\"license\":\"UNLICENSED\"},\"contracts/LotteryRound.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {TestFunctions} from \\\"./utils/TestUtils.sol\\\";\\nimport {CyclixRandomizerInterface} from \\\"./CyclixRandomizerInterface.sol\\\";\\nimport {EmergencyFunctions} from \\\"./utils/EmergencyFunctions.sol\\\";\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\n\\ncontract LotteryRound is EmergencyFunctions {\\n    Round public round;\\n    function getRound() public view returns (Round memory) {\\n        return round;\\n    }\\n\\n    Ticket[] public tickets;\\n    function ticketById(uint256 ticketId) public view returns (Ticket memory) {\\n        return tickets[ticketId];\\n    }\\n    mapping(uint256 => uint16[]) public ticketNumbers;\\n    function numbersForTicketId(uint256 ticketId) public view returns (uint16[] memory) {\\n        return ticketNumbers[ticketId];\\n    }\\n    mapping(address => uint256[]) public roundTicketsByAddress;\\n    mapping(address => uint256) public roundTicketsByAddressCount;\\n\\n    ReferralTicket[] public referralTickets;\\n    function referralTicketById(uint256 index) public view returns (ReferralTicket memory) {\\n        return referralTickets[index];\\n    }\\n    mapping(address => uint256[]) public roundReferralTicketsByAddress;\\n    mapping(address => uint256) public roundReferralTicketsByAddressCount;\\n\\n    mapping(RoundVictoryTier => uint256) public victoryTierAmounts;\\n    mapping(RoundVictoryTier => uint256) public victoryTierAmountsClaimed;\\n    mapping(RoundVictoryTier => uint256) public winnersForEachTier;\\n    address public previousRound;\\n\\n    constructor(address previousRoundAddress, uint256 roundDurationInSeconds) EmergencyFunctions(msg.sender) {\\n        uint256 id = 1;\\n        previousRound = previousRoundAddress;\\n        if (previousRoundAddress != address(0)) {\\n            LotteryRound previousLotteryRound = LotteryRound(previousRoundAddress);\\n            id = previousLotteryRound.getRound().id + 1;\\n            propagateWinningFromPreviousRound();\\n        }\\n        round = Round({\\n            id: id,\\n            startTime: block.timestamp,\\n            endTime: block.timestamp + roundDurationInSeconds,\\n            ended : false,\\n            roundNumbers: new uint16[](0),\\n            powerNumber: 0,\\n            referralWinnersNumber: new uint16[](0),\\n            referralWinnersNumberCount : 0,\\n            ticketIds : new uint256[](0),\\n            ticketsCount : 0,\\n            referralTicketIds : new uint256[](0),\\n            referralCounts : 0\\n        });\\n    }\\n\\n    function propagateWinningFromPreviousRound() internal {\\n        LotteryRound previousLotteryRound = LotteryRound(previousRound);\\n        victoryTierAmounts[RoundVictoryTier.Tier5_1] += previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Tier5_1) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Tier5_1);\\n        victoryTierAmounts[RoundVictoryTier.Tier5] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Tier5) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Tier5);\\n        victoryTierAmounts[RoundVictoryTier.Tier4_1] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Tier4_1) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Tier4_1);\\n        victoryTierAmounts[RoundVictoryTier.Tier4] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Tier4) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Tier4);\\n        victoryTierAmounts[RoundVictoryTier.Tier3_1] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Tier3_1) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Tier3_1);\\n        victoryTierAmounts[RoundVictoryTier.Tier3] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Tier3) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Tier3);\\n        victoryTierAmounts[RoundVictoryTier.PublicPool] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.PublicPool) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.PublicPool);\\n        victoryTierAmounts[RoundVictoryTier.Referrer] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Referrer) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Referrer);\\n        victoryTierAmounts[RoundVictoryTier.TokenHolders] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.TokenHolders) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.TokenHolders);\\n        victoryTierAmounts[RoundVictoryTier.Treasury] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Treasury) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Treasury);\\n    }\\n\\n    function numberIsInRangeForRound(uint256 number) public pure returns (bool) {\\n        return number > 0 && number <= 69;\\n    }\\n\\n    function numberIsInRangeForPowerNumber(uint256 number) public pure returns (bool) {\\n        return number > 0 && number <= 26;\\n    }\\n\\n    function validateBuyTicket(uint16[] memory numbers, uint16 powerNumber, address referral ) public view onlyOwner {\\n        require(tx.origin != address(0), \\\"Invalid sender\\\");\\n        require(block.timestamp < round.endTime, \\\"Round is over\\\");\\n        require(numbers.length == 5, \\\"Invalid numbers count\\\");\\n        for (uint i = 0; i < numbers.length; i++) {\\n            require(numberIsInRangeForRound(numbers[i]), \\\"Invalid numbers\\\");\\n        }\\n        require(numberIsInRangeForPowerNumber(powerNumber), \\\"Invalid power number\\\");\\n        require(referral != tx.origin, \\\"Referral cannot be the same as the participant\\\");\\n    }\\n\\n    function percentageInBasisPoint(uint256 amount, uint256 basisPoint) public pure returns (uint256) {\\n        return amount * basisPoint / 10000;\\n    }\\n\\n    function treasuryAmountOnTicket(uint256 paymentTokenAmount) public pure returns (uint256) {\\n        return percentageInBasisPoint(paymentTokenAmount, 5000);\\n    }\\n\\n    function updateVictoryPoolForTicket(uint256 paymentTokenAmount) public onlyOwner {\\n        uint256 forPublicPool = percentageInBasisPoint(paymentTokenAmount, 7000);\\n        victoryTierAmounts[RoundVictoryTier.Tier5_1] += percentageInBasisPoint(forPublicPool, 3500);\\n        victoryTierAmounts[RoundVictoryTier.Tier5] += percentageInBasisPoint(forPublicPool, 1500);\\n        victoryTierAmounts[RoundVictoryTier.Tier4_1] += percentageInBasisPoint(forPublicPool, 1000);\\n        victoryTierAmounts[RoundVictoryTier.Tier4] += percentageInBasisPoint(forPublicPool, 700);\\n        victoryTierAmounts[RoundVictoryTier.Tier3_1] += percentageInBasisPoint(forPublicPool, 500);\\n        victoryTierAmounts[RoundVictoryTier.Tier3] += percentageInBasisPoint(forPublicPool, 300);\\n        victoryTierAmounts[RoundVictoryTier.PublicPool] += forPublicPool;\\n        victoryTierAmounts[RoundVictoryTier.Referrer] += percentageInBasisPoint(paymentTokenAmount, 1500);\\n        victoryTierAmounts[RoundVictoryTier.TokenHolders] += percentageInBasisPoint(paymentTokenAmount, 1000);\\n        victoryTierAmounts[RoundVictoryTier.Treasury] += treasuryAmountOnTicket(paymentTokenAmount);\\n    }\\n\\n    function buyTicket(uint256 chainId, uint16[] memory chosenNumbers, uint16 powerNumber, address referral) public onlyOwner {\\n        validateBuyTicket(chosenNumbers, powerNumber, referral);\\n\\n        uint256 ticketId = tickets.length;\\n        tickets.push(Ticket({\\n            id: ticketId,\\n            participantAddress: tx.origin,\\n            referralAddress: referral,\\n            claimed: false,\\n            chainId: chainId,\\n            victoryTier: RoundVictoryTier.NO_WIN,\\n            powerNumber: powerNumber\\n        }));\\n        for(uint i = 0; i < chosenNumbers.length; i++) {\\n            ticketNumbers[ticketId].push(chosenNumbers[i]);\\n        }\\n        round.ticketIds.push(ticketId);\\n        round.ticketsCount++;\\n\\n        roundTicketsByAddress[msg.sender].push(tickets.length - 1);\\n        roundTicketsByAddressCount[msg.sender]++;\\n        if (referral != address(0)) {\\n            uint256 referralTicketId = referralTickets.length;\\n            round.referralTicketIds.push(referralTicketId);\\n            round.referralCounts++;\\n            referralTickets.push(ReferralTicket({\\n                id: referralTicketId,\\n                referralAddress: referral,\\n                referralTicketNumber: uint16(round.referralCounts),\\n                winner: false,\\n                claimed: false\\n            }));\\n\\n            roundReferralTicketsByAddress[referral].push(referralTickets.length - 1);\\n            roundReferralTicketsByAddressCount[referral]++;\\n        }\\n    }\\n\\n    function closeRound() public onlyOwner {\\n        require(block.timestamp >= round.endTime, \\\"Round is not over yet\\\");\\n        round.ended = true;\\n    }\\n\\n    function couldReceiveWinningNumbers() public view {\\n        require(block.timestamp >= round.endTime, \\\"Round is not over yet\\\");\\n        require(round.roundNumbers.length == 0, \\\"Winning numbers already set\\\");\\n    }\\n\\n    function storeWinningNumbers(uint16[] memory roundNumbers, uint16 powerNumber, uint16[] memory referralWinnersNumber) public onlyOwner {\\n        round.roundNumbers = roundNumbers;\\n        round.powerNumber = powerNumber;\\n        round.referralWinnersNumber = referralWinnersNumber;\\n        round.referralWinnersNumberCount = uint16(referralWinnersNumber.length);\\n    }\\n\\n    function markWinners(TicketResults[] memory ticketResults, ReferralTicketResults[] memory referralTicketResults) public onlyOwner {\\n        for (uint i = 0; i < ticketResults.length; i++) {\\n            TicketResults memory ticketResult = ticketResults[i];\\n            Ticket storage ticket = tickets[ticketResult.ticketId];\\n            ticket.victoryTier = ticketResult.victoryTier;\\n            winnersForEachTier[ticketResult.victoryTier]++;\\n        }\\n        for (uint i = 0; i < referralTicketResults.length; i++) {\\n            ReferralTicketResults memory referralTicketResult = referralTicketResults[i];\\n            ReferralTicket storage referralTicket = referralTickets[referralTicketResult.referralTicketId];\\n            referralTicket.winner = referralTicketResult.won;\\n            if (referralTicketResult.won) {\\n                winnersForEachTier[RoundVictoryTier.Referrer]++;\\n            }\\n        }\\n    }\\n\\n    function markVictoryClaimed(uint256 ticketId, uint256 amountClaimed) public onlyOwner {\\n        Ticket storage ticket = tickets[ticketId];\\n        ticket.claimed = true;\\n        victoryTierAmountsClaimed[ticket.victoryTier] += amountClaimed;\\n    }\\n\\n    function markReferralVictoryClaimed(uint256 referralTicketId, uint256 amountClaimed) public onlyOwner {\\n        ReferralTicket storage referralTicket = referralTickets[referralTicketId];\\n        referralTicket.claimed = true;\\n        victoryTierAmountsClaimed[RoundVictoryTier.Referrer] += amountClaimed;\\n    }\\n}\",\"keccak256\":\"0x812e09eea94e62dbce63b86be6c05943b8a60f36b46010efe4a8a70cf4bbf527\",\"license\":\"UNLICENSED\"},\"contracts/utils/EmergencyFunctions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract EmergencyFunctions is Ownable {\\n    address internal teamAddress;\\n    constructor(address _teamAddress) Ownable(_teamAddress) {\\n        teamAddress = _teamAddress;\\n    }\\n\\n    function updateTeamAddress(address _teamAddress) public onlyOwner {\\n        teamAddress = _teamAddress;\\n    }\\n\\n    // Emergency Functions\\n    function sendTokenToTeam(address _token) public onlyOwner {\\n        uint256 amount = IERC20(_token).balanceOf(address(this));\\n        if (amount > 0) {\\n            SafeERC20.safeTransfer(IERC20(_token), teamAddress, amount);\\n        }\\n    }\\n\\n    function sendCryptoToTeam() public onlyOwner {\\n        if (address(this).balance > 0) {\\n            payable(teamAddress).transfer(address(this).balance);\\n        }\\n    }\\n\\n    /** @notice Check if an address is a contract */\\n    function _isContract(address _addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x68dcc6a4104e2905f65c342fdb2dbde1908113d10c006f5857b52dc0bbefd419\",\"license\":\"MIT\"},\"contracts/utils/TestUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.x <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IERC20Extension {\\n    function decimals() external view returns (uint8);\\n}\\n\\ncontract TestFunctions is Ownable {\\n    constructor() Ownable(msg.sender) {}\\n    //Used for mock testing, contract ownership will be renounced on release\\n    uint public currentTimestampOverride;\\n    function updateCurrentTimestampOverride(uint _v) external onlyOwner {\\n        currentTimestampOverride = _v;\\n    }\\n    function currentTimestamp() public view returns(uint) {\\n        if (currentTimestampOverride > 0) {\\n            return currentTimestampOverride;\\n        }\\n        return block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x8edb22ef91efc1d38ffbd50b48821f4fe23bdaf84a14de75d0df8231eb772bc4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162005b6638038062005b668339818101604052810190620000379190620015b9565b3380600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000ae5760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000a5919062001611565b60405180910390fd5b620000bf816200052260201b60201c565b5080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060006001905082601860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146200022057600083905060018173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa158015620001d1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190620001fc919062001aba565b600001516200020c919062001b3a565b91506200021e620005e660201b60201c565b505b604051806101800160405280828152602001428152602001834262000246919062001b3a565b8152602001600015158152602001600067ffffffffffffffff81111562000272576200027162001644565b5b604051908082528060200260200182016040528015620002a15781602001602082028036833780820191505090505b508152602001600061ffff168152602001600067ffffffffffffffff811115620002d057620002cf62001644565b5b604051908082528060200260200182016040528015620002ff5781602001602082028036833780820191505090505b508152602001600061ffff168152602001600067ffffffffffffffff8111156200032e576200032d62001644565b5b6040519080825280602002602001820160405280156200035d5781602001602082028036833780820191505090505b508152602001600061ffff168152602001600067ffffffffffffffff8111156200038c576200038b62001644565b5b604051908082528060200260200182016040528015620003bb5781602001602082028036833780820191505090505b508152602001600061ffff16815250600260008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548160ff021916908315150217905550608082015181600401908051906020019062000428929190620013e3565b5060a08201518160050160006101000a81548161ffff021916908361ffff16021790555060c08201518160060190805190602001906200046a929190620013e3565b5060e08201518160070160006101000a81548161ffff021916908361ffff160217905550610100820151816008019080519060200190620004ad92919062001494565b506101208201518160090160006101000a81548161ffff021916908361ffff16021790555061014082015181600a019080519060200190620004f192919062001494565b5061016082015181600b0160006101000a81548161ffff021916908361ffff16021790555090505050505062001c7f565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000601860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16634e9eba1d60016040518263ffffffff1660e01b815260040162000649919062001bf5565b602060405180830381865afa15801562000667573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200068d919062001c12565b8173ffffffffffffffffffffffffffffffffffffffff1663e2e3083060016040518263ffffffff1660e01b8152600401620006c9919062001bf5565b602060405180830381865afa158015620006e7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200070d919062001c12565b62000719919062001c44565b601560006001600a81111562000734576200073362001b75565b5b600a81111562000749576200074862001b75565b5b8152602001908152602001600020600082825462000768919062001b3a565b925050819055508073ffffffffffffffffffffffffffffffffffffffff16634e9eba1d60026040518263ffffffff1660e01b8152600401620007ab919062001bf5565b602060405180830381865afa158015620007c9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007ef919062001c12565b8173ffffffffffffffffffffffffffffffffffffffff1663e2e3083060026040518263ffffffff1660e01b81526004016200082b919062001bf5565b602060405180830381865afa15801562000849573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200086f919062001c12565b6200087b919062001c44565b601560006002600a81111562000896576200089562001b75565b5b600a811115620008ab57620008aa62001b75565b5b81526020019081526020016000206000828254620008ca919062001b3a565b925050819055508073ffffffffffffffffffffffffffffffffffffffff16634e9eba1d60036040518263ffffffff1660e01b81526004016200090d919062001bf5565b602060405180830381865afa1580156200092b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000951919062001c12565b8173ffffffffffffffffffffffffffffffffffffffff1663e2e3083060036040518263ffffffff1660e01b81526004016200098d919062001bf5565b602060405180830381865afa158015620009ab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009d1919062001c12565b620009dd919062001c44565b601560006003600a811115620009f857620009f762001b75565b5b600a81111562000a0d5762000a0c62001b75565b5b8152602001908152602001600020600082825462000a2c919062001b3a565b925050819055508073ffffffffffffffffffffffffffffffffffffffff16634e9eba1d60046040518263ffffffff1660e01b815260040162000a6f919062001bf5565b602060405180830381865afa15801562000a8d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ab3919062001c12565b8173ffffffffffffffffffffffffffffffffffffffff1663e2e3083060046040518263ffffffff1660e01b815260040162000aef919062001bf5565b602060405180830381865afa15801562000b0d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b33919062001c12565b62000b3f919062001c44565b601560006004600a81111562000b5a5762000b5962001b75565b5b600a81111562000b6f5762000b6e62001b75565b5b8152602001908152602001600020600082825462000b8e919062001b3a565b925050819055508073ffffffffffffffffffffffffffffffffffffffff16634e9eba1d60056040518263ffffffff1660e01b815260040162000bd1919062001bf5565b602060405180830381865afa15801562000bef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c15919062001c12565b8173ffffffffffffffffffffffffffffffffffffffff1663e2e3083060056040518263ffffffff1660e01b815260040162000c51919062001bf5565b602060405180830381865afa15801562000c6f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c95919062001c12565b62000ca1919062001c44565b601560006005600a81111562000cbc5762000cbb62001b75565b5b600a81111562000cd15762000cd062001b75565b5b8152602001908152602001600020600082825462000cf0919062001b3a565b925050819055508073ffffffffffffffffffffffffffffffffffffffff16634e9eba1d60066040518263ffffffff1660e01b815260040162000d33919062001bf5565b602060405180830381865afa15801562000d51573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d77919062001c12565b8173ffffffffffffffffffffffffffffffffffffffff1663e2e3083060066040518263ffffffff1660e01b815260040162000db3919062001bf5565b602060405180830381865afa15801562000dd1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000df7919062001c12565b62000e03919062001c44565b601560006006600a81111562000e1e5762000e1d62001b75565b5b600a81111562000e335762000e3262001b75565b5b8152602001908152602001600020600082825462000e52919062001b3a565b925050819055508073ffffffffffffffffffffffffffffffffffffffff16634e9eba1d60086040518263ffffffff1660e01b815260040162000e95919062001bf5565b602060405180830381865afa15801562000eb3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000ed9919062001c12565b8173ffffffffffffffffffffffffffffffffffffffff1663e2e3083060086040518263ffffffff1660e01b815260040162000f15919062001bf5565b602060405180830381865afa15801562000f33573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f59919062001c12565b62000f65919062001c44565b601560006008600a81111562000f805762000f7f62001b75565b5b600a81111562000f955762000f9462001b75565b5b8152602001908152602001600020600082825462000fb4919062001b3a565b925050819055508073ffffffffffffffffffffffffffffffffffffffff16634e9eba1d60076040518263ffffffff1660e01b815260040162000ff7919062001bf5565b602060405180830381865afa15801562001015573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200103b919062001c12565b8173ffffffffffffffffffffffffffffffffffffffff1663e2e3083060076040518263ffffffff1660e01b815260040162001077919062001bf5565b602060405180830381865afa15801562001095573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010bb919062001c12565b620010c7919062001c44565b601560006007600a811115620010e257620010e162001b75565b5b600a811115620010f757620010f662001b75565b5b8152602001908152602001600020600082825462001116919062001b3a565b925050819055508073ffffffffffffffffffffffffffffffffffffffff16634e9eba1d60096040518263ffffffff1660e01b815260040162001159919062001bf5565b602060405180830381865afa15801562001177573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200119d919062001c12565b8173ffffffffffffffffffffffffffffffffffffffff1663e2e3083060096040518263ffffffff1660e01b8152600401620011d9919062001bf5565b602060405180830381865afa158015620011f7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200121d919062001c12565b62001229919062001c44565b601560006009600a81111562001244576200124362001b75565b5b600a81111562001259576200125862001b75565b5b8152602001908152602001600020600082825462001278919062001b3a565b925050819055508073ffffffffffffffffffffffffffffffffffffffff16634e9eba1d600a6040518263ffffffff1660e01b8152600401620012bb919062001bf5565b602060405180830381865afa158015620012d9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012ff919062001c12565b8173ffffffffffffffffffffffffffffffffffffffff1663e2e30830600a6040518263ffffffff1660e01b81526004016200133b919062001bf5565b602060405180830381865afa15801562001359573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200137f919062001c12565b6200138b919062001c44565b60156000600a80811115620013a557620013a462001b75565b5b600a811115620013ba57620013b962001b75565b5b81526020019081526020016000206000828254620013d9919062001b3a565b9250508190555050565b82805482825590600052602060002090600f01601090048101928215620014815791602002820160005b838211156200144f57835183826101000a81548161ffff021916908361ffff16021790555092602001926002016020816001010492830192600103026200140d565b80156200147f5782816101000a81549061ffff02191690556002016020816001010492830192600103026200144f565b505b509050620014909190620014e6565b5090565b828054828255906000526020600020908101928215620014d3579160200282015b82811115620014d2578251825591602001919060010190620014b5565b5b509050620014e29190620014e6565b5090565b5b8082111562001501576000816000905550600101620014e7565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620015468262001519565b9050919050565b620015588162001539565b81146200156457600080fd5b50565b60008151905062001578816200154d565b92915050565b6000819050919050565b62001593816200157e565b81146200159f57600080fd5b50565b600081519050620015b38162001588565b92915050565b60008060408385031215620015d357620015d26200150f565b5b6000620015e38582860162001567565b9250506020620015f685828601620015a2565b9150509250929050565b6200160b8162001539565b82525050565b600060208201905062001628600083018462001600565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200167e8262001633565b810181811067ffffffffffffffff82111715620016a0576200169f62001644565b5b80604052505050565b6000620016b562001505565b9050620016c3828262001673565b919050565b600080fd5b60008115159050919050565b620016e481620016cd565b8114620016f057600080fd5b50565b6000815190506200170481620016d9565b92915050565b600080fd5b600067ffffffffffffffff8211156200172d576200172c62001644565b5b602082029050602081019050919050565b600080fd5b600061ffff82169050919050565b6200175c8162001743565b81146200176857600080fd5b50565b6000815190506200177c8162001751565b92915050565b60006200179962001793846200170f565b620016a9565b90508083825260208201905060208402830185811115620017bf57620017be6200173e565b5b835b81811015620017ec5780620017d788826200176b565b845260208401935050602081019050620017c1565b5050509392505050565b600082601f8301126200180e576200180d6200170a565b5b81516200182084826020860162001782565b91505092915050565b600067ffffffffffffffff82111562001847576200184662001644565b5b602082029050602081019050919050565b60006200186f620018698462001829565b620016a9565b905080838252602082019050602084028301858111156200189557620018946200173e565b5b835b81811015620018c25780620018ad8882620015a2565b84526020840193505060208101905062001897565b5050509392505050565b600082601f830112620018e457620018e36200170a565b5b8151620018f684826020860162001858565b91505092915050565b600061018082840312156200191957620019186200162e565b5b62001926610180620016a9565b905060006200193884828501620015a2565b60008301525060206200194e84828501620015a2565b60208301525060406200196484828501620015a2565b60408301525060606200197a84828501620016f3565b606083015250608082015167ffffffffffffffff811115620019a157620019a0620016c8565b5b620019af84828501620017f6565b60808301525060a0620019c5848285016200176b565b60a08301525060c082015167ffffffffffffffff811115620019ec57620019eb620016c8565b5b620019fa84828501620017f6565b60c08301525060e062001a10848285016200176b565b60e08301525061010082015167ffffffffffffffff81111562001a385762001a37620016c8565b5b62001a4684828501620018cc565b6101008301525061012062001a5e848285016200176b565b6101208301525061014082015167ffffffffffffffff81111562001a875762001a86620016c8565b5b62001a9584828501620018cc565b6101408301525061016062001aad848285016200176b565b6101608301525092915050565b60006020828403121562001ad35762001ad26200150f565b5b600082015167ffffffffffffffff81111562001af45762001af362001514565b5b62001b0284828501620018ff565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062001b47826200157e565b915062001b54836200157e565b925082820190508082111562001b6f5762001b6e62001b0b565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600b811062001bb85762001bb762001b75565b5b50565b600081905062001bcb8262001ba4565b919050565b600062001bdd8262001bbb565b9050919050565b62001bef8162001bd0565b82525050565b600060208201905062001c0c600083018462001be4565b92915050565b60006020828403121562001c2b5762001c2a6200150f565b5b600062001c3b84828501620015a2565b91505092915050565b600062001c51826200157e565b915062001c5e836200157e565b925082820390508181111562001c795762001c7862001b0b565b5b92915050565b613ed78062001c8f6000396000f3fe608060405234801561001057600080fd5b50600436106102115760003560e01c8063715018a611610125578063b56c12b4116100ad578063e278fe6f1161007c578063e278fe6f14610659578063e2e3083014610663578063e65b76a914610693578063efa3d531146106c3578063f2fde38b146106f357610211565b8063b56c12b4146105d3578063bbd1783a146105ef578063dd85ae5f146105f9578063df28f24b1461062957610211565b80639b7be8fc116100f45780639b7be8fc146105075780639f8743f714610537578063af33d08f14610555578063b217be0514610585578063b288e1a9146105b557610211565b8063715018a6146104a757806382e58923146104b15780638da5cb5b146104cd578063998da3e9146104eb57610211565b80633590bd3c116101a857806350b447121161017757806350b44712146103d9578063598f3b9d1461040f578063627151671461043f578063659a8d861461045b5780636a65bcda1461048b57610211565b80633590bd3c1461032957806336324a5d146103455780633ed91226146103755780634e9eba1d146103a957610211565b806314eb76ac116101e457806314eb76ac146102b7578063266fbf90146102d35780632ed48515146102ef578063343f25661461031f57610211565b806308469cc61461021657806308bb71cd146102465780630cee803c14610276578063146ca53114610292575b600080fd5b610230600480360381019061022b9190612986565b61070f565b60405161023d91906129ce565b60405180910390f35b610260600480360381019061025b9190612a47565b610728565b60405161026d9190612a83565b60405180910390f35b610290600480360381019061028b9190612a9e565b610740565b005b61029a6107df565b6040516102ae989796959493929190612afb565b60405180910390f35b6102d160048036038101906102cc9190612a47565b61085a565b005b6102ed60048036038101906102e89190612cfe565b6108a6565b005b61030960048036038101906103049190612a9e565b610efb565b6040516103169190612a83565b60405180910390f35b610327610f1e565b005b610343600480360381019061033e9190612ffd565b610fb2565b005b61035f600480360381019061035a9190612986565b611182565b60405161036c91906129ce565b60405180910390f35b61038f600480360381019061038a9190612986565b61119b565b6040516103a0959493929190613084565b60405180910390f35b6103c360048036038101906103be91906130d7565b611229565b6040516103d09190612a83565b60405180910390f35b6103f360048036038101906103ee9190612986565b611241565b604051610406979695949392919061317b565b60405180910390f35b61042960048036038101906104249190612986565b6112fb565b60405161043691906132a8565b60405180910390f35b610459600480360381019061045491906132ca565b61138e565b005b61047560048036038101906104709190613339565b6115ce565b6040516104829190612a83565b60405180910390f35b6104a560048036038101906104a09190613379565b6115ff565b005b6104af611681565b005b6104cb60048036038101906104c69190612a9e565b611695565b005b6104d5611744565b6040516104e29190613404565b60405180910390f35b61050560048036038101906105009190612a47565b61176d565b005b610521600480360381019061051c9190612986565b61182e565b60405161052e91906134e9565b60405180910390f35b61053f6119a0565b60405161054c919061373b565b60405180910390f35b61056f600480360381019061056a9190612986565b611c24565b60405161057c9190612a83565b60405180910390f35b61059f600480360381019061059a9190612a9e565b611c39565b6040516105ac919061375d565b60405180910390f35b6105bd611c80565b6040516105ca9190613404565b60405180910390f35b6105ed60048036038101906105e89190612986565b611ca6565b005b6105f7612037565b005b610613600480360381019061060e9190612986565b6120b4565b60405161062091906137e0565b60405180910390f35b610643600480360381019061063e9190612a47565b6121a6565b6040516106509190612a83565b60405180910390f35b6106616121be565b005b61067d600480360381019061067891906130d7565b61222d565b60405161068a9190612a83565b60405180910390f35b6106ad60048036038101906106a89190613339565b612245565b6040516106ba9190612a83565b60405180910390f35b6106dd60048036038101906106d891906130d7565b612276565b6040516106ea9190612a83565b60405180910390f35b61070d60048036038101906107089190612a47565b61228e565b005b60008082118015610721575060458211155b9050919050565b60146020528060005260406000206000915090505481565b610748612314565b60006012838154811061075e5761075d6137fb565b5b9060005260206000209060020201905060018160010160176101000a81548160ff02191690831515021790555081601660006007600a8111156107a4576107a3613104565b5b600a8111156107b6576107b5613104565b5b815260200190815260200160002060008282546107d39190613859565b92505081905550505050565b60028060000154908060010154908060020154908060030160009054906101000a900460ff16908060050160009054906101000a900461ffff16908060070160009054906101000a900461ffff16908060090160009054906101000a900461ffff169080600b0160009054906101000a900461ffff16905088565b610862612314565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6108ae612314565b6108b983838361138e565b6000600e805490509050600e6040518060e001604052808381526020013273ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020016000151581526020018781526020016000600a81111561093157610930613104565b5b81526020018561ffff1681525090806001815401808255809150506001900390600052602060002090600502016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548160ff0219169083151502179055506080820151816003015560a08201518160040160006101000a81548160ff0219169083600a811115610a5457610a53613104565b5b021790555060c08201518160040160016101000a81548161ffff021916908361ffff160217905550505060005b8451811015610b0c57600f6000838152602001908152602001600020858281518110610ab057610aaf6137fb565b5b602002602001015190806001815401808255809150506001900390600052602060002090601091828204019190066002029091909190916101000a81548161ffff021916908361ffff1602179055508080600101915050610a81565b5060026008018190806001815401808255809150506001900390600052602060002001600090919091909150556002600901600081819054906101000a900461ffff1680929190610b5c9061388d565b91906101000a81548161ffff021916908361ffff16021790555050601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001600e80549050610bc891906138b7565b9080600181540180825580915050600190039060005260206000200160009091909190915055601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610c3e906138eb565b9190505550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610ef457600060128054905090506002600a018190806001815401808255809150506001900390600052602060002001600090919091909150556002600b01600081819054906101000a900461ffff1680929190610cd09061388d565b91906101000a81548161ffff021916908361ffff1602179055505060126040518060a001604052808381526020018573ffffffffffffffffffffffffffffffffffffffff1681526020016002600b0160009054906101000a900461ffff1661ffff1681526020016000151581526020016000151581525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548161ffff021916908361ffff16021790555060608201518160010160166101000a81548160ff02191690831515021790555060808201518160010160176101000a81548160ff0219169083151502179055505050601360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001601280549050610e7791906138b7565b9080600181540180825580915050600190039060005260206000200160009091909190915055601460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610eed906138eb565b9190505550505b5050505050565b60006127108284610f0c9190613933565b610f1691906139a4565b905092915050565b6002800154421015610f65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5c90613a32565b60405180910390fd5b600060026004018054905014610fb0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fa790613a9e565b60405180910390fd5b565b610fba612314565b60005b825181101561109f576000838281518110610fdb57610fda6137fb565b5b602002602001015190506000600e826000015181548110610fff57610ffe6137fb565b5b9060005260206000209060050201905081602001518160040160006101000a81548160ff0219169083600a81111561103a57611039613104565b5b0217905550601760008360200151600a81111561105a57611059613104565b5b600a81111561106c5761106b613104565b5b8152602001908152602001600020600081548092919061108b906138eb565b919050555050508080600101915050610fbd565b5060005b815181101561117d5760008282815181106110c1576110c06137fb565b5b60200260200101519050600060128260000151815481106110e5576110e46137fb565b5b9060005260206000209060020201905081602001518160010160166101000a81548160ff02191690831515021790555081602001511561116e57601760006007600a81111561113757611136613104565b5b600a81111561114957611148613104565b5b81526020019081526020016000206000815480929190611168906138eb565b91905055505b505080806001019150506110a3565b505050565b600080821180156111945750601a8211155b9050919050565b601281815481106111ab57600080fd5b90600052602060002090600202016000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900461ffff16908060010160169054906101000a900460ff16908060010160179054906101000a900460ff16905085565b60166020528060005260406000206000915090505481565b600e818154811061125157600080fd5b90600052602060002090600502016000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160149054906101000a900460ff16908060030154908060040160009054906101000a900460ff16908060040160019054906101000a900461ffff16905087565b6060600f600083815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561138257602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116113495790505b50505050509050919050565b611396612314565b600073ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1603611405576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113fc90613b0a565b60405180910390fd5b6002800154421061144b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144290613b76565b60405180910390fd5b600583511461148f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148690613be2565b60405180910390fd5b60005b835181101561150e576114c28482815181106114b1576114b06137fb565b5b602002602001015161ffff1661070f565b611501576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f890613c4e565b60405180910390fd5b8080600101915050611492565b5061151c8261ffff16611182565b61155b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155290613cba565b60405180910390fd5b3273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036115c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c090613d4c565b60405180910390fd5b505050565b601360205281600052604060002081815481106115ea57600080fd5b90600052602060002001600091509150505481565b611607612314565b8260026004019080519060200190611620929190612734565b5081600260050160006101000a81548161ffff021916908361ffff160217905550806002600601908051906020019061165a929190612734565b508051600260070160006101000a81548161ffff021916908361ffff160217905550505050565b611689612314565b611693600061239b565b565b61169d612314565b6000600e83815481106116b3576116b26137fb565b5b9060005260206000209060050201905060018160020160146101000a81548160ff02191690831515021790555081601660008360040160009054906101000a900460ff16600a81111561170957611708613104565b5b600a81111561171b5761171a613104565b5b815260200190815260200160002060008282546117389190613859565b92505081905550505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611775612314565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016117b09190613404565b602060405180830381865afa1580156117cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f19190613d81565b9050600081111561182a5761182982600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168361245f565b5b5050565b6118366127de565b600e828154811061184a576118496137fb565b5b90600052602060002090600502016040518060e0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900460ff16151515158152602001600382015481526020016004820160009054906101000a900460ff16600a81111561196357611962613104565b5b600a81111561197557611974613104565b5b81526020016004820160019054906101000a900461ffff1661ffff1661ffff16815250509050919050565b6119a861285f565b6002604051806101800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff1615151515815260200160048201805480602002602001604051908101604052809291908181526020018280548015611a6657602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411611a2d5790505b505050505081526020016005820160009054906101000a900461ffff1661ffff1661ffff16815260200160068201805480602002602001604051908101604052809291908181526020018280548015611b0657602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411611acd5790505b505050505081526020016007820160009054906101000a900461ffff1661ffff1661ffff16815260200160088201805480602002602001604051908101604052809291908181526020018280548015611b7e57602002820191906000526020600020905b815481526020019060010190808311611b6a575b505050505081526020016009820160009054906101000a900461ffff1661ffff1661ffff168152602001600a8201805480602002602001604051908101604052809291908181526020018280548015611bf657602002820191906000526020600020905b815481526020019060010190808311611be2575b50505050508152602001600b820160009054906101000a900461ffff1661ffff1661ffff1681525050905090565b6000611c3282611388610efb565b9050919050565b600f6020528160005260406000208181548110611c5557600080fd5b9060005260206000209060109182820401919006600202915091509054906101000a900461ffff1681565b601860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611cae612314565b6000611cbc82611b58610efb565b9050611cca81610dac610efb565b601560006001600a811115611ce257611ce1613104565b5b600a811115611cf457611cf3613104565b5b81526020019081526020016000206000828254611d119190613859565b92505081905550611d24816105dc610efb565b601560006002600a811115611d3c57611d3b613104565b5b600a811115611d4e57611d4d613104565b5b81526020019081526020016000206000828254611d6b9190613859565b92505081905550611d7e816103e8610efb565b601560006003600a811115611d9657611d95613104565b5b600a811115611da857611da7613104565b5b81526020019081526020016000206000828254611dc59190613859565b92505081905550611dd8816102bc610efb565b601560006004600a811115611df057611def613104565b5b600a811115611e0257611e01613104565b5b81526020019081526020016000206000828254611e1f9190613859565b92505081905550611e32816101f4610efb565b601560006005600a811115611e4a57611e49613104565b5b600a811115611e5c57611e5b613104565b5b81526020019081526020016000206000828254611e799190613859565b92505081905550611e8c8161012c610efb565b601560006006600a811115611ea457611ea3613104565b5b600a811115611eb657611eb5613104565b5b81526020019081526020016000206000828254611ed39190613859565b9250508190555080601560006008600a811115611ef357611ef2613104565b5b600a811115611f0557611f04613104565b5b81526020019081526020016000206000828254611f229190613859565b92505081905550611f35826105dc610efb565b601560006007600a811115611f4d57611f4c613104565b5b600a811115611f5f57611f5e613104565b5b81526020019081526020016000206000828254611f7c9190613859565b92505081905550611f8f826103e8610efb565b601560006009600a811115611fa757611fa6613104565b5b600a811115611fb957611fb8613104565b5b81526020019081526020016000206000828254611fd69190613859565b92505081905550611fe682611c24565b60156000600a80811115611ffd57611ffc613104565b5b600a81111561200f5761200e613104565b5b8152602001908152602001600020600082825461202c9190613859565b925050819055505050565b61203f612314565b60004711156120b257600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156120b0573d6000803e3d6000fd5b505b565b6120bc6128d2565b601282815481106120d0576120cf6137fb565b5b90600052602060002090600202016040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900461ffff1661ffff1661ffff1681526020016001820160169054906101000a900460ff161515151581526020016001820160179054906101000a900460ff1615151515815250509050919050565b60116020528060005260406000206000915090505481565b6121c6612314565b600280015442101561220d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161220490613a32565b60405180910390fd5b6001600260030160006101000a81548160ff021916908315150217905550565b60156020528060005260406000206000915090505481565b6010602052816000526040600020818154811061226157600080fd5b90600052602060002001600091509150505481565b60176020528060005260406000206000915090505481565b612296612314565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036123085760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016122ff9190613404565b60405180910390fd5b6123118161239b565b50565b61231c6124de565b73ffffffffffffffffffffffffffffffffffffffff1661233a611744565b73ffffffffffffffffffffffffffffffffffffffff16146123995761235d6124de565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016123909190613404565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6124d9838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401612492929190613dae565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506124e6565b505050565b600033905090565b6000612511828473ffffffffffffffffffffffffffffffffffffffff1661257d90919063ffffffff16565b905060008151141580156125365750808060200190518101906125349190613dec565b155b1561257857826040517f5274afe700000000000000000000000000000000000000000000000000000000815260040161256f9190613404565b60405180910390fd5b505050565b606061258b83836000612593565b905092915050565b6060814710156125da57306040517fcd7860590000000000000000000000000000000000000000000000000000000081526004016125d19190613404565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1684866040516126039190613e8a565b60006040518083038185875af1925050503d8060008114612640576040519150601f19603f3d011682016040523d82523d6000602084013e612645565b606091505b5091509150612655868383612660565b925050509392505050565b60608261267557612670826126ef565b6126e7565b6000825114801561269d575060008473ffffffffffffffffffffffffffffffffffffffff163b145b156126df57836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016126d69190613404565b60405180910390fd5b8190506126e8565b5b9392505050565b6000815111156127025780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82805482825590600052602060002090600f016010900481019282156127cd5791602002820160005b8382111561279d57835183826101000a81548161ffff021916908361ffff160217905550926020019260020160208160010104928301926001030261275d565b80156127cb5782816101000a81549061ffff021916905560020160208160010104928301926001030261279d565b505b5090506127da919061291f565b5090565b6040518060e0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001600081526020016000600a81111561284e5761284d613104565b5b8152602001600061ffff1681525090565b60405180610180016040528060008152602001600081526020016000815260200160001515815260200160608152602001600061ffff16815260200160608152602001600061ffff16815260200160608152602001600061ffff16815260200160608152602001600061ffff1681525090565b6040518060a0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600061ffff1681526020016000151581526020016000151581525090565b5b80821115612938576000816000905550600101612920565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61296381612950565b811461296e57600080fd5b50565b6000813590506129808161295a565b92915050565b60006020828403121561299c5761299b612946565b5b60006129aa84828501612971565b91505092915050565b60008115159050919050565b6129c8816129b3565b82525050565b60006020820190506129e360008301846129bf565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612a14826129e9565b9050919050565b612a2481612a09565b8114612a2f57600080fd5b50565b600081359050612a4181612a1b565b92915050565b600060208284031215612a5d57612a5c612946565b5b6000612a6b84828501612a32565b91505092915050565b612a7d81612950565b82525050565b6000602082019050612a986000830184612a74565b92915050565b60008060408385031215612ab557612ab4612946565b5b6000612ac385828601612971565b9250506020612ad485828601612971565b9150509250929050565b600061ffff82169050919050565b612af581612ade565b82525050565b600061010082019050612b11600083018b612a74565b612b1e602083018a612a74565b612b2b6040830189612a74565b612b3860608301886129bf565b612b456080830187612aec565b612b5260a0830186612aec565b612b5f60c0830185612aec565b612b6c60e0830184612aec565b9998505050505050505050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612bc782612b7e565b810181811067ffffffffffffffff82111715612be657612be5612b8f565b5b80604052505050565b6000612bf961293c565b9050612c058282612bbe565b919050565b600067ffffffffffffffff821115612c2557612c24612b8f565b5b602082029050602081019050919050565b600080fd5b612c4481612ade565b8114612c4f57600080fd5b50565b600081359050612c6181612c3b565b92915050565b6000612c7a612c7584612c0a565b612bef565b90508083825260208201905060208402830185811115612c9d57612c9c612c36565b5b835b81811015612cc65780612cb28882612c52565b845260208401935050602081019050612c9f565b5050509392505050565b600082601f830112612ce557612ce4612b79565b5b8135612cf5848260208601612c67565b91505092915050565b60008060008060808587031215612d1857612d17612946565b5b6000612d2687828801612971565b945050602085013567ffffffffffffffff811115612d4757612d4661294b565b5b612d5387828801612cd0565b9350506040612d6487828801612c52565b9250506060612d7587828801612a32565b91505092959194509250565b600067ffffffffffffffff821115612d9c57612d9b612b8f565b5b602082029050602081019050919050565b600080fd5b600b8110612dbf57600080fd5b50565b600081359050612dd181612db2565b92915050565b600060408284031215612ded57612dec612dad565b5b612df76040612bef565b90506000612e0784828501612971565b6000830152506020612e1b84828501612dc2565b60208301525092915050565b6000612e3a612e3584612d81565b612bef565b90508083825260208201905060408402830185811115612e5d57612e5c612c36565b5b835b81811015612e865780612e728882612dd7565b845260208401935050604081019050612e5f565b5050509392505050565b600082601f830112612ea557612ea4612b79565b5b8135612eb5848260208601612e27565b91505092915050565b600067ffffffffffffffff821115612ed957612ed8612b8f565b5b602082029050602081019050919050565b612ef3816129b3565b8114612efe57600080fd5b50565b600081359050612f1081612eea565b92915050565b600060408284031215612f2c57612f2b612dad565b5b612f366040612bef565b90506000612f4684828501612971565b6000830152506020612f5a84828501612f01565b60208301525092915050565b6000612f79612f7484612ebe565b612bef565b90508083825260208201905060408402830185811115612f9c57612f9b612c36565b5b835b81811015612fc55780612fb18882612f16565b845260208401935050604081019050612f9e565b5050509392505050565b600082601f830112612fe457612fe3612b79565b5b8135612ff4848260208601612f66565b91505092915050565b6000806040838503121561301457613013612946565b5b600083013567ffffffffffffffff8111156130325761303161294b565b5b61303e85828601612e90565b925050602083013567ffffffffffffffff81111561305f5761305e61294b565b5b61306b85828601612fcf565b9150509250929050565b61307e81612a09565b82525050565b600060a0820190506130996000830188612a74565b6130a66020830187613075565b6130b36040830186612aec565b6130c060608301856129bf565b6130cd60808301846129bf565b9695505050505050565b6000602082840312156130ed576130ec612946565b5b60006130fb84828501612dc2565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600b811061314457613143613104565b5b50565b600081905061315582613133565b919050565b600061316582613147565b9050919050565b6131758161315a565b82525050565b600060e082019050613190600083018a612a74565b61319d6020830189613075565b6131aa6040830188613075565b6131b760608301876129bf565b6131c46080830186612a74565b6131d160a083018561316c565b6131de60c0830184612aec565b98975050505050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61321f81612ade565b82525050565b60006132318383613216565b60208301905092915050565b6000602082019050919050565b6000613255826131ea565b61325f81856131f5565b935061326a83613206565b8060005b8381101561329b5781516132828882613225565b975061328d8361323d565b92505060018101905061326e565b5085935050505092915050565b600060208201905081810360008301526132c2818461324a565b905092915050565b6000806000606084860312156132e3576132e2612946565b5b600084013567ffffffffffffffff8111156133015761330061294b565b5b61330d86828701612cd0565b935050602061331e86828701612c52565b925050604061332f86828701612a32565b9150509250925092565b600080604083850312156133505761334f612946565b5b600061335e85828601612a32565b925050602061336f85828601612971565b9150509250929050565b60008060006060848603121561339257613391612946565b5b600084013567ffffffffffffffff8111156133b0576133af61294b565b5b6133bc86828701612cd0565b93505060206133cd86828701612c52565b925050604084013567ffffffffffffffff8111156133ee576133ed61294b565b5b6133fa86828701612cd0565b9150509250925092565b60006020820190506134196000830184613075565b92915050565b61342881612950565b82525050565b61343781612a09565b82525050565b613446816129b3565b82525050565b6134558161315a565b82525050565b60e082016000820151613471600085018261341f565b506020820151613484602085018261342e565b506040820151613497604085018261342e565b5060608201516134aa606085018261343d565b5060808201516134bd608085018261341f565b5060a08201516134d060a085018261344c565b5060c08201516134e360c0850182613216565b50505050565b600060e0820190506134fe600083018461345b565b92915050565b600082825260208201905092915050565b6000613520826131ea565b61352a8185613504565b935061353583613206565b8060005b8381101561356657815161354d8882613225565b97506135588361323d565b925050600181019050613539565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006135ab838361341f565b60208301905092915050565b6000602082019050919050565b60006135cf82613573565b6135d9818561357e565b93506135e48361358f565b8060005b838110156136155781516135fc888261359f565b9750613607836135b7565b9250506001810190506135e8565b5085935050505092915050565b60006101808301600083015161363b600086018261341f565b50602083015161364e602086018261341f565b506040830151613661604086018261341f565b506060830151613674606086018261343d565b506080830151848203608086015261368c8282613515565b91505060a08301516136a160a0860182613216565b5060c083015184820360c08601526136b98282613515565b91505060e08301516136ce60e0860182613216565b506101008301518482036101008601526136e882826135c4565b9150506101208301516136ff610120860182613216565b5061014083015184820361014086015261371982826135c4565b915050610160830151613730610160860182613216565b508091505092915050565b600060208201905081810360008301526137558184613622565b905092915050565b60006020820190506137726000830184612aec565b92915050565b60a08201600082015161378e600085018261341f565b5060208201516137a1602085018261342e565b5060408201516137b46040850182613216565b5060608201516137c7606085018261343d565b5060808201516137da608085018261343d565b50505050565b600060a0820190506137f56000830184613778565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061386482612950565b915061386f83612950565b92508282019050808211156138875761388661382a565b5b92915050565b600061389882612ade565b915061ffff82036138ac576138ab61382a565b5b600182019050919050565b60006138c282612950565b91506138cd83612950565b92508282039050818111156138e5576138e461382a565b5b92915050565b60006138f682612950565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036139285761392761382a565b5b600182019050919050565b600061393e82612950565b915061394983612950565b925082820261395781612950565b9150828204841483151761396e5761396d61382a565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006139af82612950565b91506139ba83612950565b9250826139ca576139c9613975565b5b828204905092915050565b600082825260208201905092915050565b7f526f756e64206973206e6f74206f766572207965740000000000000000000000600082015250565b6000613a1c6015836139d5565b9150613a27826139e6565b602082019050919050565b60006020820190508181036000830152613a4b81613a0f565b9050919050565b7f57696e6e696e67206e756d6265727320616c7265616479207365740000000000600082015250565b6000613a88601b836139d5565b9150613a9382613a52565b602082019050919050565b60006020820190508181036000830152613ab781613a7b565b9050919050565b7f496e76616c69642073656e646572000000000000000000000000000000000000600082015250565b6000613af4600e836139d5565b9150613aff82613abe565b602082019050919050565b60006020820190508181036000830152613b2381613ae7565b9050919050565b7f526f756e64206973206f76657200000000000000000000000000000000000000600082015250565b6000613b60600d836139d5565b9150613b6b82613b2a565b602082019050919050565b60006020820190508181036000830152613b8f81613b53565b9050919050565b7f496e76616c6964206e756d6265727320636f756e740000000000000000000000600082015250565b6000613bcc6015836139d5565b9150613bd782613b96565b602082019050919050565b60006020820190508181036000830152613bfb81613bbf565b9050919050565b7f496e76616c6964206e756d626572730000000000000000000000000000000000600082015250565b6000613c38600f836139d5565b9150613c4382613c02565b602082019050919050565b60006020820190508181036000830152613c6781613c2b565b9050919050565b7f496e76616c696420706f776572206e756d626572000000000000000000000000600082015250565b6000613ca46014836139d5565b9150613caf82613c6e565b602082019050919050565b60006020820190508181036000830152613cd381613c97565b9050919050565b7f526566657272616c2063616e6e6f74206265207468652073616d65206173207460008201527f6865207061727469636970616e74000000000000000000000000000000000000602082015250565b6000613d36602e836139d5565b9150613d4182613cda565b604082019050919050565b60006020820190508181036000830152613d6581613d29565b9050919050565b600081519050613d7b8161295a565b92915050565b600060208284031215613d9757613d96612946565b5b6000613da584828501613d6c565b91505092915050565b6000604082019050613dc36000830185613075565b613dd06020830184612a74565b9392505050565b600081519050613de681612eea565b92915050565b600060208284031215613e0257613e01612946565b5b6000613e1084828501613dd7565b91505092915050565b600081519050919050565b600081905092915050565b60005b83811015613e4d578082015181840152602081019050613e32565b60008484015250505050565b6000613e6482613e19565b613e6e8185613e24565b9350613e7e818560208601613e2f565b80840191505092915050565b6000613e968284613e59565b91508190509291505056fea2646970667358221220735506dc6e08a72f44c4ad46bbfbcb2f1c6290909a99b22923762ac07e7a793264736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102115760003560e01c8063715018a611610125578063b56c12b4116100ad578063e278fe6f1161007c578063e278fe6f14610659578063e2e3083014610663578063e65b76a914610693578063efa3d531146106c3578063f2fde38b146106f357610211565b8063b56c12b4146105d3578063bbd1783a146105ef578063dd85ae5f146105f9578063df28f24b1461062957610211565b80639b7be8fc116100f45780639b7be8fc146105075780639f8743f714610537578063af33d08f14610555578063b217be0514610585578063b288e1a9146105b557610211565b8063715018a6146104a757806382e58923146104b15780638da5cb5b146104cd578063998da3e9146104eb57610211565b80633590bd3c116101a857806350b447121161017757806350b44712146103d9578063598f3b9d1461040f578063627151671461043f578063659a8d861461045b5780636a65bcda1461048b57610211565b80633590bd3c1461032957806336324a5d146103455780633ed91226146103755780634e9eba1d146103a957610211565b806314eb76ac116101e457806314eb76ac146102b7578063266fbf90146102d35780632ed48515146102ef578063343f25661461031f57610211565b806308469cc61461021657806308bb71cd146102465780630cee803c14610276578063146ca53114610292575b600080fd5b610230600480360381019061022b9190612986565b61070f565b60405161023d91906129ce565b60405180910390f35b610260600480360381019061025b9190612a47565b610728565b60405161026d9190612a83565b60405180910390f35b610290600480360381019061028b9190612a9e565b610740565b005b61029a6107df565b6040516102ae989796959493929190612afb565b60405180910390f35b6102d160048036038101906102cc9190612a47565b61085a565b005b6102ed60048036038101906102e89190612cfe565b6108a6565b005b61030960048036038101906103049190612a9e565b610efb565b6040516103169190612a83565b60405180910390f35b610327610f1e565b005b610343600480360381019061033e9190612ffd565b610fb2565b005b61035f600480360381019061035a9190612986565b611182565b60405161036c91906129ce565b60405180910390f35b61038f600480360381019061038a9190612986565b61119b565b6040516103a0959493929190613084565b60405180910390f35b6103c360048036038101906103be91906130d7565b611229565b6040516103d09190612a83565b60405180910390f35b6103f360048036038101906103ee9190612986565b611241565b604051610406979695949392919061317b565b60405180910390f35b61042960048036038101906104249190612986565b6112fb565b60405161043691906132a8565b60405180910390f35b610459600480360381019061045491906132ca565b61138e565b005b61047560048036038101906104709190613339565b6115ce565b6040516104829190612a83565b60405180910390f35b6104a560048036038101906104a09190613379565b6115ff565b005b6104af611681565b005b6104cb60048036038101906104c69190612a9e565b611695565b005b6104d5611744565b6040516104e29190613404565b60405180910390f35b61050560048036038101906105009190612a47565b61176d565b005b610521600480360381019061051c9190612986565b61182e565b60405161052e91906134e9565b60405180910390f35b61053f6119a0565b60405161054c919061373b565b60405180910390f35b61056f600480360381019061056a9190612986565b611c24565b60405161057c9190612a83565b60405180910390f35b61059f600480360381019061059a9190612a9e565b611c39565b6040516105ac919061375d565b60405180910390f35b6105bd611c80565b6040516105ca9190613404565b60405180910390f35b6105ed60048036038101906105e89190612986565b611ca6565b005b6105f7612037565b005b610613600480360381019061060e9190612986565b6120b4565b60405161062091906137e0565b60405180910390f35b610643600480360381019061063e9190612a47565b6121a6565b6040516106509190612a83565b60405180910390f35b6106616121be565b005b61067d600480360381019061067891906130d7565b61222d565b60405161068a9190612a83565b60405180910390f35b6106ad60048036038101906106a89190613339565b612245565b6040516106ba9190612a83565b60405180910390f35b6106dd60048036038101906106d891906130d7565b612276565b6040516106ea9190612a83565b60405180910390f35b61070d60048036038101906107089190612a47565b61228e565b005b60008082118015610721575060458211155b9050919050565b60146020528060005260406000206000915090505481565b610748612314565b60006012838154811061075e5761075d6137fb565b5b9060005260206000209060020201905060018160010160176101000a81548160ff02191690831515021790555081601660006007600a8111156107a4576107a3613104565b5b600a8111156107b6576107b5613104565b5b815260200190815260200160002060008282546107d39190613859565b92505081905550505050565b60028060000154908060010154908060020154908060030160009054906101000a900460ff16908060050160009054906101000a900461ffff16908060070160009054906101000a900461ffff16908060090160009054906101000a900461ffff169080600b0160009054906101000a900461ffff16905088565b610862612314565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6108ae612314565b6108b983838361138e565b6000600e805490509050600e6040518060e001604052808381526020013273ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020016000151581526020018781526020016000600a81111561093157610930613104565b5b81526020018561ffff1681525090806001815401808255809150506001900390600052602060002090600502016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548160ff0219169083151502179055506080820151816003015560a08201518160040160006101000a81548160ff0219169083600a811115610a5457610a53613104565b5b021790555060c08201518160040160016101000a81548161ffff021916908361ffff160217905550505060005b8451811015610b0c57600f6000838152602001908152602001600020858281518110610ab057610aaf6137fb565b5b602002602001015190806001815401808255809150506001900390600052602060002090601091828204019190066002029091909190916101000a81548161ffff021916908361ffff1602179055508080600101915050610a81565b5060026008018190806001815401808255809150506001900390600052602060002001600090919091909150556002600901600081819054906101000a900461ffff1680929190610b5c9061388d565b91906101000a81548161ffff021916908361ffff16021790555050601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001600e80549050610bc891906138b7565b9080600181540180825580915050600190039060005260206000200160009091909190915055601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610c3e906138eb565b9190505550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610ef457600060128054905090506002600a018190806001815401808255809150506001900390600052602060002001600090919091909150556002600b01600081819054906101000a900461ffff1680929190610cd09061388d565b91906101000a81548161ffff021916908361ffff1602179055505060126040518060a001604052808381526020018573ffffffffffffffffffffffffffffffffffffffff1681526020016002600b0160009054906101000a900461ffff1661ffff1681526020016000151581526020016000151581525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548161ffff021916908361ffff16021790555060608201518160010160166101000a81548160ff02191690831515021790555060808201518160010160176101000a81548160ff0219169083151502179055505050601360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001601280549050610e7791906138b7565b9080600181540180825580915050600190039060005260206000200160009091909190915055601460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610eed906138eb565b9190505550505b5050505050565b60006127108284610f0c9190613933565b610f1691906139a4565b905092915050565b6002800154421015610f65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5c90613a32565b60405180910390fd5b600060026004018054905014610fb0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fa790613a9e565b60405180910390fd5b565b610fba612314565b60005b825181101561109f576000838281518110610fdb57610fda6137fb565b5b602002602001015190506000600e826000015181548110610fff57610ffe6137fb565b5b9060005260206000209060050201905081602001518160040160006101000a81548160ff0219169083600a81111561103a57611039613104565b5b0217905550601760008360200151600a81111561105a57611059613104565b5b600a81111561106c5761106b613104565b5b8152602001908152602001600020600081548092919061108b906138eb565b919050555050508080600101915050610fbd565b5060005b815181101561117d5760008282815181106110c1576110c06137fb565b5b60200260200101519050600060128260000151815481106110e5576110e46137fb565b5b9060005260206000209060020201905081602001518160010160166101000a81548160ff02191690831515021790555081602001511561116e57601760006007600a81111561113757611136613104565b5b600a81111561114957611148613104565b5b81526020019081526020016000206000815480929190611168906138eb565b91905055505b505080806001019150506110a3565b505050565b600080821180156111945750601a8211155b9050919050565b601281815481106111ab57600080fd5b90600052602060002090600202016000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900461ffff16908060010160169054906101000a900460ff16908060010160179054906101000a900460ff16905085565b60166020528060005260406000206000915090505481565b600e818154811061125157600080fd5b90600052602060002090600502016000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160149054906101000a900460ff16908060030154908060040160009054906101000a900460ff16908060040160019054906101000a900461ffff16905087565b6060600f600083815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561138257602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116113495790505b50505050509050919050565b611396612314565b600073ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1603611405576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113fc90613b0a565b60405180910390fd5b6002800154421061144b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144290613b76565b60405180910390fd5b600583511461148f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148690613be2565b60405180910390fd5b60005b835181101561150e576114c28482815181106114b1576114b06137fb565b5b602002602001015161ffff1661070f565b611501576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f890613c4e565b60405180910390fd5b8080600101915050611492565b5061151c8261ffff16611182565b61155b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155290613cba565b60405180910390fd5b3273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036115c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c090613d4c565b60405180910390fd5b505050565b601360205281600052604060002081815481106115ea57600080fd5b90600052602060002001600091509150505481565b611607612314565b8260026004019080519060200190611620929190612734565b5081600260050160006101000a81548161ffff021916908361ffff160217905550806002600601908051906020019061165a929190612734565b508051600260070160006101000a81548161ffff021916908361ffff160217905550505050565b611689612314565b611693600061239b565b565b61169d612314565b6000600e83815481106116b3576116b26137fb565b5b9060005260206000209060050201905060018160020160146101000a81548160ff02191690831515021790555081601660008360040160009054906101000a900460ff16600a81111561170957611708613104565b5b600a81111561171b5761171a613104565b5b815260200190815260200160002060008282546117389190613859565b92505081905550505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611775612314565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016117b09190613404565b602060405180830381865afa1580156117cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f19190613d81565b9050600081111561182a5761182982600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168361245f565b5b5050565b6118366127de565b600e828154811061184a576118496137fb565b5b90600052602060002090600502016040518060e0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900460ff16151515158152602001600382015481526020016004820160009054906101000a900460ff16600a81111561196357611962613104565b5b600a81111561197557611974613104565b5b81526020016004820160019054906101000a900461ffff1661ffff1661ffff16815250509050919050565b6119a861285f565b6002604051806101800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff1615151515815260200160048201805480602002602001604051908101604052809291908181526020018280548015611a6657602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411611a2d5790505b505050505081526020016005820160009054906101000a900461ffff1661ffff1661ffff16815260200160068201805480602002602001604051908101604052809291908181526020018280548015611b0657602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411611acd5790505b505050505081526020016007820160009054906101000a900461ffff1661ffff1661ffff16815260200160088201805480602002602001604051908101604052809291908181526020018280548015611b7e57602002820191906000526020600020905b815481526020019060010190808311611b6a575b505050505081526020016009820160009054906101000a900461ffff1661ffff1661ffff168152602001600a8201805480602002602001604051908101604052809291908181526020018280548015611bf657602002820191906000526020600020905b815481526020019060010190808311611be2575b50505050508152602001600b820160009054906101000a900461ffff1661ffff1661ffff1681525050905090565b6000611c3282611388610efb565b9050919050565b600f6020528160005260406000208181548110611c5557600080fd5b9060005260206000209060109182820401919006600202915091509054906101000a900461ffff1681565b601860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611cae612314565b6000611cbc82611b58610efb565b9050611cca81610dac610efb565b601560006001600a811115611ce257611ce1613104565b5b600a811115611cf457611cf3613104565b5b81526020019081526020016000206000828254611d119190613859565b92505081905550611d24816105dc610efb565b601560006002600a811115611d3c57611d3b613104565b5b600a811115611d4e57611d4d613104565b5b81526020019081526020016000206000828254611d6b9190613859565b92505081905550611d7e816103e8610efb565b601560006003600a811115611d9657611d95613104565b5b600a811115611da857611da7613104565b5b81526020019081526020016000206000828254611dc59190613859565b92505081905550611dd8816102bc610efb565b601560006004600a811115611df057611def613104565b5b600a811115611e0257611e01613104565b5b81526020019081526020016000206000828254611e1f9190613859565b92505081905550611e32816101f4610efb565b601560006005600a811115611e4a57611e49613104565b5b600a811115611e5c57611e5b613104565b5b81526020019081526020016000206000828254611e799190613859565b92505081905550611e8c8161012c610efb565b601560006006600a811115611ea457611ea3613104565b5b600a811115611eb657611eb5613104565b5b81526020019081526020016000206000828254611ed39190613859565b9250508190555080601560006008600a811115611ef357611ef2613104565b5b600a811115611f0557611f04613104565b5b81526020019081526020016000206000828254611f229190613859565b92505081905550611f35826105dc610efb565b601560006007600a811115611f4d57611f4c613104565b5b600a811115611f5f57611f5e613104565b5b81526020019081526020016000206000828254611f7c9190613859565b92505081905550611f8f826103e8610efb565b601560006009600a811115611fa757611fa6613104565b5b600a811115611fb957611fb8613104565b5b81526020019081526020016000206000828254611fd69190613859565b92505081905550611fe682611c24565b60156000600a80811115611ffd57611ffc613104565b5b600a81111561200f5761200e613104565b5b8152602001908152602001600020600082825461202c9190613859565b925050819055505050565b61203f612314565b60004711156120b257600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156120b0573d6000803e3d6000fd5b505b565b6120bc6128d2565b601282815481106120d0576120cf6137fb565b5b90600052602060002090600202016040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900461ffff1661ffff1661ffff1681526020016001820160169054906101000a900460ff161515151581526020016001820160179054906101000a900460ff1615151515815250509050919050565b60116020528060005260406000206000915090505481565b6121c6612314565b600280015442101561220d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161220490613a32565b60405180910390fd5b6001600260030160006101000a81548160ff021916908315150217905550565b60156020528060005260406000206000915090505481565b6010602052816000526040600020818154811061226157600080fd5b90600052602060002001600091509150505481565b60176020528060005260406000206000915090505481565b612296612314565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036123085760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016122ff9190613404565b60405180910390fd5b6123118161239b565b50565b61231c6124de565b73ffffffffffffffffffffffffffffffffffffffff1661233a611744565b73ffffffffffffffffffffffffffffffffffffffff16146123995761235d6124de565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016123909190613404565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6124d9838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401612492929190613dae565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506124e6565b505050565b600033905090565b6000612511828473ffffffffffffffffffffffffffffffffffffffff1661257d90919063ffffffff16565b905060008151141580156125365750808060200190518101906125349190613dec565b155b1561257857826040517f5274afe700000000000000000000000000000000000000000000000000000000815260040161256f9190613404565b60405180910390fd5b505050565b606061258b83836000612593565b905092915050565b6060814710156125da57306040517fcd7860590000000000000000000000000000000000000000000000000000000081526004016125d19190613404565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1684866040516126039190613e8a565b60006040518083038185875af1925050503d8060008114612640576040519150601f19603f3d011682016040523d82523d6000602084013e612645565b606091505b5091509150612655868383612660565b925050509392505050565b60608261267557612670826126ef565b6126e7565b6000825114801561269d575060008473ffffffffffffffffffffffffffffffffffffffff163b145b156126df57836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016126d69190613404565b60405180910390fd5b8190506126e8565b5b9392505050565b6000815111156127025780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82805482825590600052602060002090600f016010900481019282156127cd5791602002820160005b8382111561279d57835183826101000a81548161ffff021916908361ffff160217905550926020019260020160208160010104928301926001030261275d565b80156127cb5782816101000a81549061ffff021916905560020160208160010104928301926001030261279d565b505b5090506127da919061291f565b5090565b6040518060e0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001600081526020016000600a81111561284e5761284d613104565b5b8152602001600061ffff1681525090565b60405180610180016040528060008152602001600081526020016000815260200160001515815260200160608152602001600061ffff16815260200160608152602001600061ffff16815260200160608152602001600061ffff16815260200160608152602001600061ffff1681525090565b6040518060a0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600061ffff1681526020016000151581526020016000151581525090565b5b80821115612938576000816000905550600101612920565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61296381612950565b811461296e57600080fd5b50565b6000813590506129808161295a565b92915050565b60006020828403121561299c5761299b612946565b5b60006129aa84828501612971565b91505092915050565b60008115159050919050565b6129c8816129b3565b82525050565b60006020820190506129e360008301846129bf565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612a14826129e9565b9050919050565b612a2481612a09565b8114612a2f57600080fd5b50565b600081359050612a4181612a1b565b92915050565b600060208284031215612a5d57612a5c612946565b5b6000612a6b84828501612a32565b91505092915050565b612a7d81612950565b82525050565b6000602082019050612a986000830184612a74565b92915050565b60008060408385031215612ab557612ab4612946565b5b6000612ac385828601612971565b9250506020612ad485828601612971565b9150509250929050565b600061ffff82169050919050565b612af581612ade565b82525050565b600061010082019050612b11600083018b612a74565b612b1e602083018a612a74565b612b2b6040830189612a74565b612b3860608301886129bf565b612b456080830187612aec565b612b5260a0830186612aec565b612b5f60c0830185612aec565b612b6c60e0830184612aec565b9998505050505050505050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612bc782612b7e565b810181811067ffffffffffffffff82111715612be657612be5612b8f565b5b80604052505050565b6000612bf961293c565b9050612c058282612bbe565b919050565b600067ffffffffffffffff821115612c2557612c24612b8f565b5b602082029050602081019050919050565b600080fd5b612c4481612ade565b8114612c4f57600080fd5b50565b600081359050612c6181612c3b565b92915050565b6000612c7a612c7584612c0a565b612bef565b90508083825260208201905060208402830185811115612c9d57612c9c612c36565b5b835b81811015612cc65780612cb28882612c52565b845260208401935050602081019050612c9f565b5050509392505050565b600082601f830112612ce557612ce4612b79565b5b8135612cf5848260208601612c67565b91505092915050565b60008060008060808587031215612d1857612d17612946565b5b6000612d2687828801612971565b945050602085013567ffffffffffffffff811115612d4757612d4661294b565b5b612d5387828801612cd0565b9350506040612d6487828801612c52565b9250506060612d7587828801612a32565b91505092959194509250565b600067ffffffffffffffff821115612d9c57612d9b612b8f565b5b602082029050602081019050919050565b600080fd5b600b8110612dbf57600080fd5b50565b600081359050612dd181612db2565b92915050565b600060408284031215612ded57612dec612dad565b5b612df76040612bef565b90506000612e0784828501612971565b6000830152506020612e1b84828501612dc2565b60208301525092915050565b6000612e3a612e3584612d81565b612bef565b90508083825260208201905060408402830185811115612e5d57612e5c612c36565b5b835b81811015612e865780612e728882612dd7565b845260208401935050604081019050612e5f565b5050509392505050565b600082601f830112612ea557612ea4612b79565b5b8135612eb5848260208601612e27565b91505092915050565b600067ffffffffffffffff821115612ed957612ed8612b8f565b5b602082029050602081019050919050565b612ef3816129b3565b8114612efe57600080fd5b50565b600081359050612f1081612eea565b92915050565b600060408284031215612f2c57612f2b612dad565b5b612f366040612bef565b90506000612f4684828501612971565b6000830152506020612f5a84828501612f01565b60208301525092915050565b6000612f79612f7484612ebe565b612bef565b90508083825260208201905060408402830185811115612f9c57612f9b612c36565b5b835b81811015612fc55780612fb18882612f16565b845260208401935050604081019050612f9e565b5050509392505050565b600082601f830112612fe457612fe3612b79565b5b8135612ff4848260208601612f66565b91505092915050565b6000806040838503121561301457613013612946565b5b600083013567ffffffffffffffff8111156130325761303161294b565b5b61303e85828601612e90565b925050602083013567ffffffffffffffff81111561305f5761305e61294b565b5b61306b85828601612fcf565b9150509250929050565b61307e81612a09565b82525050565b600060a0820190506130996000830188612a74565b6130a66020830187613075565b6130b36040830186612aec565b6130c060608301856129bf565b6130cd60808301846129bf565b9695505050505050565b6000602082840312156130ed576130ec612946565b5b60006130fb84828501612dc2565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600b811061314457613143613104565b5b50565b600081905061315582613133565b919050565b600061316582613147565b9050919050565b6131758161315a565b82525050565b600060e082019050613190600083018a612a74565b61319d6020830189613075565b6131aa6040830188613075565b6131b760608301876129bf565b6131c46080830186612a74565b6131d160a083018561316c565b6131de60c0830184612aec565b98975050505050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61321f81612ade565b82525050565b60006132318383613216565b60208301905092915050565b6000602082019050919050565b6000613255826131ea565b61325f81856131f5565b935061326a83613206565b8060005b8381101561329b5781516132828882613225565b975061328d8361323d565b92505060018101905061326e565b5085935050505092915050565b600060208201905081810360008301526132c2818461324a565b905092915050565b6000806000606084860312156132e3576132e2612946565b5b600084013567ffffffffffffffff8111156133015761330061294b565b5b61330d86828701612cd0565b935050602061331e86828701612c52565b925050604061332f86828701612a32565b9150509250925092565b600080604083850312156133505761334f612946565b5b600061335e85828601612a32565b925050602061336f85828601612971565b9150509250929050565b60008060006060848603121561339257613391612946565b5b600084013567ffffffffffffffff8111156133b0576133af61294b565b5b6133bc86828701612cd0565b93505060206133cd86828701612c52565b925050604084013567ffffffffffffffff8111156133ee576133ed61294b565b5b6133fa86828701612cd0565b9150509250925092565b60006020820190506134196000830184613075565b92915050565b61342881612950565b82525050565b61343781612a09565b82525050565b613446816129b3565b82525050565b6134558161315a565b82525050565b60e082016000820151613471600085018261341f565b506020820151613484602085018261342e565b506040820151613497604085018261342e565b5060608201516134aa606085018261343d565b5060808201516134bd608085018261341f565b5060a08201516134d060a085018261344c565b5060c08201516134e360c0850182613216565b50505050565b600060e0820190506134fe600083018461345b565b92915050565b600082825260208201905092915050565b6000613520826131ea565b61352a8185613504565b935061353583613206565b8060005b8381101561356657815161354d8882613225565b97506135588361323d565b925050600181019050613539565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006135ab838361341f565b60208301905092915050565b6000602082019050919050565b60006135cf82613573565b6135d9818561357e565b93506135e48361358f565b8060005b838110156136155781516135fc888261359f565b9750613607836135b7565b9250506001810190506135e8565b5085935050505092915050565b60006101808301600083015161363b600086018261341f565b50602083015161364e602086018261341f565b506040830151613661604086018261341f565b506060830151613674606086018261343d565b506080830151848203608086015261368c8282613515565b91505060a08301516136a160a0860182613216565b5060c083015184820360c08601526136b98282613515565b91505060e08301516136ce60e0860182613216565b506101008301518482036101008601526136e882826135c4565b9150506101208301516136ff610120860182613216565b5061014083015184820361014086015261371982826135c4565b915050610160830151613730610160860182613216565b508091505092915050565b600060208201905081810360008301526137558184613622565b905092915050565b60006020820190506137726000830184612aec565b92915050565b60a08201600082015161378e600085018261341f565b5060208201516137a1602085018261342e565b5060408201516137b46040850182613216565b5060608201516137c7606085018261343d565b5060808201516137da608085018261343d565b50505050565b600060a0820190506137f56000830184613778565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061386482612950565b915061386f83612950565b92508282019050808211156138875761388661382a565b5b92915050565b600061389882612ade565b915061ffff82036138ac576138ab61382a565b5b600182019050919050565b60006138c282612950565b91506138cd83612950565b92508282039050818111156138e5576138e461382a565b5b92915050565b60006138f682612950565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036139285761392761382a565b5b600182019050919050565b600061393e82612950565b915061394983612950565b925082820261395781612950565b9150828204841483151761396e5761396d61382a565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006139af82612950565b91506139ba83612950565b9250826139ca576139c9613975565b5b828204905092915050565b600082825260208201905092915050565b7f526f756e64206973206e6f74206f766572207965740000000000000000000000600082015250565b6000613a1c6015836139d5565b9150613a27826139e6565b602082019050919050565b60006020820190508181036000830152613a4b81613a0f565b9050919050565b7f57696e6e696e67206e756d6265727320616c7265616479207365740000000000600082015250565b6000613a88601b836139d5565b9150613a9382613a52565b602082019050919050565b60006020820190508181036000830152613ab781613a7b565b9050919050565b7f496e76616c69642073656e646572000000000000000000000000000000000000600082015250565b6000613af4600e836139d5565b9150613aff82613abe565b602082019050919050565b60006020820190508181036000830152613b2381613ae7565b9050919050565b7f526f756e64206973206f76657200000000000000000000000000000000000000600082015250565b6000613b60600d836139d5565b9150613b6b82613b2a565b602082019050919050565b60006020820190508181036000830152613b8f81613b53565b9050919050565b7f496e76616c6964206e756d6265727320636f756e740000000000000000000000600082015250565b6000613bcc6015836139d5565b9150613bd782613b96565b602082019050919050565b60006020820190508181036000830152613bfb81613bbf565b9050919050565b7f496e76616c6964206e756d626572730000000000000000000000000000000000600082015250565b6000613c38600f836139d5565b9150613c4382613c02565b602082019050919050565b60006020820190508181036000830152613c6781613c2b565b9050919050565b7f496e76616c696420706f776572206e756d626572000000000000000000000000600082015250565b6000613ca46014836139d5565b9150613caf82613c6e565b602082019050919050565b60006020820190508181036000830152613cd381613c97565b9050919050565b7f526566657272616c2063616e6e6f74206265207468652073616d65206173207460008201527f6865207061727469636970616e74000000000000000000000000000000000000602082015250565b6000613d36602e836139d5565b9150613d4182613cda565b604082019050919050565b60006020820190508181036000830152613d6581613d29565b9050919050565b600081519050613d7b8161295a565b92915050565b600060208284031215613d9757613d96612946565b5b6000613da584828501613d6c565b91505092915050565b6000604082019050613dc36000830185613075565b613dd06020830184612a74565b9392505050565b600081519050613de681612eea565b92915050565b600060208284031215613e0257613e01612946565b5b6000613e1084828501613dd7565b91505092915050565b600081519050919050565b600081905092915050565b60005b83811015613e4d578082015181840152602081019050613e32565b60008484015250505050565b6000613e6482613e19565b613e6e8185613e24565b9350613e7e818560208601613e2f565b80840191505092915050565b6000613e968284613e59565b91508190509291505056fea2646970667358221220735506dc6e08a72f44c4ad46bbfbcb2f1c6290909a99b22923762ac07e7a793264736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/LotteryRound.sol:LotteryRound",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3979,
        "contract": "contracts/LotteryRound.sol:LotteryRound",
        "label": "teamAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2962,
        "contract": "contracts/LotteryRound.sol:LotteryRound",
        "label": "round",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Round)935_storage"
      },
      {
        "astId": 2975,
        "contract": "contracts/LotteryRound.sol:LotteryRound",
        "label": "tickets",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_struct(Ticket)951_storage)dyn_storage"
      },
      {
        "astId": 2993,
        "contract": "contracts/LotteryRound.sol:LotteryRound",
        "label": "ticketNumbers",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_array(t_uint16)dyn_storage)"
      },
      {
        "astId": 3011,
        "contract": "contracts/LotteryRound.sol:LotteryRound",
        "label": "roundTicketsByAddress",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3015,
        "contract": "contracts/LotteryRound.sol:LotteryRound",
        "label": "roundTicketsByAddressCount",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3019,
        "contract": "contracts/LotteryRound.sol:LotteryRound",
        "label": "referralTickets",
        "offset": 0,
        "slot": "18",
        "type": "t_array(t_struct(ReferralTicket)968_storage)dyn_storage"
      },
      {
        "astId": 3037,
        "contract": "contracts/LotteryRound.sol:LotteryRound",
        "label": "roundReferralTicketsByAddress",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3041,
        "contract": "contracts/LotteryRound.sol:LotteryRound",
        "label": "roundReferralTicketsByAddressCount",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3046,
        "contract": "contracts/LotteryRound.sol:LotteryRound",
        "label": "victoryTierAmounts",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_enum(RoundVictoryTier)906,t_uint256)"
      },
      {
        "astId": 3051,
        "contract": "contracts/LotteryRound.sol:LotteryRound",
        "label": "victoryTierAmountsClaimed",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_enum(RoundVictoryTier)906,t_uint256)"
      },
      {
        "astId": 3056,
        "contract": "contracts/LotteryRound.sol:LotteryRound",
        "label": "winnersForEachTier",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_enum(RoundVictoryTier)906,t_uint256)"
      },
      {
        "astId": 3058,
        "contract": "contracts/LotteryRound.sol:LotteryRound",
        "label": "previousRound",
        "offset": 0,
        "slot": "24",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(ReferralTicket)968_storage)dyn_storage": {
        "base": "t_struct(ReferralTicket)968_storage",
        "encoding": "dynamic_array",
        "label": "struct ReferralTicket[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Ticket)951_storage)dyn_storage": {
        "base": "t_struct(Ticket)951_storage",
        "encoding": "dynamic_array",
        "label": "struct Ticket[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint16)dyn_storage": {
        "base": "t_uint16",
        "encoding": "dynamic_array",
        "label": "uint16[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(RoundVictoryTier)906": {
        "encoding": "inplace",
        "label": "enum RoundVictoryTier",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(RoundVictoryTier)906,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(RoundVictoryTier)906",
        "label": "mapping(enum RoundVictoryTier => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_uint16)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint16[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint16)dyn_storage"
      },
      "t_struct(ReferralTicket)968_storage": {
        "encoding": "inplace",
        "label": "struct ReferralTicket",
        "members": [
          {
            "astId": 959,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 961,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "referralAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 963,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "referralTicketNumber",
            "offset": 20,
            "slot": "1",
            "type": "t_uint16"
          },
          {
            "astId": 965,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "winner",
            "offset": 22,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 967,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "claimed",
            "offset": 23,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Round)935_storage": {
        "encoding": "inplace",
        "label": "struct Round",
        "members": [
          {
            "astId": 908,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 910,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "startTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 912,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "endTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 914,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "ended",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 917,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "roundNumbers",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint16)dyn_storage"
          },
          {
            "astId": 919,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "powerNumber",
            "offset": 0,
            "slot": "5",
            "type": "t_uint16"
          },
          {
            "astId": 922,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "referralWinnersNumber",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_uint16)dyn_storage"
          },
          {
            "astId": 924,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "referralWinnersNumberCount",
            "offset": 0,
            "slot": "7",
            "type": "t_uint16"
          },
          {
            "astId": 927,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "ticketIds",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 929,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "ticketsCount",
            "offset": 0,
            "slot": "9",
            "type": "t_uint16"
          },
          {
            "astId": 932,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "referralTicketIds",
            "offset": 0,
            "slot": "10",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 934,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "referralCounts",
            "offset": 0,
            "slot": "11",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(Ticket)951_storage": {
        "encoding": "inplace",
        "label": "struct Ticket",
        "members": [
          {
            "astId": 937,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 939,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "participantAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 941,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "referralAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 943,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "claimed",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 945,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "chainId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 948,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "victoryTier",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(RoundVictoryTier)906"
          },
          {
            "astId": 950,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "powerNumber",
            "offset": 1,
            "slot": "4",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}