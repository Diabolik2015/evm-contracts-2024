{
  "address": "0xF297593C33F399Ea61De45D9e98b16F567596B42",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "previousRoundAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "roundDurationInSeconds",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint16[]",
          "name": "chosenNumbers",
          "type": "uint16[]"
        },
        {
          "internalType": "uint16",
          "name": "powerNumber",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "referral",
          "type": "address"
        }
      ],
      "name": "buyTicket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeRound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "couldReceiveWinningNumbers",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRound",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "ended",
              "type": "bool"
            },
            {
              "internalType": "uint16[]",
              "name": "roundNumbers",
              "type": "uint16[]"
            },
            {
              "internalType": "uint16",
              "name": "powerNumber",
              "type": "uint16"
            },
            {
              "internalType": "uint16[]",
              "name": "referralWinnersNumber",
              "type": "uint16[]"
            },
            {
              "internalType": "uint16",
              "name": "referralWinnersNumberCount",
              "type": "uint16"
            },
            {
              "internalType": "uint256[]",
              "name": "ticketIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint16",
              "name": "ticketsCount",
              "type": "uint16"
            },
            {
              "internalType": "uint256[]",
              "name": "referralTicketIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint16",
              "name": "referralCounts",
              "type": "uint16"
            }
          ],
          "internalType": "struct Round",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "referralTicketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountClaimed",
          "type": "uint256"
        }
      ],
      "name": "markReferralVictoryClaimed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountClaimed",
          "type": "uint256"
        }
      ],
      "name": "markVictoryClaimed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "ticketId",
              "type": "uint256"
            },
            {
              "internalType": "enum RoundVictoryTier",
              "name": "victoryTier",
              "type": "uint8"
            }
          ],
          "internalType": "struct TicketResults[]",
          "name": "ticketResults",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "referralTicketId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "won",
              "type": "bool"
            }
          ],
          "internalType": "struct ReferralTicketResults[]",
          "name": "referralTicketResults",
          "type": "tuple[]"
        }
      ],
      "name": "markWinners",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        }
      ],
      "name": "numberIsInRangeForPowerNumber",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        }
      ],
      "name": "numberIsInRangeForRound",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketId",
          "type": "uint256"
        }
      ],
      "name": "numbersForTicketId",
      "outputs": [
        {
          "internalType": "uint16[]",
          "name": "",
          "type": "uint16[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "basisPoint",
          "type": "uint256"
        }
      ],
      "name": "percentageInBasisPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolPercentagesBasePoints",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "previousRound",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "referralTicketById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "referralAddress",
              "type": "address"
            },
            {
              "internalType": "uint16",
              "name": "referralTicketNumber",
              "type": "uint16"
            },
            {
              "internalType": "bool",
              "name": "winner",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "claimed",
              "type": "bool"
            }
          ],
          "internalType": "struct ReferralTicket",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "referralTickets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "referralAddress",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "referralTicketNumber",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "winner",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "claimed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "round",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "ended",
          "type": "bool"
        },
        {
          "internalType": "uint16",
          "name": "powerNumber",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "referralWinnersNumberCount",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "ticketsCount",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "referralCounts",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roundReferralTicketsByAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "roundReferralTicketsByAddressCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roundTicketsByAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "roundTicketsByAddressCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendCryptoToTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "sendTokenToTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "_poolPercentagesBasePoints",
          "type": "uint16[]"
        }
      ],
      "name": "setPoolPercentagesBasePoints",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "roundNumbers",
          "type": "uint16[]"
        },
        {
          "internalType": "uint16",
          "name": "powerNumber",
          "type": "uint16"
        },
        {
          "internalType": "uint16[]",
          "name": "referralWinnersNumber",
          "type": "uint16[]"
        }
      ],
      "name": "storeWinningNumbers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ticketId",
          "type": "uint256"
        }
      ],
      "name": "ticketById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "participantAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "referralAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "claimed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "enum RoundVictoryTier",
              "name": "victoryTier",
              "type": "uint8"
            },
            {
              "internalType": "uint16",
              "name": "powerNumber",
              "type": "uint16"
            }
          ],
          "internalType": "struct Ticket",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "ticketNumbers",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tickets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "participantAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "referralAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "claimed",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "enum RoundVictoryTier",
          "name": "victoryTier",
          "type": "uint8"
        },
        {
          "internalType": "uint16",
          "name": "powerNumber",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "paymentTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "treasuryAmountOnTicket",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_teamAddress",
          "type": "address"
        }
      ],
      "name": "updateTeamAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "paymentTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "updateVictoryPoolForTicket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "numbers",
          "type": "uint16[]"
        },
        {
          "internalType": "uint16",
          "name": "powerNumber",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "referral",
          "type": "address"
        }
      ],
      "name": "validateBuyTicket",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum RoundVictoryTier",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "victoryTierAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum RoundVictoryTier",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "victoryTierAmountsClaimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum RoundVictoryTier",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "winnersForEachTier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdb71f31a0373215a45b1dda3b26e23c37acd1585b9f28309edc67cfb3aef5a9f",
  "receipt": {
    "to": null,
    "from": "0x4eCa23Ffd5710970E22558C484a0D6943dA5eAa5",
    "contractAddress": "0xF297593C33F399Ea61De45D9e98b16F567596B42",
    "transactionIndex": 0,
    "gasUsed": "4001887",
    "logsBloom": "0x
    "blockHash": "0xc89546034523f45cced4e7603eb1e3769758bad01e46675a21228caad287a23e",
    "transactionHash": "0xdb71f31a0373215a45b1dda3b26e23c37acd1585b9f28309edc67cfb3aef5a9f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 32416006,
        "transactionHash": "0xdb71f31a0373215a45b1dda3b26e23c37acd1585b9f28309edc67cfb3aef5a9f",
        "address": "0xF297593C33F399Ea61De45D9e98b16F567596B42",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004eca23ffd5710970e22558c484a0d6943da5eaa5"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc89546034523f45cced4e7603eb1e3769758bad01e46675a21228caad287a23e"
      }
    ],
    "blockNumber": 32416006,
    "cumulativeGasUsed": "4001887",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000000",
    432000
  ],
  "numDeployments": 2,
  "solcInputHash": "6980f2ca75b827fc7320137b1dd0b9ab",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"previousRoundAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"roundDurationInSeconds\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint16[]\",\"name\":\"chosenNumbers\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16\",\"name\":\"powerNumber\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"buyTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeRound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"couldReceiveWinningNumbers\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRound\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"ended\",\"type\":\"bool\"},{\"internalType\":\"uint16[]\",\"name\":\"roundNumbers\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16\",\"name\":\"powerNumber\",\"type\":\"uint16\"},{\"internalType\":\"uint16[]\",\"name\":\"referralWinnersNumber\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16\",\"name\":\"referralWinnersNumberCount\",\"type\":\"uint16\"},{\"internalType\":\"uint256[]\",\"name\":\"ticketIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16\",\"name\":\"ticketsCount\",\"type\":\"uint16\"},{\"internalType\":\"uint256[]\",\"name\":\"referralTicketIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint16\",\"name\":\"referralCounts\",\"type\":\"uint16\"}],\"internalType\":\"struct Round\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"referralTicketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"name\":\"markReferralVictoryClaimed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountClaimed\",\"type\":\"uint256\"}],\"name\":\"markVictoryClaimed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"},{\"internalType\":\"enum RoundVictoryTier\",\"name\":\"victoryTier\",\"type\":\"uint8\"}],\"internalType\":\"struct TicketResults[]\",\"name\":\"ticketResults\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"referralTicketId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"won\",\"type\":\"bool\"}],\"internalType\":\"struct ReferralTicketResults[]\",\"name\":\"referralTicketResults\",\"type\":\"tuple[]\"}],\"name\":\"markWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"numberIsInRangeForPowerNumber\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"numberIsInRangeForRound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"}],\"name\":\"numbersForTicketId\",\"outputs\":[{\"internalType\":\"uint16[]\",\"name\":\"\",\"type\":\"uint16[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basisPoint\",\"type\":\"uint256\"}],\"name\":\"percentageInBasisPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolPercentagesBasePoints\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousRound\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"referralTicketById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referralAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"referralTicketNumber\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"winner\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"internalType\":\"struct ReferralTicket\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"referralTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referralAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"referralTicketNumber\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"winner\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"ended\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"powerNumber\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"referralWinnersNumberCount\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"ticketsCount\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"referralCounts\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundReferralTicketsByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"roundReferralTicketsByAddressCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roundTicketsByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"roundTicketsByAddressCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendCryptoToTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sendTokenToTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"_poolPercentagesBasePoints\",\"type\":\"uint16[]\"}],\"name\":\"setPoolPercentagesBasePoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"roundNumbers\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16\",\"name\":\"powerNumber\",\"type\":\"uint16\"},{\"internalType\":\"uint16[]\",\"name\":\"referralWinnersNumber\",\"type\":\"uint16[]\"}],\"name\":\"storeWinningNumbers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"}],\"name\":\"ticketById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"participantAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referralAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"enum RoundVictoryTier\",\"name\":\"victoryTier\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"powerNumber\",\"type\":\"uint16\"}],\"internalType\":\"struct Ticket\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ticketNumbers\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"participantAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referralAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"enum RoundVictoryTier\",\"name\":\"victoryTier\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"powerNumber\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paymentTokenAmount\",\"type\":\"uint256\"}],\"name\":\"treasuryAmountOnTicket\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teamAddress\",\"type\":\"address\"}],\"name\":\"updateTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paymentTokenAmount\",\"type\":\"uint256\"}],\"name\":\"updateVictoryPoolForTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"numbers\",\"type\":\"uint16[]\"},{\"internalType\":\"uint16\",\"name\":\"powerNumber\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"validateBuyTicket\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum RoundVictoryTier\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"victoryTierAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum RoundVictoryTier\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"victoryTierAmountsClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum RoundVictoryTier\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"winnersForEachTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LotteryRound.sol\":\"LotteryRound\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/CyclixRandomizerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface CyclixRandomizerInterface {\\n    function requestRandomWords(uint32 numWords) external returns (uint256 requestId);\\n    function getRequestStatus(uint256 _requestId) external view returns (bool fulfilled, uint256[] memory randomWords);\\n    function registerGameContract(address gameAddress, string calldata name) external;\\n    function getLastRequestIdForCaller() external view returns (uint256);\\n}\",\"keccak256\":\"0x066c0e37e0bd528ce42d23ee3b5815f550f44571c61f1be89a4b844f1d52f71f\",\"license\":\"MIT\"},\"contracts/LotteryCommon.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\n    enum RoundVictoryTier {\\n        NO_WIN,\\n        Tier5_1,\\n        Tier5,\\n        Tier4_1,\\n        Tier4,\\n        Tier3_1,\\n        Tier3,\\n        Referrer,\\n        PublicPool,\\n        TokenHolders,\\n        Treasury\\n    }\\n\\n    struct Round {\\n        uint256 id;\\n        uint256 startTime;\\n        uint256 endTime;\\n        bool ended;\\n        uint16[] roundNumbers;\\n        uint16 powerNumber;\\n        uint16[] referralWinnersNumber;\\n        uint16 referralWinnersNumberCount;\\n        uint256[] ticketIds;\\n        uint16 ticketsCount;\\n        uint256[] referralTicketIds;\\n        uint16 referralCounts;\\n    }\\n\\n    struct Ticket {\\n        uint256 id;\\n        address participantAddress;\\n        address referralAddress;\\n        bool claimed;\\n        uint256 chainId;\\n        RoundVictoryTier victoryTier;\\n        uint16 powerNumber;\\n    }\\n\\n    struct TicketResults {\\n        uint256 ticketId;\\n        RoundVictoryTier victoryTier;\\n    }\\n\\n    struct ReferralTicket {\\n        uint256 id;\\n        address referralAddress;\\n        uint16 referralTicketNumber;\\n        bool winner;\\n        bool claimed;\\n    }\\n\\n    struct ReferralTicketResults {\\n        uint256 referralTicketId;\\n        bool won;\\n    }\",\"keccak256\":\"0x4a30f56a4b0850bdc3cd7ea3d9d9254038a29ea61c3abc6bf7ab0e2024e44796\",\"license\":\"UNLICENSED\"},\"contracts/LotteryRound.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {TestFunctions} from \\\"./utils/TestUtils.sol\\\";\\nimport {CyclixRandomizerInterface} from \\\"./CyclixRandomizerInterface.sol\\\";\\nimport {EmergencyFunctions} from \\\"./utils/EmergencyFunctions.sol\\\";\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\n\\ncontract LotteryRound is EmergencyFunctions {\\n    Round public round;\\n    function getRound() public view returns (Round memory) {\\n        return round;\\n    }\\n\\n    Ticket[] public tickets;\\n    function ticketById(uint256 ticketId) public view returns (Ticket memory) {\\n        return tickets[ticketId];\\n    }\\n    mapping(uint256 => uint16[]) public ticketNumbers;\\n    function numbersForTicketId(uint256 ticketId) public view returns (uint16[] memory) {\\n        return ticketNumbers[ticketId];\\n    }\\n    mapping(address => uint256[]) public roundTicketsByAddress;\\n    mapping(address => uint256) public roundTicketsByAddressCount;\\n\\n    ReferralTicket[] public referralTickets;\\n    function referralTicketById(uint256 index) public view returns (ReferralTicket memory) {\\n        return referralTickets[index];\\n    }\\n    mapping(address => uint256[]) public roundReferralTicketsByAddress;\\n    mapping(address => uint256) public roundReferralTicketsByAddressCount;\\n\\n    mapping(RoundVictoryTier => uint256) public victoryTierAmounts;\\n    mapping(RoundVictoryTier => uint256) public victoryTierAmountsClaimed;\\n    mapping(RoundVictoryTier => uint256) public winnersForEachTier;\\n    address public previousRound;\\n\\n    uint16[]  public  poolPercentagesBasePoints = [7000, 3500, 1500, 1000, 700, 500, 300, 1500, 1000, 5000];\\n    function setPoolPercentagesBasePoints(uint16[] memory _poolPercentagesBasePoints) public onlyOwner {\\n            poolPercentagesBasePoints = _poolPercentagesBasePoints;\\n    }\\n\\n    constructor(address previousRoundAddress, uint256 roundDurationInSeconds) EmergencyFunctions(msg.sender) {\\n        uint256 id = 1;\\n        previousRound = previousRoundAddress;\\n        if (previousRoundAddress != address(0)) {\\n            LotteryRound previousLotteryRound = LotteryRound(previousRoundAddress);\\n            id = previousLotteryRound.getRound().id + 1;\\n            propagateWinningFromPreviousRound();\\n        }\\n        round = Round({\\n            id: id,\\n            startTime: block.timestamp,\\n            endTime: block.timestamp + roundDurationInSeconds,\\n            ended : false,\\n            roundNumbers: new uint16[](0),\\n            powerNumber: 0,\\n            referralWinnersNumber: new uint16[](0),\\n            referralWinnersNumberCount : 0,\\n            ticketIds : new uint256[](0),\\n            ticketsCount : 0,\\n            referralTicketIds : new uint256[](0),\\n            referralCounts : 0\\n        });\\n    }\\n\\n    function propagateWinningFromPreviousRound() internal {\\n        LotteryRound previousLotteryRound = LotteryRound(previousRound);\\n        victoryTierAmounts[RoundVictoryTier.Tier5_1] += previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Tier5_1) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Tier5_1);\\n        victoryTierAmounts[RoundVictoryTier.Tier5] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Tier5) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Tier5);\\n        victoryTierAmounts[RoundVictoryTier.Tier4_1] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Tier4_1) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Tier4_1);\\n        victoryTierAmounts[RoundVictoryTier.Tier4] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Tier4) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Tier4);\\n        victoryTierAmounts[RoundVictoryTier.Tier3_1] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Tier3_1) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Tier3_1);\\n        victoryTierAmounts[RoundVictoryTier.Tier3] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Tier3) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Tier3);\\n        victoryTierAmounts[RoundVictoryTier.PublicPool] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.PublicPool) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.PublicPool);\\n        victoryTierAmounts[RoundVictoryTier.Referrer] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Referrer) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Referrer);\\n        victoryTierAmounts[RoundVictoryTier.TokenHolders] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.TokenHolders) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.TokenHolders);\\n        victoryTierAmounts[RoundVictoryTier.Treasury] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Treasury) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Treasury);\\n    }\\n\\n    function numberIsInRangeForRound(uint256 number) public pure returns (bool) {\\n        return number > 0 && number <= 69;\\n    }\\n\\n    function numberIsInRangeForPowerNumber(uint256 number) public pure returns (bool) {\\n        return number > 0 && number <= 26;\\n    }\\n\\n    function validateBuyTicket(uint16[] memory numbers, uint16 powerNumber, address referral ) public view onlyOwner {\\n        require(tx.origin != address(0), \\\"Invalid sender\\\");\\n        require(block.timestamp < round.endTime, \\\"Round is over\\\");\\n        require(numbers.length == 5, \\\"Invalid numbers count\\\");\\n        for (uint i = 0; i < numbers.length; i++) {\\n            require(numberIsInRangeForRound(numbers[i]), \\\"Invalid numbers\\\");\\n        }\\n        require(numberIsInRangeForPowerNumber(powerNumber), \\\"Invalid power number\\\");\\n        require(referral != tx.origin, \\\"Referral cannot be the same as the participant\\\");\\n    }\\n\\n    function percentageInBasisPoint(uint256 amount, uint256 basisPoint) public pure returns (uint256) {\\n        return amount * basisPoint / 10000;\\n    }\\n\\n    function treasuryAmountOnTicket(uint256 paymentTokenAmount) public view returns (uint256) {\\n        return percentageInBasisPoint(paymentTokenAmount, poolPercentagesBasePoints[9]);\\n    }\\n\\n    function updateVictoryPoolForTicket(uint256 paymentTokenAmount) public onlyOwner {\\n        uint256 forPublicPool = percentageInBasisPoint(paymentTokenAmount, poolPercentagesBasePoints[0]);\\n        victoryTierAmounts[RoundVictoryTier.Tier5_1] += percentageInBasisPoint(forPublicPool, poolPercentagesBasePoints[1]);\\n        victoryTierAmounts[RoundVictoryTier.Tier5] += percentageInBasisPoint(forPublicPool, poolPercentagesBasePoints[2]);\\n        victoryTierAmounts[RoundVictoryTier.Tier4_1] += percentageInBasisPoint(forPublicPool, poolPercentagesBasePoints[3]);\\n        victoryTierAmounts[RoundVictoryTier.Tier4] += percentageInBasisPoint(forPublicPool, poolPercentagesBasePoints[4]);\\n        victoryTierAmounts[RoundVictoryTier.Tier3_1] += percentageInBasisPoint(forPublicPool, poolPercentagesBasePoints[5]);\\n        victoryTierAmounts[RoundVictoryTier.Tier3] += percentageInBasisPoint(forPublicPool, poolPercentagesBasePoints[6]);\\n        victoryTierAmounts[RoundVictoryTier.PublicPool] += forPublicPool;\\n        victoryTierAmounts[RoundVictoryTier.Referrer] += percentageInBasisPoint(paymentTokenAmount, poolPercentagesBasePoints[7]);\\n        victoryTierAmounts[RoundVictoryTier.TokenHolders] += percentageInBasisPoint(paymentTokenAmount, poolPercentagesBasePoints[8]);\\n        victoryTierAmounts[RoundVictoryTier.Treasury] += treasuryAmountOnTicket(paymentTokenAmount);\\n    }\\n\\n    function buyTicket(uint256 chainId, uint16[] memory chosenNumbers, uint16 powerNumber, address referral) public onlyOwner {\\n        validateBuyTicket(chosenNumbers, powerNumber, referral);\\n\\n        uint256 ticketId = tickets.length;\\n        tickets.push(Ticket({\\n            id: ticketId,\\n            participantAddress: tx.origin,\\n            referralAddress: referral,\\n            claimed: false,\\n            chainId: chainId,\\n            victoryTier: RoundVictoryTier.NO_WIN,\\n            powerNumber: powerNumber\\n        }));\\n        for(uint i = 0; i < chosenNumbers.length; i++) {\\n            ticketNumbers[ticketId].push(chosenNumbers[i]);\\n        }\\n        round.ticketIds.push(ticketId);\\n        round.ticketsCount++;\\n\\n        roundTicketsByAddress[msg.sender].push(tickets.length - 1);\\n        roundTicketsByAddressCount[msg.sender]++;\\n        if (referral != address(0)) {\\n            uint256 referralTicketId = referralTickets.length;\\n            round.referralTicketIds.push(referralTicketId);\\n            round.referralCounts++;\\n            referralTickets.push(ReferralTicket({\\n                id: referralTicketId,\\n                referralAddress: referral,\\n                referralTicketNumber: uint16(round.referralCounts),\\n                winner: false,\\n                claimed: false\\n            }));\\n\\n            roundReferralTicketsByAddress[referral].push(referralTickets.length - 1);\\n            roundReferralTicketsByAddressCount[referral]++;\\n        }\\n    }\\n\\n    function closeRound() public onlyOwner {\\n        require(block.timestamp >= round.endTime, \\\"Round is not over yet\\\");\\n        round.ended = true;\\n    }\\n\\n    function couldReceiveWinningNumbers() public view {\\n        require(block.timestamp >= round.endTime, \\\"Round is not over yet\\\");\\n        require(round.roundNumbers.length == 0, \\\"Winning numbers already set\\\");\\n    }\\n\\n    function storeWinningNumbers(uint16[] memory roundNumbers, uint16 powerNumber, uint16[] memory referralWinnersNumber) public onlyOwner {\\n        round.roundNumbers = roundNumbers;\\n        round.powerNumber = powerNumber;\\n        round.referralWinnersNumber = referralWinnersNumber;\\n        round.referralWinnersNumberCount = uint16(referralWinnersNumber.length);\\n    }\\n\\n    function markWinners(TicketResults[] memory ticketResults, ReferralTicketResults[] memory referralTicketResults) public onlyOwner {\\n        for (uint i = 0; i < ticketResults.length; i++) {\\n            TicketResults memory ticketResult = ticketResults[i];\\n            Ticket storage ticket = tickets[ticketResult.ticketId];\\n            ticket.victoryTier = ticketResult.victoryTier;\\n            winnersForEachTier[ticketResult.victoryTier]++;\\n        }\\n        for (uint i = 0; i < referralTicketResults.length; i++) {\\n            ReferralTicketResults memory referralTicketResult = referralTicketResults[i];\\n            ReferralTicket storage referralTicket = referralTickets[referralTicketResult.referralTicketId];\\n            referralTicket.winner = referralTicketResult.won;\\n            if (referralTicketResult.won) {\\n                winnersForEachTier[RoundVictoryTier.Referrer]++;\\n            }\\n        }\\n    }\\n\\n    function markVictoryClaimed(uint256 ticketId, uint256 amountClaimed) public onlyOwner {\\n        Ticket storage ticket = tickets[ticketId];\\n        ticket.claimed = true;\\n        victoryTierAmountsClaimed[ticket.victoryTier] += amountClaimed;\\n    }\\n\\n    function markReferralVictoryClaimed(uint256 referralTicketId, uint256 amountClaimed) public onlyOwner {\\n        ReferralTicket storage referralTicket = referralTickets[referralTicketId];\\n        referralTicket.claimed = true;\\n        victoryTierAmountsClaimed[RoundVictoryTier.Referrer] += amountClaimed;\\n    }\\n}\",\"keccak256\":\"0x60238f13d65c20ef71648b9e91425ed6de1b9ab243f9c5b29cf3fe0ff34dd654\",\"license\":\"UNLICENSED\"},\"contracts/utils/EmergencyFunctions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract EmergencyFunctions is Ownable {\\n    address internal teamAddress;\\n    constructor(address _teamAddress) Ownable(_teamAddress) {\\n        teamAddress = _teamAddress;\\n    }\\n\\n    function updateTeamAddress(address _teamAddress) public onlyOwner {\\n        teamAddress = _teamAddress;\\n    }\\n\\n    // Emergency Functions\\n    function sendTokenToTeam(address _token) public onlyOwner {\\n        uint256 amount = IERC20(_token).balanceOf(address(this));\\n        if (amount > 0) {\\n            SafeERC20.safeTransfer(IERC20(_token), teamAddress, amount);\\n        }\\n    }\\n\\n    function sendCryptoToTeam() public onlyOwner {\\n        if (address(this).balance > 0) {\\n            payable(teamAddress).transfer(address(this).balance);\\n        }\\n    }\\n\\n    /** @notice Check if an address is a contract */\\n    function _isContract(address _addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x68dcc6a4104e2905f65c342fdb2dbde1908113d10c006f5857b52dc0bbefd419\",\"license\":\"MIT\"},\"contracts/utils/TestUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.x <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IERC20Extension {\\n    function decimals() external view returns (uint8);\\n}\\n\\ncontract TestFunctions is Ownable {\\n    constructor() Ownable(msg.sender) {}\\n    //Used for mock testing, contract ownership will be renounced on release\\n    uint public currentTimestampOverride;\\n    function updateCurrentTimestampOverride(uint _v) external onlyOwner {\\n        currentTimestampOverride = _v;\\n    }\\n    function currentTimestamp() public view returns(uint) {\\n        if (currentTimestampOverride > 0) {\\n            return currentTimestampOverride;\\n        }\\n        return block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x8edb22ef91efc1d38ffbd50b48821f4fe23bdaf84a14de75d0df8231eb772bc4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052604051806101400160405280611b5861ffff168152602001610dac61ffff1681526020016105dc61ffff1681526020016103e861ffff1681526020016102bc61ffff1681526020016101f461ffff16815260200161012c61ffff1681526020016105dc61ffff1681526020016103e861ffff16815260200161138861ffff16815250601990600a6200009892919062001478565b50348015620000a657600080fd5b5060405162005ff538038062005ff58339818101604052810190620000cc9190620016ff565b3380600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620001435760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016200013a919062001757565b60405180910390fd5b6200015481620005b760201b60201c565b5080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060006001905082601860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614620002b557600083905060018173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000266573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019062000291919062001c00565b60000151620002a1919062001c80565b9150620002b36200067b60201b60201c565b505b6040518061018001604052808281526020014281526020018342620002db919062001c80565b8152602001600015158152602001600067ffffffffffffffff8111156200030757620003066200178a565b5b604051908082528060200260200182016040528015620003365781602001602082028036833780820191505090505b508152602001600061ffff168152602001600067ffffffffffffffff8111156200036557620003646200178a565b5b604051908082528060200260200182016040528015620003945781602001602082028036833780820191505090505b508152602001600061ffff168152602001600067ffffffffffffffff811115620003c357620003c26200178a565b5b604051908082528060200260200182016040528015620003f25781602001602082028036833780820191505090505b508152602001600061ffff168152602001600067ffffffffffffffff8111156200042157620004206200178a565b5b604051908082528060200260200182016040528015620004505781602001602082028036833780820191505090505b508152602001600061ffff16815250600260008201518160000155602082015181600101556040820151816002015560608201518160030160006101000a81548160ff0219169083151502179055506080820151816004019080519060200190620004bd92919062001529565b5060a08201518160050160006101000a81548161ffff021916908361ffff16021790555060c0820151816006019080519060200190620004ff92919062001529565b5060e08201518160070160006101000a81548161ffff021916908361ffff16021790555061010082015181600801908051906020019062000542929190620015da565b506101208201518160090160006101000a81548161ffff021916908361ffff16021790555061014082015181600a01908051906020019062000586929190620015da565b5061016082015181600b0160006101000a81548161ffff021916908361ffff16021790555090505050505062001dc5565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000601860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16634e9eba1d60016040518263ffffffff1660e01b8152600401620006de919062001d3b565b602060405180830381865afa158015620006fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000722919062001d58565b8173ffffffffffffffffffffffffffffffffffffffff1663e2e3083060016040518263ffffffff1660e01b81526004016200075e919062001d3b565b602060405180830381865afa1580156200077c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007a2919062001d58565b620007ae919062001d8a565b601560006001600a811115620007c957620007c862001cbb565b5b600a811115620007de57620007dd62001cbb565b5b81526020019081526020016000206000828254620007fd919062001c80565b925050819055508073ffffffffffffffffffffffffffffffffffffffff16634e9eba1d60026040518263ffffffff1660e01b815260040162000840919062001d3b565b602060405180830381865afa1580156200085e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000884919062001d58565b8173ffffffffffffffffffffffffffffffffffffffff1663e2e3083060026040518263ffffffff1660e01b8152600401620008c0919062001d3b565b602060405180830381865afa158015620008de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000904919062001d58565b62000910919062001d8a565b601560006002600a8111156200092b576200092a62001cbb565b5b600a81111562000940576200093f62001cbb565b5b815260200190815260200160002060008282546200095f919062001c80565b925050819055508073ffffffffffffffffffffffffffffffffffffffff16634e9eba1d60036040518263ffffffff1660e01b8152600401620009a2919062001d3b565b602060405180830381865afa158015620009c0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009e6919062001d58565b8173ffffffffffffffffffffffffffffffffffffffff1663e2e3083060036040518263ffffffff1660e01b815260040162000a22919062001d3b565b602060405180830381865afa15801562000a40573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000a66919062001d58565b62000a72919062001d8a565b601560006003600a81111562000a8d5762000a8c62001cbb565b5b600a81111562000aa25762000aa162001cbb565b5b8152602001908152602001600020600082825462000ac1919062001c80565b925050819055508073ffffffffffffffffffffffffffffffffffffffff16634e9eba1d60046040518263ffffffff1660e01b815260040162000b04919062001d3b565b602060405180830381865afa15801562000b22573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b48919062001d58565b8173ffffffffffffffffffffffffffffffffffffffff1663e2e3083060046040518263ffffffff1660e01b815260040162000b84919062001d3b565b602060405180830381865afa15801562000ba2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000bc8919062001d58565b62000bd4919062001d8a565b601560006004600a81111562000bef5762000bee62001cbb565b5b600a81111562000c045762000c0362001cbb565b5b8152602001908152602001600020600082825462000c23919062001c80565b925050819055508073ffffffffffffffffffffffffffffffffffffffff16634e9eba1d60056040518263ffffffff1660e01b815260040162000c66919062001d3b565b602060405180830381865afa15801562000c84573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000caa919062001d58565b8173ffffffffffffffffffffffffffffffffffffffff1663e2e3083060056040518263ffffffff1660e01b815260040162000ce6919062001d3b565b602060405180830381865afa15801562000d04573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d2a919062001d58565b62000d36919062001d8a565b601560006005600a81111562000d515762000d5062001cbb565b5b600a81111562000d665762000d6562001cbb565b5b8152602001908152602001600020600082825462000d85919062001c80565b925050819055508073ffffffffffffffffffffffffffffffffffffffff16634e9eba1d60066040518263ffffffff1660e01b815260040162000dc8919062001d3b565b602060405180830381865afa15801562000de6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e0c919062001d58565b8173ffffffffffffffffffffffffffffffffffffffff1663e2e3083060066040518263ffffffff1660e01b815260040162000e48919062001d3b565b602060405180830381865afa15801562000e66573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000e8c919062001d58565b62000e98919062001d8a565b601560006006600a81111562000eb35762000eb262001cbb565b5b600a81111562000ec85762000ec762001cbb565b5b8152602001908152602001600020600082825462000ee7919062001c80565b925050819055508073ffffffffffffffffffffffffffffffffffffffff16634e9eba1d60086040518263ffffffff1660e01b815260040162000f2a919062001d3b565b602060405180830381865afa15801562000f48573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000f6e919062001d58565b8173ffffffffffffffffffffffffffffffffffffffff1663e2e3083060086040518263ffffffff1660e01b815260040162000faa919062001d3b565b602060405180830381865afa15801562000fc8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000fee919062001d58565b62000ffa919062001d8a565b601560006008600a81111562001015576200101462001cbb565b5b600a8111156200102a576200102962001cbb565b5b8152602001908152602001600020600082825462001049919062001c80565b925050819055508073ffffffffffffffffffffffffffffffffffffffff16634e9eba1d60076040518263ffffffff1660e01b81526004016200108c919062001d3b565b602060405180830381865afa158015620010aa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620010d0919062001d58565b8173ffffffffffffffffffffffffffffffffffffffff1663e2e3083060076040518263ffffffff1660e01b81526004016200110c919062001d3b565b602060405180830381865afa1580156200112a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001150919062001d58565b6200115c919062001d8a565b601560006007600a81111562001177576200117662001cbb565b5b600a8111156200118c576200118b62001cbb565b5b81526020019081526020016000206000828254620011ab919062001c80565b925050819055508073ffffffffffffffffffffffffffffffffffffffff16634e9eba1d60096040518263ffffffff1660e01b8152600401620011ee919062001d3b565b602060405180830381865afa1580156200120c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001232919062001d58565b8173ffffffffffffffffffffffffffffffffffffffff1663e2e3083060096040518263ffffffff1660e01b81526004016200126e919062001d3b565b602060405180830381865afa1580156200128c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620012b2919062001d58565b620012be919062001d8a565b601560006009600a811115620012d957620012d862001cbb565b5b600a811115620012ee57620012ed62001cbb565b5b815260200190815260200160002060008282546200130d919062001c80565b925050819055508073ffffffffffffffffffffffffffffffffffffffff16634e9eba1d600a6040518263ffffffff1660e01b815260040162001350919062001d3b565b602060405180830381865afa1580156200136e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001394919062001d58565b8173ffffffffffffffffffffffffffffffffffffffff1663e2e30830600a6040518263ffffffff1660e01b8152600401620013d0919062001d3b565b602060405180830381865afa158015620013ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001414919062001d58565b62001420919062001d8a565b60156000600a808111156200143a576200143962001cbb565b5b600a8111156200144f576200144e62001cbb565b5b815260200190815260200160002060008282546200146e919062001c80565b9250508190555050565b82805482825590600052602060002090600f01601090048101928215620015165791602002820160005b83821115620014e457835183826101000a81548161ffff021916908361ffff1602179055509260200192600201602081600101049283019260010302620014a2565b8015620015145782816101000a81549061ffff0219169055600201602081600101049283019260010302620014e4565b505b5090506200152591906200162c565b5090565b82805482825590600052602060002090600f01601090048101928215620015c75791602002820160005b838211156200159557835183826101000a81548161ffff021916908361ffff160217905550926020019260020160208160010104928301926001030262001553565b8015620015c55782816101000a81549061ffff021916905560020160208160010104928301926001030262001595565b505b509050620015d691906200162c565b5090565b82805482825590600052602060002090810192821562001619579160200282015b8281111562001618578251825591602001919060010190620015fb565b5b5090506200162891906200162c565b5090565b5b80821115620016475760008160009055506001016200162d565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200168c826200165f565b9050919050565b6200169e816200167f565b8114620016aa57600080fd5b50565b600081519050620016be8162001693565b92915050565b6000819050919050565b620016d981620016c4565b8114620016e557600080fd5b50565b600081519050620016f981620016ce565b92915050565b6000806040838503121562001719576200171862001655565b5b60006200172985828601620016ad565b92505060206200173c85828601620016e8565b9150509250929050565b62001751816200167f565b82525050565b60006020820190506200176e600083018462001746565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620017c48262001779565b810181811067ffffffffffffffff82111715620017e657620017e56200178a565b5b80604052505050565b6000620017fb6200164b565b9050620018098282620017b9565b919050565b600080fd5b60008115159050919050565b6200182a8162001813565b81146200183657600080fd5b50565b6000815190506200184a816200181f565b92915050565b600080fd5b600067ffffffffffffffff8211156200187357620018726200178a565b5b602082029050602081019050919050565b600080fd5b600061ffff82169050919050565b620018a28162001889565b8114620018ae57600080fd5b50565b600081519050620018c28162001897565b92915050565b6000620018df620018d98462001855565b620017ef565b9050808382526020820190506020840283018581111562001905576200190462001884565b5b835b818110156200193257806200191d8882620018b1565b84526020840193505060208101905062001907565b5050509392505050565b600082601f83011262001954576200195362001850565b5b815162001966848260208601620018c8565b91505092915050565b600067ffffffffffffffff8211156200198d576200198c6200178a565b5b602082029050602081019050919050565b6000620019b5620019af846200196f565b620017ef565b90508083825260208201905060208402830185811115620019db57620019da62001884565b5b835b8181101562001a085780620019f38882620016e8565b845260208401935050602081019050620019dd565b5050509392505050565b600082601f83011262001a2a5762001a2962001850565b5b815162001a3c8482602086016200199e565b91505092915050565b6000610180828403121562001a5f5762001a5e62001774565b5b62001a6c610180620017ef565b9050600062001a7e84828501620016e8565b600083015250602062001a9484828501620016e8565b602083015250604062001aaa84828501620016e8565b604083015250606062001ac08482850162001839565b606083015250608082015167ffffffffffffffff81111562001ae75762001ae66200180e565b5b62001af5848285016200193c565b60808301525060a062001b0b84828501620018b1565b60a08301525060c082015167ffffffffffffffff81111562001b325762001b316200180e565b5b62001b40848285016200193c565b60c08301525060e062001b5684828501620018b1565b60e08301525061010082015167ffffffffffffffff81111562001b7e5762001b7d6200180e565b5b62001b8c8482850162001a12565b6101008301525061012062001ba484828501620018b1565b6101208301525061014082015167ffffffffffffffff81111562001bcd5762001bcc6200180e565b5b62001bdb8482850162001a12565b6101408301525061016062001bf384828501620018b1565b6101608301525092915050565b60006020828403121562001c195762001c1862001655565b5b600082015167ffffffffffffffff81111562001c3a5762001c396200165a565b5b62001c488482850162001a45565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062001c8d82620016c4565b915062001c9a83620016c4565b925082820190508082111562001cb55762001cb462001c51565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600b811062001cfe5762001cfd62001cbb565b5b50565b600081905062001d118262001cea565b919050565b600062001d238262001d01565b9050919050565b62001d358162001d16565b82525050565b600060208201905062001d52600083018462001d2a565b92915050565b60006020828403121562001d715762001d7062001655565b5b600062001d8184828501620016e8565b91505092915050565b600062001d9782620016c4565b915062001da483620016c4565b925082820390508181111562001dbf5762001dbe62001c51565b5b92915050565b6142208062001dd56000396000f3fe608060405234801561001057600080fd5b50600436106102275760003560e01c8063715018a611610130578063b288e1a9116100b8578063e278fe6f1161007c578063e278fe6f146106bb578063e2e30830146106c5578063e65b76a9146106f5578063efa3d53114610725578063f2fde38b1461075557610227565b8063b288e1a914610617578063b56c12b414610635578063bbd1783a14610651578063dd85ae5f1461065b578063df28f24b1461068b57610227565b8063998da3e9116100ff578063998da3e91461054d5780639b7be8fc146105695780639f8743f714610599578063af33d08f146105b7578063b217be05146105e757610227565b8063715018a6146104ed57806382e58923146104f75780638da5cb5b146105135780639469f2931461053157610227565b806336324a5d116101b357806358371dc61161018257806358371dc614610425578063598f3b9d146104555780636271516714610485578063659a8d86146104a15780636a65bcda146104d157610227565b806336324a5d1461035b5780633ed912261461038b5780634e9eba1d146103bf57806350b44712146103ef57610227565b806314eb76ac116101fa57806314eb76ac146102cd578063266fbf90146102e95780632ed4851514610305578063343f2566146103355780633590bd3c1461033f57610227565b806308469cc61461022c57806308bb71cd1461025c5780630cee803c1461028c578063146ca531146102a8575b600080fd5b61024660048036038101906102419190612c86565b610771565b6040516102539190612cce565b60405180910390f35b61027660048036038101906102719190612d47565b61078a565b6040516102839190612d83565b60405180910390f35b6102a660048036038101906102a19190612d9e565b6107a2565b005b6102b0610841565b6040516102c4989796959493929190612dfb565b60405180910390f35b6102e760048036038101906102e29190612d47565b6108bc565b005b61030360048036038101906102fe9190612ffe565b610908565b005b61031f600480360381019061031a9190612d9e565b610f5d565b60405161032c9190612d83565b60405180910390f35b61033d610f80565b005b610359600480360381019061035491906132fd565b611014565b005b61037560048036038101906103709190612c86565b6111e4565b6040516103829190612cce565b60405180910390f35b6103a560048036038101906103a09190612c86565b6111fd565b6040516103b6959493929190613384565b60405180910390f35b6103d960048036038101906103d491906133d7565b61128b565b6040516103e69190612d83565b60405180910390f35b61040960048036038101906104049190612c86565b6112a3565b60405161041c979695949392919061347b565b60405180910390f35b61043f600480360381019061043a9190612c86565b61135d565b60405161044c91906134ea565b60405180910390f35b61046f600480360381019061046a9190612c86565b611395565b60405161047c91906135c3565b60405180910390f35b61049f600480360381019061049a91906135e5565b611428565b005b6104bb60048036038101906104b69190613654565b611668565b6040516104c89190612d83565b60405180910390f35b6104eb60048036038101906104e69190613694565b611699565b005b6104f561171b565b005b610511600480360381019061050c9190612d9e565b61172f565b005b61051b6117de565b604051610528919061371f565b60405180910390f35b61054b6004803603810190610546919061373a565b611807565b005b61056760048036038101906105629190612d47565b611829565b005b610583600480360381019061057e9190612c86565b6118ea565b604051610590919061384d565b60405180910390f35b6105a1611a5c565b6040516105ae9190613a9f565b60405180910390f35b6105d160048036038101906105cc9190612c86565b611ce0565b6040516105de9190612d83565b60405180910390f35b61060160048036038101906105fc9190612d9e565b611d2f565b60405161060e91906134ea565b60405180910390f35b61061f611d76565b60405161062c919061371f565b60405180910390f35b61064f600480360381019061064a9190612c86565b611d9c565b005b610659612337565b005b61067560048036038101906106709190612c86565b6123b4565b6040516106829190613b29565b60405180910390f35b6106a560048036038101906106a09190612d47565b6124a6565b6040516106b29190612d83565b60405180910390f35b6106c36124be565b005b6106df60048036038101906106da91906133d7565b61252d565b6040516106ec9190612d83565b60405180910390f35b61070f600480360381019061070a9190613654565b612545565b60405161071c9190612d83565b60405180910390f35b61073f600480360381019061073a91906133d7565b612576565b60405161074c9190612d83565b60405180910390f35b61076f600480360381019061076a9190612d47565b61258e565b005b60008082118015610783575060458211155b9050919050565b60146020528060005260406000206000915090505481565b6107aa612614565b6000601283815481106107c0576107bf613b44565b5b9060005260206000209060020201905060018160010160176101000a81548160ff02191690831515021790555081601660006007600a81111561080657610805613404565b5b600a81111561081857610817613404565b5b815260200190815260200160002060008282546108359190613ba2565b92505081905550505050565b60028060000154908060010154908060020154908060030160009054906101000a900460ff16908060050160009054906101000a900461ffff16908060070160009054906101000a900461ffff16908060090160009054906101000a900461ffff169080600b0160009054906101000a900461ffff16905088565b6108c4612614565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610910612614565b61091b838383611428565b6000600e805490509050600e6040518060e001604052808381526020013273ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020016000151581526020018781526020016000600a81111561099357610992613404565b5b81526020018561ffff1681525090806001815401808255809150506001900390600052602060002090600502016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548160ff0219169083151502179055506080820151816003015560a08201518160040160006101000a81548160ff0219169083600a811115610ab657610ab5613404565b5b021790555060c08201518160040160016101000a81548161ffff021916908361ffff160217905550505060005b8451811015610b6e57600f6000838152602001908152602001600020858281518110610b1257610b11613b44565b5b602002602001015190806001815401808255809150506001900390600052602060002090601091828204019190066002029091909190916101000a81548161ffff021916908361ffff1602179055508080600101915050610ae3565b5060026008018190806001815401808255809150506001900390600052602060002001600090919091909150556002600901600081819054906101000a900461ffff1680929190610bbe90613bd6565b91906101000a81548161ffff021916908361ffff16021790555050601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001600e80549050610c2a9190613c00565b9080600181540180825580915050600190039060005260206000200160009091909190915055601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610ca090613c34565b9190505550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610f5657600060128054905090506002600a018190806001815401808255809150506001900390600052602060002001600090919091909150556002600b01600081819054906101000a900461ffff1680929190610d3290613bd6565b91906101000a81548161ffff021916908361ffff1602179055505060126040518060a001604052808381526020018573ffffffffffffffffffffffffffffffffffffffff1681526020016002600b0160009054906101000a900461ffff1661ffff1681526020016000151581526020016000151581525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548161ffff021916908361ffff16021790555060608201518160010160166101000a81548160ff02191690831515021790555060808201518160010160176101000a81548160ff0219169083151502179055505050601360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001601280549050610ed99190613c00565b9080600181540180825580915050600190039060005260206000200160009091909190915055601460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610f4f90613c34565b9190505550505b5050505050565b60006127108284610f6e9190613c7c565b610f789190613ced565b905092915050565b6002800154421015610fc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fbe90613d7b565b60405180910390fd5b600060026004018054905014611012576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100990613de7565b60405180910390fd5b565b61101c612614565b60005b825181101561110157600083828151811061103d5761103c613b44565b5b602002602001015190506000600e82600001518154811061106157611060613b44565b5b9060005260206000209060050201905081602001518160040160006101000a81548160ff0219169083600a81111561109c5761109b613404565b5b0217905550601760008360200151600a8111156110bc576110bb613404565b5b600a8111156110ce576110cd613404565b5b815260200190815260200160002060008154809291906110ed90613c34565b91905055505050808060010191505061101f565b5060005b81518110156111df57600082828151811061112357611122613b44565b5b602002602001015190506000601282600001518154811061114757611146613b44565b5b9060005260206000209060020201905081602001518160010160166101000a81548160ff0219169083151502179055508160200151156111d057601760006007600a81111561119957611198613404565b5b600a8111156111ab576111aa613404565b5b815260200190815260200160002060008154809291906111ca90613c34565b91905055505b50508080600101915050611105565b505050565b600080821180156111f65750601a8211155b9050919050565b6012818154811061120d57600080fd5b90600052602060002090600202016000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900461ffff16908060010160169054906101000a900460ff16908060010160179054906101000a900460ff16905085565b60166020528060005260406000206000915090505481565b600e81815481106112b357600080fd5b90600052602060002090600502016000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160149054906101000a900460ff16908060030154908060040160009054906101000a900460ff16908060040160019054906101000a900461ffff16905087565b6019818154811061136d57600080fd5b9060005260206000209060109182820401919006600202915054906101000a900461ffff1681565b6060600f600083815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561141c57602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116113e35790505b50505050509050919050565b611430612614565b600073ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff160361149f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149690613e53565b60405180910390fd5b600280015442106114e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114dc90613ebf565b60405180910390fd5b6005835114611529576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152090613f2b565b60405180910390fd5b60005b83518110156115a85761155c84828151811061154b5761154a613b44565b5b602002602001015161ffff16610771565b61159b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159290613f97565b60405180910390fd5b808060010191505061152c565b506115b68261ffff166111e4565b6115f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ec90614003565b60405180910390fd5b3273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611663576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165a90614095565b60405180910390fd5b505050565b6013602052816000526040600020818154811061168457600080fd5b90600052602060002001600091509150505481565b6116a1612614565b82600260040190805190602001906116ba929190612a34565b5081600260050160006101000a81548161ffff021916908361ffff16021790555080600260060190805190602001906116f4929190612a34565b508051600260070160006101000a81548161ffff021916908361ffff160217905550505050565b611723612614565b61172d600061269b565b565b611737612614565b6000600e838154811061174d5761174c613b44565b5b9060005260206000209060050201905060018160020160146101000a81548160ff02191690831515021790555081601660008360040160009054906101000a900460ff16600a8111156117a3576117a2613404565b5b600a8111156117b5576117b4613404565b5b815260200190815260200160002060008282546117d29190613ba2565b92505081905550505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61180f612614565b8060199080519060200190611825929190612a34565b5050565b611831612614565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161186c919061371f565b602060405180830381865afa158015611889573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ad91906140ca565b905060008111156118e6576118e582600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168361275f565b5b5050565b6118f2612ade565b600e828154811061190657611905613b44565b5b90600052602060002090600502016040518060e0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900460ff16151515158152602001600382015481526020016004820160009054906101000a900460ff16600a811115611a1f57611a1e613404565b5b600a811115611a3157611a30613404565b5b81526020016004820160019054906101000a900461ffff1661ffff1661ffff16815250509050919050565b611a64612b5f565b6002604051806101800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff1615151515815260200160048201805480602002602001604051908101604052809291908181526020018280548015611b2257602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411611ae95790505b505050505081526020016005820160009054906101000a900461ffff1661ffff1661ffff16815260200160068201805480602002602001604051908101604052809291908181526020018280548015611bc257602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411611b895790505b505050505081526020016007820160009054906101000a900461ffff1661ffff1661ffff16815260200160088201805480602002602001604051908101604052809291908181526020018280548015611c3a57602002820191906000526020600020905b815481526020019060010190808311611c26575b505050505081526020016009820160009054906101000a900461ffff1661ffff1661ffff168152602001600a8201805480602002602001604051908101604052809291908181526020018280548015611cb257602002820191906000526020600020905b815481526020019060010190808311611c9e575b50505050508152602001600b820160009054906101000a900461ffff1661ffff1661ffff1681525050905090565b6000611d28826019600981548110611cfb57611cfa613b44565b5b90600052602060002090601091828204019190066002029054906101000a900461ffff1661ffff16610f5d565b9050919050565b600f6020528160005260406000208181548110611d4b57600080fd5b9060005260206000209060109182820401919006600202915091509054906101000a900461ffff1681565b601860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611da4612614565b6000611dec826019600081548110611dbf57611dbe613b44565b5b90600052602060002090601091828204019190066002029054906101000a900461ffff1661ffff16610f5d565b9050611e34816019600181548110611e0757611e06613b44565b5b90600052602060002090601091828204019190066002029054906101000a900461ffff1661ffff16610f5d565b601560006001600a811115611e4c57611e4b613404565b5b600a811115611e5e57611e5d613404565b5b81526020019081526020016000206000828254611e7b9190613ba2565b92505081905550611ec8816019600281548110611e9b57611e9a613b44565b5b90600052602060002090601091828204019190066002029054906101000a900461ffff1661ffff16610f5d565b601560006002600a811115611ee057611edf613404565b5b600a811115611ef257611ef1613404565b5b81526020019081526020016000206000828254611f0f9190613ba2565b92505081905550611f5c816019600381548110611f2f57611f2e613b44565b5b90600052602060002090601091828204019190066002029054906101000a900461ffff1661ffff16610f5d565b601560006003600a811115611f7457611f73613404565b5b600a811115611f8657611f85613404565b5b81526020019081526020016000206000828254611fa39190613ba2565b92505081905550611ff0816019600481548110611fc357611fc2613b44565b5b90600052602060002090601091828204019190066002029054906101000a900461ffff1661ffff16610f5d565b601560006004600a81111561200857612007613404565b5b600a81111561201a57612019613404565b5b815260200190815260200160002060008282546120379190613ba2565b9250508190555061208481601960058154811061205757612056613b44565b5b90600052602060002090601091828204019190066002029054906101000a900461ffff1661ffff16610f5d565b601560006005600a81111561209c5761209b613404565b5b600a8111156120ae576120ad613404565b5b815260200190815260200160002060008282546120cb9190613ba2565b925050819055506121188160196006815481106120eb576120ea613b44565b5b90600052602060002090601091828204019190066002029054906101000a900461ffff1661ffff16610f5d565b601560006006600a8111156121305761212f613404565b5b600a81111561214257612141613404565b5b8152602001908152602001600020600082825461215f9190613ba2565b9250508190555080601560006008600a81111561217f5761217e613404565b5b600a81111561219157612190613404565b5b815260200190815260200160002060008282546121ae9190613ba2565b925050819055506121fb8260196007815481106121ce576121cd613b44565b5b90600052602060002090601091828204019190066002029054906101000a900461ffff1661ffff16610f5d565b601560006007600a81111561221357612212613404565b5b600a81111561222557612224613404565b5b815260200190815260200160002060008282546122429190613ba2565b9250508190555061228f82601960088154811061226257612261613b44565b5b90600052602060002090601091828204019190066002029054906101000a900461ffff1661ffff16610f5d565b601560006009600a8111156122a7576122a6613404565b5b600a8111156122b9576122b8613404565b5b815260200190815260200160002060008282546122d69190613ba2565b925050819055506122e682611ce0565b60156000600a808111156122fd576122fc613404565b5b600a81111561230f5761230e613404565b5b8152602001908152602001600020600082825461232c9190613ba2565b925050819055505050565b61233f612614565b60004711156123b257600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156123b0573d6000803e3d6000fd5b505b565b6123bc612bd2565b601282815481106123d0576123cf613b44565b5b90600052602060002090600202016040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900461ffff1661ffff1661ffff1681526020016001820160169054906101000a900460ff161515151581526020016001820160179054906101000a900460ff1615151515815250509050919050565b60116020528060005260406000206000915090505481565b6124c6612614565b600280015442101561250d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161250490613d7b565b60405180910390fd5b6001600260030160006101000a81548160ff021916908315150217905550565b60156020528060005260406000206000915090505481565b6010602052816000526040600020818154811061256157600080fd5b90600052602060002001600091509150505481565b60176020528060005260406000206000915090505481565b612596612614565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036126085760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016125ff919061371f565b60405180910390fd5b6126118161269b565b50565b61261c6127de565b73ffffffffffffffffffffffffffffffffffffffff1661263a6117de565b73ffffffffffffffffffffffffffffffffffffffff16146126995761265d6127de565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401612690919061371f565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6127d9838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040516024016127929291906140f7565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506127e6565b505050565b600033905090565b6000612811828473ffffffffffffffffffffffffffffffffffffffff1661287d90919063ffffffff16565b905060008151141580156128365750808060200190518101906128349190614135565b155b1561287857826040517f5274afe700000000000000000000000000000000000000000000000000000000815260040161286f919061371f565b60405180910390fd5b505050565b606061288b83836000612893565b905092915050565b6060814710156128da57306040517fcd7860590000000000000000000000000000000000000000000000000000000081526004016128d1919061371f565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff16848660405161290391906141d3565b60006040518083038185875af1925050503d8060008114612940576040519150601f19603f3d011682016040523d82523d6000602084013e612945565b606091505b5091509150612955868383612960565b925050509392505050565b60608261297557612970826129ef565b6129e7565b6000825114801561299d575060008473ffffffffffffffffffffffffffffffffffffffff163b145b156129df57836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016129d6919061371f565b60405180910390fd5b8190506129e8565b5b9392505050565b600081511115612a025780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82805482825590600052602060002090600f01601090048101928215612acd5791602002820160005b83821115612a9d57835183826101000a81548161ffff021916908361ffff1602179055509260200192600201602081600101049283019260010302612a5d565b8015612acb5782816101000a81549061ffff0219169055600201602081600101049283019260010302612a9d565b505b509050612ada9190612c1f565b5090565b6040518060e0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001600081526020016000600a811115612b4e57612b4d613404565b5b8152602001600061ffff1681525090565b60405180610180016040528060008152602001600081526020016000815260200160001515815260200160608152602001600061ffff16815260200160608152602001600061ffff16815260200160608152602001600061ffff16815260200160608152602001600061ffff1681525090565b6040518060a0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600061ffff1681526020016000151581526020016000151581525090565b5b80821115612c38576000816000905550600101612c20565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b612c6381612c50565b8114612c6e57600080fd5b50565b600081359050612c8081612c5a565b92915050565b600060208284031215612c9c57612c9b612c46565b5b6000612caa84828501612c71565b91505092915050565b60008115159050919050565b612cc881612cb3565b82525050565b6000602082019050612ce36000830184612cbf565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612d1482612ce9565b9050919050565b612d2481612d09565b8114612d2f57600080fd5b50565b600081359050612d4181612d1b565b92915050565b600060208284031215612d5d57612d5c612c46565b5b6000612d6b84828501612d32565b91505092915050565b612d7d81612c50565b82525050565b6000602082019050612d986000830184612d74565b92915050565b60008060408385031215612db557612db4612c46565b5b6000612dc385828601612c71565b9250506020612dd485828601612c71565b9150509250929050565b600061ffff82169050919050565b612df581612dde565b82525050565b600061010082019050612e11600083018b612d74565b612e1e602083018a612d74565b612e2b6040830189612d74565b612e386060830188612cbf565b612e456080830187612dec565b612e5260a0830186612dec565b612e5f60c0830185612dec565b612e6c60e0830184612dec565b9998505050505050505050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612ec782612e7e565b810181811067ffffffffffffffff82111715612ee657612ee5612e8f565b5b80604052505050565b6000612ef9612c3c565b9050612f058282612ebe565b919050565b600067ffffffffffffffff821115612f2557612f24612e8f565b5b602082029050602081019050919050565b600080fd5b612f4481612dde565b8114612f4f57600080fd5b50565b600081359050612f6181612f3b565b92915050565b6000612f7a612f7584612f0a565b612eef565b90508083825260208201905060208402830185811115612f9d57612f9c612f36565b5b835b81811015612fc65780612fb28882612f52565b845260208401935050602081019050612f9f565b5050509392505050565b600082601f830112612fe557612fe4612e79565b5b8135612ff5848260208601612f67565b91505092915050565b6000806000806080858703121561301857613017612c46565b5b600061302687828801612c71565b945050602085013567ffffffffffffffff81111561304757613046612c4b565b5b61305387828801612fd0565b935050604061306487828801612f52565b925050606061307587828801612d32565b91505092959194509250565b600067ffffffffffffffff82111561309c5761309b612e8f565b5b602082029050602081019050919050565b600080fd5b600b81106130bf57600080fd5b50565b6000813590506130d1816130b2565b92915050565b6000604082840312156130ed576130ec6130ad565b5b6130f76040612eef565b9050600061310784828501612c71565b600083015250602061311b848285016130c2565b60208301525092915050565b600061313a61313584613081565b612eef565b9050808382526020820190506040840283018581111561315d5761315c612f36565b5b835b81811015613186578061317288826130d7565b84526020840193505060408101905061315f565b5050509392505050565b600082601f8301126131a5576131a4612e79565b5b81356131b5848260208601613127565b91505092915050565b600067ffffffffffffffff8211156131d9576131d8612e8f565b5b602082029050602081019050919050565b6131f381612cb3565b81146131fe57600080fd5b50565b600081359050613210816131ea565b92915050565b60006040828403121561322c5761322b6130ad565b5b6132366040612eef565b9050600061324684828501612c71565b600083015250602061325a84828501613201565b60208301525092915050565b6000613279613274846131be565b612eef565b9050808382526020820190506040840283018581111561329c5761329b612f36565b5b835b818110156132c557806132b18882613216565b84526020840193505060408101905061329e565b5050509392505050565b600082601f8301126132e4576132e3612e79565b5b81356132f4848260208601613266565b91505092915050565b6000806040838503121561331457613313612c46565b5b600083013567ffffffffffffffff81111561333257613331612c4b565b5b61333e85828601613190565b925050602083013567ffffffffffffffff81111561335f5761335e612c4b565b5b61336b858286016132cf565b9150509250929050565b61337e81612d09565b82525050565b600060a0820190506133996000830188612d74565b6133a66020830187613375565b6133b36040830186612dec565b6133c06060830185612cbf565b6133cd6080830184612cbf565b9695505050505050565b6000602082840312156133ed576133ec612c46565b5b60006133fb848285016130c2565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600b811061344457613443613404565b5b50565b600081905061345582613433565b919050565b600061346582613447565b9050919050565b6134758161345a565b82525050565b600060e082019050613490600083018a612d74565b61349d6020830189613375565b6134aa6040830188613375565b6134b76060830187612cbf565b6134c46080830186612d74565b6134d160a083018561346c565b6134de60c0830184612dec565b98975050505050505050565b60006020820190506134ff6000830184612dec565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61353a81612dde565b82525050565b600061354c8383613531565b60208301905092915050565b6000602082019050919050565b600061357082613505565b61357a8185613510565b935061358583613521565b8060005b838110156135b657815161359d8882613540565b97506135a883613558565b925050600181019050613589565b5085935050505092915050565b600060208201905081810360008301526135dd8184613565565b905092915050565b6000806000606084860312156135fe576135fd612c46565b5b600084013567ffffffffffffffff81111561361c5761361b612c4b565b5b61362886828701612fd0565b935050602061363986828701612f52565b925050604061364a86828701612d32565b9150509250925092565b6000806040838503121561366b5761366a612c46565b5b600061367985828601612d32565b925050602061368a85828601612c71565b9150509250929050565b6000806000606084860312156136ad576136ac612c46565b5b600084013567ffffffffffffffff8111156136cb576136ca612c4b565b5b6136d786828701612fd0565b93505060206136e886828701612f52565b925050604084013567ffffffffffffffff81111561370957613708612c4b565b5b61371586828701612fd0565b9150509250925092565b60006020820190506137346000830184613375565b92915050565b6000602082840312156137505761374f612c46565b5b600082013567ffffffffffffffff81111561376e5761376d612c4b565b5b61377a84828501612fd0565b91505092915050565b61378c81612c50565b82525050565b61379b81612d09565b82525050565b6137aa81612cb3565b82525050565b6137b98161345a565b82525050565b60e0820160008201516137d56000850182613783565b5060208201516137e86020850182613792565b5060408201516137fb6040850182613792565b50606082015161380e60608501826137a1565b5060808201516138216080850182613783565b5060a082015161383460a08501826137b0565b5060c082015161384760c0850182613531565b50505050565b600060e08201905061386260008301846137bf565b92915050565b600082825260208201905092915050565b600061388482613505565b61388e8185613868565b935061389983613521565b8060005b838110156138ca5781516138b18882613540565b97506138bc83613558565b92505060018101905061389d565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600061390f8383613783565b60208301905092915050565b6000602082019050919050565b6000613933826138d7565b61393d81856138e2565b9350613948836138f3565b8060005b838110156139795781516139608882613903565b975061396b8361391b565b92505060018101905061394c565b5085935050505092915050565b60006101808301600083015161399f6000860182613783565b5060208301516139b26020860182613783565b5060408301516139c56040860182613783565b5060608301516139d860608601826137a1565b50608083015184820360808601526139f08282613879565b91505060a0830151613a0560a0860182613531565b5060c083015184820360c0860152613a1d8282613879565b91505060e0830151613a3260e0860182613531565b50610100830151848203610100860152613a4c8282613928565b915050610120830151613a63610120860182613531565b50610140830151848203610140860152613a7d8282613928565b915050610160830151613a94610160860182613531565b508091505092915050565b60006020820190508181036000830152613ab98184613986565b905092915050565b60a082016000820151613ad76000850182613783565b506020820151613aea6020850182613792565b506040820151613afd6040850182613531565b506060820151613b1060608501826137a1565b506080820151613b2360808501826137a1565b50505050565b600060a082019050613b3e6000830184613ac1565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613bad82612c50565b9150613bb883612c50565b9250828201905080821115613bd057613bcf613b73565b5b92915050565b6000613be182612dde565b915061ffff8203613bf557613bf4613b73565b5b600182019050919050565b6000613c0b82612c50565b9150613c1683612c50565b9250828203905081811115613c2e57613c2d613b73565b5b92915050565b6000613c3f82612c50565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613c7157613c70613b73565b5b600182019050919050565b6000613c8782612c50565b9150613c9283612c50565b9250828202613ca081612c50565b91508282048414831517613cb757613cb6613b73565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613cf882612c50565b9150613d0383612c50565b925082613d1357613d12613cbe565b5b828204905092915050565b600082825260208201905092915050565b7f526f756e64206973206e6f74206f766572207965740000000000000000000000600082015250565b6000613d65601583613d1e565b9150613d7082613d2f565b602082019050919050565b60006020820190508181036000830152613d9481613d58565b9050919050565b7f57696e6e696e67206e756d6265727320616c7265616479207365740000000000600082015250565b6000613dd1601b83613d1e565b9150613ddc82613d9b565b602082019050919050565b60006020820190508181036000830152613e0081613dc4565b9050919050565b7f496e76616c69642073656e646572000000000000000000000000000000000000600082015250565b6000613e3d600e83613d1e565b9150613e4882613e07565b602082019050919050565b60006020820190508181036000830152613e6c81613e30565b9050919050565b7f526f756e64206973206f76657200000000000000000000000000000000000000600082015250565b6000613ea9600d83613d1e565b9150613eb482613e73565b602082019050919050565b60006020820190508181036000830152613ed881613e9c565b9050919050565b7f496e76616c6964206e756d6265727320636f756e740000000000000000000000600082015250565b6000613f15601583613d1e565b9150613f2082613edf565b602082019050919050565b60006020820190508181036000830152613f4481613f08565b9050919050565b7f496e76616c6964206e756d626572730000000000000000000000000000000000600082015250565b6000613f81600f83613d1e565b9150613f8c82613f4b565b602082019050919050565b60006020820190508181036000830152613fb081613f74565b9050919050565b7f496e76616c696420706f776572206e756d626572000000000000000000000000600082015250565b6000613fed601483613d1e565b9150613ff882613fb7565b602082019050919050565b6000602082019050818103600083015261401c81613fe0565b9050919050565b7f526566657272616c2063616e6e6f74206265207468652073616d65206173207460008201527f6865207061727469636970616e74000000000000000000000000000000000000602082015250565b600061407f602e83613d1e565b915061408a82614023565b604082019050919050565b600060208201905081810360008301526140ae81614072565b9050919050565b6000815190506140c481612c5a565b92915050565b6000602082840312156140e0576140df612c46565b5b60006140ee848285016140b5565b91505092915050565b600060408201905061410c6000830185613375565b6141196020830184612d74565b9392505050565b60008151905061412f816131ea565b92915050565b60006020828403121561414b5761414a612c46565b5b600061415984828501614120565b91505092915050565b600081519050919050565b600081905092915050565b60005b8381101561419657808201518184015260208101905061417b565b60008484015250505050565b60006141ad82614162565b6141b7818561416d565b93506141c7818560208601614178565b80840191505092915050565b60006141df82846141a2565b91508190509291505056fea2646970667358221220d528d4927ed8a2d317f925dad2e0e0399805a2d9eaef2b34e0e27e2edc3ca99e64736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102275760003560e01c8063715018a611610130578063b288e1a9116100b8578063e278fe6f1161007c578063e278fe6f146106bb578063e2e30830146106c5578063e65b76a9146106f5578063efa3d53114610725578063f2fde38b1461075557610227565b8063b288e1a914610617578063b56c12b414610635578063bbd1783a14610651578063dd85ae5f1461065b578063df28f24b1461068b57610227565b8063998da3e9116100ff578063998da3e91461054d5780639b7be8fc146105695780639f8743f714610599578063af33d08f146105b7578063b217be05146105e757610227565b8063715018a6146104ed57806382e58923146104f75780638da5cb5b146105135780639469f2931461053157610227565b806336324a5d116101b357806358371dc61161018257806358371dc614610425578063598f3b9d146104555780636271516714610485578063659a8d86146104a15780636a65bcda146104d157610227565b806336324a5d1461035b5780633ed912261461038b5780634e9eba1d146103bf57806350b44712146103ef57610227565b806314eb76ac116101fa57806314eb76ac146102cd578063266fbf90146102e95780632ed4851514610305578063343f2566146103355780633590bd3c1461033f57610227565b806308469cc61461022c57806308bb71cd1461025c5780630cee803c1461028c578063146ca531146102a8575b600080fd5b61024660048036038101906102419190612c86565b610771565b6040516102539190612cce565b60405180910390f35b61027660048036038101906102719190612d47565b61078a565b6040516102839190612d83565b60405180910390f35b6102a660048036038101906102a19190612d9e565b6107a2565b005b6102b0610841565b6040516102c4989796959493929190612dfb565b60405180910390f35b6102e760048036038101906102e29190612d47565b6108bc565b005b61030360048036038101906102fe9190612ffe565b610908565b005b61031f600480360381019061031a9190612d9e565b610f5d565b60405161032c9190612d83565b60405180910390f35b61033d610f80565b005b610359600480360381019061035491906132fd565b611014565b005b61037560048036038101906103709190612c86565b6111e4565b6040516103829190612cce565b60405180910390f35b6103a560048036038101906103a09190612c86565b6111fd565b6040516103b6959493929190613384565b60405180910390f35b6103d960048036038101906103d491906133d7565b61128b565b6040516103e69190612d83565b60405180910390f35b61040960048036038101906104049190612c86565b6112a3565b60405161041c979695949392919061347b565b60405180910390f35b61043f600480360381019061043a9190612c86565b61135d565b60405161044c91906134ea565b60405180910390f35b61046f600480360381019061046a9190612c86565b611395565b60405161047c91906135c3565b60405180910390f35b61049f600480360381019061049a91906135e5565b611428565b005b6104bb60048036038101906104b69190613654565b611668565b6040516104c89190612d83565b60405180910390f35b6104eb60048036038101906104e69190613694565b611699565b005b6104f561171b565b005b610511600480360381019061050c9190612d9e565b61172f565b005b61051b6117de565b604051610528919061371f565b60405180910390f35b61054b6004803603810190610546919061373a565b611807565b005b61056760048036038101906105629190612d47565b611829565b005b610583600480360381019061057e9190612c86565b6118ea565b604051610590919061384d565b60405180910390f35b6105a1611a5c565b6040516105ae9190613a9f565b60405180910390f35b6105d160048036038101906105cc9190612c86565b611ce0565b6040516105de9190612d83565b60405180910390f35b61060160048036038101906105fc9190612d9e565b611d2f565b60405161060e91906134ea565b60405180910390f35b61061f611d76565b60405161062c919061371f565b60405180910390f35b61064f600480360381019061064a9190612c86565b611d9c565b005b610659612337565b005b61067560048036038101906106709190612c86565b6123b4565b6040516106829190613b29565b60405180910390f35b6106a560048036038101906106a09190612d47565b6124a6565b6040516106b29190612d83565b60405180910390f35b6106c36124be565b005b6106df60048036038101906106da91906133d7565b61252d565b6040516106ec9190612d83565b60405180910390f35b61070f600480360381019061070a9190613654565b612545565b60405161071c9190612d83565b60405180910390f35b61073f600480360381019061073a91906133d7565b612576565b60405161074c9190612d83565b60405180910390f35b61076f600480360381019061076a9190612d47565b61258e565b005b60008082118015610783575060458211155b9050919050565b60146020528060005260406000206000915090505481565b6107aa612614565b6000601283815481106107c0576107bf613b44565b5b9060005260206000209060020201905060018160010160176101000a81548160ff02191690831515021790555081601660006007600a81111561080657610805613404565b5b600a81111561081857610817613404565b5b815260200190815260200160002060008282546108359190613ba2565b92505081905550505050565b60028060000154908060010154908060020154908060030160009054906101000a900460ff16908060050160009054906101000a900461ffff16908060070160009054906101000a900461ffff16908060090160009054906101000a900461ffff169080600b0160009054906101000a900461ffff16905088565b6108c4612614565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b610910612614565b61091b838383611428565b6000600e805490509050600e6040518060e001604052808381526020013273ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020016000151581526020018781526020016000600a81111561099357610992613404565b5b81526020018561ffff1681525090806001815401808255809150506001900390600052602060002090600502016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160020160146101000a81548160ff0219169083151502179055506080820151816003015560a08201518160040160006101000a81548160ff0219169083600a811115610ab657610ab5613404565b5b021790555060c08201518160040160016101000a81548161ffff021916908361ffff160217905550505060005b8451811015610b6e57600f6000838152602001908152602001600020858281518110610b1257610b11613b44565b5b602002602001015190806001815401808255809150506001900390600052602060002090601091828204019190066002029091909190916101000a81548161ffff021916908361ffff1602179055508080600101915050610ae3565b5060026008018190806001815401808255809150506001900390600052602060002001600090919091909150556002600901600081819054906101000a900461ffff1680929190610bbe90613bd6565b91906101000a81548161ffff021916908361ffff16021790555050601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001600e80549050610c2a9190613c00565b9080600181540180825580915050600190039060005260206000200160009091909190915055601160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610ca090613c34565b9190505550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610f5657600060128054905090506002600a018190806001815401808255809150506001900390600052602060002001600090919091909150556002600b01600081819054906101000a900461ffff1680929190610d3290613bd6565b91906101000a81548161ffff021916908361ffff1602179055505060126040518060a001604052808381526020018573ffffffffffffffffffffffffffffffffffffffff1681526020016002600b0160009054906101000a900461ffff1661ffff1681526020016000151581526020016000151581525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160146101000a81548161ffff021916908361ffff16021790555060608201518160010160166101000a81548160ff02191690831515021790555060808201518160010160176101000a81548160ff0219169083151502179055505050601360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001601280549050610ed99190613c00565b9080600181540180825580915050600190039060005260206000200160009091909190915055601460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610f4f90613c34565b9190505550505b5050505050565b60006127108284610f6e9190613c7c565b610f789190613ced565b905092915050565b6002800154421015610fc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fbe90613d7b565b60405180910390fd5b600060026004018054905014611012576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100990613de7565b60405180910390fd5b565b61101c612614565b60005b825181101561110157600083828151811061103d5761103c613b44565b5b602002602001015190506000600e82600001518154811061106157611060613b44565b5b9060005260206000209060050201905081602001518160040160006101000a81548160ff0219169083600a81111561109c5761109b613404565b5b0217905550601760008360200151600a8111156110bc576110bb613404565b5b600a8111156110ce576110cd613404565b5b815260200190815260200160002060008154809291906110ed90613c34565b91905055505050808060010191505061101f565b5060005b81518110156111df57600082828151811061112357611122613b44565b5b602002602001015190506000601282600001518154811061114757611146613b44565b5b9060005260206000209060020201905081602001518160010160166101000a81548160ff0219169083151502179055508160200151156111d057601760006007600a81111561119957611198613404565b5b600a8111156111ab576111aa613404565b5b815260200190815260200160002060008154809291906111ca90613c34565b91905055505b50508080600101915050611105565b505050565b600080821180156111f65750601a8211155b9050919050565b6012818154811061120d57600080fd5b90600052602060002090600202016000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160149054906101000a900461ffff16908060010160169054906101000a900460ff16908060010160179054906101000a900460ff16905085565b60166020528060005260406000206000915090505481565b600e81815481106112b357600080fd5b90600052602060002090600502016000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160149054906101000a900460ff16908060030154908060040160009054906101000a900460ff16908060040160019054906101000a900461ffff16905087565b6019818154811061136d57600080fd5b9060005260206000209060109182820401919006600202915054906101000a900461ffff1681565b6060600f600083815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561141c57602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116113e35790505b50505050509050919050565b611430612614565b600073ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff160361149f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149690613e53565b60405180910390fd5b600280015442106114e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114dc90613ebf565b60405180910390fd5b6005835114611529576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152090613f2b565b60405180910390fd5b60005b83518110156115a85761155c84828151811061154b5761154a613b44565b5b602002602001015161ffff16610771565b61159b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159290613f97565b60405180910390fd5b808060010191505061152c565b506115b68261ffff166111e4565b6115f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ec90614003565b60405180910390fd5b3273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611663576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165a90614095565b60405180910390fd5b505050565b6013602052816000526040600020818154811061168457600080fd5b90600052602060002001600091509150505481565b6116a1612614565b82600260040190805190602001906116ba929190612a34565b5081600260050160006101000a81548161ffff021916908361ffff16021790555080600260060190805190602001906116f4929190612a34565b508051600260070160006101000a81548161ffff021916908361ffff160217905550505050565b611723612614565b61172d600061269b565b565b611737612614565b6000600e838154811061174d5761174c613b44565b5b9060005260206000209060050201905060018160020160146101000a81548160ff02191690831515021790555081601660008360040160009054906101000a900460ff16600a8111156117a3576117a2613404565b5b600a8111156117b5576117b4613404565b5b815260200190815260200160002060008282546117d29190613ba2565b92505081905550505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61180f612614565b8060199080519060200190611825929190612a34565b5050565b611831612614565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161186c919061371f565b602060405180830381865afa158015611889573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ad91906140ca565b905060008111156118e6576118e582600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168361275f565b5b5050565b6118f2612ade565b600e828154811061190657611905613b44565b5b90600052602060002090600502016040518060e0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160149054906101000a900460ff16151515158152602001600382015481526020016004820160009054906101000a900460ff16600a811115611a1f57611a1e613404565b5b600a811115611a3157611a30613404565b5b81526020016004820160019054906101000a900461ffff1661ffff1661ffff16815250509050919050565b611a64612b5f565b6002604051806101800160405290816000820154815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff1615151515815260200160048201805480602002602001604051908101604052809291908181526020018280548015611b2257602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411611ae95790505b505050505081526020016005820160009054906101000a900461ffff1661ffff1661ffff16815260200160068201805480602002602001604051908101604052809291908181526020018280548015611bc257602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411611b895790505b505050505081526020016007820160009054906101000a900461ffff1661ffff1661ffff16815260200160088201805480602002602001604051908101604052809291908181526020018280548015611c3a57602002820191906000526020600020905b815481526020019060010190808311611c26575b505050505081526020016009820160009054906101000a900461ffff1661ffff1661ffff168152602001600a8201805480602002602001604051908101604052809291908181526020018280548015611cb257602002820191906000526020600020905b815481526020019060010190808311611c9e575b50505050508152602001600b820160009054906101000a900461ffff1661ffff1661ffff1681525050905090565b6000611d28826019600981548110611cfb57611cfa613b44565b5b90600052602060002090601091828204019190066002029054906101000a900461ffff1661ffff16610f5d565b9050919050565b600f6020528160005260406000208181548110611d4b57600080fd5b9060005260206000209060109182820401919006600202915091509054906101000a900461ffff1681565b601860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611da4612614565b6000611dec826019600081548110611dbf57611dbe613b44565b5b90600052602060002090601091828204019190066002029054906101000a900461ffff1661ffff16610f5d565b9050611e34816019600181548110611e0757611e06613b44565b5b90600052602060002090601091828204019190066002029054906101000a900461ffff1661ffff16610f5d565b601560006001600a811115611e4c57611e4b613404565b5b600a811115611e5e57611e5d613404565b5b81526020019081526020016000206000828254611e7b9190613ba2565b92505081905550611ec8816019600281548110611e9b57611e9a613b44565b5b90600052602060002090601091828204019190066002029054906101000a900461ffff1661ffff16610f5d565b601560006002600a811115611ee057611edf613404565b5b600a811115611ef257611ef1613404565b5b81526020019081526020016000206000828254611f0f9190613ba2565b92505081905550611f5c816019600381548110611f2f57611f2e613b44565b5b90600052602060002090601091828204019190066002029054906101000a900461ffff1661ffff16610f5d565b601560006003600a811115611f7457611f73613404565b5b600a811115611f8657611f85613404565b5b81526020019081526020016000206000828254611fa39190613ba2565b92505081905550611ff0816019600481548110611fc357611fc2613b44565b5b90600052602060002090601091828204019190066002029054906101000a900461ffff1661ffff16610f5d565b601560006004600a81111561200857612007613404565b5b600a81111561201a57612019613404565b5b815260200190815260200160002060008282546120379190613ba2565b9250508190555061208481601960058154811061205757612056613b44565b5b90600052602060002090601091828204019190066002029054906101000a900461ffff1661ffff16610f5d565b601560006005600a81111561209c5761209b613404565b5b600a8111156120ae576120ad613404565b5b815260200190815260200160002060008282546120cb9190613ba2565b925050819055506121188160196006815481106120eb576120ea613b44565b5b90600052602060002090601091828204019190066002029054906101000a900461ffff1661ffff16610f5d565b601560006006600a8111156121305761212f613404565b5b600a81111561214257612141613404565b5b8152602001908152602001600020600082825461215f9190613ba2565b9250508190555080601560006008600a81111561217f5761217e613404565b5b600a81111561219157612190613404565b5b815260200190815260200160002060008282546121ae9190613ba2565b925050819055506121fb8260196007815481106121ce576121cd613b44565b5b90600052602060002090601091828204019190066002029054906101000a900461ffff1661ffff16610f5d565b601560006007600a81111561221357612212613404565b5b600a81111561222557612224613404565b5b815260200190815260200160002060008282546122429190613ba2565b9250508190555061228f82601960088154811061226257612261613b44565b5b90600052602060002090601091828204019190066002029054906101000a900461ffff1661ffff16610f5d565b601560006009600a8111156122a7576122a6613404565b5b600a8111156122b9576122b8613404565b5b815260200190815260200160002060008282546122d69190613ba2565b925050819055506122e682611ce0565b60156000600a808111156122fd576122fc613404565b5b600a81111561230f5761230e613404565b5b8152602001908152602001600020600082825461232c9190613ba2565b925050819055505050565b61233f612614565b60004711156123b257600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156123b0573d6000803e3d6000fd5b505b565b6123bc612bd2565b601282815481106123d0576123cf613b44565b5b90600052602060002090600202016040518060a0016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160149054906101000a900461ffff1661ffff1661ffff1681526020016001820160169054906101000a900460ff161515151581526020016001820160179054906101000a900460ff1615151515815250509050919050565b60116020528060005260406000206000915090505481565b6124c6612614565b600280015442101561250d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161250490613d7b565b60405180910390fd5b6001600260030160006101000a81548160ff021916908315150217905550565b60156020528060005260406000206000915090505481565b6010602052816000526040600020818154811061256157600080fd5b90600052602060002001600091509150505481565b60176020528060005260406000206000915090505481565b612596612614565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036126085760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016125ff919061371f565b60405180910390fd5b6126118161269b565b50565b61261c6127de565b73ffffffffffffffffffffffffffffffffffffffff1661263a6117de565b73ffffffffffffffffffffffffffffffffffffffff16146126995761265d6127de565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401612690919061371f565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6127d9838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040516024016127929291906140f7565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506127e6565b505050565b600033905090565b6000612811828473ffffffffffffffffffffffffffffffffffffffff1661287d90919063ffffffff16565b905060008151141580156128365750808060200190518101906128349190614135565b155b1561287857826040517f5274afe700000000000000000000000000000000000000000000000000000000815260040161286f919061371f565b60405180910390fd5b505050565b606061288b83836000612893565b905092915050565b6060814710156128da57306040517fcd7860590000000000000000000000000000000000000000000000000000000081526004016128d1919061371f565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff16848660405161290391906141d3565b60006040518083038185875af1925050503d8060008114612940576040519150601f19603f3d011682016040523d82523d6000602084013e612945565b606091505b5091509150612955868383612960565b925050509392505050565b60608261297557612970826129ef565b6129e7565b6000825114801561299d575060008473ffffffffffffffffffffffffffffffffffffffff163b145b156129df57836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016129d6919061371f565b60405180910390fd5b8190506129e8565b5b9392505050565b600081511115612a025780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82805482825590600052602060002090600f01601090048101928215612acd5791602002820160005b83821115612a9d57835183826101000a81548161ffff021916908361ffff1602179055509260200192600201602081600101049283019260010302612a5d565b8015612acb5782816101000a81549061ffff0219169055600201602081600101049283019260010302612a9d565b505b509050612ada9190612c1f565b5090565b6040518060e0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001600081526020016000600a811115612b4e57612b4d613404565b5b8152602001600061ffff1681525090565b60405180610180016040528060008152602001600081526020016000815260200160001515815260200160608152602001600061ffff16815260200160608152602001600061ffff16815260200160608152602001600061ffff16815260200160608152602001600061ffff1681525090565b6040518060a0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600061ffff1681526020016000151581526020016000151581525090565b5b80821115612c38576000816000905550600101612c20565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b612c6381612c50565b8114612c6e57600080fd5b50565b600081359050612c8081612c5a565b92915050565b600060208284031215612c9c57612c9b612c46565b5b6000612caa84828501612c71565b91505092915050565b60008115159050919050565b612cc881612cb3565b82525050565b6000602082019050612ce36000830184612cbf565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612d1482612ce9565b9050919050565b612d2481612d09565b8114612d2f57600080fd5b50565b600081359050612d4181612d1b565b92915050565b600060208284031215612d5d57612d5c612c46565b5b6000612d6b84828501612d32565b91505092915050565b612d7d81612c50565b82525050565b6000602082019050612d986000830184612d74565b92915050565b60008060408385031215612db557612db4612c46565b5b6000612dc385828601612c71565b9250506020612dd485828601612c71565b9150509250929050565b600061ffff82169050919050565b612df581612dde565b82525050565b600061010082019050612e11600083018b612d74565b612e1e602083018a612d74565b612e2b6040830189612d74565b612e386060830188612cbf565b612e456080830187612dec565b612e5260a0830186612dec565b612e5f60c0830185612dec565b612e6c60e0830184612dec565b9998505050505050505050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612ec782612e7e565b810181811067ffffffffffffffff82111715612ee657612ee5612e8f565b5b80604052505050565b6000612ef9612c3c565b9050612f058282612ebe565b919050565b600067ffffffffffffffff821115612f2557612f24612e8f565b5b602082029050602081019050919050565b600080fd5b612f4481612dde565b8114612f4f57600080fd5b50565b600081359050612f6181612f3b565b92915050565b6000612f7a612f7584612f0a565b612eef565b90508083825260208201905060208402830185811115612f9d57612f9c612f36565b5b835b81811015612fc65780612fb28882612f52565b845260208401935050602081019050612f9f565b5050509392505050565b600082601f830112612fe557612fe4612e79565b5b8135612ff5848260208601612f67565b91505092915050565b6000806000806080858703121561301857613017612c46565b5b600061302687828801612c71565b945050602085013567ffffffffffffffff81111561304757613046612c4b565b5b61305387828801612fd0565b935050604061306487828801612f52565b925050606061307587828801612d32565b91505092959194509250565b600067ffffffffffffffff82111561309c5761309b612e8f565b5b602082029050602081019050919050565b600080fd5b600b81106130bf57600080fd5b50565b6000813590506130d1816130b2565b92915050565b6000604082840312156130ed576130ec6130ad565b5b6130f76040612eef565b9050600061310784828501612c71565b600083015250602061311b848285016130c2565b60208301525092915050565b600061313a61313584613081565b612eef565b9050808382526020820190506040840283018581111561315d5761315c612f36565b5b835b81811015613186578061317288826130d7565b84526020840193505060408101905061315f565b5050509392505050565b600082601f8301126131a5576131a4612e79565b5b81356131b5848260208601613127565b91505092915050565b600067ffffffffffffffff8211156131d9576131d8612e8f565b5b602082029050602081019050919050565b6131f381612cb3565b81146131fe57600080fd5b50565b600081359050613210816131ea565b92915050565b60006040828403121561322c5761322b6130ad565b5b6132366040612eef565b9050600061324684828501612c71565b600083015250602061325a84828501613201565b60208301525092915050565b6000613279613274846131be565b612eef565b9050808382526020820190506040840283018581111561329c5761329b612f36565b5b835b818110156132c557806132b18882613216565b84526020840193505060408101905061329e565b5050509392505050565b600082601f8301126132e4576132e3612e79565b5b81356132f4848260208601613266565b91505092915050565b6000806040838503121561331457613313612c46565b5b600083013567ffffffffffffffff81111561333257613331612c4b565b5b61333e85828601613190565b925050602083013567ffffffffffffffff81111561335f5761335e612c4b565b5b61336b858286016132cf565b9150509250929050565b61337e81612d09565b82525050565b600060a0820190506133996000830188612d74565b6133a66020830187613375565b6133b36040830186612dec565b6133c06060830185612cbf565b6133cd6080830184612cbf565b9695505050505050565b6000602082840312156133ed576133ec612c46565b5b60006133fb848285016130c2565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600b811061344457613443613404565b5b50565b600081905061345582613433565b919050565b600061346582613447565b9050919050565b6134758161345a565b82525050565b600060e082019050613490600083018a612d74565b61349d6020830189613375565b6134aa6040830188613375565b6134b76060830187612cbf565b6134c46080830186612d74565b6134d160a083018561346c565b6134de60c0830184612dec565b98975050505050505050565b60006020820190506134ff6000830184612dec565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61353a81612dde565b82525050565b600061354c8383613531565b60208301905092915050565b6000602082019050919050565b600061357082613505565b61357a8185613510565b935061358583613521565b8060005b838110156135b657815161359d8882613540565b97506135a883613558565b925050600181019050613589565b5085935050505092915050565b600060208201905081810360008301526135dd8184613565565b905092915050565b6000806000606084860312156135fe576135fd612c46565b5b600084013567ffffffffffffffff81111561361c5761361b612c4b565b5b61362886828701612fd0565b935050602061363986828701612f52565b925050604061364a86828701612d32565b9150509250925092565b6000806040838503121561366b5761366a612c46565b5b600061367985828601612d32565b925050602061368a85828601612c71565b9150509250929050565b6000806000606084860312156136ad576136ac612c46565b5b600084013567ffffffffffffffff8111156136cb576136ca612c4b565b5b6136d786828701612fd0565b93505060206136e886828701612f52565b925050604084013567ffffffffffffffff81111561370957613708612c4b565b5b61371586828701612fd0565b9150509250925092565b60006020820190506137346000830184613375565b92915050565b6000602082840312156137505761374f612c46565b5b600082013567ffffffffffffffff81111561376e5761376d612c4b565b5b61377a84828501612fd0565b91505092915050565b61378c81612c50565b82525050565b61379b81612d09565b82525050565b6137aa81612cb3565b82525050565b6137b98161345a565b82525050565b60e0820160008201516137d56000850182613783565b5060208201516137e86020850182613792565b5060408201516137fb6040850182613792565b50606082015161380e60608501826137a1565b5060808201516138216080850182613783565b5060a082015161383460a08501826137b0565b5060c082015161384760c0850182613531565b50505050565b600060e08201905061386260008301846137bf565b92915050565b600082825260208201905092915050565b600061388482613505565b61388e8185613868565b935061389983613521565b8060005b838110156138ca5781516138b18882613540565b97506138bc83613558565b92505060018101905061389d565b5085935050505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600061390f8383613783565b60208301905092915050565b6000602082019050919050565b6000613933826138d7565b61393d81856138e2565b9350613948836138f3565b8060005b838110156139795781516139608882613903565b975061396b8361391b565b92505060018101905061394c565b5085935050505092915050565b60006101808301600083015161399f6000860182613783565b5060208301516139b26020860182613783565b5060408301516139c56040860182613783565b5060608301516139d860608601826137a1565b50608083015184820360808601526139f08282613879565b91505060a0830151613a0560a0860182613531565b5060c083015184820360c0860152613a1d8282613879565b91505060e0830151613a3260e0860182613531565b50610100830151848203610100860152613a4c8282613928565b915050610120830151613a63610120860182613531565b50610140830151848203610140860152613a7d8282613928565b915050610160830151613a94610160860182613531565b508091505092915050565b60006020820190508181036000830152613ab98184613986565b905092915050565b60a082016000820151613ad76000850182613783565b506020820151613aea6020850182613792565b506040820151613afd6040850182613531565b506060820151613b1060608501826137a1565b506080820151613b2360808501826137a1565b50505050565b600060a082019050613b3e6000830184613ac1565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613bad82612c50565b9150613bb883612c50565b9250828201905080821115613bd057613bcf613b73565b5b92915050565b6000613be182612dde565b915061ffff8203613bf557613bf4613b73565b5b600182019050919050565b6000613c0b82612c50565b9150613c1683612c50565b9250828203905081811115613c2e57613c2d613b73565b5b92915050565b6000613c3f82612c50565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613c7157613c70613b73565b5b600182019050919050565b6000613c8782612c50565b9150613c9283612c50565b9250828202613ca081612c50565b91508282048414831517613cb757613cb6613b73565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613cf882612c50565b9150613d0383612c50565b925082613d1357613d12613cbe565b5b828204905092915050565b600082825260208201905092915050565b7f526f756e64206973206e6f74206f766572207965740000000000000000000000600082015250565b6000613d65601583613d1e565b9150613d7082613d2f565b602082019050919050565b60006020820190508181036000830152613d9481613d58565b9050919050565b7f57696e6e696e67206e756d6265727320616c7265616479207365740000000000600082015250565b6000613dd1601b83613d1e565b9150613ddc82613d9b565b602082019050919050565b60006020820190508181036000830152613e0081613dc4565b9050919050565b7f496e76616c69642073656e646572000000000000000000000000000000000000600082015250565b6000613e3d600e83613d1e565b9150613e4882613e07565b602082019050919050565b60006020820190508181036000830152613e6c81613e30565b9050919050565b7f526f756e64206973206f76657200000000000000000000000000000000000000600082015250565b6000613ea9600d83613d1e565b9150613eb482613e73565b602082019050919050565b60006020820190508181036000830152613ed881613e9c565b9050919050565b7f496e76616c6964206e756d6265727320636f756e740000000000000000000000600082015250565b6000613f15601583613d1e565b9150613f2082613edf565b602082019050919050565b60006020820190508181036000830152613f4481613f08565b9050919050565b7f496e76616c6964206e756d626572730000000000000000000000000000000000600082015250565b6000613f81600f83613d1e565b9150613f8c82613f4b565b602082019050919050565b60006020820190508181036000830152613fb081613f74565b9050919050565b7f496e76616c696420706f776572206e756d626572000000000000000000000000600082015250565b6000613fed601483613d1e565b9150613ff882613fb7565b602082019050919050565b6000602082019050818103600083015261401c81613fe0565b9050919050565b7f526566657272616c2063616e6e6f74206265207468652073616d65206173207460008201527f6865207061727469636970616e74000000000000000000000000000000000000602082015250565b600061407f602e83613d1e565b915061408a82614023565b604082019050919050565b600060208201905081810360008301526140ae81614072565b9050919050565b6000815190506140c481612c5a565b92915050565b6000602082840312156140e0576140df612c46565b5b60006140ee848285016140b5565b91505092915050565b600060408201905061410c6000830185613375565b6141196020830184612d74565b9392505050565b60008151905061412f816131ea565b92915050565b60006020828403121561414b5761414a612c46565b5b600061415984828501614120565b91505092915050565b600081519050919050565b600081905092915050565b60005b8381101561419657808201518184015260208101905061417b565b60008484015250505050565b60006141ad82614162565b6141b7818561416d565b93506141c7818560208601614178565b80840191505092915050565b60006141df82846141a2565b91508190509291505056fea2646970667358221220d528d4927ed8a2d317f925dad2e0e0399805a2d9eaef2b34e0e27e2edc3ca99e64736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/LotteryRound.sol:LotteryRound",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4092,
        "contract": "contracts/LotteryRound.sol:LotteryRound",
        "label": "teamAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3028,
        "contract": "contracts/LotteryRound.sol:LotteryRound",
        "label": "round",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Round)935_storage"
      },
      {
        "astId": 3041,
        "contract": "contracts/LotteryRound.sol:LotteryRound",
        "label": "tickets",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_struct(Ticket)951_storage)dyn_storage"
      },
      {
        "astId": 3059,
        "contract": "contracts/LotteryRound.sol:LotteryRound",
        "label": "ticketNumbers",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_array(t_uint16)dyn_storage)"
      },
      {
        "astId": 3077,
        "contract": "contracts/LotteryRound.sol:LotteryRound",
        "label": "roundTicketsByAddress",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3081,
        "contract": "contracts/LotteryRound.sol:LotteryRound",
        "label": "roundTicketsByAddressCount",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3085,
        "contract": "contracts/LotteryRound.sol:LotteryRound",
        "label": "referralTickets",
        "offset": 0,
        "slot": "18",
        "type": "t_array(t_struct(ReferralTicket)968_storage)dyn_storage"
      },
      {
        "astId": 3103,
        "contract": "contracts/LotteryRound.sol:LotteryRound",
        "label": "roundReferralTicketsByAddress",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 3107,
        "contract": "contracts/LotteryRound.sol:LotteryRound",
        "label": "roundReferralTicketsByAddressCount",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3112,
        "contract": "contracts/LotteryRound.sol:LotteryRound",
        "label": "victoryTierAmounts",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_enum(RoundVictoryTier)906,t_uint256)"
      },
      {
        "astId": 3117,
        "contract": "contracts/LotteryRound.sol:LotteryRound",
        "label": "victoryTierAmountsClaimed",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_enum(RoundVictoryTier)906,t_uint256)"
      },
      {
        "astId": 3122,
        "contract": "contracts/LotteryRound.sol:LotteryRound",
        "label": "winnersForEachTier",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_enum(RoundVictoryTier)906,t_uint256)"
      },
      {
        "astId": 3124,
        "contract": "contracts/LotteryRound.sol:LotteryRound",
        "label": "previousRound",
        "offset": 0,
        "slot": "24",
        "type": "t_address"
      },
      {
        "astId": 3138,
        "contract": "contracts/LotteryRound.sol:LotteryRound",
        "label": "poolPercentagesBasePoints",
        "offset": 0,
        "slot": "25",
        "type": "t_array(t_uint16)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(ReferralTicket)968_storage)dyn_storage": {
        "base": "t_struct(ReferralTicket)968_storage",
        "encoding": "dynamic_array",
        "label": "struct ReferralTicket[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Ticket)951_storage)dyn_storage": {
        "base": "t_struct(Ticket)951_storage",
        "encoding": "dynamic_array",
        "label": "struct Ticket[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint16)dyn_storage": {
        "base": "t_uint16",
        "encoding": "dynamic_array",
        "label": "uint16[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(RoundVictoryTier)906": {
        "encoding": "inplace",
        "label": "enum RoundVictoryTier",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(RoundVictoryTier)906,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(RoundVictoryTier)906",
        "label": "mapping(enum RoundVictoryTier => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_uint16)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint16[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint16)dyn_storage"
      },
      "t_struct(ReferralTicket)968_storage": {
        "encoding": "inplace",
        "label": "struct ReferralTicket",
        "members": [
          {
            "astId": 959,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 961,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "referralAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 963,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "referralTicketNumber",
            "offset": 20,
            "slot": "1",
            "type": "t_uint16"
          },
          {
            "astId": 965,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "winner",
            "offset": 22,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 967,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "claimed",
            "offset": 23,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Round)935_storage": {
        "encoding": "inplace",
        "label": "struct Round",
        "members": [
          {
            "astId": 908,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 910,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "startTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 912,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "endTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 914,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "ended",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 917,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "roundNumbers",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint16)dyn_storage"
          },
          {
            "astId": 919,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "powerNumber",
            "offset": 0,
            "slot": "5",
            "type": "t_uint16"
          },
          {
            "astId": 922,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "referralWinnersNumber",
            "offset": 0,
            "slot": "6",
            "type": "t_array(t_uint16)dyn_storage"
          },
          {
            "astId": 924,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "referralWinnersNumberCount",
            "offset": 0,
            "slot": "7",
            "type": "t_uint16"
          },
          {
            "astId": 927,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "ticketIds",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 929,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "ticketsCount",
            "offset": 0,
            "slot": "9",
            "type": "t_uint16"
          },
          {
            "astId": 932,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "referralTicketIds",
            "offset": 0,
            "slot": "10",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 934,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "referralCounts",
            "offset": 0,
            "slot": "11",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_struct(Ticket)951_storage": {
        "encoding": "inplace",
        "label": "struct Ticket",
        "members": [
          {
            "astId": 937,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 939,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "participantAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 941,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "referralAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 943,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "claimed",
            "offset": 20,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 945,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "chainId",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 948,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "victoryTier",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(RoundVictoryTier)906"
          },
          {
            "astId": 950,
            "contract": "contracts/LotteryRound.sol:LotteryRound",
            "label": "powerNumber",
            "offset": 1,
            "slot": "4",
            "type": "t_uint16"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}