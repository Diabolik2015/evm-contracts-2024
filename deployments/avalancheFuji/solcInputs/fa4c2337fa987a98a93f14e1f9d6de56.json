{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {ConfirmedOwnerWithProposal} from \"./ConfirmedOwnerWithProposal.sol\";\n\n/// @title The ConfirmedOwner contract\n/// @notice A contract with helpers for basic contract ownership.\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\n}\n"
    },
    "@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IOwnable} from \"../interfaces/IOwnable.sol\";\n\n/// @title The ConfirmedOwner contract\n/// @notice A contract with helpers for basic contract ownership.\ncontract ConfirmedOwnerWithProposal is IOwnable {\n  address private s_owner;\n  address private s_pendingOwner;\n\n  event OwnershipTransferRequested(address indexed from, address indexed to);\n  event OwnershipTransferred(address indexed from, address indexed to);\n\n  constructor(address newOwner, address pendingOwner) {\n    // solhint-disable-next-line custom-errors\n    require(newOwner != address(0), \"Cannot set owner to zero\");\n\n    s_owner = newOwner;\n    if (pendingOwner != address(0)) {\n      _transferOwnership(pendingOwner);\n    }\n  }\n\n  /// @notice Allows an owner to begin transferring ownership to a new address.\n  function transferOwnership(address to) public override onlyOwner {\n    _transferOwnership(to);\n  }\n\n  /// @notice Allows an ownership transfer to be completed by the recipient.\n  function acceptOwnership() external override {\n    // solhint-disable-next-line custom-errors\n    require(msg.sender == s_pendingOwner, \"Must be proposed owner\");\n\n    address oldOwner = s_owner;\n    s_owner = msg.sender;\n    s_pendingOwner = address(0);\n\n    emit OwnershipTransferred(oldOwner, msg.sender);\n  }\n\n  /// @notice Get the current owner\n  function owner() public view override returns (address) {\n    return s_owner;\n  }\n\n  /// @notice validate, transfer ownership, and emit relevant events\n  function _transferOwnership(address to) private {\n    // solhint-disable-next-line custom-errors\n    require(to != msg.sender, \"Cannot transfer to self\");\n\n    s_pendingOwner = to;\n\n    emit OwnershipTransferRequested(s_owner, to);\n  }\n\n  /// @notice validate access\n  function _validateOwnership() internal view {\n    // solhint-disable-next-line custom-errors\n    require(msg.sender == s_owner, \"Only callable by owner\");\n  }\n\n  /// @notice Reverts if called by anyone other than the contract owner.\n  modifier onlyOwner() {\n    _validateOwnership();\n    _;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IOwnable {\n  function owner() external returns (address);\n\n  function transferOwnership(address recipient) external;\n\n  function acceptOwnership() external;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(\n    uint64 subId\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  // solhint-disable-next-line chainlink-solidity/prefix-immutable-variables-with-i\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/CyclixRandomizer.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// An example of a consumer contract that relies on a subscription for funding.\npragma solidity ^0.8.20;\n\nimport {VRFCoordinatorV2Interface} from \"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\";\nimport {VRFConsumerBaseV2} from \"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\";\nimport {ConfirmedOwner} from \"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\";\nimport {CyclixRandomizerInterface} from \"./CyclixRandomizerInterface.sol\";\n\ncontract CyclixRandomizer is CyclixRandomizerInterface, VRFConsumerBaseV2, ConfirmedOwner {\n    event RequestSent(uint256 requestId, uint32 numWords, address requestor);\n    event RequestFulfilled(uint256 requestId, uint256[] randomWords);\n\n    struct RequestStatus {\n        uint32 wordsCount; // number of words requested\n        bool fulfilled; // whether the request has been successfully fulfilled\n        bool exists; // whether a requestId exists\n        uint256[] randomWords;\n    }\n    mapping(uint256 => RequestStatus) public s_requests;\n    mapping(address => bool) public gameContractAdded;\n    mapping(address => bool) public gameContractActive;\n    mapping(address => string) public gameContractName;\n    mapping(address => uint256) public gameContractRequestsCount;\n    mapping(address => uint256[]) public gameContractRequests;\n\n    // Your subscription ID.\n    uint64 public s_subscriptionId;\n\n    // past requests Id.\n    uint256[] public requestIds;\n    uint256 public lastRequestId;\n\n    // The gas lane to use, which specifies the maximum gas price to bump to.\n    bytes32 public keyHash;\n\n    // Depends on the number of requested values that you want sent to the\n    // fulfillRandomWords() function. Storing each word costs about 20,000 gas,\n    // so 100,000 is a safe default for this example contract. Test and adjust\n    // this limit based on the network that you select, the size of the request,\n    // and the processing of the callback request in the fulfillRandomWords()\n    // function.\n    uint32 public callbackGasLimitForOneWord = 30000;\n    function setCallbackGasLimitForOneWord(uint32 newGas) external onlyOwner {\n        callbackGasLimitForOneWord = newGas;\n    }\n    uint16 public requestConfirmations = 3;\n    mapping(uint256 => uint256) public randomWordsRecoverRequest;\n    address public coordinatorAddress;\n\n    constructor(uint64 subscriptionId, bytes32 _keyHash, address _coordinatorAddress)\n    VRFConsumerBaseV2(_coordinatorAddress)\n    ConfirmedOwner(msg.sender)\n    {\n        coordinatorAddress = _coordinatorAddress;\n        s_subscriptionId = subscriptionId;\n        keyHash = _keyHash;\n    }\n\n    function registerGameContract(address gameAddress, string calldata name) public {\n        require(tx.origin == owner(), \"Only owner can register game contract\");\n        require(gameContractAdded[gameAddress] == false, \"Game contracts will remain for verifications\" );\n        gameContractAdded[gameAddress] = true;\n        gameContractActive[gameAddress] = true;\n        gameContractName[gameAddress] = name;\n    }\n\n    function setGameContractStatus(address gameAddress, bool status) external onlyOwner {\n        gameContractActive[gameAddress] = status;\n    }\n\n    // Assumes the subscription is funded sufficiently.\n    function requestRandomWords(uint32 numWords) public returns (uint256 requestId)\n    {\n        require(msg.sender == owner() || gameContractAdded[msg.sender], \"Only Owner and Game can request random number\");\n        uint32 callbackGasLimit = callbackGasLimitForOneWord;\n\n        requestId = VRFCoordinatorV2Interface(coordinatorAddress).requestRandomWords(keyHash, s_subscriptionId,\n            requestConfirmations, callbackGasLimit * numWords, numWords);\n\n        s_requests[requestId] = RequestStatus({\n            wordsCount: numWords,\n            randomWords: new uint256[](0),\n            exists: true,\n            fulfilled: false\n        });\n        requestIds.push(requestId);\n        lastRequestId = requestId;\n        gameContractRequests[msg.sender].push(requestId);\n        gameContractRequestsCount[msg.sender]++;\n        emit RequestSent(requestId, numWords, msg.sender);\n        return requestId;\n    }\n\n    function fulfillRandomWords(\n        uint256 _requestId,\n        uint256[] memory _randomWords\n    ) internal override {\n        require(s_requests[_requestId].exists, \"request not found\");\n        s_requests[_requestId].fulfilled = true;\n        s_requests[_requestId].randomWords = _randomWords;\n        emit RequestFulfilled(_requestId, _randomWords);\n    }\n\n    function getLastRequestIdForCaller(address _gameAddress) public view returns (uint256) {\n        return gameContractRequests[_gameAddress][gameContractRequestsCount[_gameAddress] - 1];\n    }\n\n    function recoverLostNumberRequest(uint256 _requestId) public onlyOwner returns (uint256) {\n        require(s_requests[_requestId].exists, \"request not found\");\n        require(s_requests[_requestId].fulfilled == false, \"request already fulfilled\");\n        RequestStatus memory request = s_requests[_requestId];\n        randomWordsRecoverRequest[_requestId] = requestRandomWords(request.wordsCount);\n        return randomWordsRecoverRequest[_requestId];\n    }\n\n    function getRequestStatus(\n        uint256 _requestId\n    ) public view returns (bool fulfilled, uint256[] memory randomWords) {\n        require(s_requests[_requestId].exists, \"request not found\");\n        if (s_requests[randomWordsRecoverRequest[_requestId]].exists) {\n            RequestStatus memory request = s_requests[randomWordsRecoverRequest[_requestId]];\n            return (request.fulfilled, request.randomWords);\n        } else {\n            RequestStatus memory request = s_requests[_requestId];\n            return (request.fulfilled, request.randomWords);\n        }\n    }\n}"
    },
    "contracts/CyclixRandomizerInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\ninterface CyclixRandomizerInterface {\n    function requestRandomWords(uint32 numWords) external returns (uint256 requestId);\n    function getRequestStatus(uint256 _requestId) external view returns (bool fulfilled, uint256[] memory randomWords);\n    function registerGameContract(address gameAddress, string calldata name) external;\n    function getLastRequestIdForCaller(address _gameAddress) external view returns (uint256);\n    function recoverLostNumberRequest(uint256 _requestId) external returns (uint256);\n}"
    },
    "contracts/LotteryCommon.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\n    enum RoundVictoryTier {\n        Tier5_1,\n        Tier5,\n        Tier4_1,\n        Tier4,\n        Tier3_1,\n        Tier3,\n        Referrer,\n        TokenHolders,\n        Treasury,\n        NO_WIN\n    }\n\n    struct Round {\n        uint256 id;\n        uint256 uiId;\n        uint256 startTime;\n        uint256 endTime;\n        bool ended;\n        uint16[] roundNumbers;\n        uint256[] referralWinnersNumber;\n        uint16 referralWinnersNumberCount;\n        uint256[] ticketIds;\n        uint16 ticketsCount;\n        uint256[] referralTicketIds;\n        uint16 referralCounts;\n    }\n\n    struct Ticket {\n        uint256 id;\n        address participantAddress;\n        address referralAddress;\n        bool claimed;\n        uint256 chainId;\n        RoundVictoryTier victoryTier;\n    }\n\n    struct TicketResults {\n        uint256 ticketId;\n        address participantAddress;\n        RoundVictoryTier victoryTier;\n        bool won;\n        bool claimed;\n        uint256 amountWon;\n    }\n\n    struct ReferralTicket {\n        uint256 id;\n        address buyerAddress;\n        address referralAddress;\n        uint256 referralTicketNumber;\n        bool winner;\n        bool claimed;\n    }\n\n    struct ReferralTicketResults {\n        uint256 referralTicketId;\n        address buyerAddress;\n        address referralAddress;\n        uint256 referralTicketNumber;\n        bool won;\n        bool claimed;\n        uint256 amountWon;\n    }"
    },
    "contracts/LotteryMaster.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {CyclixRandomizerInterface} from \"./CyclixRandomizerInterface.sol\";\nimport {EmergencyFunctions} from \"./utils/EmergencyFunctions.sol\";\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \"./LotteryCommon.sol\";\nimport { LotteryRoundInterface } from \"./LotteryRoundInterface.sol\";\nimport { LotteryReaderInterface } from \"./LotteryReaderInterface.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./LotteryRoundCreatorInterface.sol\";\nimport {LotteryMasterInterface} from \"./LotteryMasterInterface.sol\";\n    enum LotteryStatuses {\n        DrawOpen,\n        EvaluatingResults,\n        ResultsEvaluated,\n        ClaimInProgress\n    }\n\ncontract LotteryMaster is EmergencyFunctions, LotteryMasterInterface{\n\n    uint chainId;\n    uint256 public roundCount;\n    address[] public rounds;\n    LotteryStatuses public lotteryStatus;\n    uint256 public statusStartTime;\n    uint256 public statusEndTime;\n\n    mapping(uint256 => mapping(address => uint256)) public freeRounds;\n    mapping(address => bool) public crossChainOperator;\n    function setCrossChainOperator(address operator, bool value) public onlyOwner {\n        crossChainOperator[operator] = value;\n    }\n\n    uint16 public counterForBankWallets;\n    address[] public bankWallets;\n    function setBankWallet(address wallet, bool add) public onlyOwner {\n        for (uint i = 0; i < bankWallets.length; i++) {\n            if (bankWallets[i] == wallet) {\n                if (add) {\n                    require(false, \"Wallet already added\");\n                } else {\n                    bankWallets[i] = bankWallets[bankWallets.length - 1];\n                    bankWallets.pop();\n                }\n            }\n        }\n        if (add) {\n            bankWallets.push(wallet);\n        }\n    }\n\n    IERC20Metadata public paymentToken;\n    CyclixRandomizerInterface public randomizer;\n    LotteryReaderInterface public reader;\n    uint256 public ticketPrice;\n    bool public freeRoundsAreEnabled = false;\n    uint16 public percentageOfReferralWinners = 10;\n    LotteryRoundCreatorInterface public lotteryRoundCreator;\n\n    constructor(address cyclixRandomizer, address lotteryReader, address _lotteryRoundCreator, address _paymentToken, uint256 _ticketPrice, bool _freeRoundsAreEnabled)\n    EmergencyFunctions(msg.sender) {\n        chainId = block.chainid;\n        randomizer = CyclixRandomizerInterface(cyclixRandomizer);\n        randomizer.registerGameContract(address(this), \"LotteryMasterV0.1\");\n        reader = LotteryReaderInterface(lotteryReader);\n        lotteryRoundCreator = LotteryRoundCreatorInterface(_lotteryRoundCreator);\n        paymentToken = IERC20Metadata(_paymentToken);\n        ticketPrice = _ticketPrice * (10 ** uint256(paymentToken.decimals()));\n        freeRoundsAreEnabled = _freeRoundsAreEnabled;\n        bankWallets.push(msg.sender);\n    }\n\n    function updateSetup(address cyclixRandomizer, address lotteryReader, address _lotteryRoundCreator, address _paymentToken, uint256 _ticketPrice,\n        uint16 _percentageOfReferralWinners, uint16[] memory _poolPercentagesBasePoints, bool _freeRoundsAreEnabled) public onlyOwner {\n        if (address(randomizer) != cyclixRandomizer) {\n            randomizer = CyclixRandomizerInterface(cyclixRandomizer);\n            randomizer.registerGameContract(address(this), \"LotteryMasterV0.1\");\n        }\n        reader = LotteryReaderInterface(lotteryReader);\n        lotteryRoundCreator = LotteryRoundCreatorInterface(_lotteryRoundCreator);\n        paymentToken = IERC20Metadata(_paymentToken);\n        ticketPrice = _ticketPrice * (10 ** uint256(paymentToken.decimals()));\n        percentageOfReferralWinners = _percentageOfReferralWinners;\n        LotteryRoundInterface(rounds[roundCount - 1]).setPoolPercentagesBasePoints(_poolPercentagesBasePoints);\n        freeRoundsAreEnabled = _freeRoundsAreEnabled;\n    }\n\n    function startNewRound(uint256 _statusEndTime) public onlyOwner {\n        if (roundCount > 0) {\n            startNewRoundForUpgrade(_statusEndTime, rounds[roundCount - 1], 0);\n        } else {\n            startNewRoundForUpgrade(_statusEndTime, address(0), 0);\n        }\n    }\n\n    function startNewRoundForUpgrade(uint256 _statusEndTime, address previousRound, uint256 forcedUiIdForUpgrade) public onlyOwner {\n        roundCount++;\n        rounds.push(lotteryRoundCreator.startNewRound(_statusEndTime, previousRound, forcedUiIdForUpgrade));\n        require(previousRound == address(0) || forcedUiIdForUpgrade > 0 || (lotteryStatus == LotteryStatuses.ClaimInProgress && statusEndTime < block.timestamp), \"Previous round not ended\");\n        setLotteryStatus(LotteryStatuses.DrawOpen, _statusEndTime);\n    }\n\n    function setLotteryStatus(LotteryStatuses _lotteryStatus, uint256 _statusEndTime) internal onlyOwner {\n        lotteryStatus = _lotteryStatus;\n        statusStartTime = block.timestamp;\n        statusEndTime = block.timestamp + _statusEndTime;\n    }\n\n    function buyTickets(uint16[] memory moreTicketNumbers, address referral, address buyer) public override {\n        uint256 paidWithFreeTicket = 0;\n        for (uint i = 0; i < moreTicketNumbers.length; i += 6) {\n            uint16[] memory chosenNumbers = new uint16[](6);\n            for (uint j = 0; j < 6; j++) {\n                chosenNumbers[j] = moreTicketNumbers[i + j];\n            }\n            if (buyTicket(chosenNumbers, referral, buyer)) {\n                paidWithFreeTicket += 1;\n            }\n        }\n\n        if (referral != address(0) && freeRoundsAreEnabled) {\n            unchecked {\n                freeRounds[roundCount][buyer] = freeRounds[roundCount][buyer] + moreTicketNumbers.length / 6 - paidWithFreeTicket;\n                freeRounds[roundCount][referral] = freeRounds[roundCount][referral] + moreTicketNumbers.length / 6 - paidWithFreeTicket;\n            }\n        }\n    }\n\n    function buyTicket(uint16[] memory chosenNumbers, address referral, address buyer) internal returns(bool) {\n        require(freeRounds[roundCount][buyer] > 0\n        || paymentToken.allowance(buyer, address(this)) >= ticketPrice\n        || crossChainOperator[msg.sender], \"Missing Allowance\");\n        LotteryRoundInterface lotteryRound = LotteryRoundInterface(rounds[roundCount - 1]);\n        bool paidWithFreeTicket = false;\n        if (freeRounds[roundCount][buyer] > 0) {\n            freeRounds[roundCount][buyer]--;\n            paidWithFreeTicket = true;\n        } else {\n            if (!crossChainOperator[msg.sender]) {\n                require(paymentToken.balanceOf(tx.origin) >= ticketPrice, \"Insufficient funds\");\n                counterForBankWallets = uint16(counterForBankWallets++ % bankWallets.length);\n                SafeERC20.safeTransferFrom(paymentToken, buyer, bankWallets[counterForBankWallets], ticketPrice);\n            }\n            lotteryRound.updateVictoryPoolForTicket(ticketPrice);\n        }\n\n        if (paidWithFreeTicket) {\n            lotteryRound.buyTicket(chainId, chosenNumbers, address(0), buyer);\n        } else {\n            lotteryRound.buyTicket(chainId, chosenNumbers, referral, buyer);\n        }\n        return paidWithFreeTicket;\n    }\n\n    function addFreeRound(address[] calldata participant) public onlyOwner {\n        for (uint i = 0; i < participant.length; i++) {\n            freeRounds[roundCount][participant[i]]++;\n        }\n    }\n\n    mapping(uint256 => uint256) public publicRoundRandomNumbersRequestId;\n\n    function closeRound(uint256 _statusEndTime) external onlyOwner {\n        LotteryRoundInterface lotteryRound = LotteryRoundInterface(rounds[roundCount - 1]);\n        lotteryRound.closeRound();\n        uint16 referralWinners = reader.numberOfReferralWinnersForRoundId(roundCount);\n        publicRoundRandomNumbersRequestId[roundCount] = randomizer.requestRandomWords(6 + referralWinners);\n        setLotteryStatus(LotteryStatuses.EvaluatingResults, _statusEndTime);\n    }\n\n    function fetchRoundNumbers(uint256 roundId, uint256 _statusEndTime) external onlyOwner {\n        LotteryRoundInterface round = LotteryRoundInterface(rounds[roundId - 1]);\n        round.couldReceiveWinningNumbers();\n        (bool fulfilled, uint256[] memory randomWords) = randomizer.getRequestStatus(publicRoundRandomNumbersRequestId[roundId]);\n        require(fulfilled, \"Random numbers not ready\");\n        uint16[] memory roundNumbers = new uint16[](6);\n        uint16[] memory referralWinnersNumber = new uint16[](randomWords.length - 6);\n        if (fulfilled) {\n            for (uint i = 0; i < 6; i++) {\n                roundNumbers[i] = reader.getRandomUniqueNumberInArrayForMaxValue(randomWords[i], 69, roundNumbers);\n            }\n            roundNumbers[5] = uint16(randomWords[5] % 26 + 1);\n            for (uint i = 6; i < randomWords.length; i++) {\n                referralWinnersNumber [i - 6] = reader.getRandomUniqueNumberInArrayForMaxValue(randomWords[i],\n                    round.getRound().referralCounts, referralWinnersNumber);\n            }\n        }\n        round.storeWinningNumbers(roundNumbers, referralWinnersNumber);\n        setLotteryStatus(LotteryStatuses.ResultsEvaluated, _statusEndTime);\n    }\n\n    function markWinners(uint256 roundId, uint256 _statusEndTime) public onlyOwner {\n        LotteryRoundInterface(rounds[roundId - 1]).markWinners(reader.evaluateWonTicketsForRound(roundId), reader.evaluateWonReferralForRound(roundId));\n        setLotteryStatus(LotteryStatuses.ClaimInProgress, _statusEndTime);\n    }\n\n    function claimVictory() public {\n        require(lotteryStatus == LotteryStatuses.ClaimInProgress, \"Lottery is not in claim period\");\n        require(statusEndTime > block.timestamp, \"Claim Period ended\");\n        uint256 amountForEntries = reader.evaluateWonTicketsAmountForWallet(roundCount, msg.sender, false);\n        uint256 amountForReferral = reader.evaluateWonReferralAmountForWallet(roundCount, msg.sender, false);\n        require(amountForEntries > 0 || amountForReferral > 0, \"Nothing to claim for this wallet\");\n        require(paymentToken.balanceOf(address(this)) >= amountForEntries + amountForReferral, \"Not enough funds on contract\");\n        LotteryRoundInterface(rounds[roundCount - 1]).markVictoryClaimed(\n            reader.evaluateWonTicketsForWallet(roundCount, msg.sender),\n            reader.evaluateWonReferralFoWallet(roundCount, msg.sender)\n        );\n        paymentToken.transfer(msg.sender, amountForEntries + amountForReferral);\n    }\n}"
    },
    "contracts/LotteryMasterInterface.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {TestFunctions} from \"./utils/TestUtils.sol\";\nimport {CyclixRandomizerInterface} from \"./CyclixRandomizerInterface.sol\";\nimport {EmergencyFunctions} from \"./utils/EmergencyFunctions.sol\";\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \"./LotteryCommon.sol\";\n\ninterface LotteryMasterInterface {\n    function buyTickets(uint16[] memory moreTicketNumbers, address referral, address buyer) external;\n}"
    },
    "contracts/LotteryReader.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {TestFunctions} from \"./utils/TestUtils.sol\";\nimport {EmergencyFunctions} from \"./utils/EmergencyFunctions.sol\";\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \"./LotteryCommon.sol\";\nimport { LotteryRound } from \"./LotteryRound.sol\";\nimport { LotteryMaster } from \"./LotteryMaster.sol\";\nimport {LotteryReaderInterface} from \"./LotteryReaderInterface.sol\";\n\ncontract LotteryReader is LotteryReaderInterface, EmergencyFunctions {\n    LotteryMaster public lotteryMaster;\n\n    function setLotteryMaster(address _lotteryMaster) public onlyOwner {\n        lotteryMaster = LotteryMaster(_lotteryMaster);\n    }\n\n    constructor() EmergencyFunctions(tx.origin) {}\n\n    function poolForVictoryTier(uint256 roundId, RoundVictoryTier victoryTier) public view override returns(uint256) {\n        require(victoryTier == RoundVictoryTier.Tier5_1 || victoryTier == RoundVictoryTier.Tier5 || victoryTier == RoundVictoryTier.Tier4_1 ||\n        victoryTier == RoundVictoryTier.Tier4 || victoryTier == RoundVictoryTier.Tier3_1 || victoryTier == RoundVictoryTier.Tier3,\n            \"Invalid victory tier\");\n        return LotteryRound(lotteryMaster.rounds(roundId -1)).victoryTierAmounts(victoryTier);\n    }\n\n    function roundNumbers(uint256 roundId) public view returns(uint16[] memory) {\n        Round memory round = LotteryRound(lotteryMaster.rounds(roundId -1)).getRound();\n        return round.roundNumbers;\n    }\n\n    function referralWinnersNumber(uint256 roundId) public view returns(uint256[] memory) {\n        Round memory round = LotteryRound(lotteryMaster.rounds(roundId -1)).getRound();\n        return round.referralWinnersNumber;\n    }\n\n    function poolForReferral(uint256 roundId) public view override returns(uint256) {\n        return LotteryRound(lotteryMaster.rounds(roundId -1)).victoryTierAmounts(RoundVictoryTier.Referrer);\n    }\n\n    function tokenHoldersPoolAmount(uint256 roundId) public view override returns (uint256) {\n        return LotteryRound(lotteryMaster.rounds(roundId -1)).victoryTierAmounts(RoundVictoryTier.TokenHolders);\n    }\n\n    function treasuryPoolAmount(uint256 roundId) public view override returns (uint256) {\n        return LotteryRound(lotteryMaster.rounds(roundId -1)).victoryTierAmounts(RoundVictoryTier.Treasury);\n    }\n\n    function numberOfReferralWinnersForRoundId(uint256 roundId) public view override returns (uint16) {\n        uint16 referralWinnersForRound = 0;\n        uint16 referralCounts = LotteryRound(lotteryMaster.rounds(roundId -1)).getRound().referralCounts;\n        unchecked {\n            referralWinnersForRound = referralCounts / lotteryMaster.percentageOfReferralWinners();\n        }\n        if (referralWinnersForRound == 0 && referralCounts > 0) {\n            referralWinnersForRound = 1;\n        }\n        return referralWinnersForRound;\n    }\n\n    function existInArrayBigNumber(uint256 num, uint256[] memory arr) public pure override returns (bool) {\n        for (uint i = 0; i < arr.length; i++) {\n            if (arr[i] == num) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function existInArrayNumber(uint16 num, uint16[] memory arr) public pure override returns (bool) {\n        for (uint i = 0; i < arr.length; i++) {\n            if (arr[i] == num) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function notExistInArrayNumber(uint16 num, uint16[] memory arr) public pure override returns (bool) {\n        return existInArrayNumber(num, arr) == false;\n    }\n\n    function getRandomUniqueNumberInArrayForMaxValue(uint256 randomNumber, uint16 maxValue, uint16[] memory arr) public pure override returns (uint16) {\n        uint16 returnedNumber = uint16(randomNumber % maxValue + 1);\n        uint16 counter = 0;\n        bool existInNumbers = existInArrayNumber(returnedNumber, arr);\n        while (existInNumbers) {\n            returnedNumber =  uint16(uint256(keccak256(abi.encode(returnedNumber, counter))) % maxValue + 1);\n            existInNumbers = existInArrayNumber(returnedNumber, arr);\n            counter++;\n        }\n        return returnedNumber;\n    }\n\n\n    function tierFromResults(uint16 rightNumbersForTicket, bool powerNumberFound) public pure override returns (RoundVictoryTier) {\n        if (rightNumbersForTicket == 5 && powerNumberFound) {\n            return RoundVictoryTier.Tier5_1;\n        } else if (rightNumbersForTicket == 5) {\n            return RoundVictoryTier.Tier5;\n        } else if (rightNumbersForTicket == 4 && powerNumberFound) {\n            return RoundVictoryTier.Tier4_1;\n        } else if (rightNumbersForTicket == 4) {\n            return RoundVictoryTier.Tier4;\n        } else if (rightNumbersForTicket == 3 && powerNumberFound) {\n            return RoundVictoryTier.Tier3_1;\n        } else if (rightNumbersForTicket == 3) {\n            return RoundVictoryTier.Tier3;\n        }\n        return RoundVictoryTier.NO_WIN;\n    }\n\n    function getTicketsForRound(uint256 roundId) public view override returns(Ticket[] memory) {\n        LotteryRound lotteryRound = LotteryRound(lotteryMaster.rounds(roundId - 1));\n        Round memory roundForEvaluation = lotteryRound.getRound();\n        Ticket[] memory results = new Ticket[](roundForEvaluation.ticketsCount);\n        for (uint256 i = 0; i < roundForEvaluation.ticketsCount; i++) {\n            results[i] = lotteryRound.ticketById(roundForEvaluation.ticketIds[i]);\n        }\n        return results;\n    }\n\n    function getAllTicketsNumbersForRound(uint256 roundId) public view override returns(uint16[] memory) {\n        LotteryRound lotteryRound = LotteryRound(lotteryMaster.rounds(roundId - 1));\n        Round memory roundForEvaluation = lotteryRound.getRound();\n        uint16[] memory numbersForAllTickets = new uint16[](roundForEvaluation.ticketsCount * 6);\n        for (uint256 i = 0; i < roundForEvaluation.ticketsCount; i++) {\n            uint16[] memory numbersForTicket = lotteryRound.numbersForTicketId(i);\n            for (uint256 j = 0; j < numbersForTicket.length; j++) {\n                numbersForAllTickets[(i * 6) + j] = numbersForTicket[j];\n            }\n        }\n        return numbersForAllTickets;\n    }\n\n    function getReferralTicketsForRound(uint256 roundId) public view override returns(ReferralTicket[] memory) {\n        LotteryRound lotteryRound = LotteryRound(lotteryMaster.rounds(roundId - 1));\n        Round memory roundForEvaluation = lotteryRound.getRound();\n        ReferralTicket[] memory results = new ReferralTicket[](roundForEvaluation.referralCounts);\n        for (uint256 i = 0; i < roundForEvaluation.referralCounts; i++) {\n            results[i] = lotteryRound.referralTicketById(roundForEvaluation.ticketIds[i]);\n        }\n        return results;\n    }\n\n    function evaluateWonTicketsForRound(uint256 roundId) public view override returns (TicketResults[] memory){\n        LotteryRound lotteryRound = LotteryRound(lotteryMaster.rounds(roundId - 1));\n        Round memory roundForEvaluation = lotteryRound.getRound();\n        uint16 roundTicketCount = roundForEvaluation.ticketsCount;\n        TicketResults[] memory ticketResults = new TicketResults[](roundForEvaluation.ticketsCount);\n        uint16 counter = 0;\n        for(uint16 ticketIndexForRound = 0; ticketIndexForRound < roundTicketCount; ticketIndexForRound++) {\n            Ticket memory ticket = lotteryRound.ticketById(roundForEvaluation.ticketIds[ticketIndexForRound]);\n            uint16[] memory ticketNumbers = lotteryRound.numbersForTicketId(ticket.id);\n            bool powerNumberFound = ticketNumbers[5] == roundForEvaluation.roundNumbers[5];\n            uint16 rightNumbersForTicket = 0;\n            for(uint16 i = 0; i < 5; i++) {\n                uint16 ticketNumber = ticketNumbers[i];\n                if (existInArrayNumber(ticketNumber, roundForEvaluation.roundNumbers)) {\n                    rightNumbersForTicket++;\n                }\n            }\n            RoundVictoryTier tierResult = tierFromResults(rightNumbersForTicket, powerNumberFound);\n            uint256 amountWon = 0;\n            if (tierResult != RoundVictoryTier.NO_WIN && lotteryRound.winnersForEachTier(tierResult) > 0) {\n                amountWon = poolForVictoryTier(roundId, tierResult) / lotteryRound.winnersForEachTier(tierResult);\n            }\n            ticketResults[counter++] = TicketResults({\n                ticketId: ticket.id,\n                participantAddress : ticket.participantAddress,\n                victoryTier: tierResult,\n                won: tierResult != RoundVictoryTier.NO_WIN,\n                claimed: ticket.claimed,\n                amountWon : amountWon\n            });\n        }\n        return ticketResults;\n    }\n\n    function evaluateWonTicketsAmountForWallet(uint256 roundId, address wallet, bool claimed) public view override returns(uint256) {\n        uint256 wonAmount = 0;\n        TicketResults[] memory results = evaluateWonTicketsForWallet(roundId, wallet);\n        for (uint256 i = 0; i < results.length; i++) {\n            if (results[i].claimed == claimed) {\n                wonAmount += results[i].amountWon;\n            }\n        }\n        return wonAmount;\n    }\n\n    function evaluateWonTicketsForWallet(uint256 roundId, address wallet) public view override returns(TicketResults[] memory) {\n        TicketResults[] memory results = evaluateWonTicketsForRound(roundId);\n        uint256 counterForWalletTicket = 0;\n        TicketResults[] memory resultsForWallet = new TicketResults[](results.length);\n        for (uint256 i = 0; i < results.length; i++) {\n            if (results[i].participantAddress == wallet && results[i].won) {\n                resultsForWallet[counterForWalletTicket] = results[i];\n                counterForWalletTicket++;\n            }\n        }\n        TicketResults[] memory onlyResultsForWallet = new TicketResults[](counterForWalletTicket);\n        for (uint256 i = 0; i < counterForWalletTicket; i++) {\n            onlyResultsForWallet[i] = resultsForWallet[i];\n        }\n        return onlyResultsForWallet;\n    }\n\n    function evaluateWonReferralForRound(uint256 roundId) public view override returns (ReferralTicketResults[] memory) {\n        LotteryRound lotteryRound = LotteryRound(lotteryMaster.rounds(roundId - 1));\n        Round memory roundForEvaluation = lotteryRound.getRound();\n        ReferralTicketResults[] memory referralWinnerIds = new ReferralTicketResults[](roundForEvaluation.referralCounts);\n        uint16 counter = 0;\n        for(uint16 referralIndexForRound = 0; referralIndexForRound < roundForEvaluation.referralCounts; referralIndexForRound++) {\n            ReferralTicket memory referralTicket = lotteryRound.referralTicketById(roundForEvaluation.referralTicketIds[referralIndexForRound]);\n            bool referralWon = existInArrayBigNumber(referralTicket.referralTicketNumber, roundForEvaluation.referralWinnersNumber);\n            uint256 amountWon = 0;\n            if (referralWon && lotteryRound.winnersForEachTier(RoundVictoryTier.Referrer) > 0) {\n                amountWon = poolForReferral(roundId) / lotteryRound.winnersForEachTier(RoundVictoryTier.Referrer);\n            }\n            referralWinnerIds[counter++] = ReferralTicketResults({\n                referralTicketId: referralTicket.id,\n                buyerAddress : referralTicket.buyerAddress,\n                referralAddress : referralTicket.referralAddress,\n                referralTicketNumber: referralTicket.referralTicketNumber,\n                won: referralWon,\n                claimed: referralTicket.claimed,\n                amountWon : amountWon\n            });\n        }\n        return referralWinnerIds;\n    }\n\n    function evaluateWonReferralAmountForWallet(uint256 roundId, address wallet, bool claimed) public view override returns(uint256) {\n        uint256 wonAmount = 0;\n        ReferralTicketResults[] memory results = evaluateWonReferralFoWallet(roundId, wallet);\n        for (uint256 i = 0; i < results.length; i++) {\n            if (results[i].claimed == claimed) {\n                wonAmount += results[i].amountWon;\n            }\n        }\n        return wonAmount;\n    }\n\n    function evaluateWonReferralFoWallet(uint256 roundId, address wallet) public view override returns(ReferralTicketResults[] memory) {\n        ReferralTicketResults[] memory results = evaluateWonReferralForRound(roundId);\n        uint256 counterForWalletTicket = 0;\n        ReferralTicketResults[] memory resultsForWallet = new ReferralTicketResults[](results.length);\n        for (uint256 i = 0; i < results.length; i++) {\n            if (results[i].referralAddress == wallet && results[i].won) {\n                resultsForWallet[counterForWalletTicket] = results[i];\n                counterForWalletTicket++;\n            }\n        }\n        ReferralTicketResults[] memory onlyResultsForWallet = new ReferralTicketResults[](counterForWalletTicket);\n        for (uint256 i = 0; i < counterForWalletTicket; i++) {\n            onlyResultsForWallet[i] = resultsForWallet[i];\n        }\n        return onlyResultsForWallet;\n    }\n\n    function amountWonInRound(uint256 roundId) public view override returns (uint256) {\n        LotteryRound lotteryRound = LotteryRound(lotteryMaster.rounds(roundId -1));\n        uint256 amountWon = 0;\n        TicketResults[] memory ticketResults = evaluateWonTicketsForRound(roundId);\n        ReferralTicketResults[] memory referralResults = evaluateWonReferralForRound(roundId);\n        uint256[] memory winnersForPools = new uint256[](6);\n        for(uint16 i = 0; i < ticketResults.length; i++) {\n            if (ticketResults[i].victoryTier != RoundVictoryTier.NO_WIN) {\n                winnersForPools[uint(ticketResults[i].victoryTier)] = winnersForPools[uint(ticketResults[i].victoryTier)] + 1;\n            }\n        }\n        for(uint16 i = 0; i < 6; i++) {\n            if (winnersForPools[i] > 0) {\n                amountWon += lotteryRound.victoryTierAmounts(RoundVictoryTier(i));\n            }\n        }\n        if (referralResults.length > 0) {\n            amountWon += lotteryRound.victoryTierAmounts(RoundVictoryTier.Referrer);\n        }\n        return amountWon;\n    }\n}"
    },
    "contracts/LotteryReaderInterface.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {TestFunctions} from \"./utils/TestUtils.sol\";\nimport {CyclixRandomizerInterface} from \"./CyclixRandomizerInterface.sol\";\nimport {EmergencyFunctions} from \"./utils/EmergencyFunctions.sol\";\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \"./LotteryCommon.sol\";\n\ninterface LotteryReaderInterface {\n    function poolForVictoryTier(uint256 roundId, RoundVictoryTier victoryTier) external view returns(uint256) ;\n    function poolForReferral(uint256 roundId) external view returns(uint256) ;\n    function tokenHoldersPoolAmount(uint256 roundId) external view returns (uint256) ;\n    function treasuryPoolAmount(uint256 roundId) external view returns (uint256) ;\n    function numberOfReferralWinnersForRoundId(uint256 roundId) external view returns (uint16) ;\n    function existInArrayBigNumber(uint256 num, uint256[] memory arr) external pure returns (bool) ;\n    function existInArrayNumber(uint16 num, uint16[] memory arr) external pure returns (bool) ;\n    function notExistInArrayNumber(uint16 num, uint16[] memory arr) external pure returns (bool) ;\n    function getRandomUniqueNumberInArrayForMaxValue(uint256 randomNumber, uint16 maxValue, uint16[] memory arr) external pure returns (uint16) ;\n    function tierFromResults(uint16 rightNumbersForTicket, bool powerNumberFound) external pure returns (RoundVictoryTier) ;\n    function getTicketsForRound(uint256 roundId) external view returns(Ticket[] memory);\n    function getAllTicketsNumbersForRound(uint256 roundId) external view returns(uint16[] memory);\n    function getReferralTicketsForRound(uint256 roundId) external view returns(ReferralTicket[] memory);\n    function evaluateWonTicketsForRound(uint256 roundId) external view returns (TicketResults[] memory);\n    function evaluateWonTicketsAmountForWallet(uint256 roundId, address wallet, bool claimed) external view returns(uint256);\n    function evaluateWonTicketsForWallet(uint256 roundId, address wallet) external view returns(TicketResults[] memory);\n    function evaluateWonReferralForRound(uint256 roundId) external view returns (ReferralTicketResults[] memory);\n    function evaluateWonReferralAmountForWallet(uint256 roundId, address wallet, bool claimed) external view returns(uint256);\n    function evaluateWonReferralFoWallet(uint256 roundId, address wallet) external view returns (ReferralTicketResults[] memory);\n    function amountWonInRound(uint256 roundId) external view returns (uint256) ;\n    function roundNumbers(uint256 roundId) external view returns(uint16[] memory);\n    function referralWinnersNumber(uint256 roundId) external view returns(uint256[] memory);\n}"
    },
    "contracts/LotteryRound.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \"./LotteryCommon.sol\";\nimport {LotteryRoundInterface} from \"./LotteryRoundInterface.sol\";\n\ncontract LotteryRound is Ownable, LotteryRoundInterface {\n    Round public round;\n    function getRound() public view returns (Round memory) {\n        return round;\n    }\n\n    Ticket[] public tickets;\n    function ticketById(uint256 ticketId) public view returns (Ticket memory) {\n        return tickets[ticketId];\n    }\n    mapping(uint256 => uint16[]) public ticketNumbers;\n    function numbersForTicketId(uint256 ticketId) public view returns (uint16[] memory) {\n        return ticketNumbers[ticketId];\n    }\n    mapping(address => uint256[]) public roundTicketsByAddress;\n    mapping(address => uint256) public roundTicketsByAddressCount;\n\n    ReferralTicket[] public referralTickets;\n    function referralTicketById(uint256 index) public view returns (ReferralTicket memory) {\n        return referralTickets[index];\n    }\n    mapping(address => uint256[]) public roundReferralTicketsByAddress;\n    mapping(address => uint256) public roundReferralTicketsByAddressCount;\n\n    mapping(RoundVictoryTier => uint256) public victoryTierAmounts;\n    mapping(RoundVictoryTier => uint256) public victoryTierAmountsClaimed;\n    uint256 public totalVictoryPool;\n    uint256 public totalClaimed;\n    mapping(RoundVictoryTier => uint256) public winnersForEachTier;\n    address public previousRound;\n\n    uint16[]  public  poolPercentagesBasePoints = [3000, 1500, 1000, 700, 500, 300, 1500, 1000, 500];\n    function setPoolPercentagesBasePoints(uint16[] memory _poolPercentagesBasePoints) public onlyOwner {\n        poolPercentagesBasePoints = _poolPercentagesBasePoints;\n    }\n\n    constructor(address previousRoundAddress, uint256 roundDurationInSeconds, uint256 forcedUiIdForUpgrade) Ownable(msg.sender) {\n        uint256 id = 1;\n        uint256 uiId = 1;\n        previousRound = previousRoundAddress;\n        if (previousRoundAddress != address(0)) {\n            LotteryRound previousLotteryRound = LotteryRound(previousRoundAddress);\n            id = previousLotteryRound.getRound().id + 1;\n            uiId = previousLotteryRound.getRound().uiId + 1;\n            propagateWinningFromPreviousRound();\n        }\n        if (forcedUiIdForUpgrade > 0) {\n            id = 1;\n            uiId = forcedUiIdForUpgrade;\n        }\n        round = Round({\n            id: id,\n            uiId:  uiId,\n            startTime: block.timestamp,\n            endTime: block.timestamp + roundDurationInSeconds,\n            ended : false,\n            roundNumbers: new uint16[](0),\n            referralWinnersNumber: new uint256[](0),\n            referralWinnersNumberCount : 0,\n            ticketIds : new uint256[](0),\n            ticketsCount : 0,\n            referralTicketIds : new uint256[](0),\n            referralCounts : 0\n        });\n    }\n\n    function propagateWinningFromPreviousRound() internal {\n        LotteryRound previousLotteryRound = LotteryRound(previousRound);\n        updateVictoryPoolForTicket(previousLotteryRound.totalVictoryPool() - previousLotteryRound.totalClaimed());\n    }\n\n    function numberIsInRangeForRound(uint256 number) public pure returns (bool) {\n        return number > 0 && number <= 69;\n    }\n\n    function numberIsInRangeForPowerNumber(uint256 number) public pure returns (bool) {\n        return number > 0 && number <= 26;\n    }\n\n    function validateBuyTicket(uint16[] memory numbers, address referral) public view onlyOwner {\n        require(tx.origin != address(0), \"Invalid sender\");\n        require(block.timestamp < round.endTime, \"Round is over\");\n        require(numbers.length == 6, \"Invalid numbers count\");\n        for (uint i = 0; i < numbers.length - 1; i++) {\n            require(numberIsInRangeForRound(numbers[i]), \"Invalid numbers\");\n        }\n        require(numberIsInRangeForPowerNumber(numbers[5]), \"Invalid power number\");\n        require(referral != tx.origin, \"Referral cannot be the same as the participant\");\n    }\n\n    function percentageInBasisPoint(uint256 amount, uint256 basisPoint) public pure returns (uint256) {\n        return amount * basisPoint / 10000;\n    }\n\n    function treasuryAmountOnTicket(uint256 paymentTokenAmount) public view returns (uint256) {\n        return percentageInBasisPoint(paymentTokenAmount, poolPercentagesBasePoints[8]);\n    }\n\n    function updateVictoryPoolForTicket(uint256 paymentTokenAmount) public onlyOwner {\n        totalVictoryPool += paymentTokenAmount - percentageInBasisPoint(paymentTokenAmount, poolPercentagesBasePoints[uint(RoundVictoryTier.TokenHolders)]) -\n                        percentageInBasisPoint(paymentTokenAmount, poolPercentagesBasePoints[uint(RoundVictoryTier.Treasury)]);\n        for(uint i = 0; i < 9; i++) {\n            victoryTierAmounts[RoundVictoryTier(i)] += percentageInBasisPoint(paymentTokenAmount, poolPercentagesBasePoints[i]);\n        }\n    }\n\n    function buyTicket(uint256 chainId, uint16[] memory chosenNumbers, address referral, address buyer) public onlyOwner {\n        validateBuyTicket(chosenNumbers, referral);\n\n        uint256 ticketId = tickets.length;\n        tickets.push(Ticket({\n            id: ticketId,\n            participantAddress: buyer,\n            referralAddress: referral,\n            claimed: false,\n            chainId: chainId,\n            victoryTier: RoundVictoryTier.NO_WIN\n        }));\n        for(uint i = 0; i < chosenNumbers.length; i++) {\n            ticketNumbers[ticketId].push(chosenNumbers[i]);\n        }\n        round.ticketIds.push(ticketId);\n        round.ticketsCount++;\n\n        roundTicketsByAddress[buyer].push(tickets.length - 1);\n        roundTicketsByAddressCount[buyer]++;\n        if (referral != address(0)) {\n            uint256 referralTicketId = referralTickets.length;\n            round.referralTicketIds.push(referralTicketId);\n            round.referralCounts++;\n            referralTickets.push(ReferralTicket({\n                id: referralTicketId,\n                buyerAddress: buyer,\n                referralAddress: referral,\n                referralTicketNumber: uint16(round.referralCounts),\n                winner: false,\n                claimed: false\n            }));\n\n            roundReferralTicketsByAddress[referral].push(referralTickets.length - 1);\n            roundReferralTicketsByAddressCount[referral]++;\n        }\n    }\n\n    function closeRound() public onlyOwner {\n        require(block.timestamp >= round.endTime, \"Round is not over yet\");\n        round.ended = true;\n    }\n\n    function couldReceiveWinningNumbers() public view {\n        require(block.timestamp >= round.endTime, \"Round is not over yet\");\n        require(round.roundNumbers.length == 0, \"Winning numbers already set\");\n    }\n\n    function storeWinningNumbers(uint16[] memory roundNumbers, uint16[] memory referralWinnersNumber) public onlyOwner {\n        round.roundNumbers = roundNumbers;\n        round.referralWinnersNumber = referralWinnersNumber;\n        round.referralWinnersNumberCount = uint16(referralWinnersNumber.length);\n    }\n\n    function markWinners(TicketResults[] memory ticketResults, ReferralTicketResults[] memory referralTicketResults) public onlyOwner {\n        for (uint i = 0; i < ticketResults.length; i++) {\n            TicketResults memory ticketResult = ticketResults[i];\n            Ticket storage ticket = tickets[ticketResult.ticketId];\n            ticket.victoryTier = ticketResult.victoryTier;\n            winnersForEachTier[ticketResult.victoryTier]++;\n        }\n        for (uint i = 0; i < referralTicketResults.length; i++) {\n            ReferralTicketResults memory referralTicketResult = referralTicketResults[i];\n            ReferralTicket storage referralTicket = referralTickets[referralTicketResult.referralTicketId];\n            referralTicket.winner = referralTicketResult.won;\n            if (referralTicketResult.won) {\n                winnersForEachTier[RoundVictoryTier.Referrer]++;\n            }\n        }\n    }\n\n    function markVictoryClaimed(TicketResults[] memory ticketResults, ReferralTicketResults[] memory referralTicketResults) public onlyOwner {\n        for(uint i = 0; i < ticketResults.length; i++) {\n            TicketResults memory ticketResult = ticketResults[i];\n            Ticket storage ticket = tickets[ticketResult.ticketId];\n            ticket.claimed = true;\n            victoryTierAmountsClaimed[ticketResult.victoryTier] += ticketResult.amountWon;\n            totalClaimed += ticketResult.amountWon;\n        }\n        for(uint i = 0; i < referralTicketResults.length; i++) {\n            ReferralTicketResults memory referralTicketResult = referralTicketResults[i];\n            ReferralTicket storage referralTicket = referralTickets[referralTicketResult.referralTicketId];\n            referralTicket.claimed = true;\n            victoryTierAmountsClaimed[RoundVictoryTier.Referrer] += referralTicketResult.amountWon;\n            totalClaimed += referralTicketResult.amountWon;\n        }\n    }\n\n    function markReferralVictoryClaimed(uint256 referralTicketId, uint256 amountClaimed) public onlyOwner {\n        ReferralTicket storage referralTicket = referralTickets[referralTicketId];\n        referralTicket.claimed = true;\n        victoryTierAmountsClaimed[RoundVictoryTier.Referrer] += amountClaimed;\n    }\n}"
    },
    "contracts/LotteryRoundCreator.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport \"./LotteryRoundCreatorInterface.sol\";\nimport \"./LotteryRound.sol\";\n\ncontract LotteryRoundCreator is LotteryRoundCreatorInterface, Ownable {\n    bool public isContractsUpgrade;\n    constructor(bool _isContractsUpgrade) Ownable(msg.sender) {\n        isContractsUpgrade = _isContractsUpgrade;\n    }\n\n    function startNewRound(uint256 roundDurationInSeconds, address previousRoundAddress, uint256 forcedUiIdForUpgrade) public override onlyOwner returns(address) {\n        if (previousRoundAddress == address(0) && isContractsUpgrade) {\n            LotteryRound newRound = new LotteryRound(address(0xAC9F3eA5FC297D0648ea1b9b0c7446E28fE12867), roundDurationInSeconds, 3);\n            newRound.transferOwnership(owner());\n            return address(newRound);\n        } else {\n            LotteryRound newRound = new LotteryRound(previousRoundAddress, roundDurationInSeconds, forcedUiIdForUpgrade);\n            newRound.transferOwnership(owner());\n            return address(newRound);\n        }\n    }\n}"
    },
    "contracts/LotteryRoundCreatorInterface.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\ninterface LotteryRoundCreatorInterface {\n   function startNewRound(uint256 roundDurationInSeconds, address previousRoundAddress, uint256 forcedUiIdForUpgrade) external returns(address);\n}"
    },
    "contracts/LotteryRoundInterface.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \"./LotteryCommon.sol\";\n\ninterface LotteryRoundInterface {\n    function getRound() external returns(Round memory);\n    function markWinners(TicketResults[] memory ticketResults, ReferralTicketResults[] memory referralTicketResults) external;\n    function markVictoryClaimed(TicketResults[] memory ticketResults, ReferralTicketResults[] memory referralTicketResults) external;\n    function markReferralVictoryClaimed(uint256 referralTicketId, uint256 amountClaimed) external;\n    function treasuryAmountOnTicket(uint256 paymentTokenAmount) external view returns (uint256);\n    function updateVictoryPoolForTicket(uint256 paymentTokenAmount) external;\n    function buyTicket(uint256 chainId, uint16[] memory chosenNumbers, address referral, address buyer) external;\n    function closeRound() external;\n    function couldReceiveWinningNumbers() external view;\n    function storeWinningNumbers(uint16[] memory roundNumbers, uint16[] memory referralWinnersNumber) external;\n    function ticketById(uint256 ticketId) external view returns (Ticket memory);\n    function numbersForTicketId(uint256 ticketId) external view returns (uint16[] memory);\n    function referralTicketById(uint256 index) external view returns (ReferralTicket memory);\n    function setPoolPercentagesBasePoints(uint16[] memory _poolPercentagesBasePoints) external;\n}"
    },
    "contracts/testing/VRFCoordinatorV2Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// A mock for testing code that relies on VRFCoordinatorV2.\npragma solidity ^0.8.4;\n\nimport {VRFCoordinatorV2Interface} from \"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\";\nimport {VRFConsumerBaseV2} from \"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\";\nimport {ConfirmedOwner} from \"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\";\n\n// solhint-disable chainlink-solidity/prefix-immutable-variables-with-i\n// solhint-disable custom-errors\n// solhint-disable avoid-low-level-calls\n\ncontract VRFCoordinatorV2Mock is VRFCoordinatorV2Interface, ConfirmedOwner {\n    uint96 public immutable BASE_FEE;\n    uint96 public immutable GAS_PRICE_LINK;\n    uint16 public immutable MAX_CONSUMERS = 100;\n\n    error InvalidSubscription();\n    error InsufficientBalance();\n    error MustBeSubOwner(address owner);\n    error TooManyConsumers();\n    error InvalidConsumer();\n    error InvalidRandomWords();\n    error Reentrant();\n\n    event RandomWordsRequested(\n        bytes32 indexed keyHash,\n        uint256 requestId,\n        uint256 preSeed,\n        uint64 indexed subId,\n        uint16 minimumRequestConfirmations,\n        uint32 callbackGasLimit,\n        uint32 numWords,\n        address indexed sender\n    );\n    event RandomWordsFulfilled(uint256 indexed requestId, uint256 outputSeed, uint96 payment, bool success);\n    event SubscriptionCreated(uint64 indexed subId, address owner);\n    event SubscriptionFunded(uint64 indexed subId, uint256 oldBalance, uint256 newBalance);\n    event SubscriptionCanceled(uint64 indexed subId, address to, uint256 amount);\n    event ConsumerAdded(uint64 indexed subId, address consumer);\n    event ConsumerRemoved(uint64 indexed subId, address consumer);\n    event ConfigSet();\n\n    struct Config {\n        // Reentrancy protection.\n        bool reentrancyLock;\n    }\n    Config private s_config;\n    uint64 internal s_currentSubId;\n    uint256 internal s_nextRequestId = 1;\n    uint256 internal s_nextPreSeed = 100;\n    struct Subscription {\n        address owner;\n        uint96 balance;\n    }\n    mapping(uint64 => Subscription) internal s_subscriptions; /* subId */ /* subscription */\n    mapping(uint64 => address[]) internal s_consumers; /* subId */ /* consumers */\n\n    struct Request {\n        uint64 subId;\n        uint32 callbackGasLimit;\n        uint32 numWords;\n    }\n    mapping(uint256 => Request) internal s_requests; /* requestId */ /* request */\n\n    constructor(uint96 _baseFee, uint96 _gasPriceLink) ConfirmedOwner(msg.sender) {\n        BASE_FEE = _baseFee;\n        GAS_PRICE_LINK = _gasPriceLink;\n        setConfig();\n    }\n\n    /**\n     * @notice Sets the configuration of the vrfv2 mock coordinator\n   */\n    function setConfig() public onlyOwner {\n        s_config = Config({reentrancyLock: false});\n        emit ConfigSet();\n    }\n\n    function consumerIsAdded(uint64 _subId, address _consumer) public view returns (bool) {\n        address[] memory consumers = s_consumers[_subId];\n        for (uint256 i = 0; i < consumers.length; i++) {\n            if (consumers[i] == _consumer) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    modifier onlyValidConsumer(uint64 _subId, address _consumer) {\n        if (!consumerIsAdded(_subId, _consumer)) {\n            revert InvalidConsumer();\n        }\n        _;\n    }\n\n    /**\n     * @notice fulfillRandomWords fulfills the given request, sending the random words to the supplied\n   * @notice consumer.\n   *\n   * @dev This mock uses a simplified formula for calculating payment amount and gas usage, and does\n   * @dev not account for all edge cases handled in the real VRF coordinator. When making requests\n   * @dev against the real coordinator a small amount of additional LINK is required.\n   *\n   * @param _requestId the request to fulfill\n   * @param _consumer the VRF randomness consumer to send the result to\n   */\n    function fulfillRandomWords(uint256 _requestId, address _consumer) external nonReentrant {\n        fulfillRandomWordsWithOverride(_requestId, _consumer, new uint256[](0));\n    }\n\n    /**\n     * @notice fulfillRandomWordsWithOverride allows the user to pass in their own random words.\n   *\n   * @param _requestId the request to fulfill\n   * @param _consumer the VRF randomness consumer to send the result to\n   * @param _words user-provided random words\n   */\n    function fulfillRandomWordsWithOverride(uint256 _requestId, address _consumer, uint256[] memory _words) public {\n        if (s_requests[_requestId].subId == 0) {\n            revert(\"nonexistent request\");\n        }\n        Request memory req = s_requests[_requestId];\n\n        if (_words.length == 0) {\n            _words = new uint256[](req.numWords);\n            for (uint256 i = 0; i < req.numWords; i++) {\n                _words[i] = uint256(keccak256(abi.encode(_requestId, i)));\n            }\n        } else if (_words.length != req.numWords) {\n            revert InvalidRandomWords();\n        }\n\n        s_config.reentrancyLock = true;\n        VRFConsumerBaseV2(_consumer).rawFulfillRandomWords(_requestId, _words);\n        s_config.reentrancyLock = false;\n        delete (s_requests[_requestId]);\n        emit RandomWordsFulfilled(_requestId, _requestId, 0, true);\n    }\n\n    /**\n     * @notice fundSubscription allows funding a subscription with an arbitrary amount for testing.\n   *\n   * @param _subId the subscription to fund\n   * @param _amount the amount to fund\n   */\n    function fundSubscription(uint64 _subId, uint96 _amount) public {\n        if (s_subscriptions[_subId].owner == address(0)) {\n            revert InvalidSubscription();\n        }\n        uint96 oldBalance = s_subscriptions[_subId].balance;\n        s_subscriptions[_subId].balance += _amount;\n        emit SubscriptionFunded(_subId, oldBalance, oldBalance + _amount);\n    }\n\n    function requestRandomWords(\n        bytes32 _keyHash,\n        uint64 _subId,\n        uint16 _minimumRequestConfirmations,\n        uint32 _callbackGasLimit,\n        uint32 _numWords\n    ) external override nonReentrant onlyValidConsumer(_subId, msg.sender) returns (uint256) {\n        if (s_subscriptions[_subId].owner == address(0)) {\n            revert InvalidSubscription();\n        }\n\n        uint256 requestId = s_nextRequestId++;\n        uint256 preSeed = s_nextPreSeed++;\n\n        s_requests[requestId] = Request({subId: _subId, callbackGasLimit: _callbackGasLimit, numWords: _numWords});\n\n        emit RandomWordsRequested(\n            _keyHash,\n            requestId,\n            preSeed,\n            _subId,\n            _minimumRequestConfirmations,\n            _callbackGasLimit,\n            _numWords,\n            msg.sender\n        );\n        return requestId;\n    }\n\n    function createSubscription() external override returns (uint64 _subId) {\n        s_currentSubId++;\n        s_subscriptions[s_currentSubId] = Subscription({owner: msg.sender, balance: 0});\n        emit SubscriptionCreated(s_currentSubId, msg.sender);\n        return s_currentSubId;\n    }\n\n    function getLatestSubscriptionIdCreated() external view returns (uint64) {\n        return s_currentSubId;\n    }\n\n    function getSubscription(\n        uint64 _subId\n    ) external view override returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers) {\n        if (s_subscriptions[_subId].owner == address(0)) {\n            revert InvalidSubscription();\n        }\n        return (s_subscriptions[_subId].balance, 0, s_subscriptions[_subId].owner, s_consumers[_subId]);\n    }\n\n    function cancelSubscription(uint64 _subId, address _to) external override onlySubOwner(_subId) nonReentrant {\n        emit SubscriptionCanceled(_subId, _to, s_subscriptions[_subId].balance);\n        delete (s_subscriptions[_subId]);\n    }\n\n    modifier onlySubOwner(uint64 _subId) {\n        address owner = s_subscriptions[_subId].owner;\n        if (owner == address(0)) {\n            revert InvalidSubscription();\n        }\n        if (msg.sender != owner) {\n            revert MustBeSubOwner(owner);\n        }\n        _;\n    }\n\n    function getRequestConfig() external pure override returns (uint16, uint32, bytes32[] memory) {\n        return (3, 2000000, new bytes32[](0));\n    }\n\n    function addConsumer(uint64 _subId, address _consumer) external override onlySubOwner(_subId) {\n        if (s_consumers[_subId].length == MAX_CONSUMERS) {\n            revert TooManyConsumers();\n        }\n\n        if (consumerIsAdded(_subId, _consumer)) {\n            return;\n        }\n\n        s_consumers[_subId].push(_consumer);\n        emit ConsumerAdded(_subId, _consumer);\n    }\n\n    function removeConsumer(\n        uint64 _subId,\n        address _consumer\n    ) external override onlySubOwner(_subId) onlyValidConsumer(_subId, _consumer) nonReentrant {\n        address[] storage consumers = s_consumers[_subId];\n        for (uint256 i = 0; i < consumers.length; i++) {\n            if (consumers[i] == _consumer) {\n                address last = consumers[consumers.length - 1];\n                consumers[i] = last;\n                consumers.pop();\n                break;\n            }\n        }\n\n        emit ConsumerRemoved(_subId, _consumer);\n    }\n\n    function getConfig()\n    external\n    pure\n    returns (\n        uint16 minimumRequestConfirmations,\n        uint32 maxGasLimit,\n        uint32 stalenessSeconds,\n        uint32 gasAfterPaymentCalculation\n    )\n    {\n        return (4, 2_500_000, 2_700, 33285);\n    }\n\n    function getFeeConfig()\n    external\n    pure\n    returns (\n        uint32 fulfillmentFlatFeeLinkPPMTier1,\n        uint32 fulfillmentFlatFeeLinkPPMTier2,\n        uint32 fulfillmentFlatFeeLinkPPMTier3,\n        uint32 fulfillmentFlatFeeLinkPPMTier4,\n        uint32 fulfillmentFlatFeeLinkPPMTier5,\n        uint24 reqsForTier2,\n        uint24 reqsForTier3,\n        uint24 reqsForTier4,\n        uint24 reqsForTier5\n    )\n    {\n        return (\n            100000, // 0.1 LINK\n            100000, // 0.1 LINK\n            100000, // 0.1 LINK\n            100000, // 0.1 LINK\n            100000, // 0.1 LINK\n            0,\n            0,\n            0,\n            0\n        );\n    }\n\n    modifier nonReentrant() {\n        if (s_config.reentrancyLock) {\n            revert Reentrant();\n        }\n        _;\n    }\n\n    function getFallbackWeiPerUnitLink() external pure returns (int256) {\n        return 4000000000000000; // 0.004 Ether\n    }\n\n    function requestSubscriptionOwnerTransfer(uint64 /*_subId*/, address /*_newOwner*/) external pure override {\n        revert(\"not implemented\");\n    }\n\n    function acceptSubscriptionOwnerTransfer(uint64 /*_subId*/) external pure override {\n        revert(\"not implemented\");\n    }\n\n    function pendingRequestExists(uint64 /*subId*/) public pure override returns (bool) {\n        revert(\"not implemented\");\n    }\n}"
    },
    "contracts/utils/ContractAndOwnerUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.x <0.9.0;\n\ncontract ContractAndOwnerUtils {\n    address _creatorContract;\n    address _owner;\n    constructor(address _c, address _o) {\n        _creatorContract = _c;\n        _owner = _o;\n    }\n\n    modifier onlyCreatorContractOrOwner() {\n        require(_owner == msg.sender || _creatorContract == msg.sender, \"Only owner or creator contract can call this function\");\n        _;\n    }\n\n    modifier onlyCreatorContract() {\n        require(_creatorContract == msg.sender, \"CreatorContractNotCalling: caller is not the creator contract\");\n        _;\n    }\n\n    modifier onlyFromOwner() {\n        require(_owner == msg.sender, \"OwnerNotCalling: caller is not the owner\");\n        _;\n    }\n\n    function updateOwner(address _newOwner) public onlyFromOwner {\n        _owner = _newOwner;\n    }\n\n    function updateCreatorContract(address _newCreatorContract) public onlyCreatorContractOrOwner {\n        _creatorContract = _newCreatorContract;\n    }\n}\n"
    },
    "contracts/utils/EmergencyFunctions.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ncontract EmergencyFunctions is Ownable {\n    address internal teamAddress;\n    constructor(address _teamAddress) Ownable(_teamAddress) {\n        teamAddress = _teamAddress;\n    }\n\n    function updateTeamAddress(address _teamAddress) public onlyOwner {\n        teamAddress = _teamAddress;\n    }\n\n    // Emergency Functions\n    function sendTokenToTeam(address _token) public onlyOwner {\n        uint256 amount = IERC20(_token).balanceOf(address(this));\n        if (amount > 0) {\n            SafeERC20.safeTransfer(IERC20(_token), teamAddress, amount);\n        }\n    }\n\n    function sendCryptoToTeam() public onlyOwner {\n        if (address(this).balance > 0) {\n            payable(teamAddress).transfer(address(this).balance);\n        }\n    }\n\n    /** @notice Check if an address is a contract */\n    function _isContract(address _addr) internal view returns (bool) {\n        uint256 size;\n        assembly {\n            size := extcodesize(_addr)\n        }\n        return size > 0;\n    }\n}\n"
    },
    "contracts/utils/Structures.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ncontract WithDynamicAddressArray {\n    address[] public dynamicAddresses;\n    mapping(address => uint256) public dynAddressesPositions;\n    uint256 public addressesLength;\n\n    constructor() {\n        dynamicAddresses.push(address(0));\n    }\n\n    function addDynamicAddress(address _a) internal {\n        if (dynAddressesPositions[_a] == 0) {\n            dynamicAddresses.push(_a);\n            addressesLength += 1;\n            dynAddressesPositions[_a] = addressesLength;\n        }\n    }\n\n    function removeDynamicAddress(address _a) internal {\n        if (dynAddressesPositions[_a] > 0) {\n            uint256 toUsePosition = dynAddressesPositions[_a];\n            dynAddressesPositions[_a] = 0;\n            if (toUsePosition < addressesLength) {\n                address lastAddress = dynamicAddresses[addressesLength];\n                dynamicAddresses[toUsePosition] = lastAddress;\n                dynAddressesPositions[lastAddress] = toUsePosition;\n            }\n            dynamicAddresses.pop();\n            addressesLength -= 1;\n        }\n    }\n}\n"
    },
    "contracts/utils/TestUsdt.sol": {
      "content": "// contracts/GLDToken.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract TestUsdt is ERC20 {\n    constructor() ERC20(\"Lottery Tether Usdt\", \"LUSDT\") {\n        _mint(msg.sender, 10 ** 9 * (10 ** uint256(decimals())));\n    }\n}"
    },
    "contracts/utils/TestUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.x <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ninterface IERC20Extension {\n    function decimals() external view returns (uint8);\n}\n\ncontract TestFunctions is Ownable {\n    constructor() Ownable(msg.sender) {}\n    //Used for mock testing, contract ownership will be renounced on release\n    uint public currentTimestampOverride;\n    function updateCurrentTimestampOverride(uint _v) external onlyOwner {\n        currentTimestampOverride = _v;\n    }\n    function currentTimestamp() public view returns(uint) {\n        if (currentTimestampOverride > 0) {\n            return currentTimestampOverride;\n        }\n        return block.timestamp;\n    }\n}\n"
    },
    "contracts/utils/UsdtTestBank.sol": {
      "content": "// contracts/GLDToken.sol\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ncontract UsdtTestBank  {\n    address public usdtAddress;\n    constructor(address _usdt) {\n        usdtAddress = _usdt;\n    }\n\n    function getOneHundredDollars() public {\n        SafeERC20.safeTransfer(IERC20(usdtAddress), msg.sender, 100 * 10 ** 18);\n    }\n    function getOneThousandsDollars() public {\n        SafeERC20.safeTransfer(IERC20(usdtAddress), msg.sender, 1000 * 10 ** 18);\n    }\n}"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}