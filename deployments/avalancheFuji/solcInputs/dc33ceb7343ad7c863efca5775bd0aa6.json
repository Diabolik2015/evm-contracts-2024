{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "contracts/CyclixRandomizerInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\ninterface CyclixRandomizerInterface {\n    function requestRandomWords(uint32 numWords) external returns (uint256 requestId);\n    function getRequestStatus(uint256 _requestId) external view returns (bool fulfilled, uint256[] memory randomWords);\n    function registerGameContract(address gameAddress, string calldata name) external;\n    function getLastRequestIdForCaller(address _gameAddress) external view returns (uint256);\n    function recoverLostNumberRequest(uint256 _requestId) external returns (uint256);\n}"
    },
    "contracts/LotteryCommon.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\n    enum RoundVictoryTier {\n        Tier5_1,\n        Tier5,\n        Tier4_1,\n        Tier4,\n        Tier3_1,\n        Tier3,\n        Referrer,\n        TokenHolders,\n        Treasury,\n        NO_WIN\n    }\n\n    struct Round {\n        uint256 id;\n        uint256 uiId;\n        uint256 startTime;\n        uint256 endTime;\n        bool ended;\n        uint16[] roundNumbers;\n        uint256[] referralWinnersNumber;\n        uint16 referralWinnersNumberCount;\n        uint256[] ticketIds;\n        uint16 ticketsCount;\n        uint256[] referralTicketIds;\n        uint16 referralCounts;\n    }\n\n    struct Ticket {\n        uint256 id;\n        address participantAddress;\n        address referralAddress;\n        bool claimed;\n        uint256 chainId;\n        RoundVictoryTier victoryTier;\n    }\n\n    struct TicketResults {\n        uint256 ticketId;\n        address participantAddress;\n        RoundVictoryTier victoryTier;\n        bool won;\n        bool claimed;\n        uint256 amountWon;\n    }\n\n    struct ReferralTicket {\n        uint256 id;\n        address buyerAddress;\n        address referralAddress;\n        uint256 referralTicketNumber;\n        bool winner;\n        bool claimed;\n    }\n\n    struct ReferralTicketResults {\n        uint256 referralTicketId;\n        address buyerAddress;\n        address referralAddress;\n        uint256 referralTicketNumber;\n        bool won;\n        bool claimed;\n        uint256 amountWon;\n    }"
    },
    "contracts/LotteryMaster.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {CyclixRandomizerInterface} from \"./CyclixRandomizerInterface.sol\";\nimport {EmergencyFunctions} from \"./utils/EmergencyFunctions.sol\";\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \"./LotteryCommon.sol\";\nimport { LotteryRoundInterface } from \"./LotteryRoundInterface.sol\";\nimport { LotteryReaderInterface } from \"./LotteryReaderInterface.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./LotteryRoundCreatorInterface.sol\";\n    enum LotteryStatuses {\n        DrawOpen,\n        EvaluatingResults,\n        ResultsEvaluated,\n        ClaimInProgress\n    }\n\ncontract LotteryMaster is EmergencyFunctions {\n\n    uint256 public roundCount;\n    address[] public rounds;\n    LotteryStatuses public lotteryStatus;\n    uint256 public statusStartTime;\n    uint256 public statusEndTime;\n\n    mapping(address => uint256) public freeRounds;\n    mapping(address => bool) public crossChainOperator;\n    function setCrossChainOperator(address operator, bool value) public onlyOwner {\n        crossChainOperator[operator] = value;\n    }\n\n    uint16 public counterForBankWallets;\n    address[] public bankWallets;\n    function setBankWallet(address wallet, bool add) public onlyOwner {\n        for (uint i = 0; i < bankWallets.length; i++) {\n            if (bankWallets[i] == wallet) {\n                if (add) {\n                    require(false, \"Wallet already added\");\n                } else {\n                    bankWallets[i] = bankWallets[bankWallets.length - 1];\n                    bankWallets.pop();\n                }\n            }\n        }\n        if (add) {\n            bankWallets.push(wallet);\n        }\n    }\n\n    IERC20Metadata public paymentToken;\n    CyclixRandomizerInterface public randomizer;\n    LotteryReaderInterface public reader;\n    uint256 public ticketPrice;\n    bool public freeRoundsAreEnabled = false;\n    uint16 public percentageOfReferralWinners = 10;\n    LotteryRoundCreatorInterface public lotteryRoundCreator;\n\n    constructor(address cyclixRandomizer, address lotteryReader, address _lotteryRoundCreator, address _paymentToken, uint256 _ticketPrice, bool _freeRoundsAreEnabled)\n    EmergencyFunctions(msg.sender) {\n        randomizer = CyclixRandomizerInterface(cyclixRandomizer);\n        randomizer.registerGameContract(address(this), \"LotteryMasterV0.1\");\n        reader = LotteryReaderInterface(lotteryReader);\n        lotteryRoundCreator = LotteryRoundCreatorInterface(_lotteryRoundCreator);\n        paymentToken = IERC20Metadata(_paymentToken);\n        ticketPrice = _ticketPrice * (10 ** uint256(paymentToken.decimals()));\n        freeRoundsAreEnabled = _freeRoundsAreEnabled;\n        bankWallets.push(msg.sender);\n    }\n\n    function updateSetup(address cyclixRandomizer, address lotteryReader, address _lotteryRoundCreator, address _paymentToken, uint256 _ticketPrice,\n        uint16 _percentageOfReferralWinners, uint16[] memory _poolPercentagesBasePoints, bool _freeRoundsAreEnabled) public onlyOwner {\n        if (address(randomizer) != cyclixRandomizer) {\n            randomizer = CyclixRandomizerInterface(cyclixRandomizer);\n            randomizer.registerGameContract(address(this), \"LotteryMasterV0.1\");\n        }\n        reader = LotteryReaderInterface(lotteryReader);\n        lotteryRoundCreator = LotteryRoundCreatorInterface(_lotteryRoundCreator);\n        paymentToken = IERC20Metadata(_paymentToken);\n        ticketPrice = _ticketPrice * (10 ** uint256(paymentToken.decimals()));\n        percentageOfReferralWinners = _percentageOfReferralWinners;\n        LotteryRoundInterface(rounds[roundCount - 1]).setPoolPercentagesBasePoints(_poolPercentagesBasePoints);\n        freeRoundsAreEnabled = _freeRoundsAreEnabled;\n    }\n\n    function startNewRound(uint256 _statusEndTime) public onlyOwner {\n        if (roundCount > 0) {\n            startNewRoundForUpgrade(_statusEndTime, rounds[roundCount - 1], 0);\n        } else {\n            startNewRoundForUpgrade(_statusEndTime, address(0), 0);\n        }\n    }\n\n    function startNewRoundForUpgrade(uint256 _statusEndTime, address previousRound, uint256 forcedUiIdForUpgrade) public onlyOwner {\n        roundCount++;\n        rounds.push(lotteryRoundCreator.startNewRound(_statusEndTime, previousRound, forcedUiIdForUpgrade));\n        require(previousRound == address(0) || (lotteryStatus == LotteryStatuses.ClaimInProgress && statusEndTime < block.timestamp), \"Previous round not ended\");\n        setLotteryStatus(LotteryStatuses.DrawOpen, _statusEndTime);\n    }\n\n    function setLotteryStatus(LotteryStatuses _lotteryStatus, uint256 _statusEndTime) internal onlyOwner {\n        lotteryStatus = _lotteryStatus;\n        statusStartTime = block.timestamp;\n        statusEndTime = block.timestamp + _statusEndTime;\n    }\n\n    function buyTickets(uint256 chainId, uint16[] memory moreTicketNumbers, address referral, address buyer) public {\n        bool paidWithFreeTicket = false;\n        for (uint i = 0; i < moreTicketNumbers.length; i += 6) {\n            uint16[] memory chosenNumbers = new uint16[](6);\n            for (uint j = 0; j < 6; j++) {\n                chosenNumbers[j] = moreTicketNumbers[i + j];\n            }\n            paidWithFreeTicket = buyTicket(chainId, chosenNumbers, referral, buyer);\n        }\n\n        if (referral != address(0) && freeRoundsAreEnabled && !paidWithFreeTicket) {\n            unchecked {\n                freeRounds[buyer] = freeRounds[buyer] + moreTicketNumbers.length / 6;\n                freeRounds[referral] = freeRounds[referral] + moreTicketNumbers.length / 6;\n            }\n        }\n    }\n\n    function buyTicket(uint256 chainId, uint16[] memory chosenNumbers, address referral, address buyer) internal returns(bool) {\n        require(freeRounds[buyer] > 0\n        || paymentToken.allowance(buyer, address(this)) >= ticketPrice\n        || crossChainOperator[msg.sender], \"Missing Allowance\");\n        LotteryRoundInterface lotteryRound = LotteryRoundInterface(rounds[roundCount - 1]);\n        bool paidWithFreeTicket = false;\n        if (freeRounds[buyer] > 0) {\n            freeRounds[buyer]--;\n            paidWithFreeTicket = true;\n        } else {\n            if (!crossChainOperator[msg.sender]) {\n                require(paymentToken.balanceOf(tx.origin) >= ticketPrice, \"Insufficient funds\");\n                counterForBankWallets = uint16(counterForBankWallets++ % bankWallets.length);\n                SafeERC20.safeTransferFrom(paymentToken, buyer, bankWallets[counterForBankWallets], ticketPrice);\n            }\n            lotteryRound.updateVictoryPoolForTicket(ticketPrice);\n        }\n\n        if (paidWithFreeTicket) {\n            lotteryRound.buyTicket(chainId, chosenNumbers, address(0), buyer);\n        } else {\n            lotteryRound.buyTicket(chainId, chosenNumbers, referral, buyer);\n        }\n        return paidWithFreeTicket;\n    }\n\n    function addFreeRound(address[] calldata participant) public onlyOwner {\n        for (uint i = 0; i < participant.length; i++) {\n            freeRounds[participant[i]]++;\n        }\n    }\n\n    mapping(uint256 => uint256) public publicRoundRandomNumbersRequestId;\n\n    function closeRound(uint256 _statusEndTime) external onlyOwner {\n        LotteryRoundInterface lotteryRound = LotteryRoundInterface(rounds[roundCount - 1]);\n        lotteryRound.closeRound();\n        uint16 referralWinners = reader.numberOfReferralWinnersForRoundId(roundCount);\n        publicRoundRandomNumbersRequestId[roundCount] = randomizer.requestRandomWords(6 + referralWinners);\n        setLotteryStatus(LotteryStatuses.EvaluatingResults, _statusEndTime);\n    }\n\n    function fetchRoundNumbers(uint256 roundId, uint256 _statusEndTime) external onlyOwner {\n        LotteryRoundInterface round = LotteryRoundInterface(rounds[roundId - 1]);\n        round.couldReceiveWinningNumbers();\n        (bool fulfilled, uint256[] memory randomWords) = randomizer.getRequestStatus(publicRoundRandomNumbersRequestId[roundId]);\n        require(fulfilled, \"Random numbers not ready\");\n        uint16[] memory roundNumbers = new uint16[](6);\n        uint16[] memory referralWinnersNumber = new uint16[](randomWords.length - 6);\n        if (fulfilled) {\n            for (uint i = 0; i < 6; i++) {\n                roundNumbers[i] = reader.getRandomUniqueNumberInArrayForMaxValue(randomWords[i], 69, roundNumbers);\n            }\n            roundNumbers[5] = uint16(randomWords[5] % 26 + 1);\n            for (uint i = 6; i < randomWords.length; i++) {\n                referralWinnersNumber [i - 6] = reader.getRandomUniqueNumberInArrayForMaxValue(randomWords[i],\n                    round.getRound().referralCounts, referralWinnersNumber);\n            }\n        }\n        round.storeWinningNumbers(roundNumbers, referralWinnersNumber);\n        setLotteryStatus(LotteryStatuses.ResultsEvaluated, _statusEndTime);\n    }\n\n    function markWinners(uint256 roundId, uint256 _statusEndTime) public onlyOwner {\n        LotteryRoundInterface(rounds[roundId - 1]).markWinners(reader.evaluateWonTicketsForRound(roundId), reader.evaluateWonReferralForRound(roundId));\n        setLotteryStatus(LotteryStatuses.ClaimInProgress, _statusEndTime);\n    }\n\n    function claimVictory() public {\n        require(lotteryStatus == LotteryStatuses.ClaimInProgress, \"Lottery is not in claim period\");\n        require(statusEndTime > block.timestamp, \"Claim Period ended\");\n        uint256 amountForEntries = reader.evaluateWonTicketsAmountForWallet(roundCount, msg.sender, false);\n        uint256 amountForReferral = reader.evaluateWonReferralAmountForWallet(roundCount, msg.sender, false);\n        require(amountForEntries > 0 || amountForReferral > 0, \"Nothing to claim for this wallet\");\n        require(paymentToken.balanceOf(address(this)) >= amountForEntries + amountForReferral, \"Not enough funds on contract\");\n        LotteryRoundInterface(rounds[roundCount - 1]).markVictoryClaimed(\n            reader.evaluateWonTicketsForWallet(roundCount, msg.sender),\n            reader.evaluateWonReferralFoWallet(roundCount, msg.sender)\n        );\n        paymentToken.transfer(msg.sender, amountForEntries + amountForReferral);\n    }\n}"
    },
    "contracts/LotteryReader.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {TestFunctions} from \"./utils/TestUtils.sol\";\nimport {EmergencyFunctions} from \"./utils/EmergencyFunctions.sol\";\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \"./LotteryCommon.sol\";\nimport { LotteryRound } from \"./LotteryRound.sol\";\nimport { LotteryMaster } from \"./LotteryMaster.sol\";\nimport {LotteryReaderInterface} from \"./LotteryReaderInterface.sol\";\n\ncontract LotteryReader is LotteryReaderInterface, EmergencyFunctions {\n    LotteryMaster public lotteryMaster;\n\n    function setLotteryMaster(address _lotteryMaster) public onlyOwner {\n        lotteryMaster = LotteryMaster(_lotteryMaster);\n    }\n\n    constructor() EmergencyFunctions(tx.origin) {}\n\n    function poolForVictoryTier(uint256 roundId, RoundVictoryTier victoryTier) public view override returns(uint256) {\n        require(victoryTier == RoundVictoryTier.Tier5_1 || victoryTier == RoundVictoryTier.Tier5 || victoryTier == RoundVictoryTier.Tier4_1 ||\n        victoryTier == RoundVictoryTier.Tier4 || victoryTier == RoundVictoryTier.Tier3_1 || victoryTier == RoundVictoryTier.Tier3,\n            \"Invalid victory tier\");\n        return LotteryRound(lotteryMaster.rounds(roundId -1)).victoryTierAmounts(victoryTier);\n    }\n\n    function roundNumbers(uint256 roundId) public view returns(uint16[] memory) {\n        Round memory round = LotteryRound(lotteryMaster.rounds(roundId -1)).getRound();\n        return round.roundNumbers;\n    }\n\n    function referralWinnersNumber(uint256 roundId) public view returns(uint256[] memory) {\n        Round memory round = LotteryRound(lotteryMaster.rounds(roundId -1)).getRound();\n        return round.referralWinnersNumber;\n    }\n\n    function poolForReferral(uint256 roundId) public view override returns(uint256) {\n        return LotteryRound(lotteryMaster.rounds(roundId -1)).victoryTierAmounts(RoundVictoryTier.Referrer);\n    }\n\n    function tokenHoldersPoolAmount(uint256 roundId) public view override returns (uint256) {\n        return LotteryRound(lotteryMaster.rounds(roundId -1)).victoryTierAmounts(RoundVictoryTier.TokenHolders);\n    }\n\n    function treasuryPoolAmount(uint256 roundId) public view override returns (uint256) {\n        return LotteryRound(lotteryMaster.rounds(roundId -1)).victoryTierAmounts(RoundVictoryTier.Treasury);\n    }\n\n    function numberOfReferralWinnersForRoundId(uint256 roundId) public view override returns (uint16) {\n        uint16 referralWinnersForRound = 0;\n        uint16 referralCounts = LotteryRound(lotteryMaster.rounds(roundId -1)).getRound().referralCounts;\n        unchecked {\n            referralWinnersForRound = referralCounts / lotteryMaster.percentageOfReferralWinners();\n        }\n        if (referralWinnersForRound == 0 && referralCounts > 0) {\n            referralWinnersForRound = 1;\n        }\n        return referralWinnersForRound;\n    }\n\n    function existInArrayBigNumber(uint256 num, uint256[] memory arr) public pure override returns (bool) {\n        for (uint i = 0; i < arr.length; i++) {\n            if (arr[i] == num) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function existInArrayNumber(uint16 num, uint16[] memory arr) public pure override returns (bool) {\n        for (uint i = 0; i < arr.length; i++) {\n            if (arr[i] == num) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function notExistInArrayNumber(uint16 num, uint16[] memory arr) public pure override returns (bool) {\n        return existInArrayNumber(num, arr) == false;\n    }\n\n    function getRandomUniqueNumberInArrayForMaxValue(uint256 randomNumber, uint16 maxValue, uint16[] memory arr) public pure override returns (uint16) {\n        uint16 returnedNumber = uint16(randomNumber % maxValue + 1);\n        uint16 counter = 0;\n        bool existInNumbers = existInArrayNumber(returnedNumber, arr);\n        while (existInNumbers) {\n            returnedNumber =  uint16(uint256(keccak256(abi.encode(returnedNumber, counter))) % maxValue + 1);\n            existInNumbers = existInArrayNumber(returnedNumber, arr);\n            counter++;\n        }\n        return returnedNumber;\n    }\n\n\n    function tierFromResults(uint16 rightNumbersForTicket, bool powerNumberFound) public pure override returns (RoundVictoryTier) {\n        if (rightNumbersForTicket == 5 && powerNumberFound) {\n            return RoundVictoryTier.Tier5_1;\n        } else if (rightNumbersForTicket == 5) {\n            return RoundVictoryTier.Tier5;\n        } else if (rightNumbersForTicket == 4 && powerNumberFound) {\n            return RoundVictoryTier.Tier4_1;\n        } else if (rightNumbersForTicket == 4) {\n            return RoundVictoryTier.Tier4;\n        } else if (rightNumbersForTicket == 3 && powerNumberFound) {\n            return RoundVictoryTier.Tier3_1;\n        } else if (rightNumbersForTicket == 3) {\n            return RoundVictoryTier.Tier3;\n        }\n        return RoundVictoryTier.NO_WIN;\n    }\n\n    function getTicketsForRound(uint256 roundId) public view override returns(Ticket[] memory) {\n        LotteryRound lotteryRound = LotteryRound(lotteryMaster.rounds(roundId - 1));\n        Round memory roundForEvaluation = lotteryRound.getRound();\n        Ticket[] memory results = new Ticket[](roundForEvaluation.ticketsCount);\n        for (uint256 i = 0; i < roundForEvaluation.ticketsCount; i++) {\n            results[i] = lotteryRound.ticketById(roundForEvaluation.ticketIds[i]);\n        }\n        return results;\n    }\n\n    function getAllTicketsNumbersForRound(uint256 roundId) public view override returns(uint16[] memory) {\n        LotteryRound lotteryRound = LotteryRound(lotteryMaster.rounds(roundId - 1));\n        Round memory roundForEvaluation = lotteryRound.getRound();\n        uint16[] memory numbersForAllTickets = new uint16[](roundForEvaluation.ticketsCount * 6);\n        for (uint256 i = 0; i < roundForEvaluation.ticketsCount; i++) {\n            uint16[] memory numbersForTicket = lotteryRound.numbersForTicketId(i);\n            for (uint256 j = 0; j < numbersForTicket.length; j++) {\n                numbersForAllTickets[(i * 6) + j] = numbersForTicket[j];\n            }\n        }\n        return numbersForAllTickets;\n    }\n\n    function getReferralTicketsForRound(uint256 roundId) public view override returns(ReferralTicket[] memory) {\n        LotteryRound lotteryRound = LotteryRound(lotteryMaster.rounds(roundId - 1));\n        Round memory roundForEvaluation = lotteryRound.getRound();\n        ReferralTicket[] memory results = new ReferralTicket[](roundForEvaluation.referralCounts);\n        for (uint256 i = 0; i < roundForEvaluation.referralCounts; i++) {\n            results[i] = lotteryRound.referralTicketById(roundForEvaluation.ticketIds[i]);\n        }\n        return results;\n    }\n\n    function evaluateWonTicketsForRound(uint256 roundId) public view override returns (TicketResults[] memory){\n        LotteryRound lotteryRound = LotteryRound(lotteryMaster.rounds(roundId - 1));\n        Round memory roundForEvaluation = lotteryRound.getRound();\n        uint16 roundTicketCount = roundForEvaluation.ticketsCount;\n        TicketResults[] memory ticketResults = new TicketResults[](roundForEvaluation.ticketsCount);\n        uint16 counter = 0;\n        for(uint16 ticketIndexForRound = 0; ticketIndexForRound < roundTicketCount; ticketIndexForRound++) {\n            Ticket memory ticket = lotteryRound.ticketById(roundForEvaluation.ticketIds[ticketIndexForRound]);\n            uint16[] memory ticketNumbers = lotteryRound.numbersForTicketId(ticket.id);\n            bool powerNumberFound = ticketNumbers[5] == roundForEvaluation.roundNumbers[5];\n            uint16 rightNumbersForTicket = 0;\n            for(uint16 i = 0; i < 5; i++) {\n                uint16 ticketNumber = ticketNumbers[i];\n                if (existInArrayNumber(ticketNumber, roundForEvaluation.roundNumbers)) {\n                    rightNumbersForTicket++;\n                }\n            }\n            RoundVictoryTier tierResult = tierFromResults(rightNumbersForTicket, powerNumberFound);\n            uint256 amountWon = 0;\n            if (tierResult != RoundVictoryTier.NO_WIN && lotteryRound.winnersForEachTier(tierResult) > 0) {\n                amountWon = poolForVictoryTier(roundId, tierResult) / lotteryRound.winnersForEachTier(tierResult);\n            }\n            ticketResults[counter++] = TicketResults({\n                ticketId: ticket.id,\n                participantAddress : ticket.participantAddress,\n                victoryTier: tierResult,\n                won: tierResult != RoundVictoryTier.NO_WIN,\n                claimed: ticket.claimed,\n                amountWon : amountWon\n            });\n        }\n        return ticketResults;\n    }\n\n    function evaluateWonTicketsAmountForWallet(uint256 roundId, address wallet, bool claimed) public view override returns(uint256) {\n        uint256 wonAmount = 0;\n        TicketResults[] memory results = evaluateWonTicketsForWallet(roundId, wallet);\n        for (uint256 i = 0; i < results.length; i++) {\n            if (results[i].claimed == claimed) {\n                wonAmount += results[i].amountWon;\n            }\n        }\n        return wonAmount;\n    }\n\n    function evaluateWonTicketsForWallet(uint256 roundId, address wallet) public view override returns(TicketResults[] memory) {\n        TicketResults[] memory results = evaluateWonTicketsForRound(roundId);\n        uint256 counterForWalletTicket = 0;\n        TicketResults[] memory resultsForWallet = new TicketResults[](results.length);\n        for (uint256 i = 0; i < results.length; i++) {\n            if (results[i].participantAddress == wallet && results[i].won) {\n                resultsForWallet[counterForWalletTicket] = results[i];\n                counterForWalletTicket++;\n            }\n        }\n        TicketResults[] memory onlyResultsForWallet = new TicketResults[](counterForWalletTicket);\n        for (uint256 i = 0; i < counterForWalletTicket; i++) {\n            onlyResultsForWallet[i] = resultsForWallet[i];\n        }\n        return onlyResultsForWallet;\n    }\n\n    function evaluateWonReferralForRound(uint256 roundId) public view override returns (ReferralTicketResults[] memory) {\n        LotteryRound lotteryRound = LotteryRound(lotteryMaster.rounds(roundId - 1));\n        Round memory roundForEvaluation = lotteryRound.getRound();\n        ReferralTicketResults[] memory referralWinnerIds = new ReferralTicketResults[](roundForEvaluation.referralCounts);\n        uint16 counter = 0;\n        for(uint16 referralIndexForRound = 0; referralIndexForRound < roundForEvaluation.referralCounts; referralIndexForRound++) {\n            ReferralTicket memory referralTicket = lotteryRound.referralTicketById(roundForEvaluation.referralTicketIds[referralIndexForRound]);\n            bool referralWon = existInArrayBigNumber(referralTicket.referralTicketNumber, roundForEvaluation.referralWinnersNumber);\n            uint256 amountWon = 0;\n            if (referralWon && lotteryRound.winnersForEachTier(RoundVictoryTier.Referrer) > 0) {\n                amountWon = poolForReferral(roundId) / lotteryRound.winnersForEachTier(RoundVictoryTier.Referrer);\n            }\n            referralWinnerIds[counter++] = ReferralTicketResults({\n                referralTicketId: referralTicket.id,\n                buyerAddress : referralTicket.buyerAddress,\n                referralAddress : referralTicket.referralAddress,\n                referralTicketNumber: referralTicket.referralTicketNumber,\n                won: referralWon,\n                claimed: referralTicket.claimed,\n                amountWon : amountWon\n            });\n        }\n        return referralWinnerIds;\n    }\n\n    function evaluateWonReferralAmountForWallet(uint256 roundId, address wallet, bool claimed) public view override returns(uint256) {\n        uint256 wonAmount = 0;\n        ReferralTicketResults[] memory results = evaluateWonReferralFoWallet(roundId, wallet);\n        for (uint256 i = 0; i < results.length; i++) {\n            if (results[i].claimed == claimed) {\n                wonAmount += results[i].amountWon;\n            }\n        }\n        return wonAmount;\n    }\n\n    function evaluateWonReferralFoWallet(uint256 roundId, address wallet) public view override returns(ReferralTicketResults[] memory) {\n        ReferralTicketResults[] memory results = evaluateWonReferralForRound(roundId);\n        uint256 counterForWalletTicket = 0;\n        ReferralTicketResults[] memory resultsForWallet = new ReferralTicketResults[](results.length);\n        for (uint256 i = 0; i < results.length; i++) {\n            if (results[i].referralAddress == wallet && results[i].won) {\n                resultsForWallet[counterForWalletTicket] = results[i];\n                counterForWalletTicket++;\n            }\n        }\n        ReferralTicketResults[] memory onlyResultsForWallet = new ReferralTicketResults[](counterForWalletTicket);\n        for (uint256 i = 0; i < counterForWalletTicket; i++) {\n            onlyResultsForWallet[i] = resultsForWallet[i];\n        }\n        return onlyResultsForWallet;\n    }\n\n    function amountWonInRound(uint256 roundId) public view override returns (uint256) {\n        LotteryRound lotteryRound = LotteryRound(lotteryMaster.rounds(roundId -1));\n        uint256 amountWon = 0;\n        TicketResults[] memory ticketResults = evaluateWonTicketsForRound(roundId);\n        ReferralTicketResults[] memory referralResults = evaluateWonReferralForRound(roundId);\n        uint256[] memory winnersForPools = new uint256[](6);\n        for(uint16 i = 0; i < ticketResults.length; i++) {\n            if (ticketResults[i].victoryTier != RoundVictoryTier.NO_WIN) {\n                winnersForPools[uint(ticketResults[i].victoryTier)] = winnersForPools[uint(ticketResults[i].victoryTier)] + 1;\n            }\n        }\n        for(uint16 i = 0; i < 6; i++) {\n            if (winnersForPools[i] > 0) {\n                amountWon += lotteryRound.victoryTierAmounts(RoundVictoryTier(i));\n            }\n        }\n        if (referralResults.length > 0) {\n            amountWon += lotteryRound.victoryTierAmounts(RoundVictoryTier.Referrer);\n        }\n        return amountWon;\n    }\n}"
    },
    "contracts/LotteryReaderInterface.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {IERC20Metadata} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport {TestFunctions} from \"./utils/TestUtils.sol\";\nimport {CyclixRandomizerInterface} from \"./CyclixRandomizerInterface.sol\";\nimport {EmergencyFunctions} from \"./utils/EmergencyFunctions.sol\";\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \"./LotteryCommon.sol\";\n\ninterface LotteryReaderInterface {\n    function poolForVictoryTier(uint256 roundId, RoundVictoryTier victoryTier) external view returns(uint256) ;\n    function poolForReferral(uint256 roundId) external view returns(uint256) ;\n    function tokenHoldersPoolAmount(uint256 roundId) external view returns (uint256) ;\n    function treasuryPoolAmount(uint256 roundId) external view returns (uint256) ;\n    function numberOfReferralWinnersForRoundId(uint256 roundId) external view returns (uint16) ;\n    function existInArrayBigNumber(uint256 num, uint256[] memory arr) external pure returns (bool) ;\n    function existInArrayNumber(uint16 num, uint16[] memory arr) external pure returns (bool) ;\n    function notExistInArrayNumber(uint16 num, uint16[] memory arr) external pure returns (bool) ;\n    function getRandomUniqueNumberInArrayForMaxValue(uint256 randomNumber, uint16 maxValue, uint16[] memory arr) external pure returns (uint16) ;\n    function tierFromResults(uint16 rightNumbersForTicket, bool powerNumberFound) external pure returns (RoundVictoryTier) ;\n    function getTicketsForRound(uint256 roundId) external view returns(Ticket[] memory);\n    function getAllTicketsNumbersForRound(uint256 roundId) external view returns(uint16[] memory);\n    function getReferralTicketsForRound(uint256 roundId) external view returns(ReferralTicket[] memory);\n    function evaluateWonTicketsForRound(uint256 roundId) external view returns (TicketResults[] memory);\n    function evaluateWonTicketsAmountForWallet(uint256 roundId, address wallet, bool claimed) external view returns(uint256);\n    function evaluateWonTicketsForWallet(uint256 roundId, address wallet) external view returns(TicketResults[] memory);\n    function evaluateWonReferralForRound(uint256 roundId) external view returns (ReferralTicketResults[] memory);\n    function evaluateWonReferralAmountForWallet(uint256 roundId, address wallet, bool claimed) external view returns(uint256);\n    function evaluateWonReferralFoWallet(uint256 roundId, address wallet) external view returns (ReferralTicketResults[] memory);\n    function amountWonInRound(uint256 roundId) external view returns (uint256) ;\n    function roundNumbers(uint256 roundId) external view returns(uint16[] memory);\n    function referralWinnersNumber(uint256 roundId) external view returns(uint256[] memory);\n}"
    },
    "contracts/LotteryRound.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \"./LotteryCommon.sol\";\nimport {LotteryRoundInterface} from \"./LotteryRoundInterface.sol\";\n\ncontract LotteryRound is Ownable, LotteryRoundInterface {\n    Round public round;\n    function getRound() public view returns (Round memory) {\n        return round;\n    }\n\n    Ticket[] public tickets;\n    function ticketById(uint256 ticketId) public view returns (Ticket memory) {\n        return tickets[ticketId];\n    }\n    mapping(uint256 => uint16[]) public ticketNumbers;\n    function numbersForTicketId(uint256 ticketId) public view returns (uint16[] memory) {\n        return ticketNumbers[ticketId];\n    }\n    mapping(address => uint256[]) public roundTicketsByAddress;\n    mapping(address => uint256) public roundTicketsByAddressCount;\n\n    ReferralTicket[] public referralTickets;\n    function referralTicketById(uint256 index) public view returns (ReferralTicket memory) {\n        return referralTickets[index];\n    }\n    mapping(address => uint256[]) public roundReferralTicketsByAddress;\n    mapping(address => uint256) public roundReferralTicketsByAddressCount;\n\n    mapping(RoundVictoryTier => uint256) public victoryTierAmounts;\n    mapping(RoundVictoryTier => uint256) public victoryTierAmountsClaimed;\n    uint256 public totalVictoryPool;\n    uint256 public totalClaimed;\n    mapping(RoundVictoryTier => uint256) public winnersForEachTier;\n    address public previousRound;\n\n    uint16[]  public  poolPercentagesBasePoints = [3000, 1500, 1000, 700, 500, 300, 1500, 1000, 500];\n    function setPoolPercentagesBasePoints(uint16[] memory _poolPercentagesBasePoints) public onlyOwner {\n        poolPercentagesBasePoints = _poolPercentagesBasePoints;\n    }\n\n    constructor(address previousRoundAddress, uint256 roundDurationInSeconds, uint256 forcedUiIdForUpgrade) Ownable(msg.sender) {\n        uint256 id = 1;\n        uint256 uiId = 1;\n        previousRound = previousRoundAddress;\n        if (previousRoundAddress != address(0)) {\n            LotteryRound previousLotteryRound = LotteryRound(previousRoundAddress);\n            id = previousLotteryRound.getRound().id + 1;\n            uiId = previousLotteryRound.getRound().uiId + 1;\n            propagateWinningFromPreviousRound();\n        }\n        if (forcedUiIdForUpgrade > 0) {\n            id = 1;\n            uiId = forcedUiIdForUpgrade;\n        }\n        round = Round({\n            id: id,\n            uiId:  uiId,\n            startTime: block.timestamp,\n            endTime: block.timestamp + roundDurationInSeconds,\n            ended : false,\n            roundNumbers: new uint16[](0),\n            referralWinnersNumber: new uint256[](0),\n            referralWinnersNumberCount : 0,\n            ticketIds : new uint256[](0),\n            ticketsCount : 0,\n            referralTicketIds : new uint256[](0),\n            referralCounts : 0\n        });\n    }\n\n    function propagateWinningFromPreviousRound() internal {\n        LotteryRound previousLotteryRound = LotteryRound(previousRound);\n        updateVictoryPoolForTicket(previousLotteryRound.totalVictoryPool() - previousLotteryRound.totalClaimed());\n    }\n\n    function numberIsInRangeForRound(uint256 number) public pure returns (bool) {\n        return number > 0 && number <= 69;\n    }\n\n    function numberIsInRangeForPowerNumber(uint256 number) public pure returns (bool) {\n        return number > 0 && number <= 26;\n    }\n\n    function validateBuyTicket(uint16[] memory numbers, address referral) public view onlyOwner {\n        require(tx.origin != address(0), \"Invalid sender\");\n        require(block.timestamp < round.endTime, \"Round is over\");\n        require(numbers.length == 6, \"Invalid numbers count\");\n        for (uint i = 0; i < numbers.length - 1; i++) {\n            require(numberIsInRangeForRound(numbers[i]), \"Invalid numbers\");\n        }\n        require(numberIsInRangeForPowerNumber(numbers[5]), \"Invalid power number\");\n        require(referral != tx.origin, \"Referral cannot be the same as the participant\");\n    }\n\n    function percentageInBasisPoint(uint256 amount, uint256 basisPoint) public pure returns (uint256) {\n        return amount * basisPoint / 10000;\n    }\n\n    function treasuryAmountOnTicket(uint256 paymentTokenAmount) public view returns (uint256) {\n        return percentageInBasisPoint(paymentTokenAmount, poolPercentagesBasePoints[8]);\n    }\n\n    function updateVictoryPoolForTicket(uint256 paymentTokenAmount) public onlyOwner {\n        totalVictoryPool += paymentTokenAmount - percentageInBasisPoint(paymentTokenAmount, poolPercentagesBasePoints[uint(RoundVictoryTier.TokenHolders)]) -\n                        percentageInBasisPoint(paymentTokenAmount, poolPercentagesBasePoints[uint(RoundVictoryTier.Treasury)]);\n        for(uint i = 0; i < 9; i++) {\n            victoryTierAmounts[RoundVictoryTier(i)] += percentageInBasisPoint(paymentTokenAmount, poolPercentagesBasePoints[i]);\n        }\n    }\n\n    function buyTicket(uint256 chainId, uint16[] memory chosenNumbers, address referral, address buyer) public onlyOwner {\n        validateBuyTicket(chosenNumbers, referral);\n\n        uint256 ticketId = tickets.length;\n        tickets.push(Ticket({\n            id: ticketId,\n            participantAddress: buyer,\n            referralAddress: referral,\n            claimed: false,\n            chainId: chainId,\n            victoryTier: RoundVictoryTier.NO_WIN\n        }));\n        for(uint i = 0; i < chosenNumbers.length; i++) {\n            ticketNumbers[ticketId].push(chosenNumbers[i]);\n        }\n        round.ticketIds.push(ticketId);\n        round.ticketsCount++;\n\n        roundTicketsByAddress[buyer].push(tickets.length - 1);\n        roundTicketsByAddressCount[buyer]++;\n        if (referral != address(0)) {\n            uint256 referralTicketId = referralTickets.length;\n            round.referralTicketIds.push(referralTicketId);\n            round.referralCounts++;\n            referralTickets.push(ReferralTicket({\n                id: referralTicketId,\n                buyerAddress: buyer,\n                referralAddress: referral,\n                referralTicketNumber: uint16(round.referralCounts),\n                winner: false,\n                claimed: false\n            }));\n\n            roundReferralTicketsByAddress[referral].push(referralTickets.length - 1);\n            roundReferralTicketsByAddressCount[referral]++;\n        }\n    }\n\n    function closeRound() public onlyOwner {\n        require(block.timestamp >= round.endTime, \"Round is not over yet\");\n        round.ended = true;\n    }\n\n    function couldReceiveWinningNumbers() public view {\n        require(block.timestamp >= round.endTime, \"Round is not over yet\");\n        require(round.roundNumbers.length == 0, \"Winning numbers already set\");\n    }\n\n    function storeWinningNumbers(uint16[] memory roundNumbers, uint16[] memory referralWinnersNumber) public onlyOwner {\n        round.roundNumbers = roundNumbers;\n        round.referralWinnersNumber = referralWinnersNumber;\n        round.referralWinnersNumberCount = uint16(referralWinnersNumber.length);\n    }\n\n    function markWinners(TicketResults[] memory ticketResults, ReferralTicketResults[] memory referralTicketResults) public onlyOwner {\n        for (uint i = 0; i < ticketResults.length; i++) {\n            TicketResults memory ticketResult = ticketResults[i];\n            Ticket storage ticket = tickets[ticketResult.ticketId];\n            ticket.victoryTier = ticketResult.victoryTier;\n            winnersForEachTier[ticketResult.victoryTier]++;\n        }\n        for (uint i = 0; i < referralTicketResults.length; i++) {\n            ReferralTicketResults memory referralTicketResult = referralTicketResults[i];\n            ReferralTicket storage referralTicket = referralTickets[referralTicketResult.referralTicketId];\n            referralTicket.winner = referralTicketResult.won;\n            if (referralTicketResult.won) {\n                winnersForEachTier[RoundVictoryTier.Referrer]++;\n            }\n        }\n    }\n\n    function markVictoryClaimed(TicketResults[] memory ticketResults, ReferralTicketResults[] memory referralTicketResults) public onlyOwner {\n        for(uint i = 0; i < ticketResults.length; i++) {\n            TicketResults memory ticketResult = ticketResults[i];\n            Ticket storage ticket = tickets[ticketResult.ticketId];\n            ticket.claimed = true;\n            victoryTierAmountsClaimed[ticketResult.victoryTier] += ticketResult.amountWon;\n            totalClaimed += ticketResult.amountWon;\n        }\n        for(uint i = 0; i < referralTicketResults.length; i++) {\n            ReferralTicketResults memory referralTicketResult = referralTicketResults[i];\n            ReferralTicket storage referralTicket = referralTickets[referralTicketResult.referralTicketId];\n            referralTicket.claimed = true;\n            victoryTierAmountsClaimed[RoundVictoryTier.Referrer] += referralTicketResult.amountWon;\n            totalClaimed += referralTicketResult.amountWon;\n        }\n    }\n\n    function markReferralVictoryClaimed(uint256 referralTicketId, uint256 amountClaimed) public onlyOwner {\n        ReferralTicket storage referralTicket = referralTickets[referralTicketId];\n        referralTicket.claimed = true;\n        victoryTierAmountsClaimed[RoundVictoryTier.Referrer] += amountClaimed;\n    }\n}"
    },
    "contracts/LotteryRoundCreator.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport \"./LotteryRoundCreatorInterface.sol\";\nimport \"./LotteryRound.sol\";\n\ncontract LotteryRoundCreator is LotteryRoundCreatorInterface, Ownable {\n    constructor() Ownable(msg.sender) {}\n\n    function startNewRound(uint256 roundDurationInSeconds, address previousRoundAddress, uint256 forcedUiIdForUpgrade) public override onlyOwner returns(address) {\n        LotteryRound newRound = new LotteryRound(previousRoundAddress, roundDurationInSeconds, forcedUiIdForUpgrade);\n        newRound.transferOwnership(owner());\n        return address(newRound);\n    }\n}"
    },
    "contracts/LotteryRoundCreatorInterface.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\ninterface LotteryRoundCreatorInterface {\n   function startNewRound(uint256 roundDurationInSeconds, address previousRoundAddress, uint256 forcedUiIdForUpgrade) external returns(address);\n}"
    },
    "contracts/LotteryRoundInterface.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.20;\n\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \"./LotteryCommon.sol\";\n\ninterface LotteryRoundInterface {\n    function getRound() external returns(Round memory);\n    function markWinners(TicketResults[] memory ticketResults, ReferralTicketResults[] memory referralTicketResults) external;\n    function markVictoryClaimed(TicketResults[] memory ticketResults, ReferralTicketResults[] memory referralTicketResults) external;\n    function markReferralVictoryClaimed(uint256 referralTicketId, uint256 amountClaimed) external;\n    function treasuryAmountOnTicket(uint256 paymentTokenAmount) external view returns (uint256);\n    function updateVictoryPoolForTicket(uint256 paymentTokenAmount) external;\n    function buyTicket(uint256 chainId, uint16[] memory chosenNumbers, address referral, address buyer) external;\n    function closeRound() external;\n    function couldReceiveWinningNumbers() external view;\n    function storeWinningNumbers(uint16[] memory roundNumbers, uint16[] memory referralWinnersNumber) external;\n    function ticketById(uint256 ticketId) external view returns (Ticket memory);\n    function numbersForTicketId(uint256 ticketId) external view returns (uint16[] memory);\n    function referralTicketById(uint256 index) external view returns (ReferralTicket memory);\n    function setPoolPercentagesBasePoints(uint16[] memory _poolPercentagesBasePoints) external;\n}"
    },
    "contracts/utils/EmergencyFunctions.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ncontract EmergencyFunctions is Ownable {\n    address internal teamAddress;\n    constructor(address _teamAddress) Ownable(_teamAddress) {\n        teamAddress = _teamAddress;\n    }\n\n    function updateTeamAddress(address _teamAddress) public onlyOwner {\n        teamAddress = _teamAddress;\n    }\n\n    // Emergency Functions\n    function sendTokenToTeam(address _token) public onlyOwner {\n        uint256 amount = IERC20(_token).balanceOf(address(this));\n        if (amount > 0) {\n            SafeERC20.safeTransfer(IERC20(_token), teamAddress, amount);\n        }\n    }\n\n    function sendCryptoToTeam() public onlyOwner {\n        if (address(this).balance > 0) {\n            payable(teamAddress).transfer(address(this).balance);\n        }\n    }\n\n    /** @notice Check if an address is a contract */\n    function _isContract(address _addr) internal view returns (bool) {\n        uint256 size;\n        assembly {\n            size := extcodesize(_addr)\n        }\n        return size > 0;\n    }\n}\n"
    },
    "contracts/utils/TestUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.x <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ninterface IERC20Extension {\n    function decimals() external view returns (uint8);\n}\n\ncontract TestFunctions is Ownable {\n    constructor() Ownable(msg.sender) {}\n    //Used for mock testing, contract ownership will be renounced on release\n    uint public currentTimestampOverride;\n    function updateCurrentTimestampOverride(uint _v) external onlyOwner {\n        currentTimestampOverride = _v;\n    }\n    function currentTimestamp() public view returns(uint) {\n        if (currentTimestampOverride > 0) {\n            return currentTimestampOverride;\n        }\n        return block.timestamp;\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}