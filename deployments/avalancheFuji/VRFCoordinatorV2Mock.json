{
  "address": "0x1542aa880c555FCB61407524c5Cb4790b6E5CDEa",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint96",
          "name": "_baseFee",
          "type": "uint96"
        },
        {
          "internalType": "uint96",
          "name": "_gasPriceLink",
          "type": "uint96"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidConsumer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidRandomWords",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSubscription",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "MustBeSubOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Reentrant",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooManyConsumers",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "ConfigSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "subId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        }
      ],
      "name": "ConsumerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "subId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "consumer",
          "type": "address"
        }
      ],
      "name": "ConsumerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outputSeed",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "payment",
          "type": "uint96"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "name": "RandomWordsFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "preSeed",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "subId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "minimumRequestConfirmations",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "numWords",
          "type": "uint32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RandomWordsRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "subId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SubscriptionCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "subId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "SubscriptionCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint64",
          "name": "subId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "SubscriptionFunded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE_FEE",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GAS_PRICE_LINK",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_CONSUMERS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "acceptSubscriptionOwnerTransfer",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_subId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_consumer",
          "type": "address"
        }
      ],
      "name": "addConsumer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_subId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "cancelSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_subId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_consumer",
          "type": "address"
        }
      ],
      "name": "consumerIsAdded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createSubscription",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "_subId",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_consumer",
          "type": "address"
        }
      ],
      "name": "fulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_consumer",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_words",
          "type": "uint256[]"
        }
      ],
      "name": "fulfillRandomWordsWithOverride",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_subId",
          "type": "uint64"
        },
        {
          "internalType": "uint96",
          "name": "_amount",
          "type": "uint96"
        }
      ],
      "name": "fundSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getConfig",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "minimumRequestConfirmations",
          "type": "uint16"
        },
        {
          "internalType": "uint32",
          "name": "maxGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "stalenessSeconds",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "gasAfterPaymentCalculation",
          "type": "uint32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFallbackWeiPerUnitLink",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeConfig",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "fulfillmentFlatFeeLinkPPMTier1",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "fulfillmentFlatFeeLinkPPMTier2",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "fulfillmentFlatFeeLinkPPMTier3",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "fulfillmentFlatFeeLinkPPMTier4",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "fulfillmentFlatFeeLinkPPMTier5",
          "type": "uint32"
        },
        {
          "internalType": "uint24",
          "name": "reqsForTier2",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "reqsForTier3",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "reqsForTier4",
          "type": "uint24"
        },
        {
          "internalType": "uint24",
          "name": "reqsForTier5",
          "type": "uint24"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestSubscriptionIdCreated",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfig",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        },
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_subId",
          "type": "uint64"
        }
      ],
      "name": "getSubscription",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "balance",
          "type": "uint96"
        },
        {
          "internalType": "uint64",
          "name": "reqCount",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "consumers",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "pendingRequestExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_subId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_consumer",
          "type": "address"
        }
      ],
      "name": "removeConsumer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_subId",
          "type": "uint64"
        },
        {
          "internalType": "uint16",
          "name": "_minimumRequestConfirmations",
          "type": "uint16"
        },
        {
          "internalType": "uint32",
          "name": "_callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "_numWords",
          "type": "uint32"
        }
      ],
      "name": "requestRandomWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "requestSubscriptionOwnerTransfer",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x27703cd53d20884bdede9a9c7e9fbb713b40fb9ed873d37ad72b4cf08d5c449b",
  "receipt": {
    "to": null,
    "from": "0x4eCa23Ffd5710970E22558C484a0D6943dA5eAa5",
    "contractAddress": "0x1542aa880c555FCB61407524c5Cb4790b6E5CDEa",
    "transactionIndex": 0,
    "gasUsed": "2927190",
    "logsBloom": "0x
    "blockHash": "0x6e0209dacd0fc32dab7203d520272a05a2ca3acd26d84d95c630cde17896046d",
    "transactionHash": "0x27703cd53d20884bdede9a9c7e9fbb713b40fb9ed873d37ad72b4cf08d5c449b",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 32719236,
        "transactionHash": "0x27703cd53d20884bdede9a9c7e9fbb713b40fb9ed873d37ad72b4cf08d5c449b",
        "address": "0x1542aa880c555FCB61407524c5Cb4790b6E5CDEa",
        "topics": [
          "0x4b2974a542484cba2783812ff8033f7fc682cac2fe0905c28c5e27869b3155be"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x6e0209dacd0fc32dab7203d520272a05a2ca3acd26d84d95c630cde17896046d"
      }
    ],
    "blockNumber": 32719236,
    "cumulativeGasUsed": "2927190",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "100000000000000000",
    "1000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "8e70f708cb0ea74d642e38aad7ab252e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint96\",\"name\":\"_baseFee\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"_gasPriceLink\",\"type\":\"uint96\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidConsumer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRandomWords\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSubscription\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"MustBeSubOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Reentrant\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyConsumers\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"ConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"ConsumerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"ConsumerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputSeed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"payment\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"RandomWordsFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"preSeed\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RandomWordsRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SubscriptionCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"SubscriptionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"SubscriptionFunded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_FEE\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GAS_PRICE_LINK\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CONSUMERS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"acceptSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"}],\"name\":\"consumerIsAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createSubscription\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"_subId\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"}],\"name\":\"fulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_words\",\"type\":\"uint256[]\"}],\"name\":\"fulfillRandomWordsWithOverride\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_subId\",\"type\":\"uint64\"},{\"internalType\":\"uint96\",\"name\":\"_amount\",\"type\":\"uint96\"}],\"name\":\"fundSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getConfig\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"maxGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"stalenessSeconds\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"gasAfterPaymentCalculation\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFallbackWeiPerUnitLink\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeConfig\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeLinkPPMTier1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeLinkPPMTier2\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeLinkPPMTier3\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeLinkPPMTier4\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeLinkPPMTier5\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier2\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier3\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier4\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier5\",\"type\":\"uint24\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestSubscriptionIdCreated\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfig\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_subId\",\"type\":\"uint64\"}],\"name\":\"getSubscription\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"balance\",\"type\":\"uint96\"},{\"internalType\":\"uint64\",\"name\":\"reqCount\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"pendingRequestExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_consumer\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_subId\",\"type\":\"uint64\"},{\"internalType\":\"uint16\",\"name\":\"_minimumRequestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_numWords\",\"type\":\"uint32\"}],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"requestSubscriptionOwnerTransfer\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createSubscription()\":{\"details\":\"You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));\",\"returns\":{\"_subId\":\"- A unique subscription id.\"}},\"fulfillRandomWords(uint256,address)\":{\"details\":\"This mock uses a simplified formula for calculating payment amount and gas usage, and doesnot account for all edge cases handled in the real VRF coordinator. When making requestsagainst the real coordinator a small amount of additional LINK is required.\",\"params\":{\"_consumer\":\"the VRF randomness consumer to send the result to\",\"_requestId\":\"the request to fulfill\"}},\"fulfillRandomWordsWithOverride(uint256,address,uint256[])\":{\"params\":{\"_consumer\":\"the VRF randomness consumer to send the result to\",\"_requestId\":\"the request to fulfill\",\"_words\":\"user-provided random words\"}},\"fundSubscription(uint64,uint96)\":{\"params\":{\"_amount\":\"the amount to fund\",\"_subId\":\"the subscription to fund\"}},\"getRequestConfig()\":{\"returns\":{\"_0\":\"minimumRequestConfirmations global min for request confirmations\",\"_1\":\"maxGasLimit global max for request gas limit\",\"_2\":\"s_provingKeyHashes list of registered key hashes\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"createSubscription()\":{\"notice\":\"Create a VRF subscription.\"},\"fulfillRandomWords(uint256,address)\":{\"notice\":\"fulfillRandomWords fulfills the given request, sending the random words to the suppliedconsumer.\"},\"fulfillRandomWordsWithOverride(uint256,address,uint256[])\":{\"notice\":\"fulfillRandomWordsWithOverride allows the user to pass in their own random words.\"},\"fundSubscription(uint64,uint96)\":{\"notice\":\"fundSubscription allows funding a subscription with an arbitrary amount for testing.\"},\"getRequestConfig()\":{\"notice\":\"Get configuration relevant for making requests\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"setConfig()\":{\"notice\":\"Sets the configuration of the vrfv2 mock coordinator\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/testing/VRFCoordinatorV2Mock.sol\":\"VRFCoordinatorV2Mock\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ConfirmedOwnerWithProposal} from \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0xdcb0e9135ddbe71ee27ba99fa06656960c66c964cf2ecb29696da1c1427d9861\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IOwnable} from \\\"../interfaces/IOwnable.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    // solhint-disable-next-line custom-errors\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /// @notice Allows an owner to begin transferring ownership to a new address.\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /// @notice Allows an ownership transfer to be completed by the recipient.\\n  function acceptOwnership() external override {\\n    // solhint-disable-next-line custom-errors\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /// @notice Get the current owner\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /// @notice validate, transfer ownership, and emit relevant events\\n  function _transferOwnership(address to) private {\\n    // solhint-disable-next-line custom-errors\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /// @notice validate access\\n  function _validateOwnership() internal view {\\n    // solhint-disable-next-line custom-errors\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /// @notice Reverts if called by anyone other than the contract owner.\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x927e505bb87a58ea04d1a9efe945f4bf4093e88b618b6fede3b9c68e1e63d989\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  // solhint-disable-next-line chainlink-solidity/prefix-immutable-variables-with-i\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x5a502a5ce16796565815b295bb2d18a0d26d6f23621f733918c971047c6091d7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa9f8b7e09811f4ac9f421116b5d6bcf50b5748025c0cb012aaf5ff7c39a6b46a\",\"license\":\"MIT\"},\"contracts/testing/VRFCoordinatorV2Mock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// A mock for testing code that relies on VRFCoordinatorV2.\\npragma solidity ^0.8.4;\\n\\nimport {VRFCoordinatorV2Interface} from \\\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport {VRFConsumerBaseV2} from \\\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\nimport {ConfirmedOwner} from \\\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\\\";\\n\\n// solhint-disable chainlink-solidity/prefix-immutable-variables-with-i\\n// solhint-disable custom-errors\\n// solhint-disable avoid-low-level-calls\\n\\ncontract VRFCoordinatorV2Mock is VRFCoordinatorV2Interface, ConfirmedOwner {\\n    uint96 public immutable BASE_FEE;\\n    uint96 public immutable GAS_PRICE_LINK;\\n    uint16 public immutable MAX_CONSUMERS = 100;\\n\\n    error InvalidSubscription();\\n    error InsufficientBalance();\\n    error MustBeSubOwner(address owner);\\n    error TooManyConsumers();\\n    error InvalidConsumer();\\n    error InvalidRandomWords();\\n    error Reentrant();\\n\\n    event RandomWordsRequested(\\n        bytes32 indexed keyHash,\\n        uint256 requestId,\\n        uint256 preSeed,\\n        uint64 indexed subId,\\n        uint16 minimumRequestConfirmations,\\n        uint32 callbackGasLimit,\\n        uint32 numWords,\\n        address indexed sender\\n    );\\n    event RandomWordsFulfilled(uint256 indexed requestId, uint256 outputSeed, uint96 payment, bool success);\\n    event SubscriptionCreated(uint64 indexed subId, address owner);\\n    event SubscriptionFunded(uint64 indexed subId, uint256 oldBalance, uint256 newBalance);\\n    event SubscriptionCanceled(uint64 indexed subId, address to, uint256 amount);\\n    event ConsumerAdded(uint64 indexed subId, address consumer);\\n    event ConsumerRemoved(uint64 indexed subId, address consumer);\\n    event ConfigSet();\\n\\n    struct Config {\\n        // Reentrancy protection.\\n        bool reentrancyLock;\\n    }\\n    Config private s_config;\\n    uint64 internal s_currentSubId;\\n    uint256 internal s_nextRequestId = 1;\\n    uint256 internal s_nextPreSeed = 100;\\n    struct Subscription {\\n        address owner;\\n        uint96 balance;\\n    }\\n    mapping(uint64 => Subscription) internal s_subscriptions; /* subId */ /* subscription */\\n    mapping(uint64 => address[]) internal s_consumers; /* subId */ /* consumers */\\n\\n    struct Request {\\n        uint64 subId;\\n        uint32 callbackGasLimit;\\n        uint32 numWords;\\n    }\\n    mapping(uint256 => Request) internal s_requests; /* requestId */ /* request */\\n\\n    constructor(uint96 _baseFee, uint96 _gasPriceLink) ConfirmedOwner(msg.sender) {\\n        BASE_FEE = _baseFee;\\n        GAS_PRICE_LINK = _gasPriceLink;\\n        setConfig();\\n    }\\n\\n    /**\\n     * @notice Sets the configuration of the vrfv2 mock coordinator\\n   */\\n    function setConfig() public onlyOwner {\\n        s_config = Config({reentrancyLock: false});\\n        emit ConfigSet();\\n    }\\n\\n    function consumerIsAdded(uint64 _subId, address _consumer) public view returns (bool) {\\n        address[] memory consumers = s_consumers[_subId];\\n        for (uint256 i = 0; i < consumers.length; i++) {\\n            if (consumers[i] == _consumer) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    modifier onlyValidConsumer(uint64 _subId, address _consumer) {\\n        if (!consumerIsAdded(_subId, _consumer)) {\\n            revert InvalidConsumer();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice fulfillRandomWords fulfills the given request, sending the random words to the supplied\\n   * @notice consumer.\\n   *\\n   * @dev This mock uses a simplified formula for calculating payment amount and gas usage, and does\\n   * @dev not account for all edge cases handled in the real VRF coordinator. When making requests\\n   * @dev against the real coordinator a small amount of additional LINK is required.\\n   *\\n   * @param _requestId the request to fulfill\\n   * @param _consumer the VRF randomness consumer to send the result to\\n   */\\n    function fulfillRandomWords(uint256 _requestId, address _consumer) external nonReentrant {\\n        fulfillRandomWordsWithOverride(_requestId, _consumer, new uint256[](0));\\n    }\\n\\n    /**\\n     * @notice fulfillRandomWordsWithOverride allows the user to pass in their own random words.\\n   *\\n   * @param _requestId the request to fulfill\\n   * @param _consumer the VRF randomness consumer to send the result to\\n   * @param _words user-provided random words\\n   */\\n    function fulfillRandomWordsWithOverride(uint256 _requestId, address _consumer, uint256[] memory _words) public {\\n        uint256 startGas = gasleft();\\n        if (s_requests[_requestId].subId == 0) {\\n            revert(\\\"nonexistent request\\\");\\n        }\\n        Request memory req = s_requests[_requestId];\\n\\n        if (_words.length == 0) {\\n            _words = new uint256[](req.numWords);\\n            for (uint256 i = 0; i < req.numWords; i++) {\\n                _words[i] = uint256(keccak256(abi.encode(_requestId, i)));\\n            }\\n        } else if (_words.length != req.numWords) {\\n            revert InvalidRandomWords();\\n        }\\n\\n        s_config.reentrancyLock = true;\\n        VRFConsumerBaseV2(_consumer).rawFulfillRandomWords(_requestId, _words);\\n        s_config.reentrancyLock = false;\\n\\n        uint96 payment = uint96(BASE_FEE + ((startGas - gasleft()) * GAS_PRICE_LINK));\\n        if (s_subscriptions[req.subId].balance < payment) {\\n            revert InsufficientBalance();\\n        }\\n        s_subscriptions[req.subId].balance -= payment;\\n        delete (s_requests[_requestId]);\\n        emit RandomWordsFulfilled(_requestId, _requestId, payment, true);\\n    }\\n\\n    /**\\n     * @notice fundSubscription allows funding a subscription with an arbitrary amount for testing.\\n   *\\n   * @param _subId the subscription to fund\\n   * @param _amount the amount to fund\\n   */\\n    function fundSubscription(uint64 _subId, uint96 _amount) public {\\n        if (s_subscriptions[_subId].owner == address(0)) {\\n            revert InvalidSubscription();\\n        }\\n        uint96 oldBalance = s_subscriptions[_subId].balance;\\n        s_subscriptions[_subId].balance += _amount;\\n        emit SubscriptionFunded(_subId, oldBalance, oldBalance + _amount);\\n    }\\n\\n    function requestRandomWords(\\n        bytes32 _keyHash,\\n        uint64 _subId,\\n        uint16 _minimumRequestConfirmations,\\n        uint32 _callbackGasLimit,\\n        uint32 _numWords\\n    ) external override nonReentrant onlyValidConsumer(_subId, msg.sender) returns (uint256) {\\n        if (s_subscriptions[_subId].owner == address(0)) {\\n            revert InvalidSubscription();\\n        }\\n\\n        uint256 requestId = s_nextRequestId++;\\n        uint256 preSeed = s_nextPreSeed++;\\n\\n        s_requests[requestId] = Request({subId: _subId, callbackGasLimit: _callbackGasLimit, numWords: _numWords});\\n\\n        emit RandomWordsRequested(\\n            _keyHash,\\n            requestId,\\n            preSeed,\\n            _subId,\\n            _minimumRequestConfirmations,\\n            _callbackGasLimit,\\n            _numWords,\\n            msg.sender\\n        );\\n        return requestId;\\n    }\\n\\n    function createSubscription() external override returns (uint64 _subId) {\\n        s_currentSubId++;\\n        s_subscriptions[s_currentSubId] = Subscription({owner: msg.sender, balance: 0});\\n        emit SubscriptionCreated(s_currentSubId, msg.sender);\\n        return s_currentSubId;\\n    }\\n\\n    function getLatestSubscriptionIdCreated() external view returns (uint64) {\\n        return s_currentSubId;\\n    }\\n\\n    function getSubscription(\\n        uint64 _subId\\n    ) external view override returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers) {\\n        if (s_subscriptions[_subId].owner == address(0)) {\\n            revert InvalidSubscription();\\n        }\\n        return (s_subscriptions[_subId].balance, 0, s_subscriptions[_subId].owner, s_consumers[_subId]);\\n    }\\n\\n    function cancelSubscription(uint64 _subId, address _to) external override onlySubOwner(_subId) nonReentrant {\\n        emit SubscriptionCanceled(_subId, _to, s_subscriptions[_subId].balance);\\n        delete (s_subscriptions[_subId]);\\n    }\\n\\n    modifier onlySubOwner(uint64 _subId) {\\n        address owner = s_subscriptions[_subId].owner;\\n        if (owner == address(0)) {\\n            revert InvalidSubscription();\\n        }\\n        if (msg.sender != owner) {\\n            revert MustBeSubOwner(owner);\\n        }\\n        _;\\n    }\\n\\n    function getRequestConfig() external pure override returns (uint16, uint32, bytes32[] memory) {\\n        return (3, 2000000, new bytes32[](0));\\n    }\\n\\n    function addConsumer(uint64 _subId, address _consumer) external override onlySubOwner(_subId) {\\n        if (s_consumers[_subId].length == MAX_CONSUMERS) {\\n            revert TooManyConsumers();\\n        }\\n\\n        if (consumerIsAdded(_subId, _consumer)) {\\n            return;\\n        }\\n\\n        s_consumers[_subId].push(_consumer);\\n        emit ConsumerAdded(_subId, _consumer);\\n    }\\n\\n    function removeConsumer(\\n        uint64 _subId,\\n        address _consumer\\n    ) external override onlySubOwner(_subId) onlyValidConsumer(_subId, _consumer) nonReentrant {\\n        address[] storage consumers = s_consumers[_subId];\\n        for (uint256 i = 0; i < consumers.length; i++) {\\n            if (consumers[i] == _consumer) {\\n                address last = consumers[consumers.length - 1];\\n                consumers[i] = last;\\n                consumers.pop();\\n                break;\\n            }\\n        }\\n\\n        emit ConsumerRemoved(_subId, _consumer);\\n    }\\n\\n    function getConfig()\\n    external\\n    pure\\n    returns (\\n        uint16 minimumRequestConfirmations,\\n        uint32 maxGasLimit,\\n        uint32 stalenessSeconds,\\n        uint32 gasAfterPaymentCalculation\\n    )\\n    {\\n        return (4, 2_500_000, 2_700, 33285);\\n    }\\n\\n    function getFeeConfig()\\n    external\\n    pure\\n    returns (\\n        uint32 fulfillmentFlatFeeLinkPPMTier1,\\n        uint32 fulfillmentFlatFeeLinkPPMTier2,\\n        uint32 fulfillmentFlatFeeLinkPPMTier3,\\n        uint32 fulfillmentFlatFeeLinkPPMTier4,\\n        uint32 fulfillmentFlatFeeLinkPPMTier5,\\n        uint24 reqsForTier2,\\n        uint24 reqsForTier3,\\n        uint24 reqsForTier4,\\n        uint24 reqsForTier5\\n    )\\n    {\\n        return (\\n            100000, // 0.1 LINK\\n            100000, // 0.1 LINK\\n            100000, // 0.1 LINK\\n            100000, // 0.1 LINK\\n            100000, // 0.1 LINK\\n            0,\\n            0,\\n            0,\\n            0\\n        );\\n    }\\n\\n    modifier nonReentrant() {\\n        if (s_config.reentrancyLock) {\\n            revert Reentrant();\\n        }\\n        _;\\n    }\\n\\n    function getFallbackWeiPerUnitLink() external pure returns (int256) {\\n        return 4000000000000000; // 0.004 Ether\\n    }\\n\\n    function requestSubscriptionOwnerTransfer(uint64 /*_subId*/, address /*_newOwner*/) external pure override {\\n        revert(\\\"not implemented\\\");\\n    }\\n\\n    function acceptSubscriptionOwnerTransfer(uint64 /*_subId*/) external pure override {\\n        revert(\\\"not implemented\\\");\\n    }\\n\\n    function pendingRequestExists(uint64 /*subId*/) public pure override returns (bool) {\\n        revert(\\\"not implemented\\\");\\n    }\\n}\",\"keccak256\":\"0x4a4b12052ba3153b3dbc7c044fbd36d59e1c34fed0e8898b05037d04eeb94e50\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e0604052606461ffff1660c09061ffff16815250600160045560646005553480156200002b57600080fd5b50604051620038b3380380620038b3833981810160405281019062000051919062000435565b338060008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620000c6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000bd90620004dd565b60405180910390fd5b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146200014d576200014c81620001b060201b60201c565b5b505050816bffffffffffffffffffffffff166080816bffffffffffffffffffffffff1681525050806bffffffffffffffffffffffff1660a0816bffffffffffffffffffffffff1681525050620001a8620002df60201b60201c565b5050620005e3565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000221576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000218906200054f565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b620002ef6200035460201b60201c565b604051806020016040528060001515815250600260008201518160000160006101000a81548160ff0219169083151502179055509050507f4b2974a542484cba2783812ff8033f7fc682cac2fe0905c28c5e27869b3155be60405160405180910390a1565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620003e5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003dc90620005c1565b60405180910390fd5b565b600080fd5b60006bffffffffffffffffffffffff82169050919050565b6200040f81620003ec565b81146200041b57600080fd5b50565b6000815190506200042f8162000404565b92915050565b600080604083850312156200044f576200044e620003e7565b5b60006200045f858286016200041e565b925050602062000472858286016200041e565b9150509250929050565b600082825260208201905092915050565b7f43616e6e6f7420736574206f776e657220746f207a65726f0000000000000000600082015250565b6000620004c56018836200047c565b9150620004d2826200048d565b602082019050919050565b60006020820190508181036000830152620004f881620004b6565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b6000620005376017836200047c565b91506200054482620004ff565b602082019050919050565b600060208201905081810360008301526200056a8162000528565b9050919050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b6000620005a96016836200047c565b9150620005b68262000571565b602082019050919050565b60006020820190508181036000830152620005dc816200059a565b9050919050565b60805160a05160c05161328b6200062860003960008181610d7a0152610ec401526000818161081b015261189c0152600081816108600152610a6d015261328b6000f3fe608060405234801561001057600080fd5b50600436106101725760003560e01c806382359740116100de578063a47c769611610097578063d7ae1d3011610071578063d7ae1d30146103eb578063e82ad7d414610407578063ed5eb06d14610437578063f2fde38b1461046757610172565b8063a47c76961461037b578063afc69b53146103ae578063c3f909d4146103ca57610172565b806382359740146102df5780638b673e7a146102fb5780638da5cb5b146103055780639f87fad714610323578063a21a23e41461033f578063a410347f1461035d57610172565b80635d3b1d30116101305780635d3b1d30146102295780635fbbc0d21461025957806364d51a2a1461027f5780637341c10c1461029d57806379ba5097146102b9578063808974ff146102c357610172565b806201229114610177578063041e127a1461019757806304c357cb146101b557806308e3898e146101d1578063356dac71146101ed5780633d18651e1461020b575b600080fd5b61017f610483565b60405161018e93929190612359565b60405180910390f35b61019f6104e3565b6040516101ac91906123ba565b60405180910390f35b6101cf60048036038101906101ca9190612473565b610501565b005b6101eb60048036038101906101e69190612642565b61053c565b005b6101f5610a5c565b60405161020291906126ca565b60405180910390f35b610213610a6b565b604051610220919061270c565b60405180910390f35b610243600480360381019061023e91906127ab565b610a8f565b6040516102509190612835565b60405180910390f35b610261610d39565b6040516102769998979695949392919061286e565b60405180910390f35b610287610d78565b60405161029491906128fb565b60405180910390f35b6102b760048036038101906102b29190612473565b610d9c565b005b6102c1611028565b005b6102dd60048036038101906102d89190612916565b6111bd565b005b6102f960048036038101906102f49190612956565b61125f565b005b61030361129a565b005b61030d611307565b60405161031a9190612992565b60405180910390f35b61033d60048036038101906103389190612473565b611330565b005b6103476116df565b60405161035491906123ba565b60405180910390f35b61036561189a565b604051610372919061270c565b60405180910390f35b61039560048036038101906103909190612956565b6118be565b6040516103a59493929190612a6b565b60405180910390f35b6103c860048036038101906103c39190612ae3565b611ac3565b005b6103d2611c8d565b6040516103e29493929190612b23565b60405180910390f35b61040560048036038101906104009190612473565b611cad565b005b610421600480360381019061041c9190612956565b611f19565b60405161042e9190612b83565b60405180910390f35b610451600480360381019061044c9190612473565b611f56565b60405161045e9190612b83565b60405180910390f35b610481600480360381019061047c9190612b9e565b612085565b005b60008060606003621e8480600067ffffffffffffffff8111156104a9576104a86124ff565b5b6040519080825280602002602001820160405280156104d75781602001602082028036833780820191505090505b50925092509250909192565b6000600360009054906101000a900467ffffffffffffffff16905090565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053390612c28565b60405180910390fd5b60005a905060006008600086815260200190815260200160002060000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16036105b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105af90612c94565b60405180910390fd5b6000600860008681526020019081526020016000206040518060600160405290816000820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160089054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201600c9054906101000a900463ffffffff1663ffffffff1663ffffffff16815250509050600083510361072957806040015163ffffffff1667ffffffffffffffff811115610685576106846124ff565b5b6040519080825280602002602001820160405280156106b35781602001602082028036833780820191505090505b50925060005b816040015163ffffffff168110156107235785816040516020016106de929190612cb4565b6040516020818303038152906040528051906020012060001c84828151811061070a57610709612cdd565b5b60200260200101818152505080806001019150506106b9565b5061076e565b806040015163ffffffff1683511461076d576040517f3f3df5b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b6001600260000160006101000a81548160ff0219169083151502179055508373ffffffffffffffffffffffffffffffffffffffff16631fe543e386856040518363ffffffff1660e01b81526004016107c7929190612dca565b600060405180830381600087803b1580156107e157600080fd5b505af11580156107f5573d6000803e3d6000fd5b505050506000600260000160006101000a81548160ff02191690831515021790555060007f00000000000000000000000000000000000000000000000000000000000000006bffffffffffffffffffffffff165a846108549190612e29565b61085e9190612e5d565b7f00000000000000000000000000000000000000000000000000000000000000006bffffffffffffffffffffffff166108979190612e9f565b9050806bffffffffffffffffffffffff1660066000846000015167ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff161015610935576040517ff4d678b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060066000846000015167ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160148282829054906101000a90046bffffffffffffffffffffffff1661098a9190612ed3565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555060086000878152602001908152602001600020600080820160006101000a81549067ffffffffffffffff02191690556000820160086101000a81549063ffffffff021916905560008201600c6101000a81549063ffffffff02191690555050857f7dffc5ae5ee4e2e4df1651cf6ad329a73cebdb728f37ea0187b9b17e036756e487836001604051610a4c93929190612f13565b60405180910390a2505050505050565b6000660e35fa931a0000905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600260000160009054906101000a900460ff1615610adb576040517fed3ba6a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8433610ae78282611f56565b610b1d576040517f71e8313700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600660008967ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610bcd576040517f1f6a65b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060046000815480929190610be290612f4a565b919050559050600060056000815480929190610bfd90612f4a565b91905055905060405180606001604052808a67ffffffffffffffff1681526020018863ffffffff1681526020018763ffffffff168152506008600084815260200190815260200160002060008201518160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060208201518160000160086101000a81548163ffffffff021916908363ffffffff160217905550604082015181600001600c6101000a81548163ffffffff021916908363ffffffff1602179055509050503373ffffffffffffffffffffffffffffffffffffffff168967ffffffffffffffff168b7f63373d1c4696214b898952999c9aaec57dac1ee2723cec59bea6888f489a977285858d8d8d604051610d21959493929190612f92565b60405180910390a48194505050505095945050505050565b6000806000806000806000806000620186a080620186a080620186a0600080600080985098509850985098509850985098509850909192939495969798565b7f000000000000000000000000000000000000000000000000000000000000000081565b816000600660008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e52576040517f1f6a65b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ec257806040517fd8a3fb52000000000000000000000000000000000000000000000000000000008152600401610eb99190612992565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000061ffff16600760008667ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000208054905003610f49576040517f05a48e0f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610f538484611f56565b61102257600760008567ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508367ffffffffffffffff167f752ead9f4536ec1319ee3a5a604e1d65eded22e0924251552ba14ae4faa1bbc3846040516110199190612992565b60405180910390a25b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110af90613031565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b600260000160009054906101000a900460ff1615611207576040517fed3ba6a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61125b8282600067ffffffffffffffff811115611227576112266124ff565b5b6040519080825280602002602001820160405280156112555781602001602082028036833780820191505090505b5061053c565b5050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129190612c28565b60405180910390fd5b6112a2612099565b604051806020016040528060001515815250600260008201518160000160006101000a81548160ff0219169083151502179055509050507f4b2974a542484cba2783812ff8033f7fc682cac2fe0905c28c5e27869b3155be60405160405180910390a1565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b816000600660008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036113e6576040517f1f6a65b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461145657806040517fd8a3fb5200000000000000000000000000000000000000000000000000000000815260040161144d9190612992565b60405180910390fd5b83836114628282611f56565b611498576040517f71e8313700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260000160009054906101000a900460ff16156114e2576040517fed3ba6a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600760008867ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020905060005b8180549050811015611693578673ffffffffffffffffffffffffffffffffffffffff1682828154811061154657611545612cdd565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361168657600082600184805490506115a09190612e29565b815481106115b1576115b0612cdd565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050808383815481106115f2576115f1612cdd565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508280548061164b5761164a613051565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055905550611693565b8080600101915050611510565b508667ffffffffffffffff167ff9bc9d5b5733d904409def43a5ecc888dbdac9a95687780d8fd489d3bb3813fc876040516116ce9190612992565b60405180910390a250505050505050565b60006003600081819054906101000a900467ffffffffffffffff168092919061170790613080565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505060405180604001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200160006bffffffffffffffffffffffff1681525060066000600360009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550905050600360009054906101000a900467ffffffffffffffff1667ffffffffffffffff167f464722b4166576d3dcbba877b999bc35cf911f4eaf434b7eba68fa113951d0bf336040516118769190612992565b60405180910390a2600360009054906101000a900467ffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060006060600073ffffffffffffffffffffffffffffffffffffffff16600660008767ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611975576040517f1f6a65b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600660008667ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160149054906101000a90046bffffffffffffffffffffffff166000600660008867ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600760008967ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002080805480602002602001604051908101604052809291908181526020018280548015611aad57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611a63575b5050505050905093509350935093509193509193565b600073ffffffffffffffffffffffffffffffffffffffff16600660008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611b73576040517f1f6a65b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600660008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160149054906101000a90046bffffffffffffffffffffffff16905081600660008567ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160148282829054906101000a90046bffffffffffffffffffffffff16611c0b91906130b0565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055508267ffffffffffffffff167fd39ec07f4e209f627a4c427971473820dc129761ba28de8906bd56f57101d4f8828484611c7291906130b0565b604051611c8092919061312b565b60405180910390a2505050565b6000806000806004622625a0610a8c618205935093509350935090919293565b816000600660008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611d63576040517f1f6a65b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611dd357806040517fd8a3fb52000000000000000000000000000000000000000000000000000000008152600401611dca9190612992565b60405180910390fd5b600260000160009054906101000a900460ff1615611e1d576040517fed3ba6a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8367ffffffffffffffff167fe8ed5b475a5b5987aa9165e8731bb78043f39eee32ec5a1169a89e27fcd4981584600660008867ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160149054906101000a90046bffffffffffffffffffffffff16604051611e9b929190613154565b60405180910390a2600660008567ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a8154906bffffffffffffffffffffffff0219169055505050505050565b60006040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f4d90612c28565b60405180910390fd5b600080600760008567ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561200057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611fb6575b5050505050905060005b8151811015612078578373ffffffffffffffffffffffffffffffffffffffff1682828151811061203d5761203c612cdd565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff160361206b5760019250505061207f565b808060010191505061200a565b5060009150505b92915050565b61208d612099565b61209681612129565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612127576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161211e906131c9565b60405180910390fd5b565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612197576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161218e90613235565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b600061ffff82169050919050565b61226c81612255565b82525050565b600063ffffffff82169050919050565b61228b81612272565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b6122d0816122bd565b82525050565b60006122e283836122c7565b60208301905092915050565b6000602082019050919050565b600061230682612291565b612310818561229c565b935061231b836122ad565b8060005b8381101561234c57815161233388826122d6565b975061233e836122ee565b92505060018101905061231f565b5085935050505092915050565b600060608201905061236e6000830186612263565b61237b6020830185612282565b818103604083015261238d81846122fb565b9050949350505050565b600067ffffffffffffffff82169050919050565b6123b481612397565b82525050565b60006020820190506123cf60008301846123ab565b92915050565b6000604051905090565b600080fd5b600080fd5b6123f281612397565b81146123fd57600080fd5b50565b60008135905061240f816123e9565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061244082612415565b9050919050565b61245081612435565b811461245b57600080fd5b50565b60008135905061246d81612447565b92915050565b6000806040838503121561248a576124896123df565b5b600061249885828601612400565b92505060206124a98582860161245e565b9150509250929050565b6000819050919050565b6124c6816124b3565b81146124d157600080fd5b50565b6000813590506124e3816124bd565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612537826124ee565b810181811067ffffffffffffffff82111715612556576125556124ff565b5b80604052505050565b60006125696123d5565b9050612575828261252e565b919050565b600067ffffffffffffffff821115612595576125946124ff565b5b602082029050602081019050919050565b600080fd5b60006125be6125b98461257a565b61255f565b905080838252602082019050602084028301858111156125e1576125e06125a6565b5b835b8181101561260a57806125f688826124d4565b8452602084019350506020810190506125e3565b5050509392505050565b600082601f830112612629576126286124e9565b5b81356126398482602086016125ab565b91505092915050565b60008060006060848603121561265b5761265a6123df565b5b6000612669868287016124d4565b935050602061267a8682870161245e565b925050604084013567ffffffffffffffff81111561269b5761269a6123e4565b5b6126a786828701612614565b9150509250925092565b6000819050919050565b6126c4816126b1565b82525050565b60006020820190506126df60008301846126bb565b92915050565b60006bffffffffffffffffffffffff82169050919050565b612706816126e5565b82525050565b600060208201905061272160008301846126fd565b92915050565b612730816122bd565b811461273b57600080fd5b50565b60008135905061274d81612727565b92915050565b61275c81612255565b811461276757600080fd5b50565b60008135905061277981612753565b92915050565b61278881612272565b811461279357600080fd5b50565b6000813590506127a58161277f565b92915050565b600080600080600060a086880312156127c7576127c66123df565b5b60006127d58882890161273e565b95505060206127e688828901612400565b94505060406127f78882890161276a565b935050606061280888828901612796565b925050608061281988828901612796565b9150509295509295909350565b61282f816124b3565b82525050565b600060208201905061284a6000830184612826565b92915050565b600062ffffff82169050919050565b61286881612850565b82525050565b600061012082019050612884600083018c612282565b612891602083018b612282565b61289e604083018a612282565b6128ab6060830189612282565b6128b86080830188612282565b6128c560a083018761285f565b6128d260c083018661285f565b6128df60e083018561285f565b6128ed61010083018461285f565b9a9950505050505050505050565b60006020820190506129106000830184612263565b92915050565b6000806040838503121561292d5761292c6123df565b5b600061293b858286016124d4565b925050602061294c8582860161245e565b9150509250929050565b60006020828403121561296c5761296b6123df565b5b600061297a84828501612400565b91505092915050565b61298c81612435565b82525050565b60006020820190506129a76000830184612983565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6129e281612435565b82525050565b60006129f483836129d9565b60208301905092915050565b6000602082019050919050565b6000612a18826129ad565b612a2281856129b8565b9350612a2d836129c9565b8060005b83811015612a5e578151612a4588826129e8565b9750612a5083612a00565b925050600181019050612a31565b5085935050505092915050565b6000608082019050612a8060008301876126fd565b612a8d60208301866123ab565b612a9a6040830185612983565b8181036060830152612aac8184612a0d565b905095945050505050565b612ac0816126e5565b8114612acb57600080fd5b50565b600081359050612add81612ab7565b92915050565b60008060408385031215612afa57612af96123df565b5b6000612b0885828601612400565b9250506020612b1985828601612ace565b9150509250929050565b6000608082019050612b386000830187612263565b612b456020830186612282565b612b526040830185612282565b612b5f6060830184612282565b95945050505050565b60008115159050919050565b612b7d81612b68565b82525050565b6000602082019050612b986000830184612b74565b92915050565b600060208284031215612bb457612bb36123df565b5b6000612bc28482850161245e565b91505092915050565b600082825260208201905092915050565b7f6e6f7420696d706c656d656e7465640000000000000000000000000000000000600082015250565b6000612c12600f83612bcb565b9150612c1d82612bdc565b602082019050919050565b60006020820190508181036000830152612c4181612c05565b9050919050565b7f6e6f6e6578697374656e74207265717565737400000000000000000000000000600082015250565b6000612c7e601383612bcb565b9150612c8982612c48565b602082019050919050565b60006020820190508181036000830152612cad81612c71565b9050919050565b6000604082019050612cc96000830185612826565b612cd66020830184612826565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612d41816124b3565b82525050565b6000612d538383612d38565b60208301905092915050565b6000602082019050919050565b6000612d7782612d0c565b612d818185612d17565b9350612d8c83612d28565b8060005b83811015612dbd578151612da48882612d47565b9750612daf83612d5f565b925050600181019050612d90565b5085935050505092915050565b6000604082019050612ddf6000830185612826565b8181036020830152612df18184612d6c565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612e34826124b3565b9150612e3f836124b3565b9250828203905081811115612e5757612e56612dfa565b5b92915050565b6000612e68826124b3565b9150612e73836124b3565b9250828202612e81816124b3565b91508282048414831517612e9857612e97612dfa565b5b5092915050565b6000612eaa826124b3565b9150612eb5836124b3565b9250828201905080821115612ecd57612ecc612dfa565b5b92915050565b6000612ede826126e5565b9150612ee9836126e5565b925082820390506bffffffffffffffffffffffff811115612f0d57612f0c612dfa565b5b92915050565b6000606082019050612f286000830186612826565b612f3560208301856126fd565b612f426040830184612b74565b949350505050565b6000612f55826124b3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612f8757612f86612dfa565b5b600182019050919050565b600060a082019050612fa76000830188612826565b612fb46020830187612826565b612fc16040830186612263565b612fce6060830185612282565b612fdb6080830184612282565b9695505050505050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b600061301b601683612bcb565b915061302682612fe5565b602082019050919050565b6000602082019050818103600083015261304a8161300e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600061308b82612397565b915067ffffffffffffffff82036130a5576130a4612dfa565b5b600182019050919050565b60006130bb826126e5565b91506130c6836126e5565b925082820190506bffffffffffffffffffffffff8111156130ea576130e9612dfa565b5b92915050565b6000819050919050565b600061311561311061310b846126e5565b6130f0565b6124b3565b9050919050565b613125816130fa565b82525050565b6000604082019050613140600083018561311c565b61314d602083018461311c565b9392505050565b60006040820190506131696000830185612983565b613176602083018461311c565b9392505050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b60006131b3601683612bcb565b91506131be8261317d565b602082019050919050565b600060208201905081810360008301526131e2816131a6565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b600061321f601783612bcb565b915061322a826131e9565b602082019050919050565b6000602082019050818103600083015261324e81613212565b905091905056fea26469706673582212207150fadfcdd58353317b1aada9f3663030550c5e1ded60c03934f9062cda9f8264736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101725760003560e01c806382359740116100de578063a47c769611610097578063d7ae1d3011610071578063d7ae1d30146103eb578063e82ad7d414610407578063ed5eb06d14610437578063f2fde38b1461046757610172565b8063a47c76961461037b578063afc69b53146103ae578063c3f909d4146103ca57610172565b806382359740146102df5780638b673e7a146102fb5780638da5cb5b146103055780639f87fad714610323578063a21a23e41461033f578063a410347f1461035d57610172565b80635d3b1d30116101305780635d3b1d30146102295780635fbbc0d21461025957806364d51a2a1461027f5780637341c10c1461029d57806379ba5097146102b9578063808974ff146102c357610172565b806201229114610177578063041e127a1461019757806304c357cb146101b557806308e3898e146101d1578063356dac71146101ed5780633d18651e1461020b575b600080fd5b61017f610483565b60405161018e93929190612359565b60405180910390f35b61019f6104e3565b6040516101ac91906123ba565b60405180910390f35b6101cf60048036038101906101ca9190612473565b610501565b005b6101eb60048036038101906101e69190612642565b61053c565b005b6101f5610a5c565b60405161020291906126ca565b60405180910390f35b610213610a6b565b604051610220919061270c565b60405180910390f35b610243600480360381019061023e91906127ab565b610a8f565b6040516102509190612835565b60405180910390f35b610261610d39565b6040516102769998979695949392919061286e565b60405180910390f35b610287610d78565b60405161029491906128fb565b60405180910390f35b6102b760048036038101906102b29190612473565b610d9c565b005b6102c1611028565b005b6102dd60048036038101906102d89190612916565b6111bd565b005b6102f960048036038101906102f49190612956565b61125f565b005b61030361129a565b005b61030d611307565b60405161031a9190612992565b60405180910390f35b61033d60048036038101906103389190612473565b611330565b005b6103476116df565b60405161035491906123ba565b60405180910390f35b61036561189a565b604051610372919061270c565b60405180910390f35b61039560048036038101906103909190612956565b6118be565b6040516103a59493929190612a6b565b60405180910390f35b6103c860048036038101906103c39190612ae3565b611ac3565b005b6103d2611c8d565b6040516103e29493929190612b23565b60405180910390f35b61040560048036038101906104009190612473565b611cad565b005b610421600480360381019061041c9190612956565b611f19565b60405161042e9190612b83565b60405180910390f35b610451600480360381019061044c9190612473565b611f56565b60405161045e9190612b83565b60405180910390f35b610481600480360381019061047c9190612b9e565b612085565b005b60008060606003621e8480600067ffffffffffffffff8111156104a9576104a86124ff565b5b6040519080825280602002602001820160405280156104d75781602001602082028036833780820191505090505b50925092509250909192565b6000600360009054906101000a900467ffffffffffffffff16905090565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161053390612c28565b60405180910390fd5b60005a905060006008600086815260200190815260200160002060000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16036105b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105af90612c94565b60405180910390fd5b6000600860008681526020019081526020016000206040518060600160405290816000820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160089054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200160008201600c9054906101000a900463ffffffff1663ffffffff1663ffffffff16815250509050600083510361072957806040015163ffffffff1667ffffffffffffffff811115610685576106846124ff565b5b6040519080825280602002602001820160405280156106b35781602001602082028036833780820191505090505b50925060005b816040015163ffffffff168110156107235785816040516020016106de929190612cb4565b6040516020818303038152906040528051906020012060001c84828151811061070a57610709612cdd565b5b60200260200101818152505080806001019150506106b9565b5061076e565b806040015163ffffffff1683511461076d576040517f3f3df5b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b6001600260000160006101000a81548160ff0219169083151502179055508373ffffffffffffffffffffffffffffffffffffffff16631fe543e386856040518363ffffffff1660e01b81526004016107c7929190612dca565b600060405180830381600087803b1580156107e157600080fd5b505af11580156107f5573d6000803e3d6000fd5b505050506000600260000160006101000a81548160ff02191690831515021790555060007f00000000000000000000000000000000000000000000000000000000000000006bffffffffffffffffffffffff165a846108549190612e29565b61085e9190612e5d565b7f00000000000000000000000000000000000000000000000000000000000000006bffffffffffffffffffffffff166108979190612e9f565b9050806bffffffffffffffffffffffff1660066000846000015167ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160149054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff161015610935576040517ff4d678b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060066000846000015167ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160148282829054906101000a90046bffffffffffffffffffffffff1661098a9190612ed3565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555060086000878152602001908152602001600020600080820160006101000a81549067ffffffffffffffff02191690556000820160086101000a81549063ffffffff021916905560008201600c6101000a81549063ffffffff02191690555050857f7dffc5ae5ee4e2e4df1651cf6ad329a73cebdb728f37ea0187b9b17e036756e487836001604051610a4c93929190612f13565b60405180910390a2505050505050565b6000660e35fa931a0000905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600260000160009054906101000a900460ff1615610adb576040517fed3ba6a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8433610ae78282611f56565b610b1d576040517f71e8313700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600660008967ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610bcd576040517f1f6a65b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060046000815480929190610be290612f4a565b919050559050600060056000815480929190610bfd90612f4a565b91905055905060405180606001604052808a67ffffffffffffffff1681526020018863ffffffff1681526020018763ffffffff168152506008600084815260200190815260200160002060008201518160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060208201518160000160086101000a81548163ffffffff021916908363ffffffff160217905550604082015181600001600c6101000a81548163ffffffff021916908363ffffffff1602179055509050503373ffffffffffffffffffffffffffffffffffffffff168967ffffffffffffffff168b7f63373d1c4696214b898952999c9aaec57dac1ee2723cec59bea6888f489a977285858d8d8d604051610d21959493929190612f92565b60405180910390a48194505050505095945050505050565b6000806000806000806000806000620186a080620186a080620186a0600080600080985098509850985098509850985098509850909192939495969798565b7f000000000000000000000000000000000000000000000000000000000000000081565b816000600660008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e52576040517f1f6a65b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ec257806040517fd8a3fb52000000000000000000000000000000000000000000000000000000008152600401610eb99190612992565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000061ffff16600760008667ffffffffffffffff1667ffffffffffffffff1681526020019081526020016000208054905003610f49576040517f05a48e0f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610f538484611f56565b61102257600760008567ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508367ffffffffffffffff167f752ead9f4536ec1319ee3a5a604e1d65eded22e0924251552ba14ae4faa1bbc3846040516110199190612992565b60405180910390a25b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110af90613031565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b600260000160009054906101000a900460ff1615611207576040517fed3ba6a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61125b8282600067ffffffffffffffff811115611227576112266124ff565b5b6040519080825280602002602001820160405280156112555781602001602082028036833780820191505090505b5061053c565b5050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129190612c28565b60405180910390fd5b6112a2612099565b604051806020016040528060001515815250600260008201518160000160006101000a81548160ff0219169083151502179055509050507f4b2974a542484cba2783812ff8033f7fc682cac2fe0905c28c5e27869b3155be60405160405180910390a1565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b816000600660008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036113e6576040517f1f6a65b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461145657806040517fd8a3fb5200000000000000000000000000000000000000000000000000000000815260040161144d9190612992565b60405180910390fd5b83836114628282611f56565b611498576040517f71e8313700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260000160009054906101000a900460ff16156114e2576040517fed3ba6a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600760008867ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020905060005b8180549050811015611693578673ffffffffffffffffffffffffffffffffffffffff1682828154811061154657611545612cdd565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361168657600082600184805490506115a09190612e29565b815481106115b1576115b0612cdd565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050808383815481106115f2576115f1612cdd565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508280548061164b5761164a613051565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055905550611693565b8080600101915050611510565b508667ffffffffffffffff167ff9bc9d5b5733d904409def43a5ecc888dbdac9a95687780d8fd489d3bb3813fc876040516116ce9190612992565b60405180910390a250505050505050565b60006003600081819054906101000a900467ffffffffffffffff168092919061170790613080565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505060405180604001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200160006bffffffffffffffffffffffff1681525060066000600360009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550905050600360009054906101000a900467ffffffffffffffff1667ffffffffffffffff167f464722b4166576d3dcbba877b999bc35cf911f4eaf434b7eba68fa113951d0bf336040516118769190612992565b60405180910390a2600360009054906101000a900467ffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060006060600073ffffffffffffffffffffffffffffffffffffffff16600660008767ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611975576040517f1f6a65b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600660008667ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160149054906101000a90046bffffffffffffffffffffffff166000600660008867ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600760008967ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002080805480602002602001604051908101604052809291908181526020018280548015611aad57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611a63575b5050505050905093509350935093509193509193565b600073ffffffffffffffffffffffffffffffffffffffff16600660008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603611b73576040517f1f6a65b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600660008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160149054906101000a90046bffffffffffffffffffffffff16905081600660008567ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160148282829054906101000a90046bffffffffffffffffffffffff16611c0b91906130b0565b92506101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055508267ffffffffffffffff167fd39ec07f4e209f627a4c427971473820dc129761ba28de8906bd56f57101d4f8828484611c7291906130b0565b604051611c8092919061312b565b60405180910390a2505050565b6000806000806004622625a0610a8c618205935093509350935090919293565b816000600660008367ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611d63576040517f1f6a65b600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611dd357806040517fd8a3fb52000000000000000000000000000000000000000000000000000000008152600401611dca9190612992565b60405180910390fd5b600260000160009054906101000a900460ff1615611e1d576040517fed3ba6a600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8367ffffffffffffffff167fe8ed5b475a5b5987aa9165e8731bb78043f39eee32ec5a1169a89e27fcd4981584600660008867ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060000160149054906101000a90046bffffffffffffffffffffffff16604051611e9b929190613154565b60405180910390a2600660008567ffffffffffffffff1667ffffffffffffffff168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a8154906bffffffffffffffffffffffff0219169055505050505050565b60006040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f4d90612c28565b60405180910390fd5b600080600760008567ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561200057602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611fb6575b5050505050905060005b8151811015612078578373ffffffffffffffffffffffffffffffffffffffff1682828151811061203d5761203c612cdd565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff160361206b5760019250505061207f565b808060010191505061200a565b5060009150505b92915050565b61208d612099565b61209681612129565b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612127576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161211e906131c9565b60405180910390fd5b565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612197576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161218e90613235565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b600061ffff82169050919050565b61226c81612255565b82525050565b600063ffffffff82169050919050565b61228b81612272565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b6122d0816122bd565b82525050565b60006122e283836122c7565b60208301905092915050565b6000602082019050919050565b600061230682612291565b612310818561229c565b935061231b836122ad565b8060005b8381101561234c57815161233388826122d6565b975061233e836122ee565b92505060018101905061231f565b5085935050505092915050565b600060608201905061236e6000830186612263565b61237b6020830185612282565b818103604083015261238d81846122fb565b9050949350505050565b600067ffffffffffffffff82169050919050565b6123b481612397565b82525050565b60006020820190506123cf60008301846123ab565b92915050565b6000604051905090565b600080fd5b600080fd5b6123f281612397565b81146123fd57600080fd5b50565b60008135905061240f816123e9565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061244082612415565b9050919050565b61245081612435565b811461245b57600080fd5b50565b60008135905061246d81612447565b92915050565b6000806040838503121561248a576124896123df565b5b600061249885828601612400565b92505060206124a98582860161245e565b9150509250929050565b6000819050919050565b6124c6816124b3565b81146124d157600080fd5b50565b6000813590506124e3816124bd565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612537826124ee565b810181811067ffffffffffffffff82111715612556576125556124ff565b5b80604052505050565b60006125696123d5565b9050612575828261252e565b919050565b600067ffffffffffffffff821115612595576125946124ff565b5b602082029050602081019050919050565b600080fd5b60006125be6125b98461257a565b61255f565b905080838252602082019050602084028301858111156125e1576125e06125a6565b5b835b8181101561260a57806125f688826124d4565b8452602084019350506020810190506125e3565b5050509392505050565b600082601f830112612629576126286124e9565b5b81356126398482602086016125ab565b91505092915050565b60008060006060848603121561265b5761265a6123df565b5b6000612669868287016124d4565b935050602061267a8682870161245e565b925050604084013567ffffffffffffffff81111561269b5761269a6123e4565b5b6126a786828701612614565b9150509250925092565b6000819050919050565b6126c4816126b1565b82525050565b60006020820190506126df60008301846126bb565b92915050565b60006bffffffffffffffffffffffff82169050919050565b612706816126e5565b82525050565b600060208201905061272160008301846126fd565b92915050565b612730816122bd565b811461273b57600080fd5b50565b60008135905061274d81612727565b92915050565b61275c81612255565b811461276757600080fd5b50565b60008135905061277981612753565b92915050565b61278881612272565b811461279357600080fd5b50565b6000813590506127a58161277f565b92915050565b600080600080600060a086880312156127c7576127c66123df565b5b60006127d58882890161273e565b95505060206127e688828901612400565b94505060406127f78882890161276a565b935050606061280888828901612796565b925050608061281988828901612796565b9150509295509295909350565b61282f816124b3565b82525050565b600060208201905061284a6000830184612826565b92915050565b600062ffffff82169050919050565b61286881612850565b82525050565b600061012082019050612884600083018c612282565b612891602083018b612282565b61289e604083018a612282565b6128ab6060830189612282565b6128b86080830188612282565b6128c560a083018761285f565b6128d260c083018661285f565b6128df60e083018561285f565b6128ed61010083018461285f565b9a9950505050505050505050565b60006020820190506129106000830184612263565b92915050565b6000806040838503121561292d5761292c6123df565b5b600061293b858286016124d4565b925050602061294c8582860161245e565b9150509250929050565b60006020828403121561296c5761296b6123df565b5b600061297a84828501612400565b91505092915050565b61298c81612435565b82525050565b60006020820190506129a76000830184612983565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6129e281612435565b82525050565b60006129f483836129d9565b60208301905092915050565b6000602082019050919050565b6000612a18826129ad565b612a2281856129b8565b9350612a2d836129c9565b8060005b83811015612a5e578151612a4588826129e8565b9750612a5083612a00565b925050600181019050612a31565b5085935050505092915050565b6000608082019050612a8060008301876126fd565b612a8d60208301866123ab565b612a9a6040830185612983565b8181036060830152612aac8184612a0d565b905095945050505050565b612ac0816126e5565b8114612acb57600080fd5b50565b600081359050612add81612ab7565b92915050565b60008060408385031215612afa57612af96123df565b5b6000612b0885828601612400565b9250506020612b1985828601612ace565b9150509250929050565b6000608082019050612b386000830187612263565b612b456020830186612282565b612b526040830185612282565b612b5f6060830184612282565b95945050505050565b60008115159050919050565b612b7d81612b68565b82525050565b6000602082019050612b986000830184612b74565b92915050565b600060208284031215612bb457612bb36123df565b5b6000612bc28482850161245e565b91505092915050565b600082825260208201905092915050565b7f6e6f7420696d706c656d656e7465640000000000000000000000000000000000600082015250565b6000612c12600f83612bcb565b9150612c1d82612bdc565b602082019050919050565b60006020820190508181036000830152612c4181612c05565b9050919050565b7f6e6f6e6578697374656e74207265717565737400000000000000000000000000600082015250565b6000612c7e601383612bcb565b9150612c8982612c48565b602082019050919050565b60006020820190508181036000830152612cad81612c71565b9050919050565b6000604082019050612cc96000830185612826565b612cd66020830184612826565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612d41816124b3565b82525050565b6000612d538383612d38565b60208301905092915050565b6000602082019050919050565b6000612d7782612d0c565b612d818185612d17565b9350612d8c83612d28565b8060005b83811015612dbd578151612da48882612d47565b9750612daf83612d5f565b925050600181019050612d90565b5085935050505092915050565b6000604082019050612ddf6000830185612826565b8181036020830152612df18184612d6c565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612e34826124b3565b9150612e3f836124b3565b9250828203905081811115612e5757612e56612dfa565b5b92915050565b6000612e68826124b3565b9150612e73836124b3565b9250828202612e81816124b3565b91508282048414831517612e9857612e97612dfa565b5b5092915050565b6000612eaa826124b3565b9150612eb5836124b3565b9250828201905080821115612ecd57612ecc612dfa565b5b92915050565b6000612ede826126e5565b9150612ee9836126e5565b925082820390506bffffffffffffffffffffffff811115612f0d57612f0c612dfa565b5b92915050565b6000606082019050612f286000830186612826565b612f3560208301856126fd565b612f426040830184612b74565b949350505050565b6000612f55826124b3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612f8757612f86612dfa565b5b600182019050919050565b600060a082019050612fa76000830188612826565b612fb46020830187612826565b612fc16040830186612263565b612fce6060830185612282565b612fdb6080830184612282565b9695505050505050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b600061301b601683612bcb565b915061302682612fe5565b602082019050919050565b6000602082019050818103600083015261304a8161300e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600061308b82612397565b915067ffffffffffffffff82036130a5576130a4612dfa565b5b600182019050919050565b60006130bb826126e5565b91506130c6836126e5565b925082820190506bffffffffffffffffffffffff8111156130ea576130e9612dfa565b5b92915050565b6000819050919050565b600061311561311061310b846126e5565b6130f0565b6124b3565b9050919050565b613125816130fa565b82525050565b6000604082019050613140600083018561311c565b61314d602083018461311c565b9392505050565b60006040820190506131696000830185612983565b613176602083018461311c565b9392505050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b60006131b3601683612bcb565b91506131be8261317d565b602082019050919050565b600060208201905081810360008301526131e2816131a6565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b600061321f601783612bcb565b915061322a826131e9565b602082019050919050565b6000602082019050818103600083015261324e81613212565b905091905056fea26469706673582212207150fadfcdd58353317b1aada9f3663030550c5e1ded60c03934f9062cda9f8264736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "createSubscription()": {
        "details": "You can manage the consumer set dynamically with addConsumer/removeConsumer.Note to fund the subscription, use transferAndCall. For exampleLINKTOKEN.transferAndCall(address(COORDINATOR),amount,abi.encode(subId));",
        "returns": {
          "_subId": "- A unique subscription id."
        }
      },
      "fulfillRandomWords(uint256,address)": {
        "details": "This mock uses a simplified formula for calculating payment amount and gas usage, and doesnot account for all edge cases handled in the real VRF coordinator. When making requestsagainst the real coordinator a small amount of additional LINK is required.",
        "params": {
          "_consumer": "the VRF randomness consumer to send the result to",
          "_requestId": "the request to fulfill"
        }
      },
      "fulfillRandomWordsWithOverride(uint256,address,uint256[])": {
        "params": {
          "_consumer": "the VRF randomness consumer to send the result to",
          "_requestId": "the request to fulfill",
          "_words": "user-provided random words"
        }
      },
      "fundSubscription(uint64,uint96)": {
        "params": {
          "_amount": "the amount to fund",
          "_subId": "the subscription to fund"
        }
      },
      "getRequestConfig()": {
        "returns": {
          "_0": "minimumRequestConfirmations global min for request confirmations",
          "_1": "maxGasLimit global max for request gas limit",
          "_2": "s_provingKeyHashes list of registered key hashes"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "createSubscription()": {
        "notice": "Create a VRF subscription."
      },
      "fulfillRandomWords(uint256,address)": {
        "notice": "fulfillRandomWords fulfills the given request, sending the random words to the suppliedconsumer."
      },
      "fulfillRandomWordsWithOverride(uint256,address,uint256[])": {
        "notice": "fulfillRandomWordsWithOverride allows the user to pass in their own random words."
      },
      "fundSubscription(uint64,uint96)": {
        "notice": "fundSubscription allows funding a subscription with an arbitrary amount for testing."
      },
      "getRequestConfig()": {
        "notice": "Get configuration relevant for making requests"
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "setConfig()": {
        "notice": "Sets the configuration of the vrfv2 mock coordinator"
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 29,
        "contract": "contracts/testing/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock",
        "label": "s_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 31,
        "contract": "contracts/testing/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5540,
        "contract": "contracts/testing/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock",
        "label": "s_config",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Config)5537_storage"
      },
      {
        "astId": 5542,
        "contract": "contracts/testing/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock",
        "label": "s_currentSubId",
        "offset": 0,
        "slot": "3",
        "type": "t_uint64"
      },
      {
        "astId": 5545,
        "contract": "contracts/testing/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock",
        "label": "s_nextRequestId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 5548,
        "contract": "contracts/testing/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock",
        "label": "s_nextPreSeed",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 5558,
        "contract": "contracts/testing/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock",
        "label": "s_subscriptions",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint64,t_struct(Subscription)5553_storage)"
      },
      {
        "astId": 5563,
        "contract": "contracts/testing/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock",
        "label": "s_consumers",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint64,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 5575,
        "contract": "contracts/testing/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock",
        "label": "s_requests",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(Request)5570_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(Request)5570_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct VRFCoordinatorV2Mock.Request)",
        "numberOfBytes": "32",
        "value": "t_struct(Request)5570_storage"
      },
      "t_mapping(t_uint64,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint64,t_struct(Subscription)5553_storage)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => struct VRFCoordinatorV2Mock.Subscription)",
        "numberOfBytes": "32",
        "value": "t_struct(Subscription)5553_storage"
      },
      "t_struct(Config)5537_storage": {
        "encoding": "inplace",
        "label": "struct VRFCoordinatorV2Mock.Config",
        "members": [
          {
            "astId": 5536,
            "contract": "contracts/testing/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock",
            "label": "reentrancyLock",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Request)5570_storage": {
        "encoding": "inplace",
        "label": "struct VRFCoordinatorV2Mock.Request",
        "members": [
          {
            "astId": 5565,
            "contract": "contracts/testing/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock",
            "label": "subId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 5567,
            "contract": "contracts/testing/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock",
            "label": "callbackGasLimit",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 5569,
            "contract": "contracts/testing/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock",
            "label": "numWords",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Subscription)5553_storage": {
        "encoding": "inplace",
        "label": "struct VRFCoordinatorV2Mock.Subscription",
        "members": [
          {
            "astId": 5550,
            "contract": "contracts/testing/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5552,
            "contract": "contracts/testing/VRFCoordinatorV2Mock.sol:VRFCoordinatorV2Mock",
            "label": "balance",
            "offset": 20,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}