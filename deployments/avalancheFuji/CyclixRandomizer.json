{
  "address": "0x261Eb577B743164A850dD2Ed02e2688aE0591c32",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "coordinatorAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "RequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "numWords",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "requestor",
          "type": "address"
        }
      ],
      "name": "RequestSent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "callbackGasLimitForOneWord",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coordinator",
      "outputs": [
        {
          "internalType": "contract VRFCoordinatorV2Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "gameContractActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "gameContractAdded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "gameContractName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "gameContractRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "gameContractRequestsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gameAddress",
          "type": "address"
        }
      ],
      "name": "getLastRequestIdForCaller",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "getRequestStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "fulfilled",
          "type": "bool"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "randomWordsRecoverRequest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "recoverLostNumberRequest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gameAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "registerGameContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestConfirmations",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "numWords",
          "type": "uint32"
        }
      ],
      "name": "requestRandomWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_requests",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "wordsCount",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "fulfilled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "newGas",
          "type": "uint32"
        }
      ],
      "name": "setCallbackGasLimitForOneWord",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gameAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setGameContractStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        }
      ],
      "name": "updateCoordinator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4f3e069aed457906d1e3005bfcfe8374ee21607148fc5fc9b1081ab5767fd7aa",
  "receipt": {
    "to": null,
    "from": "0x4eCa23Ffd5710970E22558C484a0D6943dA5eAa5",
    "contractAddress": "0x261Eb577B743164A850dD2Ed02e2688aE0591c32",
    "transactionIndex": 0,
    "gasUsed": "2465495",
    "logsBloom": "0x
    "blockHash": "0xb2b87cc170ac99fc8a9f481dce902251ee95b364b2c73bf8611bfc736d42ea9b",
    "transactionHash": "0x4f3e069aed457906d1e3005bfcfe8374ee21607148fc5fc9b1081ab5767fd7aa",
    "logs": [],
    "blockNumber": 32689406,
    "cumulativeGasUsed": "2465495",
    "status": 1,
    "byzantium": true
  },
  "args": [
    2366,
    "0x354d2f95da55398f44b7cff77da56283d9c6c829a4bdf1bbcaf2ad6a4d081f61",
    "0x2eD832Ba664535e5886b75D64C46EB9a228C2610"
  ],
  "numDeployments": 2,
  "solcInputHash": "e0da3c85d28f7e916e4c1d94f0c4e561",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"coordinatorAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requestor\",\"type\":\"address\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callbackGasLimitForOneWord\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coordinator\",\"outputs\":[{\"internalType\":\"contract VRFCoordinatorV2Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gameContractActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gameContractAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gameContractName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gameContractRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gameContractRequestsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gameAddress\",\"type\":\"address\"}],\"name\":\"getLastRequestIdForCaller\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getRequestStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"randomWordsRecoverRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"recoverLostNumberRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gameAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"registerGameContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestConfirmations\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_requests\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"wordsCount\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newGas\",\"type\":\"uint32\"}],\"name\":\"setCallbackGasLimitForOneWord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gameAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setGameContractStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"}],\"name\":\"updateCoordinator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CyclixRandomizer.sol\":\"CyclixRandomizer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ConfirmedOwnerWithProposal} from \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0xdcb0e9135ddbe71ee27ba99fa06656960c66c964cf2ecb29696da1c1427d9861\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IOwnable} from \\\"../interfaces/IOwnable.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    // solhint-disable-next-line custom-errors\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /// @notice Allows an owner to begin transferring ownership to a new address.\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /// @notice Allows an ownership transfer to be completed by the recipient.\\n  function acceptOwnership() external override {\\n    // solhint-disable-next-line custom-errors\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /// @notice Get the current owner\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /// @notice validate, transfer ownership, and emit relevant events\\n  function _transferOwnership(address to) private {\\n    // solhint-disable-next-line custom-errors\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /// @notice validate access\\n  function _validateOwnership() internal view {\\n    // solhint-disable-next-line custom-errors\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /// @notice Reverts if called by anyone other than the contract owner.\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x927e505bb87a58ea04d1a9efe945f4bf4093e88b618b6fede3b9c68e1e63d989\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  // solhint-disable-next-line chainlink-solidity/prefix-immutable-variables-with-i\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x5a502a5ce16796565815b295bb2d18a0d26d6f23621f733918c971047c6091d7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa9f8b7e09811f4ac9f421116b5d6bcf50b5748025c0cb012aaf5ff7c39a6b46a\",\"license\":\"MIT\"},\"contracts/CyclixRandomizer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// An example of a consumer contract that relies on a subscription for funding.\\npragma solidity ^0.8.20;\\n\\nimport {VRFCoordinatorV2Interface} from \\\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport {VRFConsumerBaseV2} from \\\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\nimport {ConfirmedOwner} from \\\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\\\";\\nimport {CyclixRandomizerInterface} from \\\"./CyclixRandomizerInterface.sol\\\";\\n\\n\\n// File contracts/CyclixRandomizer.sol\\n\\ncontract CyclixRandomizer is CyclixRandomizerInterface, VRFConsumerBaseV2, ConfirmedOwner {\\n    event RequestSent(uint256 requestId, uint32 numWords, address requestor);\\n    event RequestFulfilled(uint256 requestId, uint256[] randomWords);\\n\\n    struct RequestStatus {\\n        uint32 wordsCount; // number of words requested\\n        bool fulfilled; // whether the request has been successfully fulfilled\\n        bool exists; // whether a requestId exists\\n        uint256[] randomWords;\\n    }\\n    mapping(uint256 => RequestStatus) public s_requests;\\n    mapping(address => bool) public gameContractAdded;\\n    mapping(address => bool) public gameContractActive;\\n    mapping(address => string) public gameContractName;\\n    mapping(address => uint256) public gameContractRequestsCount;\\n    mapping(address => uint256[]) public gameContractRequests;\\n    VRFCoordinatorV2Interface public coordinator;\\n    function updateCoordinator(address _vrfCoordinator) public onlyOwner{\\n        coordinator = VRFCoordinatorV2Interface(_vrfCoordinator);\\n    }\\n\\n    // Your subscription ID.\\n    uint64 s_subscriptionId;\\n\\n    // past requests Id.\\n    uint256[] public requestIds;\\n    uint256 public lastRequestId;\\n\\n    // The gas lane to use, which specifies the maximum gas price to bump to.\\n    bytes32 keyHash;\\n\\n    // Depends on the number of requested values that you want sent to the\\n    // fulfillRandomWords() function. Storing each word costs about 20,000 gas,\\n    // so 100,000 is a safe default for this example contract. Test and adjust\\n    // this limit based on the network that you select, the size of the request,\\n    // and the processing of the callback request in the fulfillRandomWords()\\n    // function.\\n    uint32 public callbackGasLimitForOneWord = 3000;\\n    function setCallbackGasLimitForOneWord(uint32 newGas) external onlyOwner {\\n        callbackGasLimitForOneWord = newGas;\\n    }\\n    uint16 public requestConfirmations = 3;\\n    mapping(uint256 => uint256) public randomWordsRecoverRequest;\\n\\n    constructor(uint64 subscriptionId, bytes32 _keyHash, address coordinatorAddress)\\n    VRFConsumerBaseV2(coordinatorAddress)\\n    ConfirmedOwner(msg.sender)\\n    {\\n        coordinator = VRFCoordinatorV2Interface(coordinatorAddress);\\n        s_subscriptionId = subscriptionId;\\n        keyHash = _keyHash;\\n    }\\n\\n    function registerGameContract(address gameAddress, string calldata name) public {\\n        require(tx.origin == owner(), \\\"Only owner can register game contract\\\");\\n        require(gameContractAdded[gameAddress] == false, \\\"Game contracts will remain for verifications\\\" );\\n        gameContractAdded[gameAddress] = true;\\n        gameContractActive[gameAddress] = true;\\n        gameContractName[gameAddress] = name;\\n    }\\n\\n    function setGameContractStatus(address gameAddress, bool status) external onlyOwner {\\n        gameContractActive[gameAddress] = status;\\n    }\\n\\n    // Assumes the subscription is funded sufficiently.\\n    function requestRandomWords(uint32 numWords) public returns (uint256 requestId)\\n    {\\n        require(msg.sender == owner() || gameContractAdded[msg.sender], \\\"Only Owner and Game can request random number\\\");\\n        uint32 callbackGasLimit = callbackGasLimitForOneWord;\\n\\n        requestId = coordinator.requestRandomWords(keyHash, s_subscriptionId,\\n            requestConfirmations, callbackGasLimit * numWords, numWords);\\n\\n        s_requests[requestId] = RequestStatus({\\n            wordsCount: numWords,\\n            randomWords: new uint256[](0),\\n            exists: true,\\n            fulfilled: false\\n        });\\n        requestIds.push(requestId);\\n        lastRequestId = requestId;\\n        gameContractRequests[msg.sender].push(requestId);\\n        gameContractRequestsCount[msg.sender]++;\\n        emit RequestSent(requestId, numWords, msg.sender);\\n        return requestId;\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 _requestId,\\n        uint256[] memory _randomWords\\n    ) internal override {\\n        require(s_requests[_requestId].exists, \\\"request not found\\\");\\n        s_requests[_requestId].fulfilled = true;\\n        s_requests[_requestId].randomWords = _randomWords;\\n        emit RequestFulfilled(_requestId, _randomWords);\\n    }\\n\\n    function getLastRequestIdForCaller(address _gameAddress) public view returns (uint256) {\\n        return gameContractRequests[_gameAddress][gameContractRequestsCount[_gameAddress] - 1];\\n    }\\n\\n    function recoverLostNumberRequest(uint256 _requestId) public onlyOwner returns (uint256) {\\n        require(s_requests[_requestId].exists, \\\"request not found\\\");\\n        require(s_requests[_requestId].fulfilled == false, \\\"request already fulfilled\\\");\\n        RequestStatus memory request = s_requests[_requestId];\\n        randomWordsRecoverRequest[_requestId] = requestRandomWords(request.wordsCount);\\n        return randomWordsRecoverRequest[_requestId];\\n    }\\n\\n    function getRequestStatus(\\n        uint256 _requestId\\n    ) public view returns (bool fulfilled, uint256[] memory randomWords) {\\n        require(s_requests[_requestId].exists, \\\"request not found\\\");\\n        if (s_requests[randomWordsRecoverRequest[_requestId]].exists) {\\n            RequestStatus memory request = s_requests[randomWordsRecoverRequest[_requestId]];\\n            return (request.fulfilled, request.randomWords);\\n        } else {\\n            RequestStatus memory request = s_requests[_requestId];\\n            return (request.fulfilled, request.randomWords);\\n        }\\n    }\\n}\",\"keccak256\":\"0x722dfe57c88b8db5be6f46c56e48b9f5db7d0b6e76ec6d00ba6e54ceb5b98994\",\"license\":\"MIT\"},\"contracts/CyclixRandomizerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface CyclixRandomizerInterface {\\n    function requestRandomWords(uint32 numWords) external returns (uint256 requestId);\\n    function getRequestStatus(uint256 _requestId) external view returns (bool fulfilled, uint256[] memory randomWords);\\n    function registerGameContract(address gameAddress, string calldata name) external;\\n    function getLastRequestIdForCaller(address _gameAddress) external view returns (uint256);\\n    function recoverLostNumberRequest(uint256 _requestId) external returns (uint256);\\n}\",\"keccak256\":\"0xc71c2b020044355f41cc53069e9a6f9f2778311e8d601a29bcc608301a0dfe24\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c8063af9c4daf116100c3578063d8a4676f1161007c578063d8a4676f14610401578063e5f0cc3814610432578063e726f2e114610462578063f2fde38b14610492578063f9f94e34146104ae578063fc2a88c3146104ca57610158565b8063af9c4daf1461032d578063b089a0c51461035d578063b0fb162f14610379578063c698011714610397578063cd0f2311146103b5578063d7dd3d4b146103d157610158565b806379ba50971161011557806379ba5097146102575780637c8fab5c146102615780638796ba8c146102915780638da5cb5b146102c15780639d432cb9146102df578063a168fa89146102fb57610158565b80630a0090971461015d57806310aa616b1461017b5780631fe543e3146101ab5780632371d0f1146101c7578063293ac0e3146101f757806341381dae14610227575b600080fd5b6101656104e8565b6040516101729190611930565b60405180910390f35b6101956004803603810190610190919061199d565b61050e565b6040516101a291906119e5565b60405180910390f35b6101c560048036038101906101c09190611b8f565b61052e565b005b6101e160048036038101906101dc9190611beb565b6105ee565b6040516101ee9190611c27565b60405180910390f35b610211600480360381019061020c919061199d565b610606565b60405161021e91906119e5565b60405180910390f35b610241600480360381019061023c9190611beb565b610626565b60405161024e9190611c27565b60405180910390f35b61025f610813565b005b61027b6004803603810190610276919061199d565b6109a8565b6040516102889190611c27565b60405180910390f35b6102ab60048036038101906102a69190611beb565b610a58565b6040516102b89190611c27565b60405180910390f35b6102c9610a7c565b6040516102d69190611c51565b60405180910390f35b6102f960048036038101906102f49190611ca8565b610aa5565b005b61031560048036038101906103109190611beb565b610ad1565b60405161032493929190611ce4565b60405180910390f35b6103476004803603810190610342919061199d565b610b25565b6040516103549190611c27565b60405180910390f35b61037760048036038101906103729190611d47565b610b3d565b005b610381610ba0565b60405161038e9190611da4565b60405180910390f35b61039f610bb4565b6040516103ac9190611dbf565b60405180910390f35b6103cf60048036038101906103ca9190611e35565b610bca565b005b6103eb60048036038101906103e69190611e95565b610dd6565b6040516103f89190611c27565b60405180910390f35b61041b60048036038101906104169190611beb565b610e07565b604051610429929190611f93565b60405180910390f35b61044c6004803603810190610447919061199d565b611092565b6040516104599190612042565b60405180910390f35b61047c60048036038101906104779190611ca8565b611132565b6040516104899190611c27565b60405180910390f35b6104ac60048036038101906104a7919061199d565b61152b565b005b6104c860048036038101906104c3919061199d565b61153f565b005b6104d261158b565b6040516104df9190611c27565b60405180910390f35b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60046020528060005260406000206000915054906101000a900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105e057337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016105d7929190612064565b60405180910390fd5b6105ea8282611591565b5050565b600d6020528060005260406000206000915090505481565b60036020528060005260406000206000915054906101000a900460ff1681565b600061063061168b565b6002600083815260200190815260200160002060000160059054906101000a900460ff16610693576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068a906120d9565b60405180910390fd5b600015156002600084815260200190815260200160002060000160049054906101000a900460ff161515146106fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f490612145565b60405180910390fd5b6000600260008481526020019081526020016000206040518060800160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a900460ff161515151581526020016000820160059054906101000a900460ff16151515158152602001600182018054806020026020016040519081016040528092919081815260200182805480156107c857602002820191906000526020600020905b8154815260200190600101908083116107b4575b50505050508152505090506107e08160000151611132565b600d600085815260200190815260200160002081905550600d600084815260200190815260200160002054915050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089a906121b1565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a359190612200565b81548110610a4657610a45612234565b5b90600052602060002001549050919050565b60098181548110610a6857600080fd5b906000526020600020016000915090505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610aad61168b565b80600c60006101000a81548163ffffffff021916908363ffffffff16021790555050565b60026020528060005260406000206000915090508060000160009054906101000a900463ffffffff16908060000160049054906101000a900460ff16908060000160059054906101000a900460ff16905083565b60066020528060005260406000206000915090505481565b610b4561168b565b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600c60049054906101000a900461ffff1681565b600c60009054906101000a900463ffffffff1681565b610bd2610a7c565b73ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614610c3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c36906122d5565b60405180910390fd5b60001515600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610cd2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc990612367565b60405180910390fd5b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508181600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209182610dd0929190612594565b50505050565b60076020528160005260406000208181548110610df257600080fd5b90600052602060002001600091509150505481565b600060606002600084815260200190815260200160002060000160059054906101000a900460ff16610e6e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e65906120d9565b60405180910390fd5b60026000600d600086815260200190815260200160002054815260200190815260200160002060000160059054906101000a900460ff1615610fa757600060026000600d60008781526020019081526020016000205481526020019081526020016000206040518060800160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a900460ff161515151581526020016000820160059054906101000a900460ff1615151515815260200160018201805480602002602001604051908101604052809291908181526020018280548015610f8857602002820191906000526020600020905b815481526020019060010190808311610f74575b505050505081525050905080602001518160600151925092505061108d565b6000600260008581526020019081526020016000206040518060800160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a900460ff161515151581526020016000820160059054906101000a900460ff161515151581526020016001820180548060200260200160405190810160405280929190818152602001828054801561107257602002820191906000526020600020905b81548152602001906001019080831161105e575b50505050508152505090508060200151816060015192509250505b915091565b600560205280600052604060002060009150905080546110b1906123c1565b80601f01602080910402602001604051908101604052809291908181526020018280546110dd906123c1565b801561112a5780601f106110ff5761010080835404028352916020019161112a565b820191906000526020600020905b81548152906001019060200180831161110d57829003601f168201915b505050505081565b600061113c610a7c565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806111be5750600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6111fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f4906126d6565b60405180910390fd5b6000600c60009054906101000a900463ffffffff169050600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d30600b54600860149054906101000a900467ffffffffffffffff16600c60049054906101000a900461ffff16878661128991906126f6565b886040518663ffffffff1660e01b81526004016112aa95949392919061276f565b6020604051808303816000875af11580156112c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ed91906127d7565b915060405180608001604052808463ffffffff168152602001600015158152602001600115158152602001600067ffffffffffffffff81111561133357611332611a4c565b5b6040519080825280602002602001820160405280156113615781602001602082028036833780820191505090505b508152506002600084815260200190815260200160002060008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a81548160ff02191690831515021790555060408201518160000160056101000a81548160ff02191690831515021790555060608201518160010190805190602001906113fb929190611847565b50905050600982908060018154018082558091505060019003906000526020600020016000909190919091505581600a81905550600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020829080600181540180825580915050600190039060005260206000200160009091909190915055600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906114e590612804565b91905055507ff63bc84386bc129703919a2388162a4ad560a11f28b1280169517f1fa7ace42582843360405161151d9392919061284c565b60405180910390a150919050565b61153361168b565b61153c8161171b565b50565b61154761168b565b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600a5481565b6002600083815260200190815260200160002060000160059054906101000a900460ff166115f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115eb906120d9565b60405180910390fd5b60016002600084815260200190815260200160002060000160046101000a81548160ff0219169083151502179055508060026000848152602001908152602001600020600101908051906020019061164d929190611847565b507ffe2e2d779dba245964d4e3ef9b994be63856fd568bf7d3ca9e224755cb1bd54d828260405161167f929190612883565b60405180910390a15050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611719576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611710906128ff565b60405180910390fd5b565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611789576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117809061296b565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b828054828255906000526020600020908101928215611883579160200282015b82811115611882578251825591602001919060010190611867565b5b5090506118909190611894565b5090565b5b808211156118ad576000816000905550600101611895565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006118f66118f16118ec846118b1565b6118d1565b6118b1565b9050919050565b6000611908826118db565b9050919050565b600061191a826118fd565b9050919050565b61192a8161190f565b82525050565b60006020820190506119456000830184611921565b92915050565b6000604051905090565b600080fd5b600080fd5b600061196a826118b1565b9050919050565b61197a8161195f565b811461198557600080fd5b50565b60008135905061199781611971565b92915050565b6000602082840312156119b3576119b2611955565b5b60006119c184828501611988565b91505092915050565b60008115159050919050565b6119df816119ca565b82525050565b60006020820190506119fa60008301846119d6565b92915050565b6000819050919050565b611a1381611a00565b8114611a1e57600080fd5b50565b600081359050611a3081611a0a565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611a8482611a3b565b810181811067ffffffffffffffff82111715611aa357611aa2611a4c565b5b80604052505050565b6000611ab661194b565b9050611ac28282611a7b565b919050565b600067ffffffffffffffff821115611ae257611ae1611a4c565b5b602082029050602081019050919050565b600080fd5b6000611b0b611b0684611ac7565b611aac565b90508083825260208201905060208402830185811115611b2e57611b2d611af3565b5b835b81811015611b575780611b438882611a21565b845260208401935050602081019050611b30565b5050509392505050565b600082601f830112611b7657611b75611a36565b5b8135611b86848260208601611af8565b91505092915050565b60008060408385031215611ba657611ba5611955565b5b6000611bb485828601611a21565b925050602083013567ffffffffffffffff811115611bd557611bd461195a565b5b611be185828601611b61565b9150509250929050565b600060208284031215611c0157611c00611955565b5b6000611c0f84828501611a21565b91505092915050565b611c2181611a00565b82525050565b6000602082019050611c3c6000830184611c18565b92915050565b611c4b8161195f565b82525050565b6000602082019050611c666000830184611c42565b92915050565b600063ffffffff82169050919050565b611c8581611c6c565b8114611c9057600080fd5b50565b600081359050611ca281611c7c565b92915050565b600060208284031215611cbe57611cbd611955565b5b6000611ccc84828501611c93565b91505092915050565b611cde81611c6c565b82525050565b6000606082019050611cf96000830186611cd5565b611d0660208301856119d6565b611d1360408301846119d6565b949350505050565b611d24816119ca565b8114611d2f57600080fd5b50565b600081359050611d4181611d1b565b92915050565b60008060408385031215611d5e57611d5d611955565b5b6000611d6c85828601611988565b9250506020611d7d85828601611d32565b9150509250929050565b600061ffff82169050919050565b611d9e81611d87565b82525050565b6000602082019050611db96000830184611d95565b92915050565b6000602082019050611dd46000830184611cd5565b92915050565b600080fd5b60008083601f840112611df557611df4611a36565b5b8235905067ffffffffffffffff811115611e1257611e11611dda565b5b602083019150836001820283011115611e2e57611e2d611af3565b5b9250929050565b600080600060408486031215611e4e57611e4d611955565b5b6000611e5c86828701611988565b935050602084013567ffffffffffffffff811115611e7d57611e7c61195a565b5b611e8986828701611ddf565b92509250509250925092565b60008060408385031215611eac57611eab611955565b5b6000611eba85828601611988565b9250506020611ecb85828601611a21565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611f0a81611a00565b82525050565b6000611f1c8383611f01565b60208301905092915050565b6000602082019050919050565b6000611f4082611ed5565b611f4a8185611ee0565b9350611f5583611ef1565b8060005b83811015611f86578151611f6d8882611f10565b9750611f7883611f28565b925050600181019050611f59565b5085935050505092915050565b6000604082019050611fa860008301856119d6565b8181036020830152611fba8184611f35565b90509392505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611ffd578082015181840152602081019050611fe2565b60008484015250505050565b600061201482611fc3565b61201e8185611fce565b935061202e818560208601611fdf565b61203781611a3b565b840191505092915050565b6000602082019050818103600083015261205c8184612009565b905092915050565b60006040820190506120796000830185611c42565b6120866020830184611c42565b9392505050565b7f72657175657374206e6f7420666f756e64000000000000000000000000000000600082015250565b60006120c3601183611fce565b91506120ce8261208d565b602082019050919050565b600060208201905081810360008301526120f2816120b6565b9050919050565b7f7265717565737420616c72656164792066756c66696c6c656400000000000000600082015250565b600061212f601983611fce565b915061213a826120f9565b602082019050919050565b6000602082019050818103600083015261215e81612122565b9050919050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b600061219b601683611fce565b91506121a682612165565b602082019050919050565b600060208201905081810360008301526121ca8161218e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061220b82611a00565b915061221683611a00565b925082820390508181111561222e5761222d6121d1565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4f6e6c79206f776e65722063616e2072656769737465722067616d6520636f6e60008201527f7472616374000000000000000000000000000000000000000000000000000000602082015250565b60006122bf602583611fce565b91506122ca82612263565b604082019050919050565b600060208201905081810360008301526122ee816122b2565b9050919050565b7f47616d6520636f6e7472616374732077696c6c2072656d61696e20666f72207660008201527f6572696669636174696f6e730000000000000000000000000000000000000000602082015250565b6000612351602c83611fce565b915061235c826122f5565b604082019050919050565b6000602082019050818103600083015261238081612344565b9050919050565b600082905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806123d957607f821691505b6020821081036123ec576123eb612392565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026124547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612417565b61245e8683612417565b95508019841693508086168417925050509392505050565b600061249161248c61248784611a00565b6118d1565b611a00565b9050919050565b6000819050919050565b6124ab83612476565b6124bf6124b782612498565b848454612424565b825550505050565b600090565b6124d46124c7565b6124df8184846124a2565b505050565b5b81811015612503576124f86000826124cc565b6001810190506124e5565b5050565b601f82111561254857612519816123f2565b61252284612407565b81016020851015612531578190505b61254561253d85612407565b8301826124e4565b50505b505050565b600082821c905092915050565b600061256b6000198460080261254d565b1980831691505092915050565b6000612584838361255a565b9150826002028217905092915050565b61259e8383612387565b67ffffffffffffffff8111156125b7576125b6611a4c565b5b6125c182546123c1565b6125cc828285612507565b6000601f8311600181146125fb57600084156125e9578287013590505b6125f38582612578565b86555061265b565b601f198416612609866123f2565b60005b828110156126315784890135825560018201915060208501945060208101905061260c565b8683101561264e578489013561264a601f89168261255a565b8355505b6001600288020188555050505b50505050505050565b7f4f6e6c79204f776e657220616e642047616d652063616e20726571756573742060008201527f72616e646f6d206e756d62657200000000000000000000000000000000000000602082015250565b60006126c0602d83611fce565b91506126cb82612664565b604082019050919050565b600060208201905081810360008301526126ef816126b3565b9050919050565b600061270182611c6c565b915061270c83611c6c565b925082820261271a81611c6c565b915080821461272c5761272b6121d1565b5b5092915050565b6000819050919050565b61274681612733565b82525050565b600067ffffffffffffffff82169050919050565b6127698161274c565b82525050565b600060a082019050612784600083018861273d565b6127916020830187612760565b61279e6040830186611d95565b6127ab6060830185611cd5565b6127b86080830184611cd5565b9695505050505050565b6000815190506127d181611a0a565b92915050565b6000602082840312156127ed576127ec611955565b5b60006127fb848285016127c2565b91505092915050565b600061280f82611a00565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612841576128406121d1565b5b600182019050919050565b60006060820190506128616000830186611c18565b61286e6020830185611cd5565b61287b6040830184611c42565b949350505050565b60006040820190506128986000830185611c18565b81810360208301526128aa8184611f35565b90509392505050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b60006128e9601683611fce565b91506128f4826128b3565b602082019050919050565b60006020820190508181036000830152612918816128dc565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b6000612955601783611fce565b91506129608261291f565b602082019050919050565b6000602082019050818103600083015261298481612948565b905091905056fea2646970667358221220d783f0ffd6926aadf7dca239a621e05a342d626b75c8053c72d91af0ac2aa9cb64736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 29,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "s_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 31,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1260,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "s_requests",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(RequestStatus)1255_storage)"
      },
      {
        "astId": 1264,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "gameContractAdded",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1268,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "gameContractActive",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1272,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "gameContractName",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 1276,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "gameContractRequestsCount",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1281,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "gameContractRequests",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 1284,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "coordinator",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(VRFCoordinatorV2Interface)353"
      },
      {
        "astId": 1300,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "s_subscriptionId",
        "offset": 20,
        "slot": "8",
        "type": "t_uint64"
      },
      {
        "astId": 1303,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "requestIds",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1305,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "lastRequestId",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1307,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "keyHash",
        "offset": 0,
        "slot": "11",
        "type": "t_bytes32"
      },
      {
        "astId": 1310,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "callbackGasLimitForOneWord",
        "offset": 0,
        "slot": "12",
        "type": "t_uint32"
      },
      {
        "astId": 1325,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "requestConfirmations",
        "offset": 4,
        "slot": "12",
        "type": "t_uint16"
      },
      {
        "astId": 1329,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "randomWordsRecoverRequest",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(VRFCoordinatorV2Interface)353": {
        "encoding": "inplace",
        "label": "contract VRFCoordinatorV2Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(RequestStatus)1255_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CyclixRandomizer.RequestStatus)",
        "numberOfBytes": "32",
        "value": "t_struct(RequestStatus)1255_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RequestStatus)1255_storage": {
        "encoding": "inplace",
        "label": "struct CyclixRandomizer.RequestStatus",
        "members": [
          {
            "astId": 1247,
            "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
            "label": "wordsCount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1249,
            "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
            "label": "fulfilled",
            "offset": 4,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1251,
            "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
            "label": "exists",
            "offset": 5,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1254,
            "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
            "label": "randomWords",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}