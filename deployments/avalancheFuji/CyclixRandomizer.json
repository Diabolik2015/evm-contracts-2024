{
  "address": "0xE9c2c37AD8d362dB65eeE5ebE953C7a26F477249",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_coordinatorAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "RequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "numWords",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "requestor",
          "type": "address"
        }
      ],
      "name": "RequestSent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "callbackGasLimitForOneWord",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coordinatorAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "gameContractActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "gameContractAdded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "gameContractName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "gameContractRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "gameContractRequestsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gameAddress",
          "type": "address"
        }
      ],
      "name": "getLastRequestIdForCaller",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "getRequestStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "fulfilled",
          "type": "bool"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keyHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "randomWordsRecoverRequest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "recoverLostNumberRequest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gameAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "registerGameContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestConfirmations",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "numWords",
          "type": "uint32"
        }
      ],
      "name": "requestRandomWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_requests",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "wordsCount",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "fulfilled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_subscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "newGas",
          "type": "uint32"
        }
      ],
      "name": "setCallbackGasLimitForOneWord",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gameAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setGameContractStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x43881bb48e019d90aa4c2de94a8e8095eccf64d01c751e2e743a012655c441d0",
  "receipt": {
    "to": null,
    "from": "0x4eCa23Ffd5710970E22558C484a0D6943dA5eAa5",
    "contractAddress": "0xE9c2c37AD8d362dB65eeE5ebE953C7a26F477249",
    "transactionIndex": 0,
    "gasUsed": "2478076",
    "logsBloom": "0x
    "blockHash": "0x61538be55599a80e902198a294847b3bafae7058ddebff04fcc7cbd70a4445ef",
    "transactionHash": "0x43881bb48e019d90aa4c2de94a8e8095eccf64d01c751e2e743a012655c441d0",
    "logs": [],
    "blockNumber": 32841914,
    "cumulativeGasUsed": "2478076",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "1",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "0xfCb1690C01C988A9EB4D012665420Fc7fa8151aB"
  ],
  "numDeployments": 1,
  "solcInputHash": "7298888c3b47ac36e3dff83344773ee1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_coordinatorAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requestor\",\"type\":\"address\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callbackGasLimitForOneWord\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coordinatorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gameContractActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gameContractAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gameContractName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gameContractRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gameContractRequestsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gameAddress\",\"type\":\"address\"}],\"name\":\"getLastRequestIdForCaller\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getRequestStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"randomWordsRecoverRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"recoverLostNumberRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gameAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"registerGameContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestConfirmations\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_requests\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"wordsCount\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_subscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newGas\",\"type\":\"uint32\"}],\"name\":\"setCallbackGasLimitForOneWord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gameAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setGameContractStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CyclixRandomizer.sol\":\"CyclixRandomizer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ConfirmedOwnerWithProposal} from \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0xdcb0e9135ddbe71ee27ba99fa06656960c66c964cf2ecb29696da1c1427d9861\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IOwnable} from \\\"../interfaces/IOwnable.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    // solhint-disable-next-line custom-errors\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /// @notice Allows an owner to begin transferring ownership to a new address.\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /// @notice Allows an ownership transfer to be completed by the recipient.\\n  function acceptOwnership() external override {\\n    // solhint-disable-next-line custom-errors\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /// @notice Get the current owner\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /// @notice validate, transfer ownership, and emit relevant events\\n  function _transferOwnership(address to) private {\\n    // solhint-disable-next-line custom-errors\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /// @notice validate access\\n  function _validateOwnership() internal view {\\n    // solhint-disable-next-line custom-errors\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /// @notice Reverts if called by anyone other than the contract owner.\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x927e505bb87a58ea04d1a9efe945f4bf4093e88b618b6fede3b9c68e1e63d989\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  // solhint-disable-next-line chainlink-solidity/prefix-immutable-variables-with-i\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x5a502a5ce16796565815b295bb2d18a0d26d6f23621f733918c971047c6091d7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa9f8b7e09811f4ac9f421116b5d6bcf50b5748025c0cb012aaf5ff7c39a6b46a\",\"license\":\"MIT\"},\"contracts/CyclixRandomizer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// An example of a consumer contract that relies on a subscription for funding.\\npragma solidity ^0.8.20;\\n\\nimport {VRFCoordinatorV2Interface} from \\\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport {VRFConsumerBaseV2} from \\\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\nimport {ConfirmedOwner} from \\\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\\\";\\nimport {CyclixRandomizerInterface} from \\\"./CyclixRandomizerInterface.sol\\\";\\n\\ncontract CyclixRandomizer is CyclixRandomizerInterface, VRFConsumerBaseV2, ConfirmedOwner {\\n    event RequestSent(uint256 requestId, uint32 numWords, address requestor);\\n    event RequestFulfilled(uint256 requestId, uint256[] randomWords);\\n\\n    struct RequestStatus {\\n        uint32 wordsCount; // number of words requested\\n        bool fulfilled; // whether the request has been successfully fulfilled\\n        bool exists; // whether a requestId exists\\n        uint256[] randomWords;\\n    }\\n    mapping(uint256 => RequestStatus) public s_requests;\\n    mapping(address => bool) public gameContractAdded;\\n    mapping(address => bool) public gameContractActive;\\n    mapping(address => string) public gameContractName;\\n    mapping(address => uint256) public gameContractRequestsCount;\\n    mapping(address => uint256[]) public gameContractRequests;\\n\\n    // Your subscription ID.\\n    uint64 public s_subscriptionId;\\n\\n    // past requests Id.\\n    uint256[] public requestIds;\\n    uint256 public lastRequestId;\\n\\n    // The gas lane to use, which specifies the maximum gas price to bump to.\\n    bytes32 public keyHash;\\n\\n    // Depends on the number of requested values that you want sent to the\\n    // fulfillRandomWords() function. Storing each word costs about 20,000 gas,\\n    // so 100,000 is a safe default for this example contract. Test and adjust\\n    // this limit based on the network that you select, the size of the request,\\n    // and the processing of the callback request in the fulfillRandomWords()\\n    // function.\\n    uint32 public callbackGasLimitForOneWord = 30000;\\n    function setCallbackGasLimitForOneWord(uint32 newGas) external onlyOwner {\\n        callbackGasLimitForOneWord = newGas;\\n    }\\n    uint16 public requestConfirmations = 3;\\n    mapping(uint256 => uint256) public randomWordsRecoverRequest;\\n    address public coordinatorAddress;\\n\\n    constructor(uint64 subscriptionId, bytes32 _keyHash, address _coordinatorAddress)\\n    VRFConsumerBaseV2(_coordinatorAddress)\\n    ConfirmedOwner(msg.sender)\\n    {\\n        coordinatorAddress = _coordinatorAddress;\\n        s_subscriptionId = subscriptionId;\\n        keyHash = _keyHash;\\n    }\\n\\n    function registerGameContract(address gameAddress, string calldata name) public {\\n        require(tx.origin == owner(), \\\"Only owner can register game contract\\\");\\n        require(gameContractAdded[gameAddress] == false, \\\"Game contracts will remain for verifications\\\" );\\n        gameContractAdded[gameAddress] = true;\\n        gameContractActive[gameAddress] = true;\\n        gameContractName[gameAddress] = name;\\n    }\\n\\n    function setGameContractStatus(address gameAddress, bool status) external onlyOwner {\\n        gameContractActive[gameAddress] = status;\\n    }\\n\\n    // Assumes the subscription is funded sufficiently.\\n    function requestRandomWords(uint32 numWords) public returns (uint256 requestId)\\n    {\\n        require(msg.sender == owner() || gameContractAdded[msg.sender], \\\"Only Owner and Game can request random number\\\");\\n        uint32 callbackGasLimit = callbackGasLimitForOneWord;\\n\\n        requestId = VRFCoordinatorV2Interface(coordinatorAddress).requestRandomWords(keyHash, s_subscriptionId,\\n            requestConfirmations, callbackGasLimit * numWords, numWords);\\n\\n        s_requests[requestId] = RequestStatus({\\n            wordsCount: numWords,\\n            randomWords: new uint256[](0),\\n            exists: true,\\n            fulfilled: false\\n        });\\n        requestIds.push(requestId);\\n        lastRequestId = requestId;\\n        gameContractRequests[msg.sender].push(requestId);\\n        gameContractRequestsCount[msg.sender]++;\\n        emit RequestSent(requestId, numWords, msg.sender);\\n        return requestId;\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 _requestId,\\n        uint256[] memory _randomWords\\n    ) internal override {\\n        require(s_requests[_requestId].exists, \\\"request not found\\\");\\n        s_requests[_requestId].fulfilled = true;\\n        s_requests[_requestId].randomWords = _randomWords;\\n        emit RequestFulfilled(_requestId, _randomWords);\\n    }\\n\\n    function getLastRequestIdForCaller(address _gameAddress) public view returns (uint256) {\\n        return gameContractRequests[_gameAddress][gameContractRequestsCount[_gameAddress] - 1];\\n    }\\n\\n    function recoverLostNumberRequest(uint256 _requestId) public onlyOwner returns (uint256) {\\n        require(s_requests[_requestId].exists, \\\"request not found\\\");\\n        require(s_requests[_requestId].fulfilled == false, \\\"request already fulfilled\\\");\\n        RequestStatus memory request = s_requests[_requestId];\\n        randomWordsRecoverRequest[_requestId] = requestRandomWords(request.wordsCount);\\n        return randomWordsRecoverRequest[_requestId];\\n    }\\n\\n    function getRequestStatus(\\n        uint256 _requestId\\n    ) public view returns (bool fulfilled, uint256[] memory randomWords) {\\n        require(s_requests[_requestId].exists, \\\"request not found\\\");\\n        if (s_requests[randomWordsRecoverRequest[_requestId]].exists) {\\n            RequestStatus memory request = s_requests[randomWordsRecoverRequest[_requestId]];\\n            return (request.fulfilled, request.randomWords);\\n        } else {\\n            RequestStatus memory request = s_requests[_requestId];\\n            return (request.fulfilled, request.randomWords);\\n        }\\n    }\\n}\",\"keccak256\":\"0x0f33cc110deb12c140620ee2b744a8d2843588b868e0a8e24328c3dd59a6a045\",\"license\":\"MIT\"},\"contracts/CyclixRandomizerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface CyclixRandomizerInterface {\\n    function requestRandomWords(uint32 numWords) external returns (uint256 requestId);\\n    function getRequestStatus(uint256 _requestId) external view returns (bool fulfilled, uint256[] memory randomWords);\\n    function registerGameContract(address gameAddress, string calldata name) external;\\n    function getLastRequestIdForCaller(address _gameAddress) external view returns (uint256);\\n    function recoverLostNumberRequest(uint256 _requestId) external returns (uint256);\\n}\",\"keccak256\":\"0xc71c2b020044355f41cc53069e9a6f9f2778311e8d601a29bcc608301a0dfe24\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101735760003560e01c80639d432cb9116100de578063cd0f231111610097578063e5f0cc3811610071578063e5f0cc3814610489578063e726f2e1146104b9578063f2fde38b146104e9578063fc2a88c31461050557610173565b8063cd0f23111461040c578063d7dd3d4b14610428578063d8a4676f1461045857610173565b80639d432cb914610336578063a168fa8914610352578063af9c4daf14610384578063b089a0c5146103b4578063b0fb162f146103d0578063c6980117146103ee57610173565b806379ba50971161013057806379ba5097146102725780637c8fab5c1461027c57806382003b31146102ac5780638796ba8c146102ca5780638ac00021146102fa5780638da5cb5b1461031857610173565b806310aa616b146101785780631fe543e3146101a85780632371d0f1146101c4578063293ac0e3146101f457806341381dae1461022457806361728f3914610254575b600080fd5b610192600480360381019061018d9190611932565b610523565b60405161019f919061197a565b60405180910390f35b6101c260048036038101906101bd9190611b24565b610543565b005b6101de60048036038101906101d99190611b80565b610603565b6040516101eb9190611bbc565b60405180910390f35b61020e60048036038101906102099190611932565b61061b565b60405161021b919061197a565b60405180910390f35b61023e60048036038101906102399190611b80565b61063b565b60405161024b9190611bbc565b60405180910390f35b61025c610828565b6040516102699190611bf0565b60405180910390f35b61027a61082e565b005b61029660048036038101906102919190611932565b6109c3565b6040516102a39190611bbc565b60405180910390f35b6102b4610a73565b6040516102c19190611c1a565b60405180910390f35b6102e460048036038101906102df9190611b80565b610a99565b6040516102f19190611bbc565b60405180910390f35b610302610abd565b60405161030f9190611c58565b60405180910390f35b610320610ad7565b60405161032d9190611c1a565b60405180910390f35b610350600480360381019061034b9190611caf565b610b00565b005b61036c60048036038101906103679190611b80565b610b2c565b60405161037b93929190611ceb565b60405180910390f35b61039e60048036038101906103999190611932565b610b80565b6040516103ab9190611bbc565b60405180910390f35b6103ce60048036038101906103c99190611d4e565b610b98565b005b6103d8610bfb565b6040516103e59190611dab565b60405180910390f35b6103f6610c0f565b6040516104039190611dc6565b60405180910390f35b61042660048036038101906104219190611e3c565b610c25565b005b610442600480360381019061043d9190611e9c565b610e31565b60405161044f9190611bbc565b60405180910390f35b610472600480360381019061046d9190611b80565b610e62565b604051610480929190611f9a565b60405180910390f35b6104a3600480360381019061049e9190611932565b6110ed565b6040516104b09190612049565b60405180910390f35b6104d360048036038101906104ce9190611caf565b61118d565b6040516104e09190611bbc565b60405180910390f35b61050360048036038101906104fe9190611932565b611586565b005b61050d61159a565b60405161051a9190611bbc565b60405180910390f35b60046020528060005260406000206000915054906101000a900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105f557337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016105ec92919061206b565b60405180910390fd5b6105ff82826115a0565b5050565b600d6020528060005260406000206000915090505481565b60036020528060005260406000206000915054906101000a900460ff1681565b600061064561169a565b6002600083815260200190815260200160002060000160059054906101000a900460ff166106a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069f906120e0565b60405180910390fd5b600015156002600084815260200190815260200160002060000160049054906101000a900460ff16151514610712576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107099061214c565b60405180910390fd5b6000600260008481526020019081526020016000206040518060800160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a900460ff161515151581526020016000820160059054906101000a900460ff16151515158152602001600182018054806020026020016040519081016040528092919081815260200182805480156107dd57602002820191906000526020600020905b8154815260200190600101908083116107c9575b50505050508152505090506107f5816000015161118d565b600d600085815260200190815260200160002081905550600d600084815260200190815260200160002054915050919050565b600b5481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b5906121b8565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a509190612207565b81548110610a6157610a6061223b565b5b90600052602060002001549050919050565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60098181548110610aa957600080fd5b906000526020600020016000915090505481565b600860009054906101000a900467ffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610b0861169a565b80600c60006101000a81548163ffffffff021916908363ffffffff16021790555050565b60026020528060005260406000206000915090508060000160009054906101000a900463ffffffff16908060000160049054906101000a900460ff16908060000160059054906101000a900460ff16905083565b60066020528060005260406000206000915090505481565b610ba061169a565b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600c60049054906101000a900461ffff1681565b600c60009054906101000a900463ffffffff1681565b610c2d610ad7565b73ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614610c9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c91906122dc565b60405180910390fd5b60001515600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610d2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d249061236e565b60405180910390fd5b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508181600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209182610e2b9291906125a5565b50505050565b60076020528160005260406000208181548110610e4d57600080fd5b90600052602060002001600091509150505481565b600060606002600084815260200190815260200160002060000160059054906101000a900460ff16610ec9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec0906120e0565b60405180910390fd5b60026000600d600086815260200190815260200160002054815260200190815260200160002060000160059054906101000a900460ff161561100257600060026000600d60008781526020019081526020016000205481526020019081526020016000206040518060800160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a900460ff161515151581526020016000820160059054906101000a900460ff1615151515815260200160018201805480602002602001604051908101604052809291908181526020018280548015610fe357602002820191906000526020600020905b815481526020019060010190808311610fcf575b50505050508152505090508060200151816060015192509250506110e8565b6000600260008581526020019081526020016000206040518060800160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a900460ff161515151581526020016000820160059054906101000a900460ff16151515158152602001600182018054806020026020016040519081016040528092919081815260200182805480156110cd57602002820191906000526020600020905b8154815260200190600101908083116110b9575b50505050508152505090508060200151816060015192509250505b915091565b6005602052806000526040600020600091509050805461110c906123c8565b80601f0160208091040260200160405190810160405280929190818152602001828054611138906123c8565b80156111855780601f1061115a57610100808354040283529160200191611185565b820191906000526020600020905b81548152906001019060200180831161116857829003601f168201915b505050505081565b6000611197610ad7565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806112195750600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b611258576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124f906126e7565b60405180910390fd5b6000600c60009054906101000a900463ffffffff169050600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d30600b54600860009054906101000a900467ffffffffffffffff16600c60049054906101000a900461ffff1687866112e49190612707565b886040518663ffffffff1660e01b8152600401611305959493929190612744565b6020604051808303816000875af1158015611324573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134891906127ac565b915060405180608001604052808463ffffffff168152602001600015158152602001600115158152602001600067ffffffffffffffff81111561138e5761138d6119e1565b5b6040519080825280602002602001820160405280156113bc5781602001602082028036833780820191505090505b508152506002600084815260200190815260200160002060008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a81548160ff02191690831515021790555060408201518160000160056101000a81548160ff0219169083151502179055506060820151816001019080519060200190611456929190611856565b50905050600982908060018154018082558091505060019003906000526020600020016000909190919091505581600a81905550600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020829080600181540180825580915050600190039060005260206000200160009091909190915055600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190611540906127d9565b91905055507ff63bc84386bc129703919a2388162a4ad560a11f28b1280169517f1fa7ace42582843360405161157893929190612821565b60405180910390a150919050565b61158e61169a565b6115978161172a565b50565b600a5481565b6002600083815260200190815260200160002060000160059054906101000a900460ff16611603576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115fa906120e0565b60405180910390fd5b60016002600084815260200190815260200160002060000160046101000a81548160ff0219169083151502179055508060026000848152602001908152602001600020600101908051906020019061165c929190611856565b507ffe2e2d779dba245964d4e3ef9b994be63856fd568bf7d3ca9e224755cb1bd54d828260405161168e929190612858565b60405180910390a15050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611728576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171f906128d4565b60405180910390fd5b565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611798576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161178f90612940565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b828054828255906000526020600020908101928215611892579160200282015b82811115611891578251825591602001919060010190611876565b5b50905061189f91906118a3565b5090565b5b808211156118bc5760008160009055506001016118a4565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006118ff826118d4565b9050919050565b61190f816118f4565b811461191a57600080fd5b50565b60008135905061192c81611906565b92915050565b600060208284031215611948576119476118ca565b5b60006119568482850161191d565b91505092915050565b60008115159050919050565b6119748161195f565b82525050565b600060208201905061198f600083018461196b565b92915050565b6000819050919050565b6119a881611995565b81146119b357600080fd5b50565b6000813590506119c58161199f565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611a19826119d0565b810181811067ffffffffffffffff82111715611a3857611a376119e1565b5b80604052505050565b6000611a4b6118c0565b9050611a578282611a10565b919050565b600067ffffffffffffffff821115611a7757611a766119e1565b5b602082029050602081019050919050565b600080fd5b6000611aa0611a9b84611a5c565b611a41565b90508083825260208201905060208402830185811115611ac357611ac2611a88565b5b835b81811015611aec5780611ad888826119b6565b845260208401935050602081019050611ac5565b5050509392505050565b600082601f830112611b0b57611b0a6119cb565b5b8135611b1b848260208601611a8d565b91505092915050565b60008060408385031215611b3b57611b3a6118ca565b5b6000611b49858286016119b6565b925050602083013567ffffffffffffffff811115611b6a57611b696118cf565b5b611b7685828601611af6565b9150509250929050565b600060208284031215611b9657611b956118ca565b5b6000611ba4848285016119b6565b91505092915050565b611bb681611995565b82525050565b6000602082019050611bd16000830184611bad565b92915050565b6000819050919050565b611bea81611bd7565b82525050565b6000602082019050611c056000830184611be1565b92915050565b611c14816118f4565b82525050565b6000602082019050611c2f6000830184611c0b565b92915050565b600067ffffffffffffffff82169050919050565b611c5281611c35565b82525050565b6000602082019050611c6d6000830184611c49565b92915050565b600063ffffffff82169050919050565b611c8c81611c73565b8114611c9757600080fd5b50565b600081359050611ca981611c83565b92915050565b600060208284031215611cc557611cc46118ca565b5b6000611cd384828501611c9a565b91505092915050565b611ce581611c73565b82525050565b6000606082019050611d006000830186611cdc565b611d0d602083018561196b565b611d1a604083018461196b565b949350505050565b611d2b8161195f565b8114611d3657600080fd5b50565b600081359050611d4881611d22565b92915050565b60008060408385031215611d6557611d646118ca565b5b6000611d738582860161191d565b9250506020611d8485828601611d39565b9150509250929050565b600061ffff82169050919050565b611da581611d8e565b82525050565b6000602082019050611dc06000830184611d9c565b92915050565b6000602082019050611ddb6000830184611cdc565b92915050565b600080fd5b60008083601f840112611dfc57611dfb6119cb565b5b8235905067ffffffffffffffff811115611e1957611e18611de1565b5b602083019150836001820283011115611e3557611e34611a88565b5b9250929050565b600080600060408486031215611e5557611e546118ca565b5b6000611e638682870161191d565b935050602084013567ffffffffffffffff811115611e8457611e836118cf565b5b611e9086828701611de6565b92509250509250925092565b60008060408385031215611eb357611eb26118ca565b5b6000611ec18582860161191d565b9250506020611ed2858286016119b6565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611f1181611995565b82525050565b6000611f238383611f08565b60208301905092915050565b6000602082019050919050565b6000611f4782611edc565b611f518185611ee7565b9350611f5c83611ef8565b8060005b83811015611f8d578151611f748882611f17565b9750611f7f83611f2f565b925050600181019050611f60565b5085935050505092915050565b6000604082019050611faf600083018561196b565b8181036020830152611fc18184611f3c565b90509392505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612004578082015181840152602081019050611fe9565b60008484015250505050565b600061201b82611fca565b6120258185611fd5565b9350612035818560208601611fe6565b61203e816119d0565b840191505092915050565b600060208201905081810360008301526120638184612010565b905092915050565b60006040820190506120806000830185611c0b565b61208d6020830184611c0b565b9392505050565b7f72657175657374206e6f7420666f756e64000000000000000000000000000000600082015250565b60006120ca601183611fd5565b91506120d582612094565b602082019050919050565b600060208201905081810360008301526120f9816120bd565b9050919050565b7f7265717565737420616c72656164792066756c66696c6c656400000000000000600082015250565b6000612136601983611fd5565b915061214182612100565b602082019050919050565b6000602082019050818103600083015261216581612129565b9050919050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b60006121a2601683611fd5565b91506121ad8261216c565b602082019050919050565b600060208201905081810360008301526121d181612195565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061221282611995565b915061221d83611995565b9250828203905081811115612235576122346121d8565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4f6e6c79206f776e65722063616e2072656769737465722067616d6520636f6e60008201527f7472616374000000000000000000000000000000000000000000000000000000602082015250565b60006122c6602583611fd5565b91506122d18261226a565b604082019050919050565b600060208201905081810360008301526122f5816122b9565b9050919050565b7f47616d6520636f6e7472616374732077696c6c2072656d61696e20666f72207660008201527f6572696669636174696f6e730000000000000000000000000000000000000000602082015250565b6000612358602c83611fd5565b9150612363826122fc565b604082019050919050565b600060208201905081810360008301526123878161234b565b9050919050565b600082905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806123e057607f821691505b6020821081036123f3576123f2612399565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261245b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261241e565b612465868361241e565b95508019841693508086168417925050509392505050565b6000819050919050565b60006124a261249d61249884611995565b61247d565b611995565b9050919050565b6000819050919050565b6124bc83612487565b6124d06124c8826124a9565b84845461242b565b825550505050565b600090565b6124e56124d8565b6124f08184846124b3565b505050565b5b81811015612514576125096000826124dd565b6001810190506124f6565b5050565b601f8211156125595761252a816123f9565b6125338461240e565b81016020851015612542578190505b61255661254e8561240e565b8301826124f5565b50505b505050565b600082821c905092915050565b600061257c6000198460080261255e565b1980831691505092915050565b6000612595838361256b565b9150826002028217905092915050565b6125af838361238e565b67ffffffffffffffff8111156125c8576125c76119e1565b5b6125d282546123c8565b6125dd828285612518565b6000601f83116001811461260c57600084156125fa578287013590505b6126048582612589565b86555061266c565b601f19841661261a866123f9565b60005b828110156126425784890135825560018201915060208501945060208101905061261d565b8683101561265f578489013561265b601f89168261256b565b8355505b6001600288020188555050505b50505050505050565b7f4f6e6c79204f776e657220616e642047616d652063616e20726571756573742060008201527f72616e646f6d206e756d62657200000000000000000000000000000000000000602082015250565b60006126d1602d83611fd5565b91506126dc82612675565b604082019050919050565b60006020820190508181036000830152612700816126c4565b9050919050565b600061271282611c73565b915061271d83611c73565b925082820261272b81611c73565b915080821461273d5761273c6121d8565b5b5092915050565b600060a0820190506127596000830188611be1565b6127666020830187611c49565b6127736040830186611d9c565b6127806060830185611cdc565b61278d6080830184611cdc565b9695505050505050565b6000815190506127a68161199f565b92915050565b6000602082840312156127c2576127c16118ca565b5b60006127d084828501612797565b91505092915050565b60006127e482611995565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612816576128156121d8565b5b600182019050919050565b60006060820190506128366000830186611bad565b6128436020830185611cdc565b6128506040830184611c0b565b949350505050565b600060408201905061286d6000830185611bad565b818103602083015261287f8184611f3c565b90509392505050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b60006128be601683611fd5565b91506128c982612888565b602082019050919050565b600060208201905081810360008301526128ed816128b1565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b600061292a601783611fd5565b9150612935826128f4565b602082019050919050565b600060208201905081810360008301526129598161291d565b905091905056fea2646970667358221220efe39bacd2859ba39cc6f76ea67469aee2dd7cd81c4274a56e0e6c9a411fc6c064736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 29,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "s_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 31,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1260,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "s_requests",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(RequestStatus)1255_storage)"
      },
      {
        "astId": 1264,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "gameContractAdded",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1268,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "gameContractActive",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1272,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "gameContractName",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 1276,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "gameContractRequestsCount",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1281,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "gameContractRequests",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 1283,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "s_subscriptionId",
        "offset": 0,
        "slot": "8",
        "type": "t_uint64"
      },
      {
        "astId": 1286,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "requestIds",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1288,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "lastRequestId",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1290,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "keyHash",
        "offset": 0,
        "slot": "11",
        "type": "t_bytes32"
      },
      {
        "astId": 1293,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "callbackGasLimitForOneWord",
        "offset": 0,
        "slot": "12",
        "type": "t_uint32"
      },
      {
        "astId": 1308,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "requestConfirmations",
        "offset": 4,
        "slot": "12",
        "type": "t_uint16"
      },
      {
        "astId": 1312,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "randomWordsRecoverRequest",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1314,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "coordinatorAddress",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(RequestStatus)1255_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CyclixRandomizer.RequestStatus)",
        "numberOfBytes": "32",
        "value": "t_struct(RequestStatus)1255_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RequestStatus)1255_storage": {
        "encoding": "inplace",
        "label": "struct CyclixRandomizer.RequestStatus",
        "members": [
          {
            "astId": 1247,
            "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
            "label": "wordsCount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1249,
            "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
            "label": "fulfilled",
            "offset": 4,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1251,
            "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
            "label": "exists",
            "offset": 5,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1254,
            "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
            "label": "randomWords",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}