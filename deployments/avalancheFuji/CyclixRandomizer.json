{
  "address": "0x05de28eD9aDE90F966BaE52e121732CeAEE2492d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_coordinatorAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "RequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "numWords",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "requestor",
          "type": "address"
        }
      ],
      "name": "RequestSent",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "callbackGasLimitForOneWord",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "gameContractActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "gameContractAdded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "gameContractName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "gameContractRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "gameContractRequestsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gameAddress",
          "type": "address"
        }
      ],
      "name": "getLastRequestIdForCaller",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "getRequestStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "fulfilled",
          "type": "bool"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keyHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "randomWordsRecoverRequest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        }
      ],
      "name": "recoverLostNumberRequest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gameAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "registerGameContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestConfirmations",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "numWords",
          "type": "uint32"
        }
      ],
      "name": "requestRandomWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_requests",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "wordsCount",
          "type": "uint32"
        },
        {
          "internalType": "bool",
          "name": "fulfilled",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "exists",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_subscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "newGas",
          "type": "uint32"
        }
      ],
      "name": "setCallbackGasLimitForOneWord",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gameAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setGameContractStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x47874421a89df63ccd20d669b944ee9f6be8aec4b955481bb265cc42519bd66c",
  "receipt": {
    "to": null,
    "from": "0x4eCa23Ffd5710970E22558C484a0D6943dA5eAa5",
    "contractAddress": "0x05de28eD9aDE90F966BaE52e121732CeAEE2492d",
    "transactionIndex": 0,
    "gasUsed": "2437664",
    "logsBloom": "0x
    "blockHash": "0xb5d41f0507de2e5e4f5b3448292bc8bbffae084d1f9c330ba93c2269ca2fc121",
    "transactionHash": "0x47874421a89df63ccd20d669b944ee9f6be8aec4b955481bb265cc42519bd66c",
    "logs": [],
    "blockNumber": 32748854,
    "cumulativeGasUsed": "2437664",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "0x43Ea58245C251534ab33a2F5Bd1333a28Cf90a95"
  ],
  "numDeployments": 1,
  "solcInputHash": "0da0da9a9dd1c8ee56ed28f489307651",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_coordinatorAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requestor\",\"type\":\"address\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callbackGasLimitForOneWord\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gameContractActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gameContractAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gameContractName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gameContractRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gameContractRequestsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gameAddress\",\"type\":\"address\"}],\"name\":\"getLastRequestIdForCaller\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"getRequestStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"randomWordsRecoverRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"}],\"name\":\"recoverLostNumberRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gameAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"registerGameContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestConfirmations\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"requestRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_requests\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"wordsCount\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"fulfilled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_subscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"newGas\",\"type\":\"uint32\"}],\"name\":\"setCallbackGasLimitForOneWord\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gameAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setGameContractStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CyclixRandomizer.sol\":\"CyclixRandomizer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ConfirmedOwnerWithProposal} from \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0xdcb0e9135ddbe71ee27ba99fa06656960c66c964cf2ecb29696da1c1427d9861\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IOwnable} from \\\"../interfaces/IOwnable.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    // solhint-disable-next-line custom-errors\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /// @notice Allows an owner to begin transferring ownership to a new address.\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /// @notice Allows an ownership transfer to be completed by the recipient.\\n  function acceptOwnership() external override {\\n    // solhint-disable-next-line custom-errors\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /// @notice Get the current owner\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /// @notice validate, transfer ownership, and emit relevant events\\n  function _transferOwnership(address to) private {\\n    // solhint-disable-next-line custom-errors\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /// @notice validate access\\n  function _validateOwnership() internal view {\\n    // solhint-disable-next-line custom-errors\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /// @notice Reverts if called by anyone other than the contract owner.\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x927e505bb87a58ea04d1a9efe945f4bf4093e88b618b6fede3b9c68e1e63d989\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  // solhint-disable-next-line chainlink-solidity/prefix-immutable-variables-with-i\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x5a502a5ce16796565815b295bb2d18a0d26d6f23621f733918c971047c6091d7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(\\n    uint64 subId\\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa9f8b7e09811f4ac9f421116b5d6bcf50b5748025c0cb012aaf5ff7c39a6b46a\",\"license\":\"MIT\"},\"contracts/CyclixRandomizer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// An example of a consumer contract that relies on a subscription for funding.\\npragma solidity ^0.8.20;\\n\\nimport {VRFCoordinatorV2Interface} from \\\"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport {VRFConsumerBaseV2} from \\\"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\\\";\\nimport {ConfirmedOwner} from \\\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\\\";\\nimport {CyclixRandomizerInterface} from \\\"./CyclixRandomizerInterface.sol\\\";\\n\\ncontract CyclixRandomizer is CyclixRandomizerInterface, VRFConsumerBaseV2, ConfirmedOwner {\\n    event RequestSent(uint256 requestId, uint32 numWords, address requestor);\\n    event RequestFulfilled(uint256 requestId, uint256[] randomWords);\\n\\n    struct RequestStatus {\\n        uint32 wordsCount; // number of words requested\\n        bool fulfilled; // whether the request has been successfully fulfilled\\n        bool exists; // whether a requestId exists\\n        uint256[] randomWords;\\n    }\\n    mapping(uint256 => RequestStatus) public s_requests;\\n    mapping(address => bool) public gameContractAdded;\\n    mapping(address => bool) public gameContractActive;\\n    mapping(address => string) public gameContractName;\\n    mapping(address => uint256) public gameContractRequestsCount;\\n    mapping(address => uint256[]) public gameContractRequests;\\n\\n    // Your subscription ID.\\n    uint64 public s_subscriptionId;\\n\\n    // past requests Id.\\n    uint256[] public requestIds;\\n    uint256 public lastRequestId;\\n\\n    // The gas lane to use, which specifies the maximum gas price to bump to.\\n    bytes32 public keyHash;\\n\\n    // Depends on the number of requested values that you want sent to the\\n    // fulfillRandomWords() function. Storing each word costs about 20,000 gas,\\n    // so 100,000 is a safe default for this example contract. Test and adjust\\n    // this limit based on the network that you select, the size of the request,\\n    // and the processing of the callback request in the fulfillRandomWords()\\n    // function.\\n    uint32 public callbackGasLimitForOneWord = 30000;\\n    function setCallbackGasLimitForOneWord(uint32 newGas) external onlyOwner {\\n        callbackGasLimitForOneWord = newGas;\\n    }\\n    uint16 public requestConfirmations = 3;\\n    mapping(uint256 => uint256) public randomWordsRecoverRequest;\\n    address coordinatorAddress;\\n\\n    constructor(uint64 subscriptionId, bytes32 _keyHash, address _coordinatorAddress)\\n    VRFConsumerBaseV2(_coordinatorAddress)\\n    ConfirmedOwner(msg.sender)\\n    {\\n        coordinatorAddress = _coordinatorAddress;\\n        s_subscriptionId = subscriptionId;\\n        keyHash = _keyHash;\\n    }\\n\\n    function registerGameContract(address gameAddress, string calldata name) public {\\n        require(tx.origin == owner(), \\\"Only owner can register game contract\\\");\\n        require(gameContractAdded[gameAddress] == false, \\\"Game contracts will remain for verifications\\\" );\\n        gameContractAdded[gameAddress] = true;\\n        gameContractActive[gameAddress] = true;\\n        gameContractName[gameAddress] = name;\\n    }\\n\\n    function setGameContractStatus(address gameAddress, bool status) external onlyOwner {\\n        gameContractActive[gameAddress] = status;\\n    }\\n\\n    // Assumes the subscription is funded sufficiently.\\n    function requestRandomWords(uint32 numWords) public returns (uint256 requestId)\\n    {\\n        require(msg.sender == owner() || gameContractAdded[msg.sender], \\\"Only Owner and Game can request random number\\\");\\n        uint32 callbackGasLimit = callbackGasLimitForOneWord;\\n\\n        requestId = VRFCoordinatorV2Interface(coordinatorAddress).requestRandomWords(keyHash, s_subscriptionId,\\n            requestConfirmations, callbackGasLimit * numWords, numWords);\\n\\n        s_requests[requestId] = RequestStatus({\\n            wordsCount: numWords,\\n            randomWords: new uint256[](0),\\n            exists: true,\\n            fulfilled: false\\n        });\\n        requestIds.push(requestId);\\n        lastRequestId = requestId;\\n        gameContractRequests[msg.sender].push(requestId);\\n        gameContractRequestsCount[msg.sender]++;\\n        emit RequestSent(requestId, numWords, msg.sender);\\n        return requestId;\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256 _requestId,\\n        uint256[] memory _randomWords\\n    ) internal override {\\n        require(s_requests[_requestId].exists, \\\"request not found\\\");\\n        s_requests[_requestId].fulfilled = true;\\n        s_requests[_requestId].randomWords = _randomWords;\\n        emit RequestFulfilled(_requestId, _randomWords);\\n    }\\n\\n    function getLastRequestIdForCaller(address _gameAddress) public view returns (uint256) {\\n        return gameContractRequests[_gameAddress][gameContractRequestsCount[_gameAddress] - 1];\\n    }\\n\\n    function recoverLostNumberRequest(uint256 _requestId) public onlyOwner returns (uint256) {\\n        require(s_requests[_requestId].exists, \\\"request not found\\\");\\n        require(s_requests[_requestId].fulfilled == false, \\\"request already fulfilled\\\");\\n        RequestStatus memory request = s_requests[_requestId];\\n        randomWordsRecoverRequest[_requestId] = requestRandomWords(request.wordsCount);\\n        return randomWordsRecoverRequest[_requestId];\\n    }\\n\\n    function getRequestStatus(\\n        uint256 _requestId\\n    ) public view returns (bool fulfilled, uint256[] memory randomWords) {\\n        require(s_requests[_requestId].exists, \\\"request not found\\\");\\n        if (s_requests[randomWordsRecoverRequest[_requestId]].exists) {\\n            RequestStatus memory request = s_requests[randomWordsRecoverRequest[_requestId]];\\n            return (request.fulfilled, request.randomWords);\\n        } else {\\n            RequestStatus memory request = s_requests[_requestId];\\n            return (request.fulfilled, request.randomWords);\\n        }\\n    }\\n}\",\"keccak256\":\"0x56328286a2af535512155433efbab6bf1df5363812b9a1afd8e73ca7e053cd63\",\"license\":\"MIT\"},\"contracts/CyclixRandomizerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface CyclixRandomizerInterface {\\n    function requestRandomWords(uint32 numWords) external returns (uint256 requestId);\\n    function getRequestStatus(uint256 _requestId) external view returns (bool fulfilled, uint256[] memory randomWords);\\n    function registerGameContract(address gameAddress, string calldata name) external;\\n    function getLastRequestIdForCaller(address _gameAddress) external view returns (uint256);\\n    function recoverLostNumberRequest(uint256 _requestId) external returns (uint256);\\n}\",\"keccak256\":\"0xc71c2b020044355f41cc53069e9a6f9f2778311e8d601a29bcc608301a0dfe24\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c8063a168fa89116100c3578063d7dd3d4b1161007c578063d7dd3d4b146103ef578063d8a4676f1461041f578063e5f0cc3814610450578063e726f2e114610480578063f2fde38b146104b0578063fc2a88c3146104cc57610158565b8063a168fa8914610319578063af9c4daf1461034b578063b089a0c51461037b578063b0fb162f14610397578063c6980117146103b5578063cd0f2311146103d357610158565b806379ba50971161011557806379ba5097146102575780637c8fab5c146102615780638796ba8c146102915780638ac00021146102c15780638da5cb5b146102df5780639d432cb9146102fd57610158565b806310aa616b1461015d5780631fe543e31461018d5780632371d0f1146101a9578063293ac0e3146101d957806341381dae1461020957806361728f3914610239575b600080fd5b610177600480360381019061017291906118d3565b6104ea565b604051610184919061191b565b60405180910390f35b6101a760048036038101906101a29190611ac5565b61050a565b005b6101c360048036038101906101be9190611b21565b6105ca565b6040516101d09190611b5d565b60405180910390f35b6101f360048036038101906101ee91906118d3565b6105e2565b604051610200919061191b565b60405180910390f35b610223600480360381019061021e9190611b21565b610602565b6040516102309190611b5d565b60405180910390f35b6102416107ef565b60405161024e9190611b91565b60405180910390f35b61025f6107f5565b005b61027b600480360381019061027691906118d3565b61098a565b6040516102889190611b5d565b60405180910390f35b6102ab60048036038101906102a69190611b21565b610a3a565b6040516102b89190611b5d565b60405180910390f35b6102c9610a5e565b6040516102d69190611bcf565b60405180910390f35b6102e7610a78565b6040516102f49190611bf9565b60405180910390f35b61031760048036038101906103129190611c50565b610aa1565b005b610333600480360381019061032e9190611b21565b610acd565b60405161034293929190611c8c565b60405180910390f35b610365600480360381019061036091906118d3565b610b21565b6040516103729190611b5d565b60405180910390f35b61039560048036038101906103909190611cef565b610b39565b005b61039f610b9c565b6040516103ac9190611d4c565b60405180910390f35b6103bd610bb0565b6040516103ca9190611d67565b60405180910390f35b6103ed60048036038101906103e89190611ddd565b610bc6565b005b61040960048036038101906104049190611e3d565b610dd2565b6040516104169190611b5d565b60405180910390f35b61043960048036038101906104349190611b21565b610e03565b604051610447929190611f3b565b60405180910390f35b61046a600480360381019061046591906118d3565b61108e565b6040516104779190611fea565b60405180910390f35b61049a60048036038101906104959190611c50565b61112e565b6040516104a79190611b5d565b60405180910390f35b6104ca60048036038101906104c591906118d3565b611527565b005b6104d461153b565b6040516104e19190611b5d565b60405180910390f35b60046020528060005260406000206000915054906101000a900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105bc57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016105b392919061200c565b60405180910390fd5b6105c68282611541565b5050565b600d6020528060005260406000206000915090505481565b60036020528060005260406000206000915054906101000a900460ff1681565b600061060c61163b565b6002600083815260200190815260200160002060000160059054906101000a900460ff1661066f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066690612081565b60405180910390fd5b600015156002600084815260200190815260200160002060000160049054906101000a900460ff161515146106d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d0906120ed565b60405180910390fd5b6000600260008481526020019081526020016000206040518060800160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a900460ff161515151581526020016000820160059054906101000a900460ff16151515158152602001600182018054806020026020016040519081016040528092919081815260200182805480156107a457602002820191906000526020600020905b815481526020019060010190808311610790575b50505050508152505090506107bc816000015161112e565b600d600085815260200190815260200160002081905550600d600084815260200190815260200160002054915050919050565b600b5481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610885576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087c90612159565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a350565b6000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610a1791906121a8565b81548110610a2857610a276121dc565b5b90600052602060002001549050919050565b60098181548110610a4a57600080fd5b906000526020600020016000915090505481565b600860009054906101000a900467ffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610aa961163b565b80600c60006101000a81548163ffffffff021916908363ffffffff16021790555050565b60026020528060005260406000206000915090508060000160009054906101000a900463ffffffff16908060000160049054906101000a900460ff16908060000160059054906101000a900460ff16905083565b60066020528060005260406000206000915090505481565b610b4161163b565b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600c60049054906101000a900461ffff1681565b600c60009054906101000a900463ffffffff1681565b610bce610a78565b73ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff1614610c3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c329061227d565b60405180910390fd5b60001515600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610cce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc59061230f565b60405180910390fd5b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508181600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209182610dcc929190612546565b50505050565b60076020528160005260406000208181548110610dee57600080fd5b90600052602060002001600091509150505481565b600060606002600084815260200190815260200160002060000160059054906101000a900460ff16610e6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6190612081565b60405180910390fd5b60026000600d600086815260200190815260200160002054815260200190815260200160002060000160059054906101000a900460ff1615610fa357600060026000600d60008781526020019081526020016000205481526020019081526020016000206040518060800160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a900460ff161515151581526020016000820160059054906101000a900460ff1615151515815260200160018201805480602002602001604051908101604052809291908181526020018280548015610f8457602002820191906000526020600020905b815481526020019060010190808311610f70575b5050505050815250509050806020015181606001519250925050611089565b6000600260008581526020019081526020016000206040518060800160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a900460ff161515151581526020016000820160059054906101000a900460ff161515151581526020016001820180548060200260200160405190810160405280929190818152602001828054801561106e57602002820191906000526020600020905b81548152602001906001019080831161105a575b50505050508152505090508060200151816060015192509250505b915091565b600560205280600052604060002060009150905080546110ad90612369565b80601f01602080910402602001604051908101604052809291908181526020018280546110d990612369565b80156111265780601f106110fb57610100808354040283529160200191611126565b820191906000526020600020905b81548152906001019060200180831161110957829003601f168201915b505050505081565b6000611138610a78565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806111ba5750600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b6111f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f090612688565b60405180910390fd5b6000600c60009054906101000a900463ffffffff169050600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d30600b54600860009054906101000a900467ffffffffffffffff16600c60049054906101000a900461ffff16878661128591906126a8565b886040518663ffffffff1660e01b81526004016112a69594939291906126e5565b6020604051808303816000875af11580156112c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e9919061274d565b915060405180608001604052808463ffffffff168152602001600015158152602001600115158152602001600067ffffffffffffffff81111561132f5761132e611982565b5b60405190808252806020026020018201604052801561135d5781602001602082028036833780820191505090505b508152506002600084815260200190815260200160002060008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a81548160ff02191690831515021790555060408201518160000160056101000a81548160ff02191690831515021790555060608201518160010190805190602001906113f79291906117f7565b50905050600982908060018154018082558091505060019003906000526020600020016000909190919091505581600a81905550600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020829080600181540180825580915050600190039060005260206000200160009091909190915055600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906114e19061277a565b91905055507ff63bc84386bc129703919a2388162a4ad560a11f28b1280169517f1fa7ace425828433604051611519939291906127c2565b60405180910390a150919050565b61152f61163b565b611538816116cb565b50565b600a5481565b6002600083815260200190815260200160002060000160059054906101000a900460ff166115a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159b90612081565b60405180910390fd5b60016002600084815260200190815260200160002060000160046101000a81548160ff021916908315150217905550806002600084815260200190815260200160002060010190805190602001906115fd9291906117f7565b507ffe2e2d779dba245964d4e3ef9b994be63856fd568bf7d3ca9e224755cb1bd54d828260405161162f9291906127f9565b60405180910390a15050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146116c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116c090612875565b60405180910390fd5b565b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611739576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611730906128e1565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b828054828255906000526020600020908101928215611833579160200282015b82811115611832578251825591602001919060010190611817565b5b5090506118409190611844565b5090565b5b8082111561185d576000816000905550600101611845565b5090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006118a082611875565b9050919050565b6118b081611895565b81146118bb57600080fd5b50565b6000813590506118cd816118a7565b92915050565b6000602082840312156118e9576118e861186b565b5b60006118f7848285016118be565b91505092915050565b60008115159050919050565b61191581611900565b82525050565b6000602082019050611930600083018461190c565b92915050565b6000819050919050565b61194981611936565b811461195457600080fd5b50565b60008135905061196681611940565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6119ba82611971565b810181811067ffffffffffffffff821117156119d9576119d8611982565b5b80604052505050565b60006119ec611861565b90506119f882826119b1565b919050565b600067ffffffffffffffff821115611a1857611a17611982565b5b602082029050602081019050919050565b600080fd5b6000611a41611a3c846119fd565b6119e2565b90508083825260208201905060208402830185811115611a6457611a63611a29565b5b835b81811015611a8d5780611a798882611957565b845260208401935050602081019050611a66565b5050509392505050565b600082601f830112611aac57611aab61196c565b5b8135611abc848260208601611a2e565b91505092915050565b60008060408385031215611adc57611adb61186b565b5b6000611aea85828601611957565b925050602083013567ffffffffffffffff811115611b0b57611b0a611870565b5b611b1785828601611a97565b9150509250929050565b600060208284031215611b3757611b3661186b565b5b6000611b4584828501611957565b91505092915050565b611b5781611936565b82525050565b6000602082019050611b726000830184611b4e565b92915050565b6000819050919050565b611b8b81611b78565b82525050565b6000602082019050611ba66000830184611b82565b92915050565b600067ffffffffffffffff82169050919050565b611bc981611bac565b82525050565b6000602082019050611be46000830184611bc0565b92915050565b611bf381611895565b82525050565b6000602082019050611c0e6000830184611bea565b92915050565b600063ffffffff82169050919050565b611c2d81611c14565b8114611c3857600080fd5b50565b600081359050611c4a81611c24565b92915050565b600060208284031215611c6657611c6561186b565b5b6000611c7484828501611c3b565b91505092915050565b611c8681611c14565b82525050565b6000606082019050611ca16000830186611c7d565b611cae602083018561190c565b611cbb604083018461190c565b949350505050565b611ccc81611900565b8114611cd757600080fd5b50565b600081359050611ce981611cc3565b92915050565b60008060408385031215611d0657611d0561186b565b5b6000611d14858286016118be565b9250506020611d2585828601611cda565b9150509250929050565b600061ffff82169050919050565b611d4681611d2f565b82525050565b6000602082019050611d616000830184611d3d565b92915050565b6000602082019050611d7c6000830184611c7d565b92915050565b600080fd5b60008083601f840112611d9d57611d9c61196c565b5b8235905067ffffffffffffffff811115611dba57611db9611d82565b5b602083019150836001820283011115611dd657611dd5611a29565b5b9250929050565b600080600060408486031215611df657611df561186b565b5b6000611e04868287016118be565b935050602084013567ffffffffffffffff811115611e2557611e24611870565b5b611e3186828701611d87565b92509250509250925092565b60008060408385031215611e5457611e5361186b565b5b6000611e62858286016118be565b9250506020611e7385828601611957565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611eb281611936565b82525050565b6000611ec48383611ea9565b60208301905092915050565b6000602082019050919050565b6000611ee882611e7d565b611ef28185611e88565b9350611efd83611e99565b8060005b83811015611f2e578151611f158882611eb8565b9750611f2083611ed0565b925050600181019050611f01565b5085935050505092915050565b6000604082019050611f50600083018561190c565b8181036020830152611f628184611edd565b90509392505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611fa5578082015181840152602081019050611f8a565b60008484015250505050565b6000611fbc82611f6b565b611fc68185611f76565b9350611fd6818560208601611f87565b611fdf81611971565b840191505092915050565b600060208201905081810360008301526120048184611fb1565b905092915050565b60006040820190506120216000830185611bea565b61202e6020830184611bea565b9392505050565b7f72657175657374206e6f7420666f756e64000000000000000000000000000000600082015250565b600061206b601183611f76565b915061207682612035565b602082019050919050565b6000602082019050818103600083015261209a8161205e565b9050919050565b7f7265717565737420616c72656164792066756c66696c6c656400000000000000600082015250565b60006120d7601983611f76565b91506120e2826120a1565b602082019050919050565b60006020820190508181036000830152612106816120ca565b9050919050565b7f4d7573742062652070726f706f736564206f776e657200000000000000000000600082015250565b6000612143601683611f76565b915061214e8261210d565b602082019050919050565b6000602082019050818103600083015261217281612136565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006121b382611936565b91506121be83611936565b92508282039050818111156121d6576121d5612179565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4f6e6c79206f776e65722063616e2072656769737465722067616d6520636f6e60008201527f7472616374000000000000000000000000000000000000000000000000000000602082015250565b6000612267602583611f76565b91506122728261220b565b604082019050919050565b600060208201905081810360008301526122968161225a565b9050919050565b7f47616d6520636f6e7472616374732077696c6c2072656d61696e20666f72207660008201527f6572696669636174696f6e730000000000000000000000000000000000000000602082015250565b60006122f9602c83611f76565b91506123048261229d565b604082019050919050565b60006020820190508181036000830152612328816122ec565b9050919050565b600082905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061238157607f821691505b6020821081036123945761239361233a565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026123fc7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826123bf565b61240686836123bf565b95508019841693508086168417925050509392505050565b6000819050919050565b600061244361243e61243984611936565b61241e565b611936565b9050919050565b6000819050919050565b61245d83612428565b6124716124698261244a565b8484546123cc565b825550505050565b600090565b612486612479565b612491818484612454565b505050565b5b818110156124b5576124aa60008261247e565b600181019050612497565b5050565b601f8211156124fa576124cb8161239a565b6124d4846123af565b810160208510156124e3578190505b6124f76124ef856123af565b830182612496565b50505b505050565b600082821c905092915050565b600061251d600019846008026124ff565b1980831691505092915050565b6000612536838361250c565b9150826002028217905092915050565b612550838361232f565b67ffffffffffffffff81111561256957612568611982565b5b6125738254612369565b61257e8282856124b9565b6000601f8311600181146125ad576000841561259b578287013590505b6125a5858261252a565b86555061260d565b601f1984166125bb8661239a565b60005b828110156125e3578489013582556001820191506020850194506020810190506125be565b8683101561260057848901356125fc601f89168261250c565b8355505b6001600288020188555050505b50505050505050565b7f4f6e6c79204f776e657220616e642047616d652063616e20726571756573742060008201527f72616e646f6d206e756d62657200000000000000000000000000000000000000602082015250565b6000612672602d83611f76565b915061267d82612616565b604082019050919050565b600060208201905081810360008301526126a181612665565b9050919050565b60006126b382611c14565b91506126be83611c14565b92508282026126cc81611c14565b91508082146126de576126dd612179565b5b5092915050565b600060a0820190506126fa6000830188611b82565b6127076020830187611bc0565b6127146040830186611d3d565b6127216060830185611c7d565b61272e6080830184611c7d565b9695505050505050565b60008151905061274781611940565b92915050565b6000602082840312156127635761276261186b565b5b600061277184828501612738565b91505092915050565b600061278582611936565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036127b7576127b6612179565b5b600182019050919050565b60006060820190506127d76000830186611b4e565b6127e46020830185611c7d565b6127f16040830184611bea565b949350505050565b600060408201905061280e6000830185611b4e565b81810360208301526128208184611edd565b90509392505050565b7f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000600082015250565b600061285f601683611f76565b915061286a82612829565b602082019050919050565b6000602082019050818103600083015261288e81612852565b9050919050565b7f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000600082015250565b60006128cb601783611f76565b91506128d682612895565b602082019050919050565b600060208201905081810360008301526128fa816128be565b905091905056fea2646970667358221220fad61d90aeb5d875cdfb2fbdd8472a1ff90a9a46e0cfb69d84c391c8e9fbcf5064736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 29,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "s_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 31,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1260,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "s_requests",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(RequestStatus)1255_storage)"
      },
      {
        "astId": 1264,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "gameContractAdded",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1268,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "gameContractActive",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1272,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "gameContractName",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 1276,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "gameContractRequestsCount",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1281,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "gameContractRequests",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 1283,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "s_subscriptionId",
        "offset": 0,
        "slot": "8",
        "type": "t_uint64"
      },
      {
        "astId": 1286,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "requestIds",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1288,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "lastRequestId",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1290,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "keyHash",
        "offset": 0,
        "slot": "11",
        "type": "t_bytes32"
      },
      {
        "astId": 1293,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "callbackGasLimitForOneWord",
        "offset": 0,
        "slot": "12",
        "type": "t_uint32"
      },
      {
        "astId": 1308,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "requestConfirmations",
        "offset": 4,
        "slot": "12",
        "type": "t_uint16"
      },
      {
        "astId": 1312,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "randomWordsRecoverRequest",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1314,
        "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
        "label": "coordinatorAddress",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(RequestStatus)1255_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct CyclixRandomizer.RequestStatus)",
        "numberOfBytes": "32",
        "value": "t_struct(RequestStatus)1255_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RequestStatus)1255_storage": {
        "encoding": "inplace",
        "label": "struct CyclixRandomizer.RequestStatus",
        "members": [
          {
            "astId": 1247,
            "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
            "label": "wordsCount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1249,
            "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
            "label": "fulfilled",
            "offset": 4,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1251,
            "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
            "label": "exists",
            "offset": 5,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 1254,
            "contract": "contracts/CyclixRandomizer.sol:CyclixRandomizer",
            "label": "randomWords",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}