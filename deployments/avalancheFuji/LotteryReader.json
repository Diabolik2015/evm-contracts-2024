{
  "address": "0x76e3C6b8eBDBf88C4AEf09A073cA6203F271DF23",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "amountWonInRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "claimed",
          "type": "bool"
        }
      ],
      "name": "evaluateWonReferralAmountForWallet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "evaluateWonReferralFoWallet",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "referralTicketId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "buyerAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "referralAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "referralTicketNumber",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "won",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "claimed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amountWon",
              "type": "uint256"
            }
          ],
          "internalType": "struct ReferralTicketResults[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "evaluateWonReferralForRound",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "referralTicketId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "buyerAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "referralAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "referralTicketNumber",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "won",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "claimed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amountWon",
              "type": "uint256"
            }
          ],
          "internalType": "struct ReferralTicketResults[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "claimed",
          "type": "bool"
        }
      ],
      "name": "evaluateWonTicketsAmountForWallet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "evaluateWonTicketsForRound",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "ticketId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "participantAddress",
              "type": "address"
            },
            {
              "internalType": "enum RoundVictoryTier",
              "name": "victoryTier",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "won",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "claimed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amountWon",
              "type": "uint256"
            }
          ],
          "internalType": "struct TicketResults[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "evaluateWonTicketsForWallet",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "ticketId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "participantAddress",
              "type": "address"
            },
            {
              "internalType": "enum RoundVictoryTier",
              "name": "victoryTier",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "won",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "claimed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amountWon",
              "type": "uint256"
            }
          ],
          "internalType": "struct TicketResults[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "num",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "arr",
          "type": "uint256[]"
        }
      ],
      "name": "existInArrayBigNumber",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "num",
          "type": "uint16"
        },
        {
          "internalType": "uint16[]",
          "name": "arr",
          "type": "uint16[]"
        }
      ],
      "name": "existInArrayNumber",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "getAllTicketsNumbersForRound",
      "outputs": [
        {
          "internalType": "uint16[]",
          "name": "",
          "type": "uint16[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "randomNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "maxValue",
          "type": "uint16"
        },
        {
          "internalType": "uint16[]",
          "name": "arr",
          "type": "uint16[]"
        }
      ],
      "name": "getRandomUniqueNumberInArrayForMaxValue",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "getReferralTicketsForRound",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "buyerAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "referralAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "referralTicketNumber",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "winner",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "claimed",
              "type": "bool"
            }
          ],
          "internalType": "struct ReferralTicket[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "getTicketsForRound",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "participantAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "referralAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "claimed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "enum RoundVictoryTier",
              "name": "victoryTier",
              "type": "uint8"
            }
          ],
          "internalType": "struct Ticket[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lotteryMaster",
      "outputs": [
        {
          "internalType": "contract LotteryMaster",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "num",
          "type": "uint16"
        },
        {
          "internalType": "uint16[]",
          "name": "arr",
          "type": "uint16[]"
        }
      ],
      "name": "notExistInArrayNumber",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "numberOfReferralWinnersForRoundId",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "poolForReferral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "enum RoundVictoryTier",
          "name": "victoryTier",
          "type": "uint8"
        }
      ],
      "name": "poolForVictoryTier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "referralWinnersNumber",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "roundNumbers",
      "outputs": [
        {
          "internalType": "uint16[]",
          "name": "",
          "type": "uint16[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendCryptoToTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "sendTokenToTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lotteryMaster",
          "type": "address"
        }
      ],
      "name": "setLotteryMaster",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "rightNumbersForTicket",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "powerNumberFound",
          "type": "bool"
        }
      ],
      "name": "tierFromResults",
      "outputs": [
        {
          "internalType": "enum RoundVictoryTier",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "tokenHoldersPoolAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "treasuryPoolAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_teamAddress",
          "type": "address"
        }
      ],
      "name": "updateTeamAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x726d4ab777962757a77d59c9f76f35d082ae1a23698bc8c0ecb7b96a5e79e10d",
  "receipt": {
    "to": null,
    "from": "0x4eCa23Ffd5710970E22558C484a0D6943dA5eAa5",
    "contractAddress": "0x76e3C6b8eBDBf88C4AEf09A073cA6203F271DF23",
    "transactionIndex": 0,
    "gasUsed": "4449662",
    "logsBloom": "0x
    "blockHash": "0x7e1a49628340be1d7826ef2b86ec07171e5e949305fa7c4ce4d711fd55a6b797",
    "transactionHash": "0x726d4ab777962757a77d59c9f76f35d082ae1a23698bc8c0ecb7b96a5e79e10d",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 32959508,
        "transactionHash": "0x726d4ab777962757a77d59c9f76f35d082ae1a23698bc8c0ecb7b96a5e79e10d",
        "address": "0x76e3C6b8eBDBf88C4AEf09A073cA6203F271DF23",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004eca23ffd5710970e22558c484a0d6943da5eaa5"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x7e1a49628340be1d7826ef2b86ec07171e5e949305fa7c4ce4d711fd55a6b797"
      }
    ],
    "blockNumber": 32959508,
    "cumulativeGasUsed": "4449662",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f868c97bd542c2ceb465b7d2b22bdbc2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"amountWonInRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"name\":\"evaluateWonReferralAmountForWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"evaluateWonReferralFoWallet\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"referralTicketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referralAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralTicketNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"won\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountWon\",\"type\":\"uint256\"}],\"internalType\":\"struct ReferralTicketResults[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"evaluateWonReferralForRound\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"referralTicketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referralAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralTicketNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"won\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountWon\",\"type\":\"uint256\"}],\"internalType\":\"struct ReferralTicketResults[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"name\":\"evaluateWonTicketsAmountForWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"evaluateWonTicketsForRound\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"participantAddress\",\"type\":\"address\"},{\"internalType\":\"enum RoundVictoryTier\",\"name\":\"victoryTier\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"won\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountWon\",\"type\":\"uint256\"}],\"internalType\":\"struct TicketResults[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"evaluateWonTicketsForWallet\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"participantAddress\",\"type\":\"address\"},{\"internalType\":\"enum RoundVictoryTier\",\"name\":\"victoryTier\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"won\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountWon\",\"type\":\"uint256\"}],\"internalType\":\"struct TicketResults[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"arr\",\"type\":\"uint256[]\"}],\"name\":\"existInArrayBigNumber\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"num\",\"type\":\"uint16\"},{\"internalType\":\"uint16[]\",\"name\":\"arr\",\"type\":\"uint16[]\"}],\"name\":\"existInArrayNumber\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getAllTicketsNumbersForRound\",\"outputs\":[{\"internalType\":\"uint16[]\",\"name\":\"\",\"type\":\"uint16[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"maxValue\",\"type\":\"uint16\"},{\"internalType\":\"uint16[]\",\"name\":\"arr\",\"type\":\"uint16[]\"}],\"name\":\"getRandomUniqueNumberInArrayForMaxValue\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getReferralTicketsForRound\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referralAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralTicketNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"winner\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"internalType\":\"struct ReferralTicket[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getTicketsForRound\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"participantAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referralAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"enum RoundVictoryTier\",\"name\":\"victoryTier\",\"type\":\"uint8\"}],\"internalType\":\"struct Ticket[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryMaster\",\"outputs\":[{\"internalType\":\"contract LotteryMaster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"num\",\"type\":\"uint16\"},{\"internalType\":\"uint16[]\",\"name\":\"arr\",\"type\":\"uint16[]\"}],\"name\":\"notExistInArrayNumber\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"numberOfReferralWinnersForRoundId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"poolForReferral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"enum RoundVictoryTier\",\"name\":\"victoryTier\",\"type\":\"uint8\"}],\"name\":\"poolForVictoryTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"referralWinnersNumber\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"roundNumbers\",\"outputs\":[{\"internalType\":\"uint16[]\",\"name\":\"\",\"type\":\"uint16[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendCryptoToTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sendTokenToTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lotteryMaster\",\"type\":\"address\"}],\"name\":\"setLotteryMaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"rightNumbersForTicket\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"powerNumberFound\",\"type\":\"bool\"}],\"name\":\"tierFromResults\",\"outputs\":[{\"internalType\":\"enum RoundVictoryTier\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"tokenHoldersPoolAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"treasuryPoolAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teamAddress\",\"type\":\"address\"}],\"name\":\"updateTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LotteryReader.sol\":\"LotteryReader\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/CyclixRandomizerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface CyclixRandomizerInterface {\\n    function requestRandomWords(uint32 numWords) external returns (uint256 requestId);\\n    function getRequestStatus(uint256 _requestId) external view returns (bool fulfilled, uint256[] memory randomWords);\\n    function registerGameContract(address gameAddress, string calldata name) external;\\n    function getLastRequestIdForCaller(address _gameAddress) external view returns (uint256);\\n    function recoverLostNumberRequest(uint256 _requestId) external returns (uint256);\\n}\",\"keccak256\":\"0xc71c2b020044355f41cc53069e9a6f9f2778311e8d601a29bcc608301a0dfe24\",\"license\":\"MIT\"},\"contracts/LotteryCommon.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\n    enum RoundVictoryTier {\\n        Tier5_1,\\n        Tier5,\\n        Tier4_1,\\n        Tier4,\\n        Tier3_1,\\n        Tier3,\\n        Referrer,\\n        TokenHolders,\\n        Treasury,\\n        NO_WIN\\n    }\\n\\n    struct Round {\\n        uint256 id;\\n        uint256 startTime;\\n        uint256 endTime;\\n        bool ended;\\n        uint16[] roundNumbers;\\n        uint256[] referralWinnersNumber;\\n        uint16 referralWinnersNumberCount;\\n        uint256[] ticketIds;\\n        uint16 ticketsCount;\\n        uint256[] referralTicketIds;\\n        uint16 referralCounts;\\n    }\\n\\n    struct Ticket {\\n        uint256 id;\\n        address participantAddress;\\n        address referralAddress;\\n        bool claimed;\\n        uint256 chainId;\\n        RoundVictoryTier victoryTier;\\n    }\\n\\n    struct TicketResults {\\n        uint256 ticketId;\\n        address participantAddress;\\n        RoundVictoryTier victoryTier;\\n        bool won;\\n        bool claimed;\\n        uint256 amountWon;\\n    }\\n\\n    struct ReferralTicket {\\n        uint256 id;\\n        address buyerAddress;\\n        address referralAddress;\\n        uint256 referralTicketNumber;\\n        bool winner;\\n        bool claimed;\\n    }\\n\\n    struct ReferralTicketResults {\\n        uint256 referralTicketId;\\n        address buyerAddress;\\n        address referralAddress;\\n        uint256 referralTicketNumber;\\n        bool won;\\n        bool claimed;\\n        uint256 amountWon;\\n    }\",\"keccak256\":\"0xa5e9d10a56464d64ec25fdf420e1f02ee06fe38a7c4eddb42b0cf7973d273cde\",\"license\":\"UNLICENSED\"},\"contracts/LotteryMaster.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {CyclixRandomizerInterface} from \\\"./CyclixRandomizerInterface.sol\\\";\\nimport {EmergencyFunctions} from \\\"./utils/EmergencyFunctions.sol\\\";\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\nimport { LotteryRoundInterface } from \\\"./LotteryRoundInterface.sol\\\";\\nimport { LotteryReaderInterface } from \\\"./LotteryReaderInterface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./LotteryRoundCreatorInterface.sol\\\";\\n    enum LotteryStatuses {\\n        DrawOpen,\\n        EvaluatingResults,\\n        ResultsEvaluated,\\n        ClaimInProgress\\n    }\\n\\ncontract LotteryMaster is EmergencyFunctions {\\n\\n    uint256 public roundCount;\\n    address[] public rounds;\\n    LotteryStatuses public lotteryStatus;\\n    uint256 public statusStartTime;\\n    uint256 public statusEndTime;\\n\\n    mapping(address => uint256) public freeRounds;\\n    mapping(address => bool) public crossChainOperator;\\n    function setCrossChainOperator(address operator, bool value) public onlyOwner {\\n        crossChainOperator[operator] = value;\\n    }\\n\\n    uint16 public counterForBankWallets;\\n    address[] public bankWallets;\\n    function setBankWallet(address wallet, bool add) public onlyOwner {\\n        for (uint i = 0; i < bankWallets.length; i++) {\\n            if (bankWallets[i] == wallet) {\\n                if (add) {\\n                    require(false, \\\"Wallet already added\\\");\\n                } else {\\n                    bankWallets[i] = bankWallets[bankWallets.length - 1];\\n                    bankWallets.pop();\\n                }\\n            }\\n        }\\n        if (add) {\\n            bankWallets.push(wallet);\\n        }\\n    }\\n\\n    IERC20Metadata public paymentToken;\\n    CyclixRandomizerInterface public randomizer;\\n    LotteryReaderInterface public reader;\\n    uint256 public ticketPrice;\\n    bool public freeRoundsAreEnabled = false;\\n    uint16 public percentageOfReferralWinners = 10;\\n    LotteryRoundCreatorInterface public lotteryRoundCreator;\\n\\n    constructor(address cyclixRandomizer, address lotteryReader, address _lotteryRoundCreator, address _paymentToken, uint256 _ticketPrice, bool _freeRoundsAreEnabled)\\n    EmergencyFunctions(msg.sender) {\\n        randomizer = CyclixRandomizerInterface(cyclixRandomizer);\\n        randomizer.registerGameContract(address(this), \\\"LotteryMasterV0.1\\\");\\n        reader = LotteryReaderInterface(lotteryReader);\\n        lotteryRoundCreator = LotteryRoundCreatorInterface(_lotteryRoundCreator);\\n        paymentToken = IERC20Metadata(_paymentToken);\\n        ticketPrice = _ticketPrice * (10 ** uint256(paymentToken.decimals()));\\n        freeRoundsAreEnabled = _freeRoundsAreEnabled;\\n        bankWallets.push(msg.sender);\\n    }\\n\\n    function updateSetup(address cyclixRandomizer, address lotteryReader, address _lotteryRoundCreator, address _paymentToken, uint256 _ticketPrice,\\n        uint16 _percentageOfReferralWinners, uint16[] memory _poolPercentagesBasePoints, bool _freeRoundsAreEnabled) public onlyOwner {\\n        if (address(randomizer) != cyclixRandomizer) {\\n            randomizer = CyclixRandomizerInterface(cyclixRandomizer);\\n            randomizer.registerGameContract(address(this), \\\"LotteryMasterV0.1\\\");\\n        }\\n        reader = LotteryReaderInterface(lotteryReader);\\n        lotteryRoundCreator = LotteryRoundCreatorInterface(_lotteryRoundCreator);\\n        paymentToken = IERC20Metadata(_paymentToken);\\n        ticketPrice = _ticketPrice * (10 ** uint256(paymentToken.decimals()));\\n        percentageOfReferralWinners = _percentageOfReferralWinners;\\n        LotteryRoundInterface(rounds[roundCount - 1]).setPoolPercentagesBasePoints(_poolPercentagesBasePoints);\\n        freeRoundsAreEnabled = _freeRoundsAreEnabled;\\n    }\\n\\n    function startNewRound(uint256 _statusEndTime) public onlyOwner {\\n        roundCount++;\\n        if (roundCount > 1) {\\n            rounds.push(lotteryRoundCreator.startNewRound(_statusEndTime, rounds[roundCount - 2]));\\n            require(lotteryStatus == LotteryStatuses.ClaimInProgress && statusEndTime < block.timestamp, \\\"Previous round not ended\\\");\\n        } else {\\n            rounds.push(lotteryRoundCreator.startNewRound(_statusEndTime, address(0)));\\n        }\\n        setLotteryStatus(LotteryStatuses.DrawOpen, _statusEndTime);\\n    }\\n\\n    function setLotteryStatus(LotteryStatuses _lotteryStatus, uint256 _statusEndTime) internal onlyOwner {\\n        lotteryStatus = _lotteryStatus;\\n        statusStartTime = block.timestamp;\\n        statusEndTime = block.timestamp + _statusEndTime;\\n    }\\n\\n    function buyTickets(uint256 chainId, uint16[] memory moreTicketNumbers, address referral, address buyer) public {\\n        bool paidWithFreeTicket = false;\\n        for (uint i = 0; i < moreTicketNumbers.length; i += 6) {\\n            uint16[] memory chosenNumbers = new uint16[](6);\\n            for (uint j = 0; j < 6; j++) {\\n                chosenNumbers[j] = moreTicketNumbers[i + j];\\n            }\\n            paidWithFreeTicket = buyTicket(chainId, chosenNumbers, referral, buyer);\\n        }\\n\\n        if (referral != address(0) && freeRoundsAreEnabled && !paidWithFreeTicket) {\\n            unchecked {\\n                freeRounds[buyer] = freeRounds[buyer] + moreTicketNumbers.length / 6;\\n                freeRounds[referral] = freeRounds[referral] + moreTicketNumbers.length / 6;\\n            }\\n        }\\n    }\\n\\n    function buyTicket(uint256 chainId, uint16[] memory chosenNumbers, address referral, address buyer) internal returns(bool) {\\n        require(freeRounds[buyer] > 0\\n        || paymentToken.allowance(buyer, address(this)) >= ticketPrice\\n        || crossChainOperator[msg.sender], \\\"Missing Allowance\\\");\\n        LotteryRoundInterface lotteryRound = LotteryRoundInterface(rounds[roundCount - 1]);\\n        bool paidWithFreeTicket = false;\\n        if (freeRounds[buyer] > 0) {\\n            freeRounds[buyer]--;\\n            paidWithFreeTicket = true;\\n        } else {\\n            if (!crossChainOperator[msg.sender]) {\\n                require(paymentToken.balanceOf(tx.origin) >= ticketPrice, \\\"Insufficient funds\\\");\\n                counterForBankWallets = uint16(counterForBankWallets++ % bankWallets.length);\\n                SafeERC20.safeTransferFrom(paymentToken, buyer, bankWallets[counterForBankWallets], ticketPrice);\\n            }\\n            lotteryRound.updateVictoryPoolForTicket(ticketPrice);\\n        }\\n\\n        if (paidWithFreeTicket) {\\n            lotteryRound.buyTicket(chainId, chosenNumbers, address(0), buyer);\\n        } else {\\n            lotteryRound.buyTicket(chainId, chosenNumbers, referral, buyer);\\n        }\\n        return paidWithFreeTicket;\\n    }\\n\\n    function addFreeRound(address[] calldata participant) public onlyOwner {\\n        for (uint i = 0; i < participant.length; i++) {\\n            freeRounds[participant[i]]++;\\n        }\\n    }\\n\\n    mapping(uint256 => uint256) public publicRoundRandomNumbersRequestId;\\n\\n    function closeRound(uint256 _statusEndTime) external onlyOwner {\\n        LotteryRoundInterface lotteryRound = LotteryRoundInterface(rounds[roundCount - 1]);\\n        lotteryRound.closeRound();\\n        uint16 referralWinners = reader.numberOfReferralWinnersForRoundId(roundCount);\\n        publicRoundRandomNumbersRequestId[roundCount] = randomizer.requestRandomWords(6 + referralWinners);\\n        setLotteryStatus(LotteryStatuses.EvaluatingResults, _statusEndTime);\\n    }\\n\\n    function fetchRoundNumbers(uint256 roundId, uint256 _statusEndTime) external onlyOwner {\\n        LotteryRoundInterface round = LotteryRoundInterface(rounds[roundId - 1]);\\n        round.couldReceiveWinningNumbers();\\n        (bool fulfilled, uint256[] memory randomWords) = randomizer.getRequestStatus(publicRoundRandomNumbersRequestId[roundId]);\\n        require(fulfilled, \\\"Random numbers not ready\\\");\\n        uint16[] memory roundNumbers = new uint16[](6);\\n        uint16[] memory referralWinnersNumber = new uint16[](randomWords.length - 6);\\n        if (fulfilled) {\\n            for (uint i = 0; i < 6; i++) {\\n                roundNumbers[i] = reader.getRandomUniqueNumberInArrayForMaxValue(randomWords[i], 69, roundNumbers);\\n            }\\n            roundNumbers[5] = uint16(randomWords[5] % 26 + 1);\\n            for (uint i = 6; i < randomWords.length; i++) {\\n                referralWinnersNumber [i - 6] = reader.getRandomUniqueNumberInArrayForMaxValue(randomWords[i],\\n                    round.getRound().referralCounts, referralWinnersNumber);\\n            }\\n        }\\n        round.storeWinningNumbers(roundNumbers, referralWinnersNumber);\\n        setLotteryStatus(LotteryStatuses.ResultsEvaluated, _statusEndTime);\\n    }\\n\\n    function markWinners(uint256 roundId, uint256 _statusEndTime) public onlyOwner {\\n        LotteryRoundInterface(rounds[roundId - 1]).markWinners(reader.evaluateWonTicketsForRound(roundId), reader.evaluateWonReferralForRound(roundId));\\n        setLotteryStatus(LotteryStatuses.ClaimInProgress, _statusEndTime);\\n    }\\n\\n    function claimVictory() public {\\n        require(lotteryStatus == LotteryStatuses.ClaimInProgress, \\\"Lottery is not in claim period\\\");\\n        require(statusEndTime > block.timestamp, \\\"Claim Period ended\\\");\\n        uint256 amountForEntries = reader.evaluateWonTicketsAmountForWallet(roundCount, msg.sender, false);\\n        uint256 amountForReferral = reader.evaluateWonReferralAmountForWallet(roundCount, msg.sender, false);\\n        require(amountForEntries > 0 || amountForReferral > 0, \\\"Nothing to claim for this wallet\\\");\\n        require(paymentToken.balanceOf(address(this)) >= amountForEntries + amountForReferral, \\\"Not enough funds on contract\\\");\\n        LotteryRoundInterface(rounds[roundCount - 1]).markVictoryClaimed(\\n            reader.evaluateWonTicketsForWallet(roundCount, msg.sender),\\n            reader.evaluateWonReferralFoWallet(roundCount, msg.sender)\\n        );\\n        paymentToken.transfer(msg.sender, amountForEntries + amountForReferral);\\n    }\\n}\",\"keccak256\":\"0x1682c7474e0d27de33f68732e9aad93e8d672b834e459a32a2c4fba0d0690c5a\",\"license\":\"UNLICENSED\"},\"contracts/LotteryReader.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {TestFunctions} from \\\"./utils/TestUtils.sol\\\";\\nimport {EmergencyFunctions} from \\\"./utils/EmergencyFunctions.sol\\\";\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\nimport { LotteryRound } from \\\"./LotteryRound.sol\\\";\\nimport { LotteryMaster } from \\\"./LotteryMaster.sol\\\";\\nimport {LotteryReaderInterface} from \\\"./LotteryReaderInterface.sol\\\";\\n\\ncontract LotteryReader is LotteryReaderInterface, EmergencyFunctions {\\n    LotteryMaster public lotteryMaster;\\n\\n    function setLotteryMaster(address _lotteryMaster) public onlyOwner {\\n        lotteryMaster = LotteryMaster(_lotteryMaster);\\n    }\\n\\n    constructor() EmergencyFunctions(tx.origin) {}\\n\\n    function poolForVictoryTier(uint256 roundId, RoundVictoryTier victoryTier) public view override returns(uint256) {\\n        require(victoryTier == RoundVictoryTier.Tier5_1 || victoryTier == RoundVictoryTier.Tier5 || victoryTier == RoundVictoryTier.Tier4_1 ||\\n        victoryTier == RoundVictoryTier.Tier4 || victoryTier == RoundVictoryTier.Tier3_1 || victoryTier == RoundVictoryTier.Tier3,\\n            \\\"Invalid victory tier\\\");\\n        return LotteryRound(lotteryMaster.rounds(roundId -1)).victoryTierAmounts(victoryTier);\\n    }\\n\\n    function roundNumbers(uint256 roundId) public view returns(uint16[] memory) {\\n        Round memory round = LotteryRound(lotteryMaster.rounds(roundId -1)).getRound();\\n        return round.roundNumbers;\\n    }\\n\\n    function referralWinnersNumber(uint256 roundId) public view returns(uint256[] memory) {\\n        Round memory round = LotteryRound(lotteryMaster.rounds(roundId -1)).getRound();\\n        return round.referralWinnersNumber;\\n    }\\n\\n    function poolForReferral(uint256 roundId) public view override returns(uint256) {\\n        return LotteryRound(lotteryMaster.rounds(roundId -1)).victoryTierAmounts(RoundVictoryTier.Referrer);\\n    }\\n\\n    function tokenHoldersPoolAmount(uint256 roundId) public view override returns (uint256) {\\n        return LotteryRound(lotteryMaster.rounds(roundId -1)).victoryTierAmounts(RoundVictoryTier.TokenHolders);\\n    }\\n\\n    function treasuryPoolAmount(uint256 roundId) public view override returns (uint256) {\\n        return LotteryRound(lotteryMaster.rounds(roundId -1)).victoryTierAmounts(RoundVictoryTier.Treasury);\\n    }\\n\\n    function numberOfReferralWinnersForRoundId(uint256 roundId) public view override returns (uint16) {\\n        uint16 referralWinnersForRound = 0;\\n        uint16 referralCounts = LotteryRound(lotteryMaster.rounds(roundId -1)).getRound().referralCounts;\\n        unchecked {\\n            referralWinnersForRound = referralCounts / lotteryMaster.percentageOfReferralWinners();\\n        }\\n        if (referralWinnersForRound == 0 && referralCounts > 0) {\\n            referralWinnersForRound = 1;\\n        }\\n        return referralWinnersForRound;\\n    }\\n\\n    function existInArrayBigNumber(uint256 num, uint256[] memory arr) public pure override returns (bool) {\\n        for (uint i = 0; i < arr.length; i++) {\\n            if (arr[i] == num) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function existInArrayNumber(uint16 num, uint16[] memory arr) public pure override returns (bool) {\\n        for (uint i = 0; i < arr.length; i++) {\\n            if (arr[i] == num) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function notExistInArrayNumber(uint16 num, uint16[] memory arr) public pure override returns (bool) {\\n        return existInArrayNumber(num, arr) == false;\\n    }\\n\\n    function getRandomUniqueNumberInArrayForMaxValue(uint256 randomNumber, uint16 maxValue, uint16[] memory arr) public pure override returns (uint16) {\\n        uint16 returnedNumber = uint16(randomNumber % maxValue + 1);\\n        uint16 counter = 0;\\n        bool existInNumbers = existInArrayNumber(returnedNumber, arr);\\n        while (existInNumbers) {\\n            returnedNumber =  uint16(uint256(keccak256(abi.encode(returnedNumber, counter))) % maxValue + 1);\\n            existInNumbers = existInArrayNumber(returnedNumber, arr);\\n            counter++;\\n        }\\n        return returnedNumber;\\n    }\\n\\n\\n    function tierFromResults(uint16 rightNumbersForTicket, bool powerNumberFound) public pure override returns (RoundVictoryTier) {\\n        if (rightNumbersForTicket == 5 && powerNumberFound) {\\n            return RoundVictoryTier.Tier5_1;\\n        } else if (rightNumbersForTicket == 5) {\\n            return RoundVictoryTier.Tier5;\\n        } else if (rightNumbersForTicket == 4 && powerNumberFound) {\\n            return RoundVictoryTier.Tier4_1;\\n        } else if (rightNumbersForTicket == 4) {\\n            return RoundVictoryTier.Tier4;\\n        } else if (rightNumbersForTicket == 3 && powerNumberFound) {\\n            return RoundVictoryTier.Tier3_1;\\n        } else if (rightNumbersForTicket == 3) {\\n            return RoundVictoryTier.Tier3;\\n        }\\n        return RoundVictoryTier.NO_WIN;\\n    }\\n\\n    function getTicketsForRound(uint256 roundId) public view override returns(Ticket[] memory) {\\n        LotteryRound lotteryRound = LotteryRound(lotteryMaster.rounds(roundId - 1));\\n        Round memory roundForEvaluation = lotteryRound.getRound();\\n        Ticket[] memory results = new Ticket[](roundForEvaluation.ticketsCount);\\n        for (uint256 i = 0; i < roundForEvaluation.ticketsCount; i++) {\\n            results[i] = lotteryRound.ticketById(roundForEvaluation.ticketIds[i]);\\n        }\\n        return results;\\n    }\\n\\n    function getAllTicketsNumbersForRound(uint256 roundId) public view override returns(uint16[] memory) {\\n        LotteryRound lotteryRound = LotteryRound(lotteryMaster.rounds(roundId - 1));\\n        Round memory roundForEvaluation = lotteryRound.getRound();\\n        uint16[] memory numbersForAllTickets = new uint16[](roundForEvaluation.ticketsCount * 6);\\n        for (uint256 i = 0; i < roundForEvaluation.ticketsCount; i++) {\\n            uint16[] memory numbersForTicket = lotteryRound.numbersForTicketId(i);\\n            for (uint256 j = 0; j < numbersForTicket.length; j++) {\\n                numbersForAllTickets[(i * 6) + j] = numbersForTicket[j];\\n            }\\n        }\\n        return numbersForAllTickets;\\n    }\\n\\n    function getReferralTicketsForRound(uint256 roundId) public view override returns(ReferralTicket[] memory) {\\n        LotteryRound lotteryRound = LotteryRound(lotteryMaster.rounds(roundId - 1));\\n        Round memory roundForEvaluation = lotteryRound.getRound();\\n        ReferralTicket[] memory results = new ReferralTicket[](roundForEvaluation.referralCounts);\\n        for (uint256 i = 0; i < roundForEvaluation.referralCounts; i++) {\\n            results[i] = lotteryRound.referralTicketById(roundForEvaluation.ticketIds[i]);\\n        }\\n        return results;\\n    }\\n\\n    function evaluateWonTicketsForRound(uint256 roundId) public view override returns (TicketResults[] memory){\\n        LotteryRound lotteryRound = LotteryRound(lotteryMaster.rounds(roundId - 1));\\n        Round memory roundForEvaluation = lotteryRound.getRound();\\n        uint16 roundTicketCount = roundForEvaluation.ticketsCount;\\n        TicketResults[] memory ticketResults = new TicketResults[](roundForEvaluation.ticketsCount);\\n        uint16 counter = 0;\\n        for(uint16 ticketIndexForRound = 0; ticketIndexForRound < roundTicketCount; ticketIndexForRound++) {\\n            Ticket memory ticket = lotteryRound.ticketById(roundForEvaluation.ticketIds[ticketIndexForRound]);\\n            uint16[] memory ticketNumbers = lotteryRound.numbersForTicketId(ticket.id);\\n            bool powerNumberFound = ticketNumbers[5] == roundForEvaluation.roundNumbers[5];\\n            uint16 rightNumbersForTicket = 0;\\n            for(uint16 i = 0; i < 5; i++) {\\n                uint16 ticketNumber = ticketNumbers[i];\\n                if (existInArrayNumber(ticketNumber, roundForEvaluation.roundNumbers)) {\\n                    rightNumbersForTicket++;\\n                }\\n            }\\n            RoundVictoryTier tierResult = tierFromResults(rightNumbersForTicket, powerNumberFound);\\n            uint256 amountWon = 0;\\n            if (tierResult != RoundVictoryTier.NO_WIN && lotteryRound.winnersForEachTier(tierResult) > 0) {\\n                amountWon = poolForVictoryTier(roundId, tierResult) / lotteryRound.winnersForEachTier(tierResult);\\n            }\\n            ticketResults[counter++] = TicketResults({\\n                ticketId: ticket.id,\\n                participantAddress : ticket.participantAddress,\\n                victoryTier: tierResult,\\n                won: tierResult != RoundVictoryTier.NO_WIN,\\n                claimed: ticket.claimed,\\n                amountWon : amountWon\\n            });\\n        }\\n        return ticketResults;\\n    }\\n\\n    function evaluateWonTicketsAmountForWallet(uint256 roundId, address wallet, bool claimed) public view override returns(uint256) {\\n        uint256 wonAmount = 0;\\n        TicketResults[] memory results = evaluateWonTicketsForWallet(roundId, wallet);\\n        for (uint256 i = 0; i < results.length; i++) {\\n            if (results[i].claimed == claimed) {\\n                wonAmount += results[i].amountWon;\\n            }\\n        }\\n        return wonAmount;\\n    }\\n\\n    function evaluateWonTicketsForWallet(uint256 roundId, address wallet) public view override returns(TicketResults[] memory) {\\n        TicketResults[] memory results = evaluateWonTicketsForRound(roundId);\\n        uint256 counterForWalletTicket = 0;\\n        TicketResults[] memory resultsForWallet = new TicketResults[](results.length);\\n        for (uint256 i = 0; i < results.length; i++) {\\n            if (results[i].participantAddress == wallet && results[i].won) {\\n                resultsForWallet[counterForWalletTicket] = results[i];\\n                counterForWalletTicket++;\\n            }\\n        }\\n        TicketResults[] memory onlyResultsForWallet = new TicketResults[](counterForWalletTicket);\\n        for (uint256 i = 0; i < counterForWalletTicket; i++) {\\n            onlyResultsForWallet[i] = resultsForWallet[i];\\n        }\\n        return onlyResultsForWallet;\\n    }\\n\\n    function evaluateWonReferralForRound(uint256 roundId) public view override returns (ReferralTicketResults[] memory) {\\n        LotteryRound lotteryRound = LotteryRound(lotteryMaster.rounds(roundId - 1));\\n        Round memory roundForEvaluation = lotteryRound.getRound();\\n        ReferralTicketResults[] memory referralWinnerIds = new ReferralTicketResults[](roundForEvaluation.referralCounts);\\n        uint16 counter = 0;\\n        for(uint16 referralIndexForRound = 0; referralIndexForRound < roundForEvaluation.referralCounts; referralIndexForRound++) {\\n            ReferralTicket memory referralTicket = lotteryRound.referralTicketById(roundForEvaluation.referralTicketIds[referralIndexForRound]);\\n            bool referralWon = existInArrayBigNumber(referralTicket.referralTicketNumber, roundForEvaluation.referralWinnersNumber);\\n            uint256 amountWon = 0;\\n            if (referralWon && lotteryRound.winnersForEachTier(RoundVictoryTier.Referrer) > 0) {\\n                amountWon = poolForReferral(roundId) / lotteryRound.winnersForEachTier(RoundVictoryTier.Referrer);\\n            }\\n            referralWinnerIds[counter++] = ReferralTicketResults({\\n                referralTicketId: referralTicket.id,\\n                buyerAddress : referralTicket.buyerAddress,\\n                referralAddress : referralTicket.referralAddress,\\n                referralTicketNumber: referralTicket.referralTicketNumber,\\n                won: referralWon,\\n                claimed: referralTicket.claimed,\\n                amountWon : amountWon\\n            });\\n        }\\n        return referralWinnerIds;\\n    }\\n\\n    function evaluateWonReferralAmountForWallet(uint256 roundId, address wallet, bool claimed) public view override returns(uint256) {\\n        uint256 wonAmount = 0;\\n        ReferralTicketResults[] memory results = evaluateWonReferralFoWallet(roundId, wallet);\\n        for (uint256 i = 0; i < results.length; i++) {\\n            if (results[i].claimed == claimed) {\\n                wonAmount += results[i].amountWon;\\n            }\\n        }\\n        return wonAmount;\\n    }\\n\\n    function evaluateWonReferralFoWallet(uint256 roundId, address wallet) public view override returns(ReferralTicketResults[] memory) {\\n        ReferralTicketResults[] memory results = evaluateWonReferralForRound(roundId);\\n        uint256 counterForWalletTicket = 0;\\n        ReferralTicketResults[] memory resultsForWallet = new ReferralTicketResults[](results.length);\\n        for (uint256 i = 0; i < results.length; i++) {\\n            if (results[i].referralAddress == wallet && results[i].won) {\\n                resultsForWallet[counterForWalletTicket] = results[i];\\n                counterForWalletTicket++;\\n            }\\n        }\\n        ReferralTicketResults[] memory onlyResultsForWallet = new ReferralTicketResults[](counterForWalletTicket);\\n        for (uint256 i = 0; i < counterForWalletTicket; i++) {\\n            onlyResultsForWallet[i] = resultsForWallet[i];\\n        }\\n        return onlyResultsForWallet;\\n    }\\n\\n    function amountWonInRound(uint256 roundId) public view override returns (uint256) {\\n        LotteryRound lotteryRound = LotteryRound(lotteryMaster.rounds(roundId -1));\\n        uint256 amountWon = 0;\\n        TicketResults[] memory ticketResults = evaluateWonTicketsForRound(roundId);\\n        ReferralTicketResults[] memory referralResults = evaluateWonReferralForRound(roundId);\\n        uint256[] memory winnersForPools = new uint256[](6);\\n        for(uint16 i = 0; i < ticketResults.length; i++) {\\n            if (ticketResults[i].victoryTier != RoundVictoryTier.NO_WIN) {\\n                winnersForPools[uint(ticketResults[i].victoryTier)] = winnersForPools[uint(ticketResults[i].victoryTier)] + 1;\\n            }\\n        }\\n        for(uint16 i = 0; i < 6; i++) {\\n            if (winnersForPools[i] > 0) {\\n                amountWon += lotteryRound.victoryTierAmounts(RoundVictoryTier(i));\\n            }\\n        }\\n        if (referralResults.length > 0) {\\n            amountWon += lotteryRound.victoryTierAmounts(RoundVictoryTier.Referrer);\\n        }\\n        return amountWon;\\n    }\\n}\",\"keccak256\":\"0x51af6580b1452a61133e6c7c08d945750eb5091a65961bb7f5259df32261c45f\",\"license\":\"UNLICENSED\"},\"contracts/LotteryReaderInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {TestFunctions} from \\\"./utils/TestUtils.sol\\\";\\nimport {CyclixRandomizerInterface} from \\\"./CyclixRandomizerInterface.sol\\\";\\nimport {EmergencyFunctions} from \\\"./utils/EmergencyFunctions.sol\\\";\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\n\\ninterface LotteryReaderInterface {\\n    function poolForVictoryTier(uint256 roundId, RoundVictoryTier victoryTier) external view returns(uint256) ;\\n    function poolForReferral(uint256 roundId) external view returns(uint256) ;\\n    function tokenHoldersPoolAmount(uint256 roundId) external view returns (uint256) ;\\n    function treasuryPoolAmount(uint256 roundId) external view returns (uint256) ;\\n    function numberOfReferralWinnersForRoundId(uint256 roundId) external view returns (uint16) ;\\n    function existInArrayBigNumber(uint256 num, uint256[] memory arr) external pure returns (bool) ;\\n    function existInArrayNumber(uint16 num, uint16[] memory arr) external pure returns (bool) ;\\n    function notExistInArrayNumber(uint16 num, uint16[] memory arr) external pure returns (bool) ;\\n    function getRandomUniqueNumberInArrayForMaxValue(uint256 randomNumber, uint16 maxValue, uint16[] memory arr) external pure returns (uint16) ;\\n    function tierFromResults(uint16 rightNumbersForTicket, bool powerNumberFound) external pure returns (RoundVictoryTier) ;\\n    function getTicketsForRound(uint256 roundId) external view returns(Ticket[] memory);\\n    function getAllTicketsNumbersForRound(uint256 roundId) external view returns(uint16[] memory);\\n    function getReferralTicketsForRound(uint256 roundId) external view returns(ReferralTicket[] memory);\\n    function evaluateWonTicketsForRound(uint256 roundId) external view returns (TicketResults[] memory);\\n    function evaluateWonTicketsAmountForWallet(uint256 roundId, address wallet, bool claimed) external view returns(uint256);\\n    function evaluateWonTicketsForWallet(uint256 roundId, address wallet) external view returns(TicketResults[] memory);\\n    function evaluateWonReferralForRound(uint256 roundId) external view returns (ReferralTicketResults[] memory);\\n    function evaluateWonReferralAmountForWallet(uint256 roundId, address wallet, bool claimed) external view returns(uint256);\\n    function evaluateWonReferralFoWallet(uint256 roundId, address wallet) external view returns (ReferralTicketResults[] memory);\\n    function amountWonInRound(uint256 roundId) external view returns (uint256) ;\\n    function roundNumbers(uint256 roundId) external view returns(uint16[] memory);\\n    function referralWinnersNumber(uint256 roundId) external view returns(uint256[] memory);\\n}\",\"keccak256\":\"0x815fb0592bae303a980a5bdc44ae9d50653a6606c310f1b51e6096e8f83fbb1a\",\"license\":\"UNLICENSED\"},\"contracts/LotteryRound.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\nimport {LotteryRoundInterface} from \\\"./LotteryRoundInterface.sol\\\";\\n\\ncontract LotteryRound is Ownable, LotteryRoundInterface {\\n    Round public round;\\n    function getRound() public view returns (Round memory) {\\n        return round;\\n    }\\n\\n    Ticket[] public tickets;\\n    function ticketById(uint256 ticketId) public view returns (Ticket memory) {\\n        return tickets[ticketId];\\n    }\\n    mapping(uint256 => uint16[]) public ticketNumbers;\\n    function numbersForTicketId(uint256 ticketId) public view returns (uint16[] memory) {\\n        return ticketNumbers[ticketId];\\n    }\\n    mapping(address => uint256[]) public roundTicketsByAddress;\\n    mapping(address => uint256) public roundTicketsByAddressCount;\\n\\n    ReferralTicket[] public referralTickets;\\n    function referralTicketById(uint256 index) public view returns (ReferralTicket memory) {\\n        return referralTickets[index];\\n    }\\n    mapping(address => uint256[]) public roundReferralTicketsByAddress;\\n    mapping(address => uint256) public roundReferralTicketsByAddressCount;\\n\\n    mapping(RoundVictoryTier => uint256) public victoryTierAmounts;\\n    mapping(RoundVictoryTier => uint256) public victoryTierAmountsClaimed;\\n    uint256 public totalVictoryPool;\\n    uint256 public totalClaimed;\\n    mapping(RoundVictoryTier => uint256) public winnersForEachTier;\\n    address public previousRound;\\n\\n    uint16[]  public  poolPercentagesBasePoints = [3000, 1500, 1000, 700, 500, 300, 1500, 1000, 500];\\n    function setPoolPercentagesBasePoints(uint16[] memory _poolPercentagesBasePoints) public onlyOwner {\\n        poolPercentagesBasePoints = _poolPercentagesBasePoints;\\n    }\\n\\n    constructor(address previousRoundAddress, uint256 roundDurationInSeconds) Ownable(msg.sender) {\\n        uint256 id = 1;\\n        previousRound = previousRoundAddress;\\n        if (previousRoundAddress != address(0)) {\\n            LotteryRound previousLotteryRound = LotteryRound(previousRoundAddress);\\n            id = previousLotteryRound.getRound().id + 1;\\n            propagateWinningFromPreviousRound();\\n        }\\n        round = Round({\\n            id: id,\\n            startTime: block.timestamp,\\n            endTime: block.timestamp + roundDurationInSeconds,\\n            ended : false,\\n            roundNumbers: new uint16[](0),\\n            referralWinnersNumber: new uint256[](0),\\n            referralWinnersNumberCount : 0,\\n            ticketIds : new uint256[](0),\\n            ticketsCount : 0,\\n            referralTicketIds : new uint256[](0),\\n            referralCounts : 0\\n        });\\n    }\\n\\n    function propagateWinningFromPreviousRound() internal {\\n        LotteryRound previousLotteryRound = LotteryRound(previousRound);\\n        updateVictoryPoolForTicket(previousLotteryRound.totalVictoryPool() - previousLotteryRound.totalClaimed());\\n    }\\n\\n    function numberIsInRangeForRound(uint256 number) public pure returns (bool) {\\n        return number > 0 && number <= 69;\\n    }\\n\\n    function numberIsInRangeForPowerNumber(uint256 number) public pure returns (bool) {\\n        return number > 0 && number <= 26;\\n    }\\n\\n    function validateBuyTicket(uint16[] memory numbers, address referral) public view onlyOwner {\\n        require(tx.origin != address(0), \\\"Invalid sender\\\");\\n        require(block.timestamp < round.endTime, \\\"Round is over\\\");\\n        require(numbers.length == 6, \\\"Invalid numbers count\\\");\\n        for (uint i = 0; i < numbers.length - 1; i++) {\\n            require(numberIsInRangeForRound(numbers[i]), \\\"Invalid numbers\\\");\\n        }\\n        require(numberIsInRangeForPowerNumber(numbers[5]), \\\"Invalid power number\\\");\\n        require(referral != tx.origin, \\\"Referral cannot be the same as the participant\\\");\\n    }\\n\\n    function percentageInBasisPoint(uint256 amount, uint256 basisPoint) public pure returns (uint256) {\\n        return amount * basisPoint / 10000;\\n    }\\n\\n    function treasuryAmountOnTicket(uint256 paymentTokenAmount) public view returns (uint256) {\\n        return percentageInBasisPoint(paymentTokenAmount, poolPercentagesBasePoints[8]);\\n    }\\n\\n    function updateVictoryPoolForTicket(uint256 paymentTokenAmount) public onlyOwner {\\n        totalVictoryPool += paymentTokenAmount - percentageInBasisPoint(paymentTokenAmount, poolPercentagesBasePoints[uint(RoundVictoryTier.TokenHolders)]) -\\n                        percentageInBasisPoint(paymentTokenAmount, poolPercentagesBasePoints[uint(RoundVictoryTier.Treasury)]);\\n        for(uint i = 0; i < 9; i++) {\\n            victoryTierAmounts[RoundVictoryTier(i)] += percentageInBasisPoint(paymentTokenAmount, poolPercentagesBasePoints[i]);\\n        }\\n    }\\n\\n    function buyTicket(uint256 chainId, uint16[] memory chosenNumbers, address referral, address buyer) public onlyOwner {\\n        validateBuyTicket(chosenNumbers, referral);\\n\\n        uint256 ticketId = tickets.length;\\n        tickets.push(Ticket({\\n            id: ticketId,\\n            participantAddress: buyer,\\n            referralAddress: referral,\\n            claimed: false,\\n            chainId: chainId,\\n            victoryTier: RoundVictoryTier.NO_WIN\\n        }));\\n        for(uint i = 0; i < chosenNumbers.length; i++) {\\n            ticketNumbers[ticketId].push(chosenNumbers[i]);\\n        }\\n        round.ticketIds.push(ticketId);\\n        round.ticketsCount++;\\n\\n        roundTicketsByAddress[buyer].push(tickets.length - 1);\\n        roundTicketsByAddressCount[buyer]++;\\n        if (referral != address(0)) {\\n            uint256 referralTicketId = referralTickets.length;\\n            round.referralTicketIds.push(referralTicketId);\\n            round.referralCounts++;\\n            referralTickets.push(ReferralTicket({\\n                id: referralTicketId,\\n                buyerAddress: buyer,\\n                referralAddress: referral,\\n                referralTicketNumber: uint16(round.referralCounts),\\n                winner: false,\\n                claimed: false\\n            }));\\n\\n            roundReferralTicketsByAddress[referral].push(referralTickets.length - 1);\\n            roundReferralTicketsByAddressCount[referral]++;\\n        }\\n    }\\n\\n    function closeRound() public onlyOwner {\\n        require(block.timestamp >= round.endTime, \\\"Round is not over yet\\\");\\n        round.ended = true;\\n    }\\n\\n    function couldReceiveWinningNumbers() public view {\\n        require(block.timestamp >= round.endTime, \\\"Round is not over yet\\\");\\n        require(round.roundNumbers.length == 0, \\\"Winning numbers already set\\\");\\n    }\\n\\n    function storeWinningNumbers(uint16[] memory roundNumbers, uint16[] memory referralWinnersNumber) public onlyOwner {\\n        round.roundNumbers = roundNumbers;\\n        round.referralWinnersNumber = referralWinnersNumber;\\n        round.referralWinnersNumberCount = uint16(referralWinnersNumber.length);\\n    }\\n\\n    function markWinners(TicketResults[] memory ticketResults, ReferralTicketResults[] memory referralTicketResults) public onlyOwner {\\n        for (uint i = 0; i < ticketResults.length; i++) {\\n            TicketResults memory ticketResult = ticketResults[i];\\n            Ticket storage ticket = tickets[ticketResult.ticketId];\\n            ticket.victoryTier = ticketResult.victoryTier;\\n            winnersForEachTier[ticketResult.victoryTier]++;\\n        }\\n        for (uint i = 0; i < referralTicketResults.length; i++) {\\n            ReferralTicketResults memory referralTicketResult = referralTicketResults[i];\\n            ReferralTicket storage referralTicket = referralTickets[referralTicketResult.referralTicketId];\\n            referralTicket.winner = referralTicketResult.won;\\n            if (referralTicketResult.won) {\\n                winnersForEachTier[RoundVictoryTier.Referrer]++;\\n            }\\n        }\\n    }\\n\\n    function markVictoryClaimed(TicketResults[] memory ticketResults, ReferralTicketResults[] memory referralTicketResults) public onlyOwner {\\n        for(uint i = 0; i < ticketResults.length; i++) {\\n            TicketResults memory ticketResult = ticketResults[i];\\n            Ticket storage ticket = tickets[ticketResult.ticketId];\\n            ticket.claimed = true;\\n            victoryTierAmountsClaimed[ticketResult.victoryTier] += ticketResult.amountWon;\\n            totalClaimed += ticketResult.amountWon;\\n        }\\n        for(uint i = 0; i < referralTicketResults.length; i++) {\\n            ReferralTicketResults memory referralTicketResult = referralTicketResults[i];\\n            ReferralTicket storage referralTicket = referralTickets[referralTicketResult.referralTicketId];\\n            referralTicket.claimed = true;\\n            victoryTierAmountsClaimed[RoundVictoryTier.Referrer] += referralTicketResult.amountWon;\\n            totalClaimed += referralTicketResult.amountWon;\\n        }\\n    }\\n\\n    function markReferralVictoryClaimed(uint256 referralTicketId, uint256 amountClaimed) public onlyOwner {\\n        ReferralTicket storage referralTicket = referralTickets[referralTicketId];\\n        referralTicket.claimed = true;\\n        victoryTierAmountsClaimed[RoundVictoryTier.Referrer] += amountClaimed;\\n    }\\n}\",\"keccak256\":\"0xd2c4b725a507465a3279311ca4603278d56f8dfde7a2f493be354016636d96e6\",\"license\":\"UNLICENSED\"},\"contracts/LotteryRoundCreatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\ninterface LotteryRoundCreatorInterface {\\n   function startNewRound(uint256 roundDurationInSeconds, address previousRoundAddress) external returns(address);\\n}\",\"keccak256\":\"0x758edc675f9d3b6e91d052e64cf4ea0495d6639542acf1d41ddb2a4c825a392a\",\"license\":\"UNLICENSED\"},\"contracts/LotteryRoundInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\n\\ninterface LotteryRoundInterface {\\n    function getRound() external returns(Round memory);\\n    function markWinners(TicketResults[] memory ticketResults, ReferralTicketResults[] memory referralTicketResults) external;\\n    function markVictoryClaimed(TicketResults[] memory ticketResults, ReferralTicketResults[] memory referralTicketResults) external;\\n    function markReferralVictoryClaimed(uint256 referralTicketId, uint256 amountClaimed) external;\\n    function treasuryAmountOnTicket(uint256 paymentTokenAmount) external view returns (uint256);\\n    function updateVictoryPoolForTicket(uint256 paymentTokenAmount) external;\\n    function buyTicket(uint256 chainId, uint16[] memory chosenNumbers, address referral, address buyer) external;\\n    function closeRound() external;\\n    function couldReceiveWinningNumbers() external view;\\n    function storeWinningNumbers(uint16[] memory roundNumbers, uint16[] memory referralWinnersNumber) external;\\n    function ticketById(uint256 ticketId) external view returns (Ticket memory);\\n    function numbersForTicketId(uint256 ticketId) external view returns (uint16[] memory);\\n    function referralTicketById(uint256 index) external view returns (ReferralTicket memory);\\n    function setPoolPercentagesBasePoints(uint16[] memory _poolPercentagesBasePoints) external;\\n}\",\"keccak256\":\"0x5910a9ac432e27e783c9f6b5f9c595fa03d7be09a908e1d13376a76315c90e1e\",\"license\":\"UNLICENSED\"},\"contracts/utils/EmergencyFunctions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract EmergencyFunctions is Ownable {\\n    address internal teamAddress;\\n    constructor(address _teamAddress) Ownable(_teamAddress) {\\n        teamAddress = _teamAddress;\\n    }\\n\\n    function updateTeamAddress(address _teamAddress) public onlyOwner {\\n        teamAddress = _teamAddress;\\n    }\\n\\n    // Emergency Functions\\n    function sendTokenToTeam(address _token) public onlyOwner {\\n        uint256 amount = IERC20(_token).balanceOf(address(this));\\n        if (amount > 0) {\\n            SafeERC20.safeTransfer(IERC20(_token), teamAddress, amount);\\n        }\\n    }\\n\\n    function sendCryptoToTeam() public onlyOwner {\\n        if (address(this).balance > 0) {\\n            payable(teamAddress).transfer(address(this).balance);\\n        }\\n    }\\n\\n    /** @notice Check if an address is a contract */\\n    function _isContract(address _addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x68dcc6a4104e2905f65c342fdb2dbde1908113d10c006f5857b52dc0bbefd419\",\"license\":\"MIT\"},\"contracts/utils/TestUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.x <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IERC20Extension {\\n    function decimals() external view returns (uint8);\\n}\\n\\ncontract TestFunctions is Ownable {\\n    constructor() Ownable(msg.sender) {}\\n    //Used for mock testing, contract ownership will be renounced on release\\n    uint public currentTimestampOverride;\\n    function updateCurrentTimestampOverride(uint _v) external onlyOwner {\\n        currentTimestampOverride = _v;\\n    }\\n    function currentTimestamp() public view returns(uint) {\\n        if (currentTimestampOverride > 0) {\\n            return currentTimestampOverride;\\n        }\\n        return block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x8edb22ef91efc1d38ffbd50b48821f4fe23bdaf84a14de75d0df8231eb772bc4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b503280600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000895760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000809190620001ec565b60405180910390fd5b6200009a81620000e360201b60201c565b5080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000209565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001d482620001a7565b9050919050565b620001e681620001c7565b82525050565b6000602082019050620002036000830184620001db565b92915050565b614e9d80620002196000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80638285cc5a11610104578063b7991e33116100a2578063eed2589611610071578063eed2589614610613578063f1664df614610643578063f2fde38b14610673578063fdfe81851461068f576101da565b8063b7991e3314610579578063bbd1783a146105a9578063caac49a7146105b3578063e34208e6146105e3576101da565b8063998da3e9116100de578063998da3e9146104cd5780639f75e5c9146104e9578063a521dc9514610519578063a65d31b914610549576101da565b80638285cc5a1461044f5780638da5cb5b1461047f5780638e0e3fcd1461049d576101da565b806348b2e35c1161017c5780635dc9dbe81161014b5780635dc9dbe8146103c757806361ab0c89146103e557806368525a4e14610415578063715018a614610445576101da565b806348b2e35c1461030757806349a0a1f6146103375780634e00b9d31461036757806359103c1214610397576101da565b806322bd49a8116101b857806322bd49a81461025b578063283b7f28146102775780632f877497146102a75780633c73b4c4146102d7576101da565b80630c746a8a146101df57806314eb76ac1461020f57806317ba3b7d1461022b575b600080fd5b6101f960048036038101906101f491906137d5565b6106bf565b6040516102069190613853565b60405180910390f35b610229600480360381019061022491906138cc565b61076b565b005b610245600480360381019061024091906138f9565b6107b7565b6040516102529190613aaf565b60405180910390f35b610275600480360381019061027091906138cc565b6109b2565b005b610291600480360381019061028c9190613ad1565b6109fe565b60405161029e9190613bad565b60405180910390f35b6102c160048036038101906102bc9190613ad1565b610b2c565b6040516102ce9190613d70565b60405180910390f35b6102f160048036038101906102ec9190613ad1565b610d96565b6040516102fe9190613da1565b60405180910390f35b610321600480360381019061031c9190613ad1565b61114f565b60405161032e9190613aaf565b60405180910390f35b610351600480360381019061034c9190613ad1565b611587565b60405161035e9190613da1565b60405180910390f35b610381600480360381019061037c9190613dbc565b6116b2565b60405161038e9190613e27565b60405180910390f35b6103b160048036038101906103ac9190613dbc565b6116cc565b6040516103be9190613e27565b60405180910390f35b6103cf611729565b6040516103dc9190613ea1565b60405180910390f35b6103ff60048036038101906103fa9190613ad1565b61174f565b60405161040c9190613da1565b60405180910390f35b61042f600480360381019061042a9190613ad1565b61187a565b60405161043c9190613da1565b60405180910390f35b61044d6119a5565b005b61046960048036038101906104649190613f7f565b6119b9565b6040516104769190613e27565b60405180910390f35b610487611a0e565b6040516104949190613fea565b60405180910390f35b6104b760048036038101906104b2919061402a565b611a37565b6040516104c49190613da1565b60405180910390f35b6104e760048036038101906104e291906138cc565b611cb3565b005b61050360048036038101906104fe9190613ad1565b611d74565b6040516105109190614194565b60405180910390f35b610533600480360381019061052e91906141e2565b61231c565b6040516105409190613da1565b60405180910390f35b610563600480360381019061055e9190613ad1565b6123ad565b604051610570919061435f565b60405180910390f35b610593600480360381019061058e91906141e2565b612617565b6040516105a09190613da1565b60405180910390f35b6105b16126a8565b005b6105cd60048036038101906105c89190613ad1565b612725565b6040516105da919061443f565b60405180910390f35b6105fd60048036038101906105f89190614461565b6129d3565b60405161060a91906144b0565b60405180910390f35b61062d600480360381019061062891906138f9565b612a7c565b60405161063a9190614194565b60405180910390f35b61065d60048036038101906106589190613ad1565b612c77565b60405161066a9190613853565b60405180910390f35b61068d600480360381019061068891906138cc565b612e79565b005b6106a960048036038101906106a49190613ad1565b612eff565b6040516106b6919061443f565b60405180910390f35b60008060018461ffff16866106d491906144fa565b6106de919061455a565b90506000806106ed83866116cc565b90505b801561075e5760018661ffff16848460405160200161071092919061458e565b6040516020818303038152906040528051906020012060001c61073391906144fa565b61073d919061455a565b925061074983866116cc565b90508180610756906145b7565b9250506106f0565b8293505050509392505050565b61077361302d565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606060006107c48461114f565b9050600080825167ffffffffffffffff8111156107e4576107e3613692565b5b60405190808252806020026020018201604052801561081d57816020015b61080a61344d565b8152602001906001900390816108025790505b50905060005b83518110156108fa578573ffffffffffffffffffffffffffffffffffffffff16848281518110610856576108556145e1565b5b60200260200101516040015173ffffffffffffffffffffffffffffffffffffffff161480156108a05750838181518110610893576108926145e1565b5b6020026020010151608001515b156108ed578381815181106108b8576108b76145e1565b5b60200260200101518284815181106108d3576108d26145e1565b5b602002602001018190525082806108e990614610565b9350505b8080600101915050610823565b5060008267ffffffffffffffff81111561091757610916613692565b5b60405190808252806020026020018201604052801561095057816020015b61093d61344d565b8152602001906001900390816109355790505b50905060005b838110156109a457828181518110610971576109706145e1565b5b602002602001015182828151811061098c5761098b6145e1565b5b60200260200101819052508080600101915050610956565b508094505050505092915050565b6109ba61302d565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600185610a4d9190614658565b6040518263ffffffff1660e01b8152600401610a699190613da1565b602060405180830381865afa158015610a86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aaa91906146a1565b73ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa158015610af4573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610b1d91906149c1565b90508060a00151915050919050565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600185610b7b9190614658565b6040518263ffffffff1660e01b8152600401610b979190613da1565b602060405180830381865afa158015610bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd891906146a1565b905060008173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa158015610c27573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610c5091906149c1565b9050600081610100015161ffff1667ffffffffffffffff811115610c7757610c76613692565b5b604051908082528060200260200182016040528015610cb057816020015b610c9d6134ba565b815260200190600190039081610c955790505b50905060005b82610100015161ffff16811015610d8a578373ffffffffffffffffffffffffffffffffffffffff16639b7be8fc8460e001518381518110610cfa57610cf96145e1565b5b60200260200101516040518263ffffffff1660e01b8152600401610d1e9190613da1565b60c060405180830381865afa158015610d3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5f9190614abf565b828281518110610d7257610d716145e1565b5b60200260200101819052508080600101915050610cb6565b50809350505050919050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600185610de49190614658565b6040518263ffffffff1660e01b8152600401610e009190613da1565b602060405180830381865afa158015610e1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4191906146a1565b9050600080610e4f85611d74565b90506000610e5c8661114f565b90506000600667ffffffffffffffff811115610e7b57610e7a613692565b5b604051908082528060200260200182016040528015610ea95781602001602082028036833780820191505090505b50905060005b83518161ffff161015610fcb57600980811115610ecf57610ece613bfb565b5b848261ffff1681518110610ee657610ee56145e1565b5b6020026020010151604001516009811115610f0457610f03613bfb565b5b14610fb857600182858361ffff1681518110610f2357610f226145e1565b5b6020026020010151604001516009811115610f4157610f40613bfb565b5b81518110610f5257610f516145e1565b5b6020026020010151610f64919061455a565b82858361ffff1681518110610f7c57610f7b6145e1565b5b6020026020010151604001516009811115610f9a57610f99613bfb565b5b81518110610fab57610faa6145e1565b5b6020026020010181815250505b8080610fc3906145b7565b915050610eaf565b5060005b60068161ffff1610156110ae576000828261ffff1681518110610ff557610ff46145e1565b5b602002602001015111156110a1578573ffffffffffffffffffffffffffffffffffffffff1663e2e308308261ffff16600981111561103657611035613bfb565b5b6040518263ffffffff1660e01b815260040161105291906144b0565b602060405180830381865afa15801561106f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110939190614aec565b8561109e919061455a565b94505b8080600101915050610fcf565b50600082511115611142578473ffffffffffffffffffffffffffffffffffffffff1663e2e3083060066040518263ffffffff1660e01b81526004016110f391906144b0565b602060405180830381865afa158015611110573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111349190614aec565b8461113f919061455a565b93505b8395505050505050919050565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f60018561119e9190614658565b6040518263ffffffff1660e01b81526004016111ba9190613da1565b602060405180830381865afa1580156111d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fb91906146a1565b905060008173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa15801561124a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061127391906149c1565b9050600081610140015161ffff1667ffffffffffffffff81111561129a57611299613692565b5b6040519080825280602002602001820160405280156112d357816020015b6112c061344d565b8152602001906001900390816112b85790505b5090506000805b83610140015161ffff168161ffff16101561157a5760008573ffffffffffffffffffffffffffffffffffffffff1663dd85ae5f8661012001518461ffff1681518110611329576113286145e1565b5b60200260200101516040518263ffffffff1660e01b815260040161134d9190613da1565b60c060405180830381865afa15801561136a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138e9190614bb9565b905060006113a482606001518760a001516119b9565b9050600081801561142f575060008873ffffffffffffffffffffffffffffffffffffffff1663efa3d53160066040518263ffffffff1660e01b81526004016113ec91906144b0565b602060405180830381865afa158015611409573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142d9190614aec565b115b156114c5578773ffffffffffffffffffffffffffffffffffffffff1663efa3d53160066040518263ffffffff1660e01b815260040161146e91906144b0565b602060405180830381865afa15801561148b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114af9190614aec565b6114b88b61187a565b6114c29190614be6565b90505b6040518060e0016040528084600001518152602001846020015173ffffffffffffffffffffffffffffffffffffffff168152602001846040015173ffffffffffffffffffffffffffffffffffffffff1681526020018460600151815260200183151581526020018460a001511515815260200182815250868680611548906145b7565b975061ffff168151811061155f5761155e6145e1565b5b602002602001018190525050505080806001019150506112da565b5081945050505050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f6001846115d49190614658565b6040518263ffffffff1660e01b81526004016115f09190613da1565b602060405180830381865afa15801561160d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163191906146a1565b73ffffffffffffffffffffffffffffffffffffffff1663e2e3083060076040518263ffffffff1660e01b815260040161166a91906144b0565b602060405180830381865afa158015611687573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ab9190614aec565b9050919050565b60008015156116c184846116cc565b151514905092915050565b600080600090505b825181101561171d578361ffff168382815181106116f5576116f46145e1565b5b602002602001015161ffff1603611710576001915050611723565b80806001019150506116d4565b50600090505b92915050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f60018461179c9190614658565b6040518263ffffffff1660e01b81526004016117b89190613da1565b602060405180830381865afa1580156117d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f991906146a1565b73ffffffffffffffffffffffffffffffffffffffff1663e2e3083060086040518263ffffffff1660e01b815260040161183291906144b0565b602060405180830381865afa15801561184f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118739190614aec565b9050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f6001846118c79190614658565b6040518263ffffffff1660e01b81526004016118e39190613da1565b602060405180830381865afa158015611900573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192491906146a1565b73ffffffffffffffffffffffffffffffffffffffff1663e2e3083060066040518263ffffffff1660e01b815260040161195d91906144b0565b602060405180830381865afa15801561197a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199e9190614aec565b9050919050565b6119ad61302d565b6119b760006130b4565b565b600080600090505b8251811015611a0257838382815181106119de576119dd6145e1565b5b6020026020010151036119f5576001915050611a08565b80806001019150506119c1565b50600090505b92915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000806009811115611a4c57611a4b613bfb565b5b826009811115611a5f57611a5e613bfb565b5b1480611a8f575060016009811115611a7a57611a79613bfb565b5b826009811115611a8d57611a8c613bfb565b5b145b80611abe575060026009811115611aa957611aa8613bfb565b5b826009811115611abc57611abb613bfb565b5b145b80611aed575060036009811115611ad857611ad7613bfb565b5b826009811115611aeb57611aea613bfb565b5b145b80611b1c575060046009811115611b0757611b06613bfb565b5b826009811115611b1a57611b19613bfb565b5b145b80611b4b575060056009811115611b3657611b35613bfb565b5b826009811115611b4957611b48613bfb565b5b145b611b8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b8190614c74565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600185611bd59190614658565b6040518263ffffffff1660e01b8152600401611bf19190613da1565b602060405180830381865afa158015611c0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c3291906146a1565b73ffffffffffffffffffffffffffffffffffffffff1663e2e30830836040518263ffffffff1660e01b8152600401611c6a91906144b0565b602060405180830381865afa158015611c87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cab9190614aec565b905092915050565b611cbb61302d565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611cf69190613fea565b602060405180830381865afa158015611d13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d379190614aec565b90506000811115611d7057611d6f82600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683613178565b5b5050565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600185611dc39190614658565b6040518263ffffffff1660e01b8152600401611ddf9190613da1565b602060405180830381865afa158015611dfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e2091906146a1565b905060008173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa158015611e6f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611e9891906149c1565b905060008161010001519050600082610100015161ffff1667ffffffffffffffff811115611ec957611ec8613692565b5b604051908082528060200260200182016040528015611f0257816020015b611eef613530565b815260200190600190039081611ee75790505b5090506000805b8361ffff168161ffff16101561230e5760008673ffffffffffffffffffffffffffffffffffffffff16639b7be8fc8760e001518461ffff1681518110611f5257611f516145e1565b5b60200260200101516040518263ffffffff1660e01b8152600401611f769190613da1565b60c060405180830381865afa158015611f93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fb79190614abf565b905060008773ffffffffffffffffffffffffffffffffffffffff1663598f3b9d83600001516040518263ffffffff1660e01b8152600401611ff89190613da1565b600060405180830381865afa158015612015573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061203e9190614c94565b90506000876080015160058151811061205a576120596145e1565b5b602002602001015161ffff168260058151811061207a576120796145e1565b5b602002602001015161ffff161490506000805b60058161ffff1610156120ed576000848261ffff16815181106120b3576120b26145e1565b5b602002602001015190506120cb818c608001516116cc565b156120df5782806120db906145b7565b9350505b50808060010191505061208d565b5060006120fa82846129d3565b9050600060098081111561211157612110613bfb565b5b82600981111561212457612123613bfb565b5b141580156121ab575060008c73ffffffffffffffffffffffffffffffffffffffff1663efa3d531846040518263ffffffff1660e01b815260040161216891906144b0565b602060405180830381865afa158015612185573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a99190614aec565b115b15612241578b73ffffffffffffffffffffffffffffffffffffffff1663efa3d531836040518263ffffffff1660e01b81526004016121e991906144b0565b602060405180830381865afa158015612206573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222a9190614aec565b6122348f84611a37565b61223e9190614be6565b90505b6040518060c0016040528087600001518152602001876020015173ffffffffffffffffffffffffffffffffffffffff16815260200183600981111561228957612288613bfb565b5b81526020016009808111156122a1576122a0613bfb565b5b8460098111156122b4576122b3613bfb565b5b141515158152602001876060015115158152602001828152508989806122d9906145b7565b9a5061ffff16815181106122f0576122ef6145e1565b5b60200260200101819052505050505050508080600101915050611f09565b508195505050505050919050565b60008060009050600061232f86866107b7565b905060005b81518110156123a057841515828281518110612353576123526145e1565b5b602002602001015160a0015115150361239357818181518110612379576123786145e1565b5b602002602001015160c0015183612390919061455a565b92505b8080600101915050612334565b5081925050509392505050565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f6001856123fc9190614658565b6040518263ffffffff1660e01b81526004016124189190613da1565b602060405180830381865afa158015612435573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245991906146a1565b905060008173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa1580156124a8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906124d191906149c1565b9050600081610140015161ffff1667ffffffffffffffff8111156124f8576124f7613692565b5b60405190808252806020026020018201604052801561253157816020015b61251e613592565b8152602001906001900390816125165790505b50905060005b82610140015161ffff1681101561260b578373ffffffffffffffffffffffffffffffffffffffff1663dd85ae5f8460e00151838151811061257b5761257a6145e1565b5b60200260200101516040518263ffffffff1660e01b815260040161259f9190613da1565b60c060405180830381865afa1580156125bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e09190614bb9565b8282815181106125f3576125f26145e1565b5b60200260200101819052508080600101915050612537565b50809350505050919050565b60008060009050600061262a8686612a7c565b905060005b815181101561269b5784151582828151811061264e5761264d6145e1565b5b60200260200101516080015115150361268e57818181518110612674576126736145e1565b5b602002602001015160a001518361268b919061455a565b92505b808060010191505061262f565b5081925050509392505050565b6126b061302d565b600047111561272357600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015612721573d6000803e3d6000fd5b505b565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f6001856127749190614658565b6040518263ffffffff1660e01b81526004016127909190613da1565b602060405180830381865afa1580156127ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127d191906146a1565b905060008173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa158015612820573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061284991906149c1565b90506000600682610100015161285f9190614cdd565b61ffff1667ffffffffffffffff81111561287c5761287b613692565b5b6040519080825280602002602001820160405280156128aa5781602001602082028036833780820191505090505b50905060005b82610100015161ffff168110156129c75760008473ffffffffffffffffffffffffffffffffffffffff1663598f3b9d836040518263ffffffff1660e01b81526004016128fc9190613da1565b600060405180830381865afa158015612919573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906129429190614c94565b905060005b81518110156129b857818181518110612963576129626145e1565b5b6020026020010151848260068661297a9190614d1a565b612984919061455a565b81518110612995576129946145e1565b5b602002602001019061ffff16908161ffff16815250508080600101915050612947565b505080806001019150506128b0565b50809350505050919050565b600060058361ffff161480156129e65750815b156129f45760009050612a76565b60058361ffff1603612a095760019050612a76565b60048361ffff16148015612a1a5750815b15612a285760029050612a76565b60048361ffff1603612a3d5760039050612a76565b60038361ffff16148015612a4e5750815b15612a5c5760049050612a76565b60038361ffff1603612a715760059050612a76565b600990505b92915050565b60606000612a8984611d74565b9050600080825167ffffffffffffffff811115612aa957612aa8613692565b5b604051908082528060200260200182016040528015612ae257816020015b612acf613530565b815260200190600190039081612ac75790505b50905060005b8351811015612bbf578573ffffffffffffffffffffffffffffffffffffffff16848281518110612b1b57612b1a6145e1565b5b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff16148015612b655750838181518110612b5857612b576145e1565b5b6020026020010151606001515b15612bb257838181518110612b7d57612b7c6145e1565b5b6020026020010151828481518110612b9857612b976145e1565b5b60200260200101819052508280612bae90614610565b9350505b8080600101915050612ae8565b5060008267ffffffffffffffff811115612bdc57612bdb613692565b5b604051908082528060200260200182016040528015612c1557816020015b612c02613530565b815260200190600190039081612bfa5790505b50905060005b83811015612c6957828181518110612c3657612c356145e1565b5b6020026020010151828281518110612c5157612c506145e1565b5b60200260200101819052508080600101915050612c1b565b508094505050505092915050565b600080600090506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600186612ccb9190614658565b6040518263ffffffff1660e01b8152600401612ce79190613da1565b602060405180830381865afa158015612d04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d2891906146a1565b73ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa158015612d72573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612d9b91906149c1565b61014001519050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f4dec22b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e339190614d5c565b61ffff168161ffff1681612e4a57612e496144cb565b5b04915060008261ffff16148015612e65575060008161ffff16115b15612e6f57600191505b8192505050919050565b612e8161302d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612ef35760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401612eea9190613fea565b60405180910390fd5b612efc816130b4565b50565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600185612f4e9190614658565b6040518263ffffffff1660e01b8152600401612f6a9190613da1565b602060405180830381865afa158015612f87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fab91906146a1565b73ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa158015612ff5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061301e91906149c1565b90508060800151915050919050565b6130356131f7565b73ffffffffffffffffffffffffffffffffffffffff16613053611a0e565b73ffffffffffffffffffffffffffffffffffffffff16146130b2576130766131f7565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016130a99190613fea565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6131f2838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040516024016131ab929190614d89565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506131ff565b505050565b600033905090565b600061322a828473ffffffffffffffffffffffffffffffffffffffff1661329690919063ffffffff16565b9050600081511415801561324f57508080602001905181019061324d9190614db2565b155b1561329157826040517f5274afe70000000000000000000000000000000000000000000000000000000081526004016132889190613fea565b60405180910390fd5b505050565b60606132a4838360006132ac565b905092915050565b6060814710156132f357306040517fcd7860590000000000000000000000000000000000000000000000000000000081526004016132ea9190613fea565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff16848660405161331c9190614e50565b60006040518083038185875af1925050503d8060008114613359576040519150601f19603f3d011682016040523d82523d6000602084013e61335e565b606091505b509150915061336e868383613379565b925050509392505050565b60608261338e5761338982613408565b613400565b600082511480156133b6575060008473ffffffffffffffffffffffffffffffffffffffff163b145b156133f857836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016133ef9190613fea565b60405180910390fd5b819050613401565b5b9392505050565b60008151111561341b5780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518060e0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600015158152602001600015158152602001600081525090565b6040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001600081526020016000600981111561352a57613529613bfb565b5b81525090565b6040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000600981111561357357613572613bfb565b5b8152602001600015158152602001600015158152602001600081525090565b6040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581526020016000151581525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61361f8161360c565b811461362a57600080fd5b50565b60008135905061363c81613616565b92915050565b600061ffff82169050919050565b61365981613642565b811461366457600080fd5b50565b60008135905061367681613650565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6136ca82613681565b810181811067ffffffffffffffff821117156136e9576136e8613692565b5b80604052505050565b60006136fc6135f8565b905061370882826136c1565b919050565b600067ffffffffffffffff82111561372857613727613692565b5b602082029050602081019050919050565b600080fd5b600061375161374c8461370d565b6136f2565b9050808382526020820190506020840283018581111561377457613773613739565b5b835b8181101561379d57806137898882613667565b845260208401935050602081019050613776565b5050509392505050565b600082601f8301126137bc576137bb61367c565b5b81356137cc84826020860161373e565b91505092915050565b6000806000606084860312156137ee576137ed613602565b5b60006137fc8682870161362d565b935050602061380d86828701613667565b925050604084013567ffffffffffffffff81111561382e5761382d613607565b5b61383a868287016137a7565b9150509250925092565b61384d81613642565b82525050565b60006020820190506138686000830184613844565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006138998261386e565b9050919050565b6138a98161388e565b81146138b457600080fd5b50565b6000813590506138c6816138a0565b92915050565b6000602082840312156138e2576138e1613602565b5b60006138f0848285016138b7565b91505092915050565b600080604083850312156139105761390f613602565b5b600061391e8582860161362d565b925050602061392f858286016138b7565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61396e8161360c565b82525050565b61397d8161388e565b82525050565b60008115159050919050565b61399881613983565b82525050565b60e0820160008201516139b46000850182613965565b5060208201516139c76020850182613974565b5060408201516139da6040850182613974565b5060608201516139ed6060850182613965565b506080820151613a00608085018261398f565b5060a0820151613a1360a085018261398f565b5060c0820151613a2660c0850182613965565b50505050565b6000613a38838361399e565b60e08301905092915050565b6000602082019050919050565b6000613a5c82613939565b613a668185613944565b9350613a7183613955565b8060005b83811015613aa2578151613a898882613a2c565b9750613a9483613a44565b925050600181019050613a75565b5085935050505092915050565b60006020820190508181036000830152613ac98184613a51565b905092915050565b600060208284031215613ae757613ae6613602565b5b6000613af58482850161362d565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000613b368383613965565b60208301905092915050565b6000602082019050919050565b6000613b5a82613afe565b613b648185613b09565b9350613b6f83613b1a565b8060005b83811015613ba0578151613b878882613b2a565b9750613b9283613b42565b925050600181019050613b73565b5085935050505092915050565b60006020820190508181036000830152613bc78184613b4f565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600a8110613c3b57613c3a613bfb565b5b50565b6000819050613c4c82613c2a565b919050565b6000613c5c82613c3e565b9050919050565b613c6c81613c51565b82525050565b60c082016000820151613c886000850182613965565b506020820151613c9b6020850182613974565b506040820151613cae6040850182613974565b506060820151613cc1606085018261398f565b506080820151613cd46080850182613965565b5060a0820151613ce760a0850182613c63565b50505050565b6000613cf98383613c72565b60c08301905092915050565b6000602082019050919050565b6000613d1d82613bcf565b613d278185613bda565b9350613d3283613beb565b8060005b83811015613d63578151613d4a8882613ced565b9750613d5583613d05565b925050600181019050613d36565b5085935050505092915050565b60006020820190508181036000830152613d8a8184613d12565b905092915050565b613d9b8161360c565b82525050565b6000602082019050613db66000830184613d92565b92915050565b60008060408385031215613dd357613dd2613602565b5b6000613de185828601613667565b925050602083013567ffffffffffffffff811115613e0257613e01613607565b5b613e0e858286016137a7565b9150509250929050565b613e2181613983565b82525050565b6000602082019050613e3c6000830184613e18565b92915050565b6000819050919050565b6000613e67613e62613e5d8461386e565b613e42565b61386e565b9050919050565b6000613e7982613e4c565b9050919050565b6000613e8b82613e6e565b9050919050565b613e9b81613e80565b82525050565b6000602082019050613eb66000830184613e92565b92915050565b600067ffffffffffffffff821115613ed757613ed6613692565b5b602082029050602081019050919050565b6000613efb613ef684613ebc565b6136f2565b90508083825260208201905060208402830185811115613f1e57613f1d613739565b5b835b81811015613f475780613f33888261362d565b845260208401935050602081019050613f20565b5050509392505050565b600082601f830112613f6657613f6561367c565b5b8135613f76848260208601613ee8565b91505092915050565b60008060408385031215613f9657613f95613602565b5b6000613fa48582860161362d565b925050602083013567ffffffffffffffff811115613fc557613fc4613607565b5b613fd185828601613f51565b9150509250929050565b613fe48161388e565b82525050565b6000602082019050613fff6000830184613fdb565b92915050565b600a811061401257600080fd5b50565b60008135905061402481614005565b92915050565b6000806040838503121561404157614040613602565b5b600061404f8582860161362d565b925050602061406085828601614015565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60c0820160008201516140ac6000850182613965565b5060208201516140bf6020850182613974565b5060408201516140d26040850182613c63565b5060608201516140e5606085018261398f565b5060808201516140f8608085018261398f565b5060a082015161410b60a0850182613965565b50505050565b600061411d8383614096565b60c08301905092915050565b6000602082019050919050565b60006141418261406a565b61414b8185614075565b935061415683614086565b8060005b8381101561418757815161416e8882614111565b975061417983614129565b92505060018101905061415a565b5085935050505092915050565b600060208201905081810360008301526141ae8184614136565b905092915050565b6141bf81613983565b81146141ca57600080fd5b50565b6000813590506141dc816141b6565b92915050565b6000806000606084860312156141fb576141fa613602565b5b60006142098682870161362d565b935050602061421a868287016138b7565b925050604061422b868287016141cd565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60c0820160008201516142776000850182613965565b50602082015161428a6020850182613974565b50604082015161429d6040850182613974565b5060608201516142b06060850182613965565b5060808201516142c3608085018261398f565b5060a08201516142d660a085018261398f565b50505050565b60006142e88383614261565b60c08301905092915050565b6000602082019050919050565b600061430c82614235565b6143168185614240565b935061432183614251565b8060005b8381101561435257815161433988826142dc565b9750614344836142f4565b925050600181019050614325565b5085935050505092915050565b600060208201905081810360008301526143798184614301565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6143b681613642565b82525050565b60006143c883836143ad565b60208301905092915050565b6000602082019050919050565b60006143ec82614381565b6143f6818561438c565b93506144018361439d565b8060005b8381101561443257815161441988826143bc565b9750614424836143d4565b925050600181019050614405565b5085935050505092915050565b6000602082019050818103600083015261445981846143e1565b905092915050565b6000806040838503121561447857614477613602565b5b600061448685828601613667565b9250506020614497858286016141cd565b9150509250929050565b6144aa81613c51565b82525050565b60006020820190506144c560008301846144a1565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006145058261360c565b91506145108361360c565b9250826145205761451f6144cb565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006145658261360c565b91506145708361360c565b92508282019050808211156145885761458761452b565b5b92915050565b60006040820190506145a36000830185613844565b6145b06020830184613844565b9392505050565b60006145c282613642565b915061ffff82036145d6576145d561452b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061461b8261360c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361464d5761464c61452b565b5b600182019050919050565b60006146638261360c565b915061466e8361360c565b92508282039050818111156146865761468561452b565b5b92915050565b60008151905061469b816138a0565b92915050565b6000602082840312156146b7576146b6613602565b5b60006146c58482850161468c565b91505092915050565b600080fd5b600080fd5b6000815190506146e781613616565b92915050565b6000815190506146fc816141b6565b92915050565b60008151905061471181613650565b92915050565b600061472a6147258461370d565b6136f2565b9050808382526020820190506020840283018581111561474d5761474c613739565b5b835b8181101561477657806147628882614702565b84526020840193505060208101905061474f565b5050509392505050565b600082601f8301126147955761479461367c565b5b81516147a5848260208601614717565b91505092915050565b60006147c16147bc84613ebc565b6136f2565b905080838252602082019050602084028301858111156147e4576147e3613739565b5b835b8181101561480d57806147f988826146d8565b8452602084019350506020810190506147e6565b5050509392505050565b600082601f83011261482c5761482b61367c565b5b815161483c8482602086016147ae565b91505092915050565b6000610160828403121561485c5761485b6146ce565b5b6148676101606136f2565b90506000614877848285016146d8565b600083015250602061488b848285016146d8565b602083015250604061489f848285016146d8565b60408301525060606148b3848285016146ed565b606083015250608082015167ffffffffffffffff8111156148d7576148d66146d3565b5b6148e384828501614780565b60808301525060a082015167ffffffffffffffff811115614907576149066146d3565b5b61491384828501614817565b60a08301525060c061492784828501614702565b60c08301525060e082015167ffffffffffffffff81111561494b5761494a6146d3565b5b61495784828501614817565b60e08301525061010061496c84828501614702565b6101008301525061012082015167ffffffffffffffff811115614992576149916146d3565b5b61499e84828501614817565b610120830152506101406149b484828501614702565b6101408301525092915050565b6000602082840312156149d7576149d6613602565b5b600082015167ffffffffffffffff8111156149f5576149f4613607565b5b614a0184828501614845565b91505092915050565b600081519050614a1981614005565b92915050565b600060c08284031215614a3557614a346146ce565b5b614a3f60c06136f2565b90506000614a4f848285016146d8565b6000830152506020614a638482850161468c565b6020830152506040614a778482850161468c565b6040830152506060614a8b848285016146ed565b6060830152506080614a9f848285016146d8565b60808301525060a0614ab384828501614a0a565b60a08301525092915050565b600060c08284031215614ad557614ad4613602565b5b6000614ae384828501614a1f565b91505092915050565b600060208284031215614b0257614b01613602565b5b6000614b10848285016146d8565b91505092915050565b600060c08284031215614b2f57614b2e6146ce565b5b614b3960c06136f2565b90506000614b49848285016146d8565b6000830152506020614b5d8482850161468c565b6020830152506040614b718482850161468c565b6040830152506060614b85848285016146d8565b6060830152506080614b99848285016146ed565b60808301525060a0614bad848285016146ed565b60a08301525092915050565b600060c08284031215614bcf57614bce613602565b5b6000614bdd84828501614b19565b91505092915050565b6000614bf18261360c565b9150614bfc8361360c565b925082614c0c57614c0b6144cb565b5b828204905092915050565b600082825260208201905092915050565b7f496e76616c696420766963746f72792074696572000000000000000000000000600082015250565b6000614c5e601483614c17565b9150614c6982614c28565b602082019050919050565b60006020820190508181036000830152614c8d81614c51565b9050919050565b600060208284031215614caa57614ca9613602565b5b600082015167ffffffffffffffff811115614cc857614cc7613607565b5b614cd484828501614780565b91505092915050565b6000614ce882613642565b9150614cf383613642565b9250828202614d0181613642565b9150808214614d1357614d1261452b565b5b5092915050565b6000614d258261360c565b9150614d308361360c565b9250828202614d3e8161360c565b91508282048414831517614d5557614d5461452b565b5b5092915050565b600060208284031215614d7257614d71613602565b5b6000614d8084828501614702565b91505092915050565b6000604082019050614d9e6000830185613fdb565b614dab6020830184613d92565b9392505050565b600060208284031215614dc857614dc7613602565b5b6000614dd6848285016146ed565b91505092915050565b600081519050919050565b600081905092915050565b60005b83811015614e13578082015181840152602081019050614df8565b60008484015250505050565b6000614e2a82614ddf565b614e348185614dea565b9350614e44818560208601614df5565b80840191505092915050565b6000614e5c8284614e1f565b91508190509291505056fea2646970667358221220e0534d09567cc3b3a68760420717b79ffb6b6b5937f343d114dd4b5db3c020f764736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c80638285cc5a11610104578063b7991e33116100a2578063eed2589611610071578063eed2589614610613578063f1664df614610643578063f2fde38b14610673578063fdfe81851461068f576101da565b8063b7991e3314610579578063bbd1783a146105a9578063caac49a7146105b3578063e34208e6146105e3576101da565b8063998da3e9116100de578063998da3e9146104cd5780639f75e5c9146104e9578063a521dc9514610519578063a65d31b914610549576101da565b80638285cc5a1461044f5780638da5cb5b1461047f5780638e0e3fcd1461049d576101da565b806348b2e35c1161017c5780635dc9dbe81161014b5780635dc9dbe8146103c757806361ab0c89146103e557806368525a4e14610415578063715018a614610445576101da565b806348b2e35c1461030757806349a0a1f6146103375780634e00b9d31461036757806359103c1214610397576101da565b806322bd49a8116101b857806322bd49a81461025b578063283b7f28146102775780632f877497146102a75780633c73b4c4146102d7576101da565b80630c746a8a146101df57806314eb76ac1461020f57806317ba3b7d1461022b575b600080fd5b6101f960048036038101906101f491906137d5565b6106bf565b6040516102069190613853565b60405180910390f35b610229600480360381019061022491906138cc565b61076b565b005b610245600480360381019061024091906138f9565b6107b7565b6040516102529190613aaf565b60405180910390f35b610275600480360381019061027091906138cc565b6109b2565b005b610291600480360381019061028c9190613ad1565b6109fe565b60405161029e9190613bad565b60405180910390f35b6102c160048036038101906102bc9190613ad1565b610b2c565b6040516102ce9190613d70565b60405180910390f35b6102f160048036038101906102ec9190613ad1565b610d96565b6040516102fe9190613da1565b60405180910390f35b610321600480360381019061031c9190613ad1565b61114f565b60405161032e9190613aaf565b60405180910390f35b610351600480360381019061034c9190613ad1565b611587565b60405161035e9190613da1565b60405180910390f35b610381600480360381019061037c9190613dbc565b6116b2565b60405161038e9190613e27565b60405180910390f35b6103b160048036038101906103ac9190613dbc565b6116cc565b6040516103be9190613e27565b60405180910390f35b6103cf611729565b6040516103dc9190613ea1565b60405180910390f35b6103ff60048036038101906103fa9190613ad1565b61174f565b60405161040c9190613da1565b60405180910390f35b61042f600480360381019061042a9190613ad1565b61187a565b60405161043c9190613da1565b60405180910390f35b61044d6119a5565b005b61046960048036038101906104649190613f7f565b6119b9565b6040516104769190613e27565b60405180910390f35b610487611a0e565b6040516104949190613fea565b60405180910390f35b6104b760048036038101906104b2919061402a565b611a37565b6040516104c49190613da1565b60405180910390f35b6104e760048036038101906104e291906138cc565b611cb3565b005b61050360048036038101906104fe9190613ad1565b611d74565b6040516105109190614194565b60405180910390f35b610533600480360381019061052e91906141e2565b61231c565b6040516105409190613da1565b60405180910390f35b610563600480360381019061055e9190613ad1565b6123ad565b604051610570919061435f565b60405180910390f35b610593600480360381019061058e91906141e2565b612617565b6040516105a09190613da1565b60405180910390f35b6105b16126a8565b005b6105cd60048036038101906105c89190613ad1565b612725565b6040516105da919061443f565b60405180910390f35b6105fd60048036038101906105f89190614461565b6129d3565b60405161060a91906144b0565b60405180910390f35b61062d600480360381019061062891906138f9565b612a7c565b60405161063a9190614194565b60405180910390f35b61065d60048036038101906106589190613ad1565b612c77565b60405161066a9190613853565b60405180910390f35b61068d600480360381019061068891906138cc565b612e79565b005b6106a960048036038101906106a49190613ad1565b612eff565b6040516106b6919061443f565b60405180910390f35b60008060018461ffff16866106d491906144fa565b6106de919061455a565b90506000806106ed83866116cc565b90505b801561075e5760018661ffff16848460405160200161071092919061458e565b6040516020818303038152906040528051906020012060001c61073391906144fa565b61073d919061455a565b925061074983866116cc565b90508180610756906145b7565b9250506106f0565b8293505050509392505050565b61077361302d565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606060006107c48461114f565b9050600080825167ffffffffffffffff8111156107e4576107e3613692565b5b60405190808252806020026020018201604052801561081d57816020015b61080a61344d565b8152602001906001900390816108025790505b50905060005b83518110156108fa578573ffffffffffffffffffffffffffffffffffffffff16848281518110610856576108556145e1565b5b60200260200101516040015173ffffffffffffffffffffffffffffffffffffffff161480156108a05750838181518110610893576108926145e1565b5b6020026020010151608001515b156108ed578381815181106108b8576108b76145e1565b5b60200260200101518284815181106108d3576108d26145e1565b5b602002602001018190525082806108e990614610565b9350505b8080600101915050610823565b5060008267ffffffffffffffff81111561091757610916613692565b5b60405190808252806020026020018201604052801561095057816020015b61093d61344d565b8152602001906001900390816109355790505b50905060005b838110156109a457828181518110610971576109706145e1565b5b602002602001015182828151811061098c5761098b6145e1565b5b60200260200101819052508080600101915050610956565b508094505050505092915050565b6109ba61302d565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600185610a4d9190614658565b6040518263ffffffff1660e01b8152600401610a699190613da1565b602060405180830381865afa158015610a86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aaa91906146a1565b73ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa158015610af4573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610b1d91906149c1565b90508060a00151915050919050565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600185610b7b9190614658565b6040518263ffffffff1660e01b8152600401610b979190613da1565b602060405180830381865afa158015610bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd891906146a1565b905060008173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa158015610c27573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610c5091906149c1565b9050600081610100015161ffff1667ffffffffffffffff811115610c7757610c76613692565b5b604051908082528060200260200182016040528015610cb057816020015b610c9d6134ba565b815260200190600190039081610c955790505b50905060005b82610100015161ffff16811015610d8a578373ffffffffffffffffffffffffffffffffffffffff16639b7be8fc8460e001518381518110610cfa57610cf96145e1565b5b60200260200101516040518263ffffffff1660e01b8152600401610d1e9190613da1565b60c060405180830381865afa158015610d3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d5f9190614abf565b828281518110610d7257610d716145e1565b5b60200260200101819052508080600101915050610cb6565b50809350505050919050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600185610de49190614658565b6040518263ffffffff1660e01b8152600401610e009190613da1565b602060405180830381865afa158015610e1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4191906146a1565b9050600080610e4f85611d74565b90506000610e5c8661114f565b90506000600667ffffffffffffffff811115610e7b57610e7a613692565b5b604051908082528060200260200182016040528015610ea95781602001602082028036833780820191505090505b50905060005b83518161ffff161015610fcb57600980811115610ecf57610ece613bfb565b5b848261ffff1681518110610ee657610ee56145e1565b5b6020026020010151604001516009811115610f0457610f03613bfb565b5b14610fb857600182858361ffff1681518110610f2357610f226145e1565b5b6020026020010151604001516009811115610f4157610f40613bfb565b5b81518110610f5257610f516145e1565b5b6020026020010151610f64919061455a565b82858361ffff1681518110610f7c57610f7b6145e1565b5b6020026020010151604001516009811115610f9a57610f99613bfb565b5b81518110610fab57610faa6145e1565b5b6020026020010181815250505b8080610fc3906145b7565b915050610eaf565b5060005b60068161ffff1610156110ae576000828261ffff1681518110610ff557610ff46145e1565b5b602002602001015111156110a1578573ffffffffffffffffffffffffffffffffffffffff1663e2e308308261ffff16600981111561103657611035613bfb565b5b6040518263ffffffff1660e01b815260040161105291906144b0565b602060405180830381865afa15801561106f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110939190614aec565b8561109e919061455a565b94505b8080600101915050610fcf565b50600082511115611142578473ffffffffffffffffffffffffffffffffffffffff1663e2e3083060066040518263ffffffff1660e01b81526004016110f391906144b0565b602060405180830381865afa158015611110573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111349190614aec565b8461113f919061455a565b93505b8395505050505050919050565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f60018561119e9190614658565b6040518263ffffffff1660e01b81526004016111ba9190613da1565b602060405180830381865afa1580156111d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fb91906146a1565b905060008173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa15801561124a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061127391906149c1565b9050600081610140015161ffff1667ffffffffffffffff81111561129a57611299613692565b5b6040519080825280602002602001820160405280156112d357816020015b6112c061344d565b8152602001906001900390816112b85790505b5090506000805b83610140015161ffff168161ffff16101561157a5760008573ffffffffffffffffffffffffffffffffffffffff1663dd85ae5f8661012001518461ffff1681518110611329576113286145e1565b5b60200260200101516040518263ffffffff1660e01b815260040161134d9190613da1565b60c060405180830381865afa15801561136a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138e9190614bb9565b905060006113a482606001518760a001516119b9565b9050600081801561142f575060008873ffffffffffffffffffffffffffffffffffffffff1663efa3d53160066040518263ffffffff1660e01b81526004016113ec91906144b0565b602060405180830381865afa158015611409573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142d9190614aec565b115b156114c5578773ffffffffffffffffffffffffffffffffffffffff1663efa3d53160066040518263ffffffff1660e01b815260040161146e91906144b0565b602060405180830381865afa15801561148b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114af9190614aec565b6114b88b61187a565b6114c29190614be6565b90505b6040518060e0016040528084600001518152602001846020015173ffffffffffffffffffffffffffffffffffffffff168152602001846040015173ffffffffffffffffffffffffffffffffffffffff1681526020018460600151815260200183151581526020018460a001511515815260200182815250868680611548906145b7565b975061ffff168151811061155f5761155e6145e1565b5b602002602001018190525050505080806001019150506112da565b5081945050505050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f6001846115d49190614658565b6040518263ffffffff1660e01b81526004016115f09190613da1565b602060405180830381865afa15801561160d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163191906146a1565b73ffffffffffffffffffffffffffffffffffffffff1663e2e3083060076040518263ffffffff1660e01b815260040161166a91906144b0565b602060405180830381865afa158015611687573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ab9190614aec565b9050919050565b60008015156116c184846116cc565b151514905092915050565b600080600090505b825181101561171d578361ffff168382815181106116f5576116f46145e1565b5b602002602001015161ffff1603611710576001915050611723565b80806001019150506116d4565b50600090505b92915050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f60018461179c9190614658565b6040518263ffffffff1660e01b81526004016117b89190613da1565b602060405180830381865afa1580156117d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f991906146a1565b73ffffffffffffffffffffffffffffffffffffffff1663e2e3083060086040518263ffffffff1660e01b815260040161183291906144b0565b602060405180830381865afa15801561184f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118739190614aec565b9050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f6001846118c79190614658565b6040518263ffffffff1660e01b81526004016118e39190613da1565b602060405180830381865afa158015611900573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192491906146a1565b73ffffffffffffffffffffffffffffffffffffffff1663e2e3083060066040518263ffffffff1660e01b815260040161195d91906144b0565b602060405180830381865afa15801561197a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199e9190614aec565b9050919050565b6119ad61302d565b6119b760006130b4565b565b600080600090505b8251811015611a0257838382815181106119de576119dd6145e1565b5b6020026020010151036119f5576001915050611a08565b80806001019150506119c1565b50600090505b92915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000806009811115611a4c57611a4b613bfb565b5b826009811115611a5f57611a5e613bfb565b5b1480611a8f575060016009811115611a7a57611a79613bfb565b5b826009811115611a8d57611a8c613bfb565b5b145b80611abe575060026009811115611aa957611aa8613bfb565b5b826009811115611abc57611abb613bfb565b5b145b80611aed575060036009811115611ad857611ad7613bfb565b5b826009811115611aeb57611aea613bfb565b5b145b80611b1c575060046009811115611b0757611b06613bfb565b5b826009811115611b1a57611b19613bfb565b5b145b80611b4b575060056009811115611b3657611b35613bfb565b5b826009811115611b4957611b48613bfb565b5b145b611b8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b8190614c74565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600185611bd59190614658565b6040518263ffffffff1660e01b8152600401611bf19190613da1565b602060405180830381865afa158015611c0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c3291906146a1565b73ffffffffffffffffffffffffffffffffffffffff1663e2e30830836040518263ffffffff1660e01b8152600401611c6a91906144b0565b602060405180830381865afa158015611c87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cab9190614aec565b905092915050565b611cbb61302d565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611cf69190613fea565b602060405180830381865afa158015611d13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d379190614aec565b90506000811115611d7057611d6f82600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683613178565b5b5050565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600185611dc39190614658565b6040518263ffffffff1660e01b8152600401611ddf9190613da1565b602060405180830381865afa158015611dfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e2091906146a1565b905060008173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa158015611e6f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611e9891906149c1565b905060008161010001519050600082610100015161ffff1667ffffffffffffffff811115611ec957611ec8613692565b5b604051908082528060200260200182016040528015611f0257816020015b611eef613530565b815260200190600190039081611ee75790505b5090506000805b8361ffff168161ffff16101561230e5760008673ffffffffffffffffffffffffffffffffffffffff16639b7be8fc8760e001518461ffff1681518110611f5257611f516145e1565b5b60200260200101516040518263ffffffff1660e01b8152600401611f769190613da1565b60c060405180830381865afa158015611f93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fb79190614abf565b905060008773ffffffffffffffffffffffffffffffffffffffff1663598f3b9d83600001516040518263ffffffff1660e01b8152600401611ff89190613da1565b600060405180830381865afa158015612015573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061203e9190614c94565b90506000876080015160058151811061205a576120596145e1565b5b602002602001015161ffff168260058151811061207a576120796145e1565b5b602002602001015161ffff161490506000805b60058161ffff1610156120ed576000848261ffff16815181106120b3576120b26145e1565b5b602002602001015190506120cb818c608001516116cc565b156120df5782806120db906145b7565b9350505b50808060010191505061208d565b5060006120fa82846129d3565b9050600060098081111561211157612110613bfb565b5b82600981111561212457612123613bfb565b5b141580156121ab575060008c73ffffffffffffffffffffffffffffffffffffffff1663efa3d531846040518263ffffffff1660e01b815260040161216891906144b0565b602060405180830381865afa158015612185573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a99190614aec565b115b15612241578b73ffffffffffffffffffffffffffffffffffffffff1663efa3d531836040518263ffffffff1660e01b81526004016121e991906144b0565b602060405180830381865afa158015612206573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222a9190614aec565b6122348f84611a37565b61223e9190614be6565b90505b6040518060c0016040528087600001518152602001876020015173ffffffffffffffffffffffffffffffffffffffff16815260200183600981111561228957612288613bfb565b5b81526020016009808111156122a1576122a0613bfb565b5b8460098111156122b4576122b3613bfb565b5b141515158152602001876060015115158152602001828152508989806122d9906145b7565b9a5061ffff16815181106122f0576122ef6145e1565b5b60200260200101819052505050505050508080600101915050611f09565b508195505050505050919050565b60008060009050600061232f86866107b7565b905060005b81518110156123a057841515828281518110612353576123526145e1565b5b602002602001015160a0015115150361239357818181518110612379576123786145e1565b5b602002602001015160c0015183612390919061455a565b92505b8080600101915050612334565b5081925050509392505050565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f6001856123fc9190614658565b6040518263ffffffff1660e01b81526004016124189190613da1565b602060405180830381865afa158015612435573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245991906146a1565b905060008173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa1580156124a8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906124d191906149c1565b9050600081610140015161ffff1667ffffffffffffffff8111156124f8576124f7613692565b5b60405190808252806020026020018201604052801561253157816020015b61251e613592565b8152602001906001900390816125165790505b50905060005b82610140015161ffff1681101561260b578373ffffffffffffffffffffffffffffffffffffffff1663dd85ae5f8460e00151838151811061257b5761257a6145e1565b5b60200260200101516040518263ffffffff1660e01b815260040161259f9190613da1565b60c060405180830381865afa1580156125bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e09190614bb9565b8282815181106125f3576125f26145e1565b5b60200260200101819052508080600101915050612537565b50809350505050919050565b60008060009050600061262a8686612a7c565b905060005b815181101561269b5784151582828151811061264e5761264d6145e1565b5b60200260200101516080015115150361268e57818181518110612674576126736145e1565b5b602002602001015160a001518361268b919061455a565b92505b808060010191505061262f565b5081925050509392505050565b6126b061302d565b600047111561272357600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015612721573d6000803e3d6000fd5b505b565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f6001856127749190614658565b6040518263ffffffff1660e01b81526004016127909190613da1565b602060405180830381865afa1580156127ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127d191906146a1565b905060008173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa158015612820573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061284991906149c1565b90506000600682610100015161285f9190614cdd565b61ffff1667ffffffffffffffff81111561287c5761287b613692565b5b6040519080825280602002602001820160405280156128aa5781602001602082028036833780820191505090505b50905060005b82610100015161ffff168110156129c75760008473ffffffffffffffffffffffffffffffffffffffff1663598f3b9d836040518263ffffffff1660e01b81526004016128fc9190613da1565b600060405180830381865afa158015612919573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906129429190614c94565b905060005b81518110156129b857818181518110612963576129626145e1565b5b6020026020010151848260068661297a9190614d1a565b612984919061455a565b81518110612995576129946145e1565b5b602002602001019061ffff16908161ffff16815250508080600101915050612947565b505080806001019150506128b0565b50809350505050919050565b600060058361ffff161480156129e65750815b156129f45760009050612a76565b60058361ffff1603612a095760019050612a76565b60048361ffff16148015612a1a5750815b15612a285760029050612a76565b60048361ffff1603612a3d5760039050612a76565b60038361ffff16148015612a4e5750815b15612a5c5760049050612a76565b60038361ffff1603612a715760059050612a76565b600990505b92915050565b60606000612a8984611d74565b9050600080825167ffffffffffffffff811115612aa957612aa8613692565b5b604051908082528060200260200182016040528015612ae257816020015b612acf613530565b815260200190600190039081612ac75790505b50905060005b8351811015612bbf578573ffffffffffffffffffffffffffffffffffffffff16848281518110612b1b57612b1a6145e1565b5b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff16148015612b655750838181518110612b5857612b576145e1565b5b6020026020010151606001515b15612bb257838181518110612b7d57612b7c6145e1565b5b6020026020010151828481518110612b9857612b976145e1565b5b60200260200101819052508280612bae90614610565b9350505b8080600101915050612ae8565b5060008267ffffffffffffffff811115612bdc57612bdb613692565b5b604051908082528060200260200182016040528015612c1557816020015b612c02613530565b815260200190600190039081612bfa5790505b50905060005b83811015612c6957828181518110612c3657612c356145e1565b5b6020026020010151828281518110612c5157612c506145e1565b5b60200260200101819052508080600101915050612c1b565b508094505050505092915050565b600080600090506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600186612ccb9190614658565b6040518263ffffffff1660e01b8152600401612ce79190613da1565b602060405180830381865afa158015612d04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d2891906146a1565b73ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa158015612d72573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612d9b91906149c1565b61014001519050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f4dec22b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e339190614d5c565b61ffff168161ffff1681612e4a57612e496144cb565b5b04915060008261ffff16148015612e65575060008161ffff16115b15612e6f57600191505b8192505050919050565b612e8161302d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612ef35760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401612eea9190613fea565b60405180910390fd5b612efc816130b4565b50565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600185612f4e9190614658565b6040518263ffffffff1660e01b8152600401612f6a9190613da1565b602060405180830381865afa158015612f87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fab91906146a1565b73ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa158015612ff5573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061301e91906149c1565b90508060800151915050919050565b6130356131f7565b73ffffffffffffffffffffffffffffffffffffffff16613053611a0e565b73ffffffffffffffffffffffffffffffffffffffff16146130b2576130766131f7565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016130a99190613fea565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6131f2838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040516024016131ab929190614d89565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506131ff565b505050565b600033905090565b600061322a828473ffffffffffffffffffffffffffffffffffffffff1661329690919063ffffffff16565b9050600081511415801561324f57508080602001905181019061324d9190614db2565b155b1561329157826040517f5274afe70000000000000000000000000000000000000000000000000000000081526004016132889190613fea565b60405180910390fd5b505050565b60606132a4838360006132ac565b905092915050565b6060814710156132f357306040517fcd7860590000000000000000000000000000000000000000000000000000000081526004016132ea9190613fea565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff16848660405161331c9190614e50565b60006040518083038185875af1925050503d8060008114613359576040519150601f19603f3d011682016040523d82523d6000602084013e61335e565b606091505b509150915061336e868383613379565b925050509392505050565b60608261338e5761338982613408565b613400565b600082511480156133b6575060008473ffffffffffffffffffffffffffffffffffffffff163b145b156133f857836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016133ef9190613fea565b60405180910390fd5b819050613401565b5b9392505050565b60008151111561341b5780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518060e0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600015158152602001600015158152602001600081525090565b6040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001600081526020016000600981111561352a57613529613bfb565b5b81525090565b6040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000600981111561357357613572613bfb565b5b8152602001600015158152602001600015158152602001600081525090565b6040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581526020016000151581525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61361f8161360c565b811461362a57600080fd5b50565b60008135905061363c81613616565b92915050565b600061ffff82169050919050565b61365981613642565b811461366457600080fd5b50565b60008135905061367681613650565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6136ca82613681565b810181811067ffffffffffffffff821117156136e9576136e8613692565b5b80604052505050565b60006136fc6135f8565b905061370882826136c1565b919050565b600067ffffffffffffffff82111561372857613727613692565b5b602082029050602081019050919050565b600080fd5b600061375161374c8461370d565b6136f2565b9050808382526020820190506020840283018581111561377457613773613739565b5b835b8181101561379d57806137898882613667565b845260208401935050602081019050613776565b5050509392505050565b600082601f8301126137bc576137bb61367c565b5b81356137cc84826020860161373e565b91505092915050565b6000806000606084860312156137ee576137ed613602565b5b60006137fc8682870161362d565b935050602061380d86828701613667565b925050604084013567ffffffffffffffff81111561382e5761382d613607565b5b61383a868287016137a7565b9150509250925092565b61384d81613642565b82525050565b60006020820190506138686000830184613844565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006138998261386e565b9050919050565b6138a98161388e565b81146138b457600080fd5b50565b6000813590506138c6816138a0565b92915050565b6000602082840312156138e2576138e1613602565b5b60006138f0848285016138b7565b91505092915050565b600080604083850312156139105761390f613602565b5b600061391e8582860161362d565b925050602061392f858286016138b7565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61396e8161360c565b82525050565b61397d8161388e565b82525050565b60008115159050919050565b61399881613983565b82525050565b60e0820160008201516139b46000850182613965565b5060208201516139c76020850182613974565b5060408201516139da6040850182613974565b5060608201516139ed6060850182613965565b506080820151613a00608085018261398f565b5060a0820151613a1360a085018261398f565b5060c0820151613a2660c0850182613965565b50505050565b6000613a38838361399e565b60e08301905092915050565b6000602082019050919050565b6000613a5c82613939565b613a668185613944565b9350613a7183613955565b8060005b83811015613aa2578151613a898882613a2c565b9750613a9483613a44565b925050600181019050613a75565b5085935050505092915050565b60006020820190508181036000830152613ac98184613a51565b905092915050565b600060208284031215613ae757613ae6613602565b5b6000613af58482850161362d565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000613b368383613965565b60208301905092915050565b6000602082019050919050565b6000613b5a82613afe565b613b648185613b09565b9350613b6f83613b1a565b8060005b83811015613ba0578151613b878882613b2a565b9750613b9283613b42565b925050600181019050613b73565b5085935050505092915050565b60006020820190508181036000830152613bc78184613b4f565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600a8110613c3b57613c3a613bfb565b5b50565b6000819050613c4c82613c2a565b919050565b6000613c5c82613c3e565b9050919050565b613c6c81613c51565b82525050565b60c082016000820151613c886000850182613965565b506020820151613c9b6020850182613974565b506040820151613cae6040850182613974565b506060820151613cc1606085018261398f565b506080820151613cd46080850182613965565b5060a0820151613ce760a0850182613c63565b50505050565b6000613cf98383613c72565b60c08301905092915050565b6000602082019050919050565b6000613d1d82613bcf565b613d278185613bda565b9350613d3283613beb565b8060005b83811015613d63578151613d4a8882613ced565b9750613d5583613d05565b925050600181019050613d36565b5085935050505092915050565b60006020820190508181036000830152613d8a8184613d12565b905092915050565b613d9b8161360c565b82525050565b6000602082019050613db66000830184613d92565b92915050565b60008060408385031215613dd357613dd2613602565b5b6000613de185828601613667565b925050602083013567ffffffffffffffff811115613e0257613e01613607565b5b613e0e858286016137a7565b9150509250929050565b613e2181613983565b82525050565b6000602082019050613e3c6000830184613e18565b92915050565b6000819050919050565b6000613e67613e62613e5d8461386e565b613e42565b61386e565b9050919050565b6000613e7982613e4c565b9050919050565b6000613e8b82613e6e565b9050919050565b613e9b81613e80565b82525050565b6000602082019050613eb66000830184613e92565b92915050565b600067ffffffffffffffff821115613ed757613ed6613692565b5b602082029050602081019050919050565b6000613efb613ef684613ebc565b6136f2565b90508083825260208201905060208402830185811115613f1e57613f1d613739565b5b835b81811015613f475780613f33888261362d565b845260208401935050602081019050613f20565b5050509392505050565b600082601f830112613f6657613f6561367c565b5b8135613f76848260208601613ee8565b91505092915050565b60008060408385031215613f9657613f95613602565b5b6000613fa48582860161362d565b925050602083013567ffffffffffffffff811115613fc557613fc4613607565b5b613fd185828601613f51565b9150509250929050565b613fe48161388e565b82525050565b6000602082019050613fff6000830184613fdb565b92915050565b600a811061401257600080fd5b50565b60008135905061402481614005565b92915050565b6000806040838503121561404157614040613602565b5b600061404f8582860161362d565b925050602061406085828601614015565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60c0820160008201516140ac6000850182613965565b5060208201516140bf6020850182613974565b5060408201516140d26040850182613c63565b5060608201516140e5606085018261398f565b5060808201516140f8608085018261398f565b5060a082015161410b60a0850182613965565b50505050565b600061411d8383614096565b60c08301905092915050565b6000602082019050919050565b60006141418261406a565b61414b8185614075565b935061415683614086565b8060005b8381101561418757815161416e8882614111565b975061417983614129565b92505060018101905061415a565b5085935050505092915050565b600060208201905081810360008301526141ae8184614136565b905092915050565b6141bf81613983565b81146141ca57600080fd5b50565b6000813590506141dc816141b6565b92915050565b6000806000606084860312156141fb576141fa613602565b5b60006142098682870161362d565b935050602061421a868287016138b7565b925050604061422b868287016141cd565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60c0820160008201516142776000850182613965565b50602082015161428a6020850182613974565b50604082015161429d6040850182613974565b5060608201516142b06060850182613965565b5060808201516142c3608085018261398f565b5060a08201516142d660a085018261398f565b50505050565b60006142e88383614261565b60c08301905092915050565b6000602082019050919050565b600061430c82614235565b6143168185614240565b935061432183614251565b8060005b8381101561435257815161433988826142dc565b9750614344836142f4565b925050600181019050614325565b5085935050505092915050565b600060208201905081810360008301526143798184614301565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6143b681613642565b82525050565b60006143c883836143ad565b60208301905092915050565b6000602082019050919050565b60006143ec82614381565b6143f6818561438c565b93506144018361439d565b8060005b8381101561443257815161441988826143bc565b9750614424836143d4565b925050600181019050614405565b5085935050505092915050565b6000602082019050818103600083015261445981846143e1565b905092915050565b6000806040838503121561447857614477613602565b5b600061448685828601613667565b9250506020614497858286016141cd565b9150509250929050565b6144aa81613c51565b82525050565b60006020820190506144c560008301846144a1565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006145058261360c565b91506145108361360c565b9250826145205761451f6144cb565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006145658261360c565b91506145708361360c565b92508282019050808211156145885761458761452b565b5b92915050565b60006040820190506145a36000830185613844565b6145b06020830184613844565b9392505050565b60006145c282613642565b915061ffff82036145d6576145d561452b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061461b8261360c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361464d5761464c61452b565b5b600182019050919050565b60006146638261360c565b915061466e8361360c565b92508282039050818111156146865761468561452b565b5b92915050565b60008151905061469b816138a0565b92915050565b6000602082840312156146b7576146b6613602565b5b60006146c58482850161468c565b91505092915050565b600080fd5b600080fd5b6000815190506146e781613616565b92915050565b6000815190506146fc816141b6565b92915050565b60008151905061471181613650565b92915050565b600061472a6147258461370d565b6136f2565b9050808382526020820190506020840283018581111561474d5761474c613739565b5b835b8181101561477657806147628882614702565b84526020840193505060208101905061474f565b5050509392505050565b600082601f8301126147955761479461367c565b5b81516147a5848260208601614717565b91505092915050565b60006147c16147bc84613ebc565b6136f2565b905080838252602082019050602084028301858111156147e4576147e3613739565b5b835b8181101561480d57806147f988826146d8565b8452602084019350506020810190506147e6565b5050509392505050565b600082601f83011261482c5761482b61367c565b5b815161483c8482602086016147ae565b91505092915050565b6000610160828403121561485c5761485b6146ce565b5b6148676101606136f2565b90506000614877848285016146d8565b600083015250602061488b848285016146d8565b602083015250604061489f848285016146d8565b60408301525060606148b3848285016146ed565b606083015250608082015167ffffffffffffffff8111156148d7576148d66146d3565b5b6148e384828501614780565b60808301525060a082015167ffffffffffffffff811115614907576149066146d3565b5b61491384828501614817565b60a08301525060c061492784828501614702565b60c08301525060e082015167ffffffffffffffff81111561494b5761494a6146d3565b5b61495784828501614817565b60e08301525061010061496c84828501614702565b6101008301525061012082015167ffffffffffffffff811115614992576149916146d3565b5b61499e84828501614817565b610120830152506101406149b484828501614702565b6101408301525092915050565b6000602082840312156149d7576149d6613602565b5b600082015167ffffffffffffffff8111156149f5576149f4613607565b5b614a0184828501614845565b91505092915050565b600081519050614a1981614005565b92915050565b600060c08284031215614a3557614a346146ce565b5b614a3f60c06136f2565b90506000614a4f848285016146d8565b6000830152506020614a638482850161468c565b6020830152506040614a778482850161468c565b6040830152506060614a8b848285016146ed565b6060830152506080614a9f848285016146d8565b60808301525060a0614ab384828501614a0a565b60a08301525092915050565b600060c08284031215614ad557614ad4613602565b5b6000614ae384828501614a1f565b91505092915050565b600060208284031215614b0257614b01613602565b5b6000614b10848285016146d8565b91505092915050565b600060c08284031215614b2f57614b2e6146ce565b5b614b3960c06136f2565b90506000614b49848285016146d8565b6000830152506020614b5d8482850161468c565b6020830152506040614b718482850161468c565b6040830152506060614b85848285016146d8565b6060830152506080614b99848285016146ed565b60808301525060a0614bad848285016146ed565b60a08301525092915050565b600060c08284031215614bcf57614bce613602565b5b6000614bdd84828501614b19565b91505092915050565b6000614bf18261360c565b9150614bfc8361360c565b925082614c0c57614c0b6144cb565b5b828204905092915050565b600082825260208201905092915050565b7f496e76616c696420766963746f72792074696572000000000000000000000000600082015250565b6000614c5e601483614c17565b9150614c6982614c28565b602082019050919050565b60006020820190508181036000830152614c8d81614c51565b9050919050565b600060208284031215614caa57614ca9613602565b5b600082015167ffffffffffffffff811115614cc857614cc7613607565b5b614cd484828501614780565b91505092915050565b6000614ce882613642565b9150614cf383613642565b9250828202614d0181613642565b9150808214614d1357614d1261452b565b5b5092915050565b6000614d258261360c565b9150614d308361360c565b9250828202614d3e8161360c565b91508282048414831517614d5557614d5461452b565b5b5092915050565b600060208284031215614d7257614d71613602565b5b6000614d8084828501614702565b91505092915050565b6000604082019050614d9e6000830185613fdb565b614dab6020830184613d92565b9392505050565b600060208284031215614dc857614dc7613602565b5b6000614dd6848285016146ed565b91505092915050565b600081519050919050565b600081905092915050565b60005b83811015614e13578082015181840152602081019050614df8565b60008484015250505050565b6000614e2a82614ddf565b614e348185614dea565b9350614e44818560208601614df5565b80840191505092915050565b6000614e5c8284614e1f565b91508190509291505056fea2646970667358221220e0534d09567cc3b3a68760420717b79ffb6b6b5937f343d114dd4b5db3c020f764736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/LotteryReader.sol:LotteryReader",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4854,
        "contract": "contracts/LotteryReader.sol:LotteryReader",
        "label": "teamAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2076,
        "contract": "contracts/LotteryReader.sol:LotteryReader",
        "label": "lotteryMaster",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(LotteryMaster)2046"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(LotteryMaster)2046": {
        "encoding": "inplace",
        "label": "contract LotteryMaster",
        "numberOfBytes": "20"
      }
    }
  }
}