{
  "address": "0x7f74bada1F713b047B4c4c909A18C740EC64C01E",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "amountWonInRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "claimed",
          "type": "bool"
        }
      ],
      "name": "evaluateWonReferralAmountForWallet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "evaluateWonReferralFoWallet",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "referralTicketId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "referralAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "referralTicketNumber",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "won",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "claimed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amountWon",
              "type": "uint256"
            }
          ],
          "internalType": "struct ReferralTicketResults[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "evaluateWonReferralForRound",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "referralTicketId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "referralAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "referralTicketNumber",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "won",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "claimed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amountWon",
              "type": "uint256"
            }
          ],
          "internalType": "struct ReferralTicketResults[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "claimed",
          "type": "bool"
        }
      ],
      "name": "evaluateWonTicketsAmountForWallet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "evaluateWonTicketsForRound",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "ticketId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "participantAddress",
              "type": "address"
            },
            {
              "internalType": "enum RoundVictoryTier",
              "name": "victoryTier",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "won",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "claimed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amountWon",
              "type": "uint256"
            }
          ],
          "internalType": "struct TicketResults[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "evaluateWonTicketsForWallet",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "ticketId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "participantAddress",
              "type": "address"
            },
            {
              "internalType": "enum RoundVictoryTier",
              "name": "victoryTier",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "won",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "claimed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amountWon",
              "type": "uint256"
            }
          ],
          "internalType": "struct TicketResults[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "num",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "arr",
          "type": "uint256[]"
        }
      ],
      "name": "existInArrayBigNumber",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "num",
          "type": "uint16"
        },
        {
          "internalType": "uint16[]",
          "name": "arr",
          "type": "uint16[]"
        }
      ],
      "name": "existInArrayNumber",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "randomNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "maxValue",
          "type": "uint16"
        },
        {
          "internalType": "uint16[]",
          "name": "arr",
          "type": "uint16[]"
        }
      ],
      "name": "getRandomUniqueNumberInArrayForMaxValue",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lotteryMaster",
      "outputs": [
        {
          "internalType": "contract LotteryMaster",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "num",
          "type": "uint16"
        },
        {
          "internalType": "uint16[]",
          "name": "arr",
          "type": "uint16[]"
        }
      ],
      "name": "notExistInArrayNumber",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "numberOfReferralWinnersForRoundId",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "poolForReferral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "enum RoundVictoryTier",
          "name": "victoryTier",
          "type": "uint8"
        }
      ],
      "name": "poolForVictoryTier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "referralWinnersNumber",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "roundNumbers",
      "outputs": [
        {
          "internalType": "uint16[]",
          "name": "",
          "type": "uint16[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendCryptoToTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "sendTokenToTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lotteryMaster",
          "type": "address"
        }
      ],
      "name": "setLotteryMaster",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "rightNumbersForTicket",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "powerNumberFound",
          "type": "bool"
        }
      ],
      "name": "tierFromResults",
      "outputs": [
        {
          "internalType": "enum RoundVictoryTier",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "tokenHoldersPoolAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "treasuryPoolAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_teamAddress",
          "type": "address"
        }
      ],
      "name": "updateTeamAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x18ea5c6b9c5ccf8aefdf7d32a52116e7558206ec43679c24fd468e36b47cd22c",
  "receipt": {
    "to": null,
    "from": "0x4eCa23Ffd5710970E22558C484a0D6943dA5eAa5",
    "contractAddress": "0x7f74bada1F713b047B4c4c909A18C740EC64C01E",
    "transactionIndex": 3,
    "gasUsed": "4033722",
    "logsBloom": "0x
    "blockHash": "0xf277f0411901bc4a0ad5419f10c1d3c26ae41d8e903ccac97751bb38cad716a6",
    "transactionHash": "0x18ea5c6b9c5ccf8aefdf7d32a52116e7558206ec43679c24fd468e36b47cd22c",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 32748847,
        "transactionHash": "0x18ea5c6b9c5ccf8aefdf7d32a52116e7558206ec43679c24fd468e36b47cd22c",
        "address": "0x7f74bada1F713b047B4c4c909A18C740EC64C01E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004eca23ffd5710970e22558c484a0d6943da5eaa5"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0xf277f0411901bc4a0ad5419f10c1d3c26ae41d8e903ccac97751bb38cad716a6"
      }
    ],
    "blockNumber": 32748847,
    "cumulativeGasUsed": "4366796",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "367f574ed972590fa815d3d071d3740f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"amountWonInRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"name\":\"evaluateWonReferralAmountForWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"evaluateWonReferralFoWallet\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"referralTicketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referralAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralTicketNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"won\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountWon\",\"type\":\"uint256\"}],\"internalType\":\"struct ReferralTicketResults[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"evaluateWonReferralForRound\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"referralTicketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referralAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralTicketNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"won\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountWon\",\"type\":\"uint256\"}],\"internalType\":\"struct ReferralTicketResults[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"name\":\"evaluateWonTicketsAmountForWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"evaluateWonTicketsForRound\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"participantAddress\",\"type\":\"address\"},{\"internalType\":\"enum RoundVictoryTier\",\"name\":\"victoryTier\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"won\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountWon\",\"type\":\"uint256\"}],\"internalType\":\"struct TicketResults[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"evaluateWonTicketsForWallet\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"participantAddress\",\"type\":\"address\"},{\"internalType\":\"enum RoundVictoryTier\",\"name\":\"victoryTier\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"won\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountWon\",\"type\":\"uint256\"}],\"internalType\":\"struct TicketResults[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"arr\",\"type\":\"uint256[]\"}],\"name\":\"existInArrayBigNumber\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"num\",\"type\":\"uint16\"},{\"internalType\":\"uint16[]\",\"name\":\"arr\",\"type\":\"uint16[]\"}],\"name\":\"existInArrayNumber\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"maxValue\",\"type\":\"uint16\"},{\"internalType\":\"uint16[]\",\"name\":\"arr\",\"type\":\"uint16[]\"}],\"name\":\"getRandomUniqueNumberInArrayForMaxValue\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryMaster\",\"outputs\":[{\"internalType\":\"contract LotteryMaster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"num\",\"type\":\"uint16\"},{\"internalType\":\"uint16[]\",\"name\":\"arr\",\"type\":\"uint16[]\"}],\"name\":\"notExistInArrayNumber\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"numberOfReferralWinnersForRoundId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"poolForReferral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"enum RoundVictoryTier\",\"name\":\"victoryTier\",\"type\":\"uint8\"}],\"name\":\"poolForVictoryTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"referralWinnersNumber\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"roundNumbers\",\"outputs\":[{\"internalType\":\"uint16[]\",\"name\":\"\",\"type\":\"uint16[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendCryptoToTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sendTokenToTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lotteryMaster\",\"type\":\"address\"}],\"name\":\"setLotteryMaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"rightNumbersForTicket\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"powerNumberFound\",\"type\":\"bool\"}],\"name\":\"tierFromResults\",\"outputs\":[{\"internalType\":\"enum RoundVictoryTier\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"tokenHoldersPoolAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"treasuryPoolAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teamAddress\",\"type\":\"address\"}],\"name\":\"updateTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LotteryReader.sol\":\"LotteryReader\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/CyclixRandomizerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface CyclixRandomizerInterface {\\n    function requestRandomWords(uint32 numWords) external returns (uint256 requestId);\\n    function getRequestStatus(uint256 _requestId) external view returns (bool fulfilled, uint256[] memory randomWords);\\n    function registerGameContract(address gameAddress, string calldata name) external;\\n    function getLastRequestIdForCaller(address _gameAddress) external view returns (uint256);\\n    function recoverLostNumberRequest(uint256 _requestId) external returns (uint256);\\n}\",\"keccak256\":\"0xc71c2b020044355f41cc53069e9a6f9f2778311e8d601a29bcc608301a0dfe24\",\"license\":\"MIT\"},\"contracts/LotteryCommon.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\n    enum RoundVictoryTier {\\n        NO_WIN,\\n        Tier5_1,\\n        Tier5,\\n        Tier4_1,\\n        Tier4,\\n        Tier3_1,\\n        Tier3,\\n        Referrer,\\n        PublicPool,\\n        TokenHolders,\\n        Treasury\\n    }\\n\\n    struct Round {\\n        uint256 id;\\n        uint256 startTime;\\n        uint256 endTime;\\n        bool ended;\\n        uint16[] roundNumbers;\\n        uint256[] referralWinnersNumber;\\n        uint16 referralWinnersNumberCount;\\n        uint256[] ticketIds;\\n        uint16 ticketsCount;\\n        uint256[] referralTicketIds;\\n        uint16 referralCounts;\\n    }\\n\\n    struct Ticket {\\n        uint256 id;\\n        address participantAddress;\\n        address referralAddress;\\n        bool claimed;\\n        uint256 chainId;\\n        RoundVictoryTier victoryTier;\\n    }\\n\\n    struct TicketResults {\\n        uint256 ticketId;\\n        address participantAddress;\\n        RoundVictoryTier victoryTier;\\n        bool won;\\n        bool claimed;\\n        uint256 amountWon;\\n    }\\n\\n    struct ReferralTicket {\\n        uint256 id;\\n        address referralAddress;\\n        uint256 referralTicketNumber;\\n        bool winner;\\n        bool claimed;\\n    }\\n\\n    struct ReferralTicketResults {\\n        uint256 referralTicketId;\\n        address referralAddress;\\n        uint256 referralTicketNumber;\\n        bool won;\\n        bool claimed;\\n        uint256 amountWon;\\n    }\",\"keccak256\":\"0x068a653715f0d282f24f8bd02b97cd76403e42a47ae70e1cff007381967e60c6\",\"license\":\"UNLICENSED\"},\"contracts/LotteryMaster.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {CyclixRandomizerInterface} from \\\"./CyclixRandomizerInterface.sol\\\";\\nimport {EmergencyFunctions} from \\\"./utils/EmergencyFunctions.sol\\\";\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\nimport { LotteryRoundInterface } from \\\"./LotteryRoundInterface.sol\\\";\\nimport { LotteryReaderInterface } from \\\"./LotteryReaderInterface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./LotteryRoundCreatorInterface.sol\\\";\\n    enum LotteryStatuses {\\n        DrawOpen,\\n        EvaluatingResults,\\n        ResultsEvaluated,\\n        ClaimInProgress\\n    }\\n\\ncontract LotteryMaster is EmergencyFunctions {\\n\\n    uint256 public roundCount;\\n    address[] public rounds;\\n    LotteryStatuses public lotteryStatus;\\n    uint256 public statusStartTime;\\n    uint256 public statusEndTime;\\n\\n    mapping(address => uint16) public freeRounds;\\n    mapping(address => bool) public crossChainOperator;\\n    function setCrossChainOperator(address operator, bool value) public onlyOwner {\\n        crossChainOperator[operator] = value;\\n    }\\n\\n    uint16 public counterForBankWallets;\\n    address[] public bankWallets;\\n    function setBankWallet(address wallet, bool add) public onlyOwner {\\n        for (uint i = 0; i < bankWallets.length; i++) {\\n            if (bankWallets[i] == wallet) {\\n                if (add) {\\n                    require(false, \\\"Wallet already added\\\");\\n                } else {\\n                    bankWallets[i] = bankWallets[bankWallets.length - 1];\\n                    bankWallets.pop();\\n                }\\n            }\\n        }\\n        if (add) {\\n            bankWallets.push(wallet);\\n        }\\n    }\\n\\n    address public treasuryWallets;\\n    IERC20Metadata public paymentToken;\\n    CyclixRandomizerInterface public randomizer;\\n    LotteryReaderInterface public reader;\\n    uint256 public ticketPrice;\\n    bool public freeRoundsAreEnabled = false;\\n    uint16 public percentageOfReferralWinners = 10;\\n    LotteryRoundCreatorInterface public lotteryRoundCreator;\\n\\n    constructor(address cyclixRandomizer, address lotteryReader, address _lotteryRoundCreator, address _paymentToken, uint256 _ticketPrice, bool _freeRoundsAreEnabled)\\n    EmergencyFunctions(msg.sender) {\\n        randomizer = CyclixRandomizerInterface(cyclixRandomizer);\\n        randomizer.registerGameContract(address(this), \\\"LotteryMasterV0.1\\\");\\n        reader = LotteryReaderInterface(lotteryReader);\\n        lotteryRoundCreator = LotteryRoundCreatorInterface(_lotteryRoundCreator);\\n        paymentToken = IERC20Metadata(_paymentToken);\\n        ticketPrice = _ticketPrice * (10 ** uint256(paymentToken.decimals()));\\n        freeRoundsAreEnabled = _freeRoundsAreEnabled;\\n        treasuryWallets = msg.sender;\\n        bankWallets.push(msg.sender);\\n    }\\n\\n    function updateSetup(address cyclixRandomizer, address lotteryReader, address _lotteryRoundCreator, address _paymentToken, uint256 _ticketPrice,\\n        address _treasuryWallet, uint16 _percentageOfReferralWinners, uint16[] memory _poolPercentagesBasePoints, bool _freeRoundsAreEnabled) public onlyOwner {\\n        if (address(randomizer) != cyclixRandomizer) {\\n            randomizer = CyclixRandomizerInterface(cyclixRandomizer);\\n            randomizer.registerGameContract(address(this), \\\"LotteryMasterV0.1\\\");\\n        }\\n        reader = LotteryReaderInterface(lotteryReader);\\n        lotteryRoundCreator = LotteryRoundCreatorInterface(_lotteryRoundCreator);\\n        paymentToken = IERC20Metadata(_paymentToken);\\n        ticketPrice = _ticketPrice * (10 ** uint256(paymentToken.decimals()));\\n        treasuryWallets = _treasuryWallet;\\n        percentageOfReferralWinners = _percentageOfReferralWinners;\\n        LotteryRoundInterface(rounds[roundCount - 1]).setPoolPercentagesBasePoints(_poolPercentagesBasePoints);\\n        freeRoundsAreEnabled = _freeRoundsAreEnabled;\\n    }\\n\\n    function startNewRound(uint256 _statusEndTime) public onlyOwner {\\n        roundCount++;\\n        if (roundCount > 1) {\\n            rounds.push(lotteryRoundCreator.startNewRound(_statusEndTime, rounds[roundCount - 2]));\\n            require(lotteryStatus == LotteryStatuses.ClaimInProgress && statusEndTime < block.timestamp, \\\"Previous round not ended\\\");\\n        } else {\\n            rounds.push(lotteryRoundCreator.startNewRound(_statusEndTime, address(0)));\\n        }\\n        setLotteryStatus(LotteryStatuses.DrawOpen, _statusEndTime);\\n    }\\n\\n    function setLotteryStatus(LotteryStatuses _lotteryStatus, uint256 _statusEndTime) internal onlyOwner {\\n        lotteryStatus = _lotteryStatus;\\n        statusStartTime = block.timestamp;\\n        statusEndTime = block.timestamp + _statusEndTime;\\n    }\\n\\n    function buyTickets(uint256 chainId, uint16[] memory moreTicketNumbers, address referral, address buyer) public {\\n        for (uint i = 0; i < moreTicketNumbers.length; i += 6) {\\n            uint16[] memory chosenNumbers = new uint16[](6);\\n            for (uint j = 0; j < 6; j++) {\\n                chosenNumbers[j] = moreTicketNumbers[i + j];\\n            }\\n            buyTicket(chainId, chosenNumbers, referral, buyer);\\n        }\\n    }\\n\\n    function buyTicket(uint256 chainId, uint16[] memory chosenNumbers, address referral, address buyer) public {\\n        require(freeRounds[buyer] > 0\\n        || paymentToken.allowance(buyer, address(this)) >= ticketPrice\\n        || crossChainOperator[msg.sender], \\\"Missing Allowance\\\");\\n        LotteryRoundInterface lotteryRound = LotteryRoundInterface(rounds[roundCount - 1]);\\n        if (freeRounds[buyer] > 0) {\\n            freeRounds[buyer]--;\\n        } else {\\n            if (!crossChainOperator[msg.sender]) {\\n                require(paymentToken.balanceOf(tx.origin) >= ticketPrice, \\\"Insufficient funds\\\");\\n                counterForBankWallets = uint16(counterForBankWallets++ % bankWallets.length);\\n                uint256 treasuryAmount = lotteryRound.treasuryAmountOnTicket(ticketPrice);\\n                SafeERC20.safeTransferFrom(paymentToken, buyer, bankWallets[counterForBankWallets], ticketPrice - treasuryAmount);\\n                SafeERC20.safeTransferFrom(paymentToken, buyer, treasuryWallets, treasuryAmount);\\n            }\\n            lotteryRound.updateVictoryPoolForTicket(ticketPrice);\\n\\n            if (referral != address(0) && freeRoundsAreEnabled) {\\n                freeRounds[buyer]++;\\n                freeRounds[referral]++;\\n            }\\n        }\\n\\n        lotteryRound.buyTicket(chainId, chosenNumbers, referral, buyer);\\n    }\\n\\n    function addFreeRound(address[] calldata participant) public onlyOwner {\\n        for (uint i = 0; i < participant.length; i++) {\\n            freeRounds[participant[i]]++;\\n        }\\n    }\\n\\n    mapping(uint256 => uint256) public publicRoundRandomNumbersRequestId;\\n\\n    function closeRound(uint256 _statusEndTime) external onlyOwner {\\n        LotteryRoundInterface lotteryRound = LotteryRoundInterface(rounds[roundCount - 1]);\\n        lotteryRound.closeRound();\\n        uint16 referralWinners = reader.numberOfReferralWinnersForRoundId(roundCount);\\n        publicRoundRandomNumbersRequestId[roundCount] = randomizer.requestRandomWords(6 + referralWinners);\\n        setLotteryStatus(LotteryStatuses.EvaluatingResults, _statusEndTime);\\n    }\\n\\n    function fetchRoundNumbers(uint256 roundId, uint256 _statusEndTime) external onlyOwner {\\n        LotteryRoundInterface round = LotteryRoundInterface(rounds[roundId - 1]);\\n        round.couldReceiveWinningNumbers();\\n        (bool fulfilled, uint256[] memory randomWords) = randomizer.getRequestStatus(publicRoundRandomNumbersRequestId[roundId]);\\n        require(fulfilled, \\\"Random numbers not ready\\\");\\n        uint16[] memory roundNumbers = new uint16[](6);\\n        uint16[] memory referralWinnersNumber = new uint16[](randomWords.length - 6);\\n        if (fulfilled) {\\n            for (uint i = 0; i < 6; i++) {\\n                roundNumbers[i] = reader.getRandomUniqueNumberInArrayForMaxValue(randomWords[i], 69, roundNumbers);\\n            }\\n            roundNumbers[5] = uint16(randomWords[5] % 26 + 1);\\n            for (uint i = 6; i < randomWords.length; i++) {\\n                referralWinnersNumber [i - 6] = reader.getRandomUniqueNumberInArrayForMaxValue(randomWords[i],\\n                    round.getRound().referralCounts, referralWinnersNumber);\\n            }\\n        }\\n        round.storeWinningNumbers(roundNumbers, referralWinnersNumber);\\n        setLotteryStatus(LotteryStatuses.ResultsEvaluated, _statusEndTime);\\n    }\\n\\n    function markWinners(uint256 roundId, uint256 _statusEndTime) public onlyOwner {\\n        LotteryRoundInterface(rounds[roundId - 1]).markWinners(reader.evaluateWonTicketsForRound(roundId), reader.evaluateWonReferralForRound(roundId));\\n        setLotteryStatus(LotteryStatuses.ClaimInProgress, _statusEndTime);\\n    }\\n\\n    function claimVictory() public {\\n        uint256 amountForEntries = reader.evaluateWonTicketsAmountForWallet(roundCount, msg.sender, false);\\n        uint256 amountForReferral = reader.evaluateWonReferralAmountForWallet(roundCount, msg.sender, false);\\n        require(amountForEntries > 0 || amountForReferral > 0, \\\"Nothing to claim for this wallet\\\");\\n        require(paymentToken.balanceOf(address(this)) >= amountForEntries + amountForReferral, \\\"Not enough funds on contract\\\");\\n        LotteryRoundInterface(rounds[roundCount - 1]).markVictoryClaimed(\\n            reader.evaluateWonTicketsForWallet(roundCount, msg.sender),\\n            reader.evaluateWonReferralFoWallet(roundCount, msg.sender)\\n        );\\n        paymentToken.transfer(msg.sender, amountForEntries + amountForReferral);\\n    }\\n}\",\"keccak256\":\"0xf39ddcc63e3d58658f65e3e405a0a09fe7cb7f941d7020468946d0fda1e13ea3\",\"license\":\"UNLICENSED\"},\"contracts/LotteryReader.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {TestFunctions} from \\\"./utils/TestUtils.sol\\\";\\nimport {EmergencyFunctions} from \\\"./utils/EmergencyFunctions.sol\\\";\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\nimport { LotteryRound } from \\\"./LotteryRound.sol\\\";\\nimport { LotteryMaster } from \\\"./LotteryMaster.sol\\\";\\nimport {LotteryReaderInterface} from \\\"./LotteryReaderInterface.sol\\\";\\n\\ncontract LotteryReader is LotteryReaderInterface, EmergencyFunctions {\\n    LotteryMaster public lotteryMaster;\\n\\n    function setLotteryMaster(address _lotteryMaster) public onlyOwner {\\n        lotteryMaster = LotteryMaster(_lotteryMaster);\\n    }\\n\\n    constructor() EmergencyFunctions(tx.origin) {}\\n\\n    function poolForVictoryTier(uint256 roundId, RoundVictoryTier victoryTier) public view override returns(uint256) {\\n        require(victoryTier == RoundVictoryTier.Tier5_1 || victoryTier == RoundVictoryTier.Tier5 || victoryTier == RoundVictoryTier.Tier4_1 ||\\n        victoryTier == RoundVictoryTier.Tier4 || victoryTier == RoundVictoryTier.Tier3_1 || victoryTier == RoundVictoryTier.Tier3,\\n            \\\"Invalid victory tier\\\");\\n        return LotteryRound(lotteryMaster.rounds(roundId -1)).victoryTierAmounts(victoryTier);\\n    }\\n\\n    function roundNumbers(uint256 roundId) public view returns(uint16[] memory) {\\n        Round memory round = LotteryRound(lotteryMaster.rounds(roundId -1)).getRound();\\n        return round.roundNumbers;\\n    }\\n\\n    function referralWinnersNumber(uint256 roundId) public view returns(uint256[] memory) {\\n        Round memory round = LotteryRound(lotteryMaster.rounds(roundId -1)).getRound();\\n        return round.referralWinnersNumber;\\n    }\\n\\n    function poolForReferral(uint256 roundId) public view override returns(uint256) {\\n        return LotteryRound(lotteryMaster.rounds(roundId -1)).victoryTierAmounts(RoundVictoryTier.Referrer);\\n    }\\n\\n    function tokenHoldersPoolAmount(uint256 roundId) public view override returns (uint256) {\\n        return LotteryRound(lotteryMaster.rounds(roundId -1)).victoryTierAmounts(RoundVictoryTier.TokenHolders);\\n    }\\n\\n    function treasuryPoolAmount(uint256 roundId) public view override returns (uint256) {\\n        return LotteryRound(lotteryMaster.rounds(roundId -1)).victoryTierAmounts(RoundVictoryTier.Treasury);\\n    }\\n\\n    function numberOfReferralWinnersForRoundId(uint256 roundId) public view override returns (uint16) {\\n        uint16 referralWinnersForRound = 0;\\n        uint16 referralCounts = LotteryRound(lotteryMaster.rounds(roundId -1)).getRound().referralCounts;\\n        unchecked {\\n            referralWinnersForRound = referralCounts / lotteryMaster.percentageOfReferralWinners();\\n        }\\n        if (referralWinnersForRound == 0 && referralCounts > 0) {\\n            referralWinnersForRound = 1;\\n        }\\n        return referralWinnersForRound;\\n    }\\n\\n    function existInArrayBigNumber(uint256 num, uint256[] memory arr) public pure override returns (bool) {\\n        for (uint i = 0; i < arr.length; i++) {\\n            if (arr[i] == num) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function existInArrayNumber(uint16 num, uint16[] memory arr) public pure override returns (bool) {\\n        for (uint i = 0; i < arr.length; i++) {\\n            if (arr[i] == num) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function notExistInArrayNumber(uint16 num, uint16[] memory arr) public pure override returns (bool) {\\n        return existInArrayNumber(num, arr) == false;\\n    }\\n\\n    function getRandomUniqueNumberInArrayForMaxValue(uint256 randomNumber, uint16 maxValue, uint16[] memory arr) public pure override returns (uint16) {\\n        uint16 returnedNumber = uint16(randomNumber % maxValue + 1);\\n        uint16 counter = 0;\\n        bool existInNumbers = existInArrayNumber(returnedNumber, arr);\\n        while (existInNumbers) {\\n            returnedNumber =  uint16(uint256(keccak256(abi.encode(returnedNumber, counter))) % maxValue + 1);\\n            existInNumbers = existInArrayNumber(returnedNumber, arr);\\n            counter++;\\n        }\\n        return returnedNumber;\\n    }\\n\\n\\n    function tierFromResults(uint16 rightNumbersForTicket, bool powerNumberFound) public pure override returns (RoundVictoryTier) {\\n        if (rightNumbersForTicket == 5 && powerNumberFound) {\\n            return RoundVictoryTier.Tier5_1;\\n        } else if (rightNumbersForTicket == 5) {\\n            return RoundVictoryTier.Tier5;\\n        } else if (rightNumbersForTicket == 4 && powerNumberFound) {\\n            return RoundVictoryTier.Tier4_1;\\n        } else if (rightNumbersForTicket == 4) {\\n            return RoundVictoryTier.Tier4;\\n        } else if (rightNumbersForTicket == 3 && powerNumberFound) {\\n            return RoundVictoryTier.Tier3_1;\\n        } else if (rightNumbersForTicket == 3) {\\n            return RoundVictoryTier.Tier3;\\n        }\\n        return RoundVictoryTier.NO_WIN;\\n    }\\n\\n    function evaluateWonTicketsForRound(uint256 roundId) public view override returns (TicketResults[] memory){\\n        LotteryRound lotteryRound = LotteryRound(lotteryMaster.rounds(roundId - 1));\\n        Round memory roundForEvaluation = lotteryRound.getRound();\\n        uint16 roundTicketCount = roundForEvaluation.ticketsCount;\\n        TicketResults[] memory ticketResults = new TicketResults[](roundForEvaluation.ticketsCount);\\n        uint16 counter = 0;\\n        for(uint16 ticketIndexForRound = 0; ticketIndexForRound < roundTicketCount; ticketIndexForRound++) {\\n            Ticket memory ticket = lotteryRound.ticketById(roundForEvaluation.ticketIds[ticketIndexForRound]);\\n            uint16[] memory ticketNumbers = lotteryRound.numbersForTicketId(ticket.id);\\n            bool powerNumberFound = ticketNumbers[5] == roundForEvaluation.roundNumbers[5];\\n            uint16 rightNumbersForTicket = 0;\\n            for(uint16 i = 0; i < 5; i++) {\\n                uint16 ticketNumber = ticketNumbers[i];\\n                if (existInArrayNumber(ticketNumber, roundForEvaluation.roundNumbers)) {\\n                    rightNumbersForTicket++;\\n                }\\n            }\\n            RoundVictoryTier tierResult = tierFromResults(rightNumbersForTicket, powerNumberFound);\\n            uint256 amountWon = 0;\\n            if (tierResult != RoundVictoryTier.NO_WIN && lotteryRound.winnersForEachTier(tierResult) > 0) {\\n                amountWon = poolForVictoryTier(roundId, tierResult) / lotteryRound.winnersForEachTier(tierResult);\\n            }\\n            ticketResults[counter++] = TicketResults({\\n                ticketId: ticket.id,\\n                participantAddress : ticket.participantAddress,\\n                victoryTier: tierResult,\\n                won: tierResult != RoundVictoryTier.NO_WIN,\\n                claimed: ticket.claimed,\\n                amountWon : amountWon\\n            });\\n        }\\n        return ticketResults;\\n    }\\n\\n    function evaluateWonTicketsAmountForWallet(uint256 roundId, address wallet, bool claimed) public view override returns(uint256) {\\n        uint256 wonAmount = 0;\\n        LotteryRound lotteryRound = LotteryRound(lotteryMaster.rounds(roundId - 1));\\n        TicketResults[] memory results = evaluateWonTicketsForWallet(roundId, wallet);\\n        for (uint256 i = 0; i < results.length; i++) {\\n            if (results[i].claimed == claimed) {\\n                RoundVictoryTier tierForTicket = results[i].victoryTier;\\n                wonAmount += results[i].amountWon;\\n            }\\n        }\\n        return wonAmount;\\n    }\\n\\n    function evaluateWonTicketsForWallet(uint256 roundId, address wallet) public view override returns(TicketResults[] memory) {\\n        TicketResults[] memory results = evaluateWonTicketsForRound(roundId);\\n        uint256 counterForWalletTicket = 0;\\n        TicketResults[] memory resultsForWallet = new TicketResults[](results.length);\\n        for (uint256 i = 0; i < results.length; i++) {\\n            if (results[i].participantAddress == wallet && results[i].won) {\\n                resultsForWallet[counterForWalletTicket] = results[i];\\n                counterForWalletTicket++;\\n            }\\n        }\\n        TicketResults[] memory onlyResultsForWallet = new TicketResults[](counterForWalletTicket);\\n        for (uint256 i = 0; i < counterForWalletTicket; i++) {\\n            onlyResultsForWallet[i] = resultsForWallet[i];\\n        }\\n        return onlyResultsForWallet;\\n    }\\n\\n    function evaluateWonReferralForRound(uint256 roundId) public view override returns (ReferralTicketResults[] memory) {\\n        LotteryRound lotteryRound = LotteryRound(lotteryMaster.rounds(roundId - 1));\\n        Round memory roundForEvaluation = lotteryRound.getRound();\\n        ReferralTicketResults[] memory referralWinnerIds = new ReferralTicketResults[](roundForEvaluation.referralCounts);\\n        uint16 counter = 0;\\n        for(uint16 referralIndexForRound = 0; referralIndexForRound < roundForEvaluation.referralCounts; referralIndexForRound++) {\\n            ReferralTicket memory referralTicket = lotteryRound.referralTicketById(roundForEvaluation.referralTicketIds[referralIndexForRound]);\\n            bool referralWon = existInArrayBigNumber(referralTicket.referralTicketNumber, roundForEvaluation.referralWinnersNumber);\\n            uint256 amountWon = 0;\\n            if (referralWon && lotteryRound.winnersForEachTier(RoundVictoryTier.Referrer) > 0) {\\n                amountWon = poolForReferral(roundId) / lotteryRound.winnersForEachTier(RoundVictoryTier.Referrer);\\n            }\\n            referralWinnerIds[counter++] = ReferralTicketResults({\\n                referralTicketId: referralTicket.id,\\n                referralAddress : referralTicket.referralAddress,\\n                referralTicketNumber: referralTicket.referralTicketNumber,\\n                won: referralWon,\\n                claimed: referralTicket.claimed,\\n                amountWon : amountWon\\n            });\\n        }\\n        return referralWinnerIds;\\n    }\\n\\n    function evaluateWonReferralAmountForWallet(uint256 roundId, address wallet, bool claimed) public view override returns(uint256) {\\n        uint256 wonAmount = 0;\\n        LotteryRound lotteryRound = LotteryRound(lotteryMaster.rounds(roundId - 1));\\n        ReferralTicketResults[] memory results = evaluateWonReferralFoWallet(roundId, wallet);\\n        for (uint256 i = 0; i < results.length; i++) {\\n            if (results[i].claimed == claimed) {\\n                wonAmount += results[i].amountWon;\\n            }\\n        }\\n        return wonAmount;\\n    }\\n\\n    function evaluateWonReferralFoWallet(uint256 roundId, address wallet) public view override returns(ReferralTicketResults[] memory) {\\n        ReferralTicketResults[] memory results = evaluateWonReferralForRound(roundId);\\n        uint256 counterForWalletTicket = 0;\\n        ReferralTicketResults[] memory resultsForWallet = new ReferralTicketResults[](results.length);\\n        for (uint256 i = 0; i < results.length; i++) {\\n            if (results[i].referralAddress == wallet && results[i].won) {\\n                resultsForWallet[counterForWalletTicket] = results[i];\\n                counterForWalletTicket++;\\n            }\\n        }\\n        ReferralTicketResults[] memory onlyResultsForWallet = new ReferralTicketResults[](counterForWalletTicket);\\n        for (uint256 i = 0; i < counterForWalletTicket; i++) {\\n            onlyResultsForWallet[i] = resultsForWallet[i];\\n        }\\n        return onlyResultsForWallet;\\n    }\\n\\n    function amountWonInRound(uint256 roundId) public view override returns (uint256) {\\n        LotteryRound lotteryRound = LotteryRound(lotteryMaster.rounds(roundId -1));\\n        uint256 amountWon = 0;\\n        TicketResults[] memory ticketResults = evaluateWonTicketsForRound(roundId);\\n        ReferralTicketResults[] memory referralResults = evaluateWonReferralForRound(roundId);\\n        uint256 tier5_1Winners = 0;\\n        uint256 tier5Winners = 0;\\n        uint256 tier4_1Winners = 0;\\n        uint256 tier4Winners = 0;\\n        uint256 tier3_1Winners = 0;\\n        uint256 tier3Winners = 0;\\n        for(uint16 i = 0; i < ticketResults.length; i++) {\\n            if (ticketResults[i].victoryTier == RoundVictoryTier.Tier5_1) {\\n                tier5_1Winners++;\\n            } else if (ticketResults[i].victoryTier == RoundVictoryTier.Tier5) {\\n                tier5Winners++;\\n            } else if (ticketResults[i].victoryTier == RoundVictoryTier.Tier4_1) {\\n                tier4_1Winners++;\\n            } else if (ticketResults[i].victoryTier == RoundVictoryTier.Tier4) {\\n                tier4Winners++;\\n            } else if (ticketResults[i].victoryTier == RoundVictoryTier.Tier3_1) {\\n                tier3_1Winners++;\\n            } else if (ticketResults[i].victoryTier == RoundVictoryTier.Tier3) {\\n                tier3Winners++;\\n            }\\n        }\\n\\n        if (tier5_1Winners > 0) {\\n            amountWon += lotteryRound.victoryTierAmounts(RoundVictoryTier.Tier5_1);\\n        }\\n        if (tier5Winners > 0) {\\n            amountWon += lotteryRound.victoryTierAmounts(RoundVictoryTier.Tier5);\\n        }\\n        if (tier4_1Winners > 0) {\\n            amountWon += lotteryRound.victoryTierAmounts(RoundVictoryTier.Tier4_1);\\n        }\\n        if (tier4Winners > 0) {\\n            amountWon += lotteryRound.victoryTierAmounts(RoundVictoryTier.Tier4);\\n        }\\n        if (tier3_1Winners > 0) {\\n            amountWon += lotteryRound.victoryTierAmounts(RoundVictoryTier.Tier3_1);\\n        }\\n        if (tier3Winners > 0) {\\n            amountWon += lotteryRound.victoryTierAmounts(RoundVictoryTier.Tier3);\\n        }\\n        if (referralResults.length > 0) {\\n            amountWon += lotteryRound.victoryTierAmounts(RoundVictoryTier.Referrer);\\n        }\\n        return amountWon;\\n    }\\n}\",\"keccak256\":\"0x37e67391f4026325b255a5ba575fd40f1e5cf87a2f920f418d42ed806683f862\",\"license\":\"UNLICENSED\"},\"contracts/LotteryReaderInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {TestFunctions} from \\\"./utils/TestUtils.sol\\\";\\nimport {CyclixRandomizerInterface} from \\\"./CyclixRandomizerInterface.sol\\\";\\nimport {EmergencyFunctions} from \\\"./utils/EmergencyFunctions.sol\\\";\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\n\\ninterface LotteryReaderInterface {\\n    function poolForVictoryTier(uint256 roundId, RoundVictoryTier victoryTier) external view returns(uint256) ;\\n    function poolForReferral(uint256 roundId) external view returns(uint256) ;\\n    function tokenHoldersPoolAmount(uint256 roundId) external view returns (uint256) ;\\n    function treasuryPoolAmount(uint256 roundId) external view returns (uint256) ;\\n    function numberOfReferralWinnersForRoundId(uint256 roundId) external view returns (uint16) ;\\n    function existInArrayBigNumber(uint256 num, uint256[] memory arr) external pure returns (bool) ;\\n    function existInArrayNumber(uint16 num, uint16[] memory arr) external pure returns (bool) ;\\n    function notExistInArrayNumber(uint16 num, uint16[] memory arr) external pure returns (bool) ;\\n    function getRandomUniqueNumberInArrayForMaxValue(uint256 randomNumber, uint16 maxValue, uint16[] memory arr) external pure returns (uint16) ;\\n    function tierFromResults(uint16 rightNumbersForTicket, bool powerNumberFound) external pure returns (RoundVictoryTier) ;\\n    function evaluateWonTicketsForRound(uint256 roundId) external view returns (TicketResults[] memory);\\n    function evaluateWonTicketsAmountForWallet(uint256 roundId, address wallet, bool claimed) external view returns(uint256);\\n    function evaluateWonTicketsForWallet(uint256 roundId, address wallet) external view returns(TicketResults[] memory);\\n    function evaluateWonReferralForRound(uint256 roundId) external view returns (ReferralTicketResults[] memory);\\n    function evaluateWonReferralAmountForWallet(uint256 roundId, address wallet, bool claimed) external view returns(uint256);\\n    function evaluateWonReferralFoWallet(uint256 roundId, address wallet) external view returns (ReferralTicketResults[] memory);\\n    function amountWonInRound(uint256 roundId) external view returns (uint256) ;\\n    function roundNumbers(uint256 roundId) external view returns(uint16[] memory);\\n    function referralWinnersNumber(uint256 roundId) external view returns(uint256[] memory);\\n}\",\"keccak256\":\"0x25cbc61b70c089ba0cf35eb5e7c428babde4d5dae0d22c9498d13cddc9a83d39\",\"license\":\"UNLICENSED\"},\"contracts/LotteryRound.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\nimport {LotteryRoundInterface} from \\\"./LotteryRoundInterface.sol\\\";\\n\\ncontract LotteryRound is Ownable, LotteryRoundInterface {\\n    Round public round;\\n    function getRound() public view returns (Round memory) {\\n        return round;\\n    }\\n\\n    Ticket[] public tickets;\\n    function ticketById(uint256 ticketId) public view returns (Ticket memory) {\\n        return tickets[ticketId];\\n    }\\n    mapping(uint256 => uint16[]) public ticketNumbers;\\n    function numbersForTicketId(uint256 ticketId) public view returns (uint16[] memory) {\\n        return ticketNumbers[ticketId];\\n    }\\n    mapping(address => uint256[]) public roundTicketsByAddress;\\n    mapping(address => uint256) public roundTicketsByAddressCount;\\n\\n    ReferralTicket[] public referralTickets;\\n    function referralTicketById(uint256 index) public view returns (ReferralTicket memory) {\\n        return referralTickets[index];\\n    }\\n    mapping(address => uint256[]) public roundReferralTicketsByAddress;\\n    mapping(address => uint256) public roundReferralTicketsByAddressCount;\\n\\n    mapping(RoundVictoryTier => uint256) public victoryTierAmounts;\\n    mapping(RoundVictoryTier => uint256) public victoryTierAmountsClaimed;\\n    mapping(RoundVictoryTier => uint256) public winnersForEachTier;\\n    address public previousRound;\\n\\n    uint16[]  public  poolPercentagesBasePoints = [3000, 1500, 1000, 700, 500, 300, 1500, 1000, 500];\\n    function setPoolPercentagesBasePoints(uint16[] memory _poolPercentagesBasePoints) public onlyOwner {\\n        poolPercentagesBasePoints = _poolPercentagesBasePoints;\\n    }\\n\\n    constructor(address previousRoundAddress, uint256 roundDurationInSeconds) Ownable(msg.sender) {\\n        uint256 id = 1;\\n        previousRound = previousRoundAddress;\\n        if (previousRoundAddress != address(0)) {\\n            LotteryRound previousLotteryRound = LotteryRound(previousRoundAddress);\\n            id = previousLotteryRound.getRound().id + 1;\\n            propagateWinningFromPreviousRound();\\n        }\\n        round = Round({\\n            id: id,\\n            startTime: block.timestamp,\\n            endTime: block.timestamp + roundDurationInSeconds,\\n            ended : false,\\n            roundNumbers: new uint16[](0),\\n            referralWinnersNumber: new uint256[](0),\\n            referralWinnersNumberCount : 0,\\n            ticketIds : new uint256[](0),\\n            ticketsCount : 0,\\n            referralTicketIds : new uint256[](0),\\n            referralCounts : 0\\n        });\\n    }\\n\\n    function propagateWinningFromPreviousRound() internal {\\n        LotteryRound previousLotteryRound = LotteryRound(previousRound);\\n        victoryTierAmounts[RoundVictoryTier.Tier5_1] += previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Tier5_1) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Tier5_1);\\n        victoryTierAmounts[RoundVictoryTier.Tier5] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Tier5) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Tier5);\\n        victoryTierAmounts[RoundVictoryTier.Tier4_1] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Tier4_1) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Tier4_1);\\n        victoryTierAmounts[RoundVictoryTier.Tier4] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Tier4) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Tier4);\\n        victoryTierAmounts[RoundVictoryTier.Tier3_1] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Tier3_1) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Tier3_1);\\n        victoryTierAmounts[RoundVictoryTier.Tier3] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Tier3) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Tier3);\\n        victoryTierAmounts[RoundVictoryTier.PublicPool] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.PublicPool) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.PublicPool);\\n        victoryTierAmounts[RoundVictoryTier.Referrer] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Referrer) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Referrer);\\n        victoryTierAmounts[RoundVictoryTier.TokenHolders] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.TokenHolders) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.TokenHolders);\\n        victoryTierAmounts[RoundVictoryTier.Treasury] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Treasury) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Treasury);\\n    }\\n\\n    function numberIsInRangeForRound(uint256 number) public pure returns (bool) {\\n        return number > 0 && number <= 69;\\n    }\\n\\n    function numberIsInRangeForPowerNumber(uint256 number) public pure returns (bool) {\\n        return number > 0 && number <= 26;\\n    }\\n\\n    function validateBuyTicket(uint16[] memory numbers, address referral) public view onlyOwner {\\n        require(tx.origin != address(0), \\\"Invalid sender\\\");\\n        require(block.timestamp < round.endTime, \\\"Round is over\\\");\\n        require(numbers.length == 6, \\\"Invalid numbers count\\\");\\n        for (uint i = 0; i < numbers.length - 1; i++) {\\n            require(numberIsInRangeForRound(numbers[i]), \\\"Invalid numbers\\\");\\n        }\\n        require(numberIsInRangeForPowerNumber(numbers[5]), \\\"Invalid power number\\\");\\n        require(referral != tx.origin, \\\"Referral cannot be the same as the participant\\\");\\n    }\\n\\n    function percentageInBasisPoint(uint256 amount, uint256 basisPoint) public pure returns (uint256) {\\n        return amount * basisPoint / 10000;\\n    }\\n\\n    function treasuryAmountOnTicket(uint256 paymentTokenAmount) public view returns (uint256) {\\n        return percentageInBasisPoint(paymentTokenAmount, poolPercentagesBasePoints[8]);\\n    }\\n\\n    function updateVictoryPoolForTicket(uint256 paymentTokenAmount) public onlyOwner {\\n        uint256 forPublicPool = paymentTokenAmount;\\n        victoryTierAmounts[RoundVictoryTier.Tier5_1] += percentageInBasisPoint(forPublicPool, poolPercentagesBasePoints[0]);\\n        victoryTierAmounts[RoundVictoryTier.Tier5] += percentageInBasisPoint(forPublicPool, poolPercentagesBasePoints[1]);\\n        victoryTierAmounts[RoundVictoryTier.Tier4_1] += percentageInBasisPoint(forPublicPool, poolPercentagesBasePoints[2]);\\n        victoryTierAmounts[RoundVictoryTier.Tier4] += percentageInBasisPoint(forPublicPool, poolPercentagesBasePoints[3]);\\n        victoryTierAmounts[RoundVictoryTier.Tier3_1] += percentageInBasisPoint(forPublicPool, poolPercentagesBasePoints[4]);\\n        victoryTierAmounts[RoundVictoryTier.Tier3] += percentageInBasisPoint(forPublicPool, poolPercentagesBasePoints[5]);\\n        victoryTierAmounts[RoundVictoryTier.PublicPool] += forPublicPool;\\n        victoryTierAmounts[RoundVictoryTier.Referrer] += percentageInBasisPoint(paymentTokenAmount, poolPercentagesBasePoints[6]);\\n        victoryTierAmounts[RoundVictoryTier.TokenHolders] += percentageInBasisPoint(paymentTokenAmount, poolPercentagesBasePoints[7]);\\n        victoryTierAmounts[RoundVictoryTier.Treasury] += treasuryAmountOnTicket(paymentTokenAmount);\\n    }\\n\\n    function buyTicket(uint256 chainId, uint16[] memory chosenNumbers, address referral, address buyer) public onlyOwner {\\n        validateBuyTicket(chosenNumbers, referral);\\n\\n        uint256 ticketId = tickets.length;\\n        tickets.push(Ticket({\\n            id: ticketId,\\n            participantAddress: buyer,\\n            referralAddress: referral,\\n            claimed: false,\\n            chainId: chainId,\\n            victoryTier: RoundVictoryTier.NO_WIN\\n        }));\\n        for(uint i = 0; i < chosenNumbers.length; i++) {\\n            ticketNumbers[ticketId].push(chosenNumbers[i]);\\n        }\\n        round.ticketIds.push(ticketId);\\n        round.ticketsCount++;\\n\\n        roundTicketsByAddress[buyer].push(tickets.length - 1);\\n        roundTicketsByAddressCount[buyer]++;\\n        if (referral != address(0)) {\\n            uint256 referralTicketId = referralTickets.length;\\n            round.referralTicketIds.push(referralTicketId);\\n            round.referralCounts++;\\n            referralTickets.push(ReferralTicket({\\n                id: referralTicketId,\\n                referralAddress: referral,\\n                referralTicketNumber: uint16(round.referralCounts),\\n                winner: false,\\n                claimed: false\\n            }));\\n\\n            roundReferralTicketsByAddress[referral].push(referralTickets.length - 1);\\n            roundReferralTicketsByAddressCount[referral]++;\\n        }\\n    }\\n\\n    function closeRound() public onlyOwner {\\n        require(block.timestamp >= round.endTime, \\\"Round is not over yet\\\");\\n        round.ended = true;\\n    }\\n\\n    function couldReceiveWinningNumbers() public view {\\n        require(block.timestamp >= round.endTime, \\\"Round is not over yet\\\");\\n        require(round.roundNumbers.length == 0, \\\"Winning numbers already set\\\");\\n    }\\n\\n    function storeWinningNumbers(uint16[] memory roundNumbers, uint16[] memory referralWinnersNumber) public onlyOwner {\\n        round.roundNumbers = roundNumbers;\\n        round.referralWinnersNumber = referralWinnersNumber;\\n        round.referralWinnersNumberCount = uint16(referralWinnersNumber.length);\\n    }\\n\\n    function markWinners(TicketResults[] memory ticketResults, ReferralTicketResults[] memory referralTicketResults) public onlyOwner {\\n        for (uint i = 0; i < ticketResults.length; i++) {\\n            TicketResults memory ticketResult = ticketResults[i];\\n            Ticket storage ticket = tickets[ticketResult.ticketId];\\n            ticket.victoryTier = ticketResult.victoryTier;\\n            winnersForEachTier[ticketResult.victoryTier]++;\\n        }\\n        for (uint i = 0; i < referralTicketResults.length; i++) {\\n            ReferralTicketResults memory referralTicketResult = referralTicketResults[i];\\n            ReferralTicket storage referralTicket = referralTickets[referralTicketResult.referralTicketId];\\n            referralTicket.winner = referralTicketResult.won;\\n            if (referralTicketResult.won) {\\n                winnersForEachTier[RoundVictoryTier.Referrer]++;\\n            }\\n        }\\n    }\\n\\n    function markVictoryClaimed(TicketResults[] memory ticketResults, ReferralTicketResults[] memory referralTicketResults) public onlyOwner {\\n        for(uint i = 0; i < ticketResults.length; i++) {\\n            TicketResults memory ticketResult = ticketResults[i];\\n            Ticket storage ticket = tickets[ticketResult.ticketId];\\n            ticket.claimed = true;\\n            victoryTierAmountsClaimed[ticketResult.victoryTier] += ticketResult.amountWon;\\n        }\\n        for(uint i = 0; i < referralTicketResults.length; i++) {\\n            ReferralTicketResults memory referralTicketResult = referralTicketResults[i];\\n            ReferralTicket storage referralTicket = referralTickets[referralTicketResult.referralTicketId];\\n            referralTicket.claimed = true;\\n            victoryTierAmountsClaimed[RoundVictoryTier.Referrer] += referralTicketResult.amountWon;\\n        }\\n    }\\n\\n    function markReferralVictoryClaimed(uint256 referralTicketId, uint256 amountClaimed) public onlyOwner {\\n        ReferralTicket storage referralTicket = referralTickets[referralTicketId];\\n        referralTicket.claimed = true;\\n        victoryTierAmountsClaimed[RoundVictoryTier.Referrer] += amountClaimed;\\n    }\\n}\",\"keccak256\":\"0x34d2977b17def278d021f08d44861d22d510eba934ef749c2cbf40a325e673c1\",\"license\":\"UNLICENSED\"},\"contracts/LotteryRoundCreatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\ninterface LotteryRoundCreatorInterface {\\n   function startNewRound(uint256 roundDurationInSeconds, address previousRoundAddress) external returns(address);\\n}\",\"keccak256\":\"0x758edc675f9d3b6e91d052e64cf4ea0495d6639542acf1d41ddb2a4c825a392a\",\"license\":\"UNLICENSED\"},\"contracts/LotteryRoundInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\n\\ninterface LotteryRoundInterface {\\n    function getRound() external returns(Round memory);\\n    function markWinners(TicketResults[] memory ticketResults, ReferralTicketResults[] memory referralTicketResults) external;\\n    function markVictoryClaimed(TicketResults[] memory ticketResults, ReferralTicketResults[] memory referralTicketResults) external;\\n    function markReferralVictoryClaimed(uint256 referralTicketId, uint256 amountClaimed) external;\\n    function treasuryAmountOnTicket(uint256 paymentTokenAmount) external view returns (uint256);\\n    function updateVictoryPoolForTicket(uint256 paymentTokenAmount) external;\\n    function buyTicket(uint256 chainId, uint16[] memory chosenNumbers, address referral, address buyer) external;\\n    function closeRound() external;\\n    function couldReceiveWinningNumbers() external view;\\n    function storeWinningNumbers(uint16[] memory roundNumbers, uint16[] memory referralWinnersNumber) external;\\n    function ticketById(uint256 ticketId) external view returns (Ticket memory);\\n    function numbersForTicketId(uint256 ticketId) external view returns (uint16[] memory);\\n    function referralTicketById(uint256 index) external view returns (ReferralTicket memory);\\n    function setPoolPercentagesBasePoints(uint16[] memory _poolPercentagesBasePoints) external;\\n}\",\"keccak256\":\"0x5910a9ac432e27e783c9f6b5f9c595fa03d7be09a908e1d13376a76315c90e1e\",\"license\":\"UNLICENSED\"},\"contracts/utils/EmergencyFunctions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract EmergencyFunctions is Ownable {\\n    address internal teamAddress;\\n    constructor(address _teamAddress) Ownable(_teamAddress) {\\n        teamAddress = _teamAddress;\\n    }\\n\\n    function updateTeamAddress(address _teamAddress) public onlyOwner {\\n        teamAddress = _teamAddress;\\n    }\\n\\n    // Emergency Functions\\n    function sendTokenToTeam(address _token) public onlyOwner {\\n        uint256 amount = IERC20(_token).balanceOf(address(this));\\n        if (amount > 0) {\\n            SafeERC20.safeTransfer(IERC20(_token), teamAddress, amount);\\n        }\\n    }\\n\\n    function sendCryptoToTeam() public onlyOwner {\\n        if (address(this).balance > 0) {\\n            payable(teamAddress).transfer(address(this).balance);\\n        }\\n    }\\n\\n    /** @notice Check if an address is a contract */\\n    function _isContract(address _addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x68dcc6a4104e2905f65c342fdb2dbde1908113d10c006f5857b52dc0bbefd419\",\"license\":\"MIT\"},\"contracts/utils/TestUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.x <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IERC20Extension {\\n    function decimals() external view returns (uint8);\\n}\\n\\ncontract TestFunctions is Ownable {\\n    constructor() Ownable(msg.sender) {}\\n    //Used for mock testing, contract ownership will be renounced on release\\n    uint public currentTimestampOverride;\\n    function updateCurrentTimestampOverride(uint _v) external onlyOwner {\\n        currentTimestampOverride = _v;\\n    }\\n    function currentTimestamp() public view returns(uint) {\\n        if (currentTimestampOverride > 0) {\\n            return currentTimestampOverride;\\n        }\\n        return block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x8edb22ef91efc1d38ffbd50b48821f4fe23bdaf84a14de75d0df8231eb772bc4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b503280600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000895760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000809190620001ec565b60405180910390fd5b6200009a81620000e360201b60201c565b5080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000209565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001d482620001a7565b9050919050565b620001e681620001c7565b82525050565b6000602082019050620002036000830184620001db565b92915050565b61471780620002196000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c8063715018a6116100f9578063b7991e3311610097578063eed2589611610071578063eed2589614610552578063f1664df614610582578063f2fde38b146105b2578063fdfe8185146105ce576101a9565b8063b7991e33146104e8578063bbd1783a14610518578063e34208e614610522576101a9565b80638e0e3fcd116100d35780638e0e3fcd1461043c578063998da3e91461046c5780639f75e5c914610488578063a521dc95146104b8576101a9565b8063715018a6146103e45780638285cc5a146103ee5780638da5cb5b1461041e576101a9565b806348b2e35c1161016657806359103c121161014057806359103c12146103365780635dc9dbe81461036657806361ab0c891461038457806368525a4e146103b4576101a9565b806348b2e35c146102a657806349a0a1f6146102d65780634e00b9d314610306576101a9565b80630c746a8a146101ae57806314eb76ac146101de57806317ba3b7d146101fa57806322bd49a81461022a578063283b7f28146102465780633c73b4c414610276575b600080fd5b6101c860048036038101906101c3919061338d565b6105fe565b6040516101d5919061340b565b60405180910390f35b6101f860048036038101906101f39190613484565b6106aa565b005b610214600480360381019061020f91906134b1565b6106f6565b6040516102219190613654565b60405180910390f35b610244600480360381019061023f9190613484565b6108f1565b005b610260600480360381019061025b9190613676565b61093d565b60405161026d9190613752565b60405180910390f35b610290600480360381019061028b9190613676565b610a6b565b60405161029d9190613783565b60405180910390f35b6102c060048036038101906102bb9190613676565b6111b8565b6040516102cd9190613654565b60405180910390f35b6102f060048036038101906102eb9190613676565b6115d0565b6040516102fd9190613783565b60405180910390f35b610320600480360381019061031b919061379e565b6116fb565b60405161032d9190613809565b60405180910390f35b610350600480360381019061034b919061379e565b611715565b60405161035d9190613809565b60405180910390f35b61036e611772565b60405161037b9190613883565b60405180910390f35b61039e60048036038101906103999190613676565b611798565b6040516103ab9190613783565b60405180910390f35b6103ce60048036038101906103c99190613676565b6118c3565b6040516103db9190613783565b60405180910390f35b6103ec6119ee565b005b61040860048036038101906104039190613961565b611a02565b6040516104159190613809565b60405180910390f35b610426611a57565b60405161043391906139cc565b60405180910390f35b61045660048036038101906104519190613a0c565b611a80565b6040516104639190613783565b60405180910390f35b61048660048036038101906104819190613484565b611cfd565b005b6104a2600480360381019061049d9190613676565b611dbe565b6040516104af9190613bed565b60405180910390f35b6104d260048036038101906104cd9190613c3b565b612367565b6040516104df9190613783565b60405180910390f35b61050260048036038101906104fd9190613c3b565b6124a5565b60405161050f9190613783565b60405180910390f35b610520612607565b005b61053c60048036038101906105379190613c8e565b612684565b6040516105499190613cdd565b60405180910390f35b61056c600480360381019061056791906134b1565b61272d565b6040516105799190613bed565b60405180910390f35b61059c60048036038101906105979190613676565b612928565b6040516105a9919061340b565b60405180910390f35b6105cc60048036038101906105c79190613484565b612b2a565b005b6105e860048036038101906105e39190613676565b612bb0565b6040516105f59190613db6565b60405180910390f35b60008060018461ffff16866106139190613e07565b61061d9190613e67565b905060008061062c8386611715565b90505b801561069d5760018661ffff16848460405160200161064f929190613e9b565b6040516020818303038152906040528051906020012060001c6106729190613e07565b61067c9190613e67565b92506106888386611715565b9050818061069590613ec4565b92505061062f565b8293505050509392505050565b6106b2612cde565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000610703846111b8565b9050600080825167ffffffffffffffff8111156107235761072261324a565b5b60405190808252806020026020018201604052801561075c57816020015b6107496130fe565b8152602001906001900390816107415790505b50905060005b8351811015610839578573ffffffffffffffffffffffffffffffffffffffff1684828151811061079557610794613eee565b5b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff161480156107df57508381815181106107d2576107d1613eee565b5b6020026020010151606001515b1561082c578381815181106107f7576107f6613eee565b5b602002602001015182848151811061081257610811613eee565b5b6020026020010181905250828061082890613f1d565b9350505b8080600101915050610762565b5060008267ffffffffffffffff8111156108565761085561324a565b5b60405190808252806020026020018201604052801561088f57816020015b61087c6130fe565b8152602001906001900390816108745790505b50905060005b838110156108e3578281815181106108b0576108af613eee565b5b60200260200101518282815181106108cb576108ca613eee565b5b60200260200101819052508080600101915050610895565b508094505050505092915050565b6108f9612cde565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f60018561098c9190613f65565b6040518263ffffffff1660e01b81526004016109a89190613783565b602060405180830381865afa1580156109c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e99190613fae565b73ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa158015610a33573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610a5c91906142ce565b90508060a00151915050919050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600185610ab99190613f65565b6040518263ffffffff1660e01b8152600401610ad59190613783565b602060405180830381865afa158015610af2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b169190613fae565b9050600080610b2485611dbe565b90506000610b31866111b8565b905060008060008060008060005b88518161ffff161015610da6576001600a811115610b6057610b5f613a78565b5b898261ffff1681518110610b7757610b76613eee565b5b602002602001015160400151600a811115610b9557610b94613a78565b5b03610bad578680610ba590613f1d565b975050610d93565b6002600a811115610bc157610bc0613a78565b5b898261ffff1681518110610bd857610bd7613eee565b5b602002602001015160400151600a811115610bf657610bf5613a78565b5b03610c0e578580610c0690613f1d565b965050610d92565b6003600a811115610c2257610c21613a78565b5b898261ffff1681518110610c3957610c38613eee565b5b602002602001015160400151600a811115610c5757610c56613a78565b5b03610c6f578480610c6790613f1d565b955050610d91565b6004600a811115610c8357610c82613a78565b5b898261ffff1681518110610c9a57610c99613eee565b5b602002602001015160400151600a811115610cb857610cb7613a78565b5b03610cd0578380610cc890613f1d565b945050610d90565b6005600a811115610ce457610ce3613a78565b5b898261ffff1681518110610cfb57610cfa613eee565b5b602002602001015160400151600a811115610d1957610d18613a78565b5b03610d31578280610d2990613f1d565b935050610d8f565b6006600a811115610d4557610d44613a78565b5b898261ffff1681518110610d5c57610d5b613eee565b5b602002602001015160400151600a811115610d7a57610d79613a78565b5b03610d8e578180610d8a90613f1d565b9250505b5b5b5b5b5b8080610d9e90613ec4565b915050610b3f565b506000861115610e39578973ffffffffffffffffffffffffffffffffffffffff1663e2e3083060016040518263ffffffff1660e01b8152600401610dea9190613cdd565b602060405180830381865afa158015610e07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2b9190614317565b89610e369190613e67565b98505b6000851115610ecb578973ffffffffffffffffffffffffffffffffffffffff1663e2e3083060026040518263ffffffff1660e01b8152600401610e7c9190613cdd565b602060405180830381865afa158015610e99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebd9190614317565b89610ec89190613e67565b98505b6000841115610f5d578973ffffffffffffffffffffffffffffffffffffffff1663e2e3083060036040518263ffffffff1660e01b8152600401610f0e9190613cdd565b602060405180830381865afa158015610f2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4f9190614317565b89610f5a9190613e67565b98505b6000831115610fef578973ffffffffffffffffffffffffffffffffffffffff1663e2e3083060046040518263ffffffff1660e01b8152600401610fa09190613cdd565b602060405180830381865afa158015610fbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe19190614317565b89610fec9190613e67565b98505b6000821115611081578973ffffffffffffffffffffffffffffffffffffffff1663e2e3083060056040518263ffffffff1660e01b81526004016110329190613cdd565b602060405180830381865afa15801561104f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110739190614317565b8961107e9190613e67565b98505b6000811115611113578973ffffffffffffffffffffffffffffffffffffffff1663e2e3083060066040518263ffffffff1660e01b81526004016110c49190613cdd565b602060405180830381865afa1580156110e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111059190614317565b896111109190613e67565b98505b6000875111156111a6578973ffffffffffffffffffffffffffffffffffffffff1663e2e3083060076040518263ffffffff1660e01b81526004016111579190613cdd565b602060405180830381865afa158015611174573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111989190614317565b896111a39190613e67565b98505b889a5050505050505050505050919050565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f6001856112079190613f65565b6040518263ffffffff1660e01b81526004016112239190613783565b602060405180830381865afa158015611240573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112649190613fae565b905060008173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa1580156112b3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906112dc91906142ce565b9050600081610140015161ffff1667ffffffffffffffff8111156113035761130261324a565b5b60405190808252806020026020018201604052801561133c57816020015b6113296130fe565b8152602001906001900390816113215790505b5090506000805b83610140015161ffff168161ffff1610156115c35760008573ffffffffffffffffffffffffffffffffffffffff1663dd85ae5f8661012001518461ffff168151811061139257611391613eee565b5b60200260200101516040518263ffffffff1660e01b81526004016113b69190613783565b60a060405180830381865afa1580156113d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f791906143d0565b9050600061140d82604001518760a00151611a02565b90506000818015611498575060008873ffffffffffffffffffffffffffffffffffffffff1663efa3d53160076040518263ffffffff1660e01b81526004016114559190613cdd565b602060405180830381865afa158015611472573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114969190614317565b115b1561152e578773ffffffffffffffffffffffffffffffffffffffff1663efa3d53160076040518263ffffffff1660e01b81526004016114d79190613cdd565b602060405180830381865afa1580156114f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115189190614317565b6115218b6118c3565b61152b91906143fd565b90505b6040518060c0016040528084600001518152602001846020015173ffffffffffffffffffffffffffffffffffffffff1681526020018460400151815260200183151581526020018460800151151581526020018281525086868061159190613ec4565b975061ffff16815181106115a8576115a7613eee565b5b60200260200101819052505050508080600101915050611343565b5081945050505050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f60018461161d9190613f65565b6040518263ffffffff1660e01b81526004016116399190613783565b602060405180830381865afa158015611656573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167a9190613fae565b73ffffffffffffffffffffffffffffffffffffffff1663e2e3083060096040518263ffffffff1660e01b81526004016116b39190613cdd565b602060405180830381865afa1580156116d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f49190614317565b9050919050565b600080151561170a8484611715565b151514905092915050565b600080600090505b8251811015611766578361ffff1683828151811061173e5761173d613eee565b5b602002602001015161ffff160361175957600191505061176c565b808060010191505061171d565b50600090505b92915050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f6001846117e59190613f65565b6040518263ffffffff1660e01b81526004016118019190613783565b602060405180830381865afa15801561181e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118429190613fae565b73ffffffffffffffffffffffffffffffffffffffff1663e2e30830600a6040518263ffffffff1660e01b815260040161187b9190613cdd565b602060405180830381865afa158015611898573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118bc9190614317565b9050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f6001846119109190613f65565b6040518263ffffffff1660e01b815260040161192c9190613783565b602060405180830381865afa158015611949573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196d9190613fae565b73ffffffffffffffffffffffffffffffffffffffff1663e2e3083060076040518263ffffffff1660e01b81526004016119a69190613cdd565b602060405180830381865afa1580156119c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e79190614317565b9050919050565b6119f6612cde565b611a006000612d65565b565b600080600090505b8251811015611a4b5783838281518110611a2757611a26613eee565b5b602002602001015103611a3e576001915050611a51565b8080600101915050611a0a565b50600090505b92915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006001600a811115611a9657611a95613a78565b5b82600a811115611aa957611aa8613a78565b5b1480611ad957506002600a811115611ac457611ac3613a78565b5b82600a811115611ad757611ad6613a78565b5b145b80611b0857506003600a811115611af357611af2613a78565b5b82600a811115611b0657611b05613a78565b5b145b80611b3757506004600a811115611b2257611b21613a78565b5b82600a811115611b3557611b34613a78565b5b145b80611b6657506005600a811115611b5157611b50613a78565b5b82600a811115611b6457611b63613a78565b5b145b80611b9557506006600a811115611b8057611b7f613a78565b5b82600a811115611b9357611b92613a78565b5b145b611bd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bcb9061448b565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600185611c1f9190613f65565b6040518263ffffffff1660e01b8152600401611c3b9190613783565b602060405180830381865afa158015611c58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7c9190613fae565b73ffffffffffffffffffffffffffffffffffffffff1663e2e30830836040518263ffffffff1660e01b8152600401611cb49190613cdd565b602060405180830381865afa158015611cd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf59190614317565b905092915050565b611d05612cde565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611d4091906139cc565b602060405180830381865afa158015611d5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d819190614317565b90506000811115611dba57611db982600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683612e29565b5b5050565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600185611e0d9190613f65565b6040518263ffffffff1660e01b8152600401611e299190613783565b602060405180830381865afa158015611e46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6a9190613fae565b905060008173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa158015611eb9573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611ee291906142ce565b905060008161010001519050600082610100015161ffff1667ffffffffffffffff811115611f1357611f1261324a565b5b604051908082528060200260200182016040528015611f4c57816020015b611f3961314e565b815260200190600190039081611f315790505b5090506000805b8361ffff168161ffff1610156123595760008673ffffffffffffffffffffffffffffffffffffffff16639b7be8fc8760e001518461ffff1681518110611f9c57611f9b613eee565b5b60200260200101516040518263ffffffff1660e01b8152600401611fc09190613783565b60c060405180830381865afa158015611fdd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120019190614560565b905060008773ffffffffffffffffffffffffffffffffffffffff1663598f3b9d83600001516040518263ffffffff1660e01b81526004016120429190613783565b600060405180830381865afa15801561205f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612088919061458d565b9050600087608001516005815181106120a4576120a3613eee565b5b602002602001015161ffff16826005815181106120c4576120c3613eee565b5b602002602001015161ffff161490506000805b60058161ffff161015612137576000848261ffff16815181106120fd576120fc613eee565b5b60200260200101519050612115818c60800151611715565b1561212957828061212590613ec4565b9350505b5080806001019150506120d7565b5060006121448284612684565b9050600080600a81111561215b5761215a613a78565b5b82600a81111561216e5761216d613a78565b5b141580156121f5575060008c73ffffffffffffffffffffffffffffffffffffffff1663efa3d531846040518263ffffffff1660e01b81526004016121b29190613cdd565b602060405180830381865afa1580156121cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f39190614317565b115b1561228b578b73ffffffffffffffffffffffffffffffffffffffff1663efa3d531836040518263ffffffff1660e01b81526004016122339190613cdd565b602060405180830381865afa158015612250573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122749190614317565b61227e8f84611a80565b61228891906143fd565b90505b6040518060c0016040528087600001518152602001876020015173ffffffffffffffffffffffffffffffffffffffff16815260200183600a8111156122d3576122d2613a78565b5b81526020016000600a8111156122ec576122eb613a78565b5b84600a8111156122ff576122fe613a78565b5b1415151581526020018760600151151581526020018281525089898061232490613ec4565b9a5061ffff168151811061233b5761233a613eee565b5b60200260200101819052505050505050508080600101915050611f53565b508195505050505050919050565b600080600090506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f6001886123bb9190613f65565b6040518263ffffffff1660e01b81526004016123d79190613783565b602060405180830381865afa1580156123f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124189190613fae565b9050600061242687876106f6565b905060005b81518110156124975785151582828151811061244a57612449613eee565b5b60200260200101516080015115150361248a578181815181106124705761246f613eee565b5b602002602001015160a00151846124879190613e67565b93505b808060010191505061242b565b508293505050509392505050565b600080600090506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f6001886124f99190613f65565b6040518263ffffffff1660e01b81526004016125159190613783565b602060405180830381865afa158015612532573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125569190613fae565b90506000612564878761272d565b905060005b81518110156125f95785151582828151811061258857612587613eee565b5b6020026020010151608001511515036125ec5760008282815181106125b0576125af613eee565b5b60200260200101516040015190508282815181106125d1576125d0613eee565b5b602002602001015160a00151856125e89190613e67565b9450505b8080600101915050612569565b508293505050509392505050565b61260f612cde565b600047111561268257600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015612680573d6000803e3d6000fd5b505b565b600060058361ffff161480156126975750815b156126a55760019050612727565b60058361ffff16036126ba5760029050612727565b60048361ffff161480156126cb5750815b156126d95760039050612727565b60048361ffff16036126ee5760049050612727565b60038361ffff161480156126ff5750815b1561270d5760059050612727565b60038361ffff16036127225760069050612727565b600090505b92915050565b6060600061273a84611dbe565b9050600080825167ffffffffffffffff81111561275a5761275961324a565b5b60405190808252806020026020018201604052801561279357816020015b61278061314e565b8152602001906001900390816127785790505b50905060005b8351811015612870578573ffffffffffffffffffffffffffffffffffffffff168482815181106127cc576127cb613eee565b5b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff16148015612816575083818151811061280957612808613eee565b5b6020026020010151606001515b156128635783818151811061282e5761282d613eee565b5b602002602001015182848151811061284957612848613eee565b5b6020026020010181905250828061285f90613f1d565b9350505b8080600101915050612799565b5060008267ffffffffffffffff81111561288d5761288c61324a565b5b6040519080825280602002602001820160405280156128c657816020015b6128b361314e565b8152602001906001900390816128ab5790505b50905060005b8381101561291a578281815181106128e7576128e6613eee565b5b602002602001015182828151811061290257612901613eee565b5b602002602001018190525080806001019150506128cc565b508094505050505092915050565b600080600090506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f60018661297c9190613f65565b6040518263ffffffff1660e01b81526004016129989190613783565b602060405180830381865afa1580156129b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129d99190613fae565b73ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa158015612a23573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612a4c91906142ce565b61014001519050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f4dec22b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ac0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ae491906145d6565b61ffff168161ffff1681612afb57612afa613dd8565b5b04915060008261ffff16148015612b16575060008161ffff16115b15612b2057600191505b8192505050919050565b612b32612cde565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612ba45760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401612b9b91906139cc565b60405180910390fd5b612bad81612d65565b50565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600185612bff9190613f65565b6040518263ffffffff1660e01b8152600401612c1b9190613783565b602060405180830381865afa158015612c38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c5c9190613fae565b73ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa158015612ca6573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612ccf91906142ce565b90508060800151915050919050565b612ce6612ea8565b73ffffffffffffffffffffffffffffffffffffffff16612d04611a57565b73ffffffffffffffffffffffffffffffffffffffff1614612d6357612d27612ea8565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401612d5a91906139cc565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b612ea3838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401612e5c929190614603565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612eb0565b505050565b600033905090565b6000612edb828473ffffffffffffffffffffffffffffffffffffffff16612f4790919063ffffffff16565b90506000815114158015612f00575080806020019051810190612efe919061462c565b155b15612f4257826040517f5274afe7000000000000000000000000000000000000000000000000000000008152600401612f3991906139cc565b60405180910390fd5b505050565b6060612f5583836000612f5d565b905092915050565b606081471015612fa457306040517fcd786059000000000000000000000000000000000000000000000000000000008152600401612f9b91906139cc565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff168486604051612fcd91906146ca565b60006040518083038185875af1925050503d806000811461300a576040519150601f19603f3d011682016040523d82523d6000602084013e61300f565b606091505b509150915061301f86838361302a565b925050509392505050565b60608261303f5761303a826130b9565b6130b1565b60008251148015613067575060008473ffffffffffffffffffffffffffffffffffffffff163b145b156130a957836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016130a091906139cc565b60405180910390fd5b8190506130b2565b5b9392505050565b6000815111156130cc5780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600015158152602001600015158152602001600081525090565b6040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000600a81111561319157613190613a78565b5b8152602001600015158152602001600015158152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6131d7816131c4565b81146131e257600080fd5b50565b6000813590506131f4816131ce565b92915050565b600061ffff82169050919050565b613211816131fa565b811461321c57600080fd5b50565b60008135905061322e81613208565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61328282613239565b810181811067ffffffffffffffff821117156132a1576132a061324a565b5b80604052505050565b60006132b46131b0565b90506132c08282613279565b919050565b600067ffffffffffffffff8211156132e0576132df61324a565b5b602082029050602081019050919050565b600080fd5b6000613309613304846132c5565b6132aa565b9050808382526020820190506020840283018581111561332c5761332b6132f1565b5b835b818110156133555780613341888261321f565b84526020840193505060208101905061332e565b5050509392505050565b600082601f83011261337457613373613234565b5b81356133848482602086016132f6565b91505092915050565b6000806000606084860312156133a6576133a56131ba565b5b60006133b4868287016131e5565b93505060206133c58682870161321f565b925050604084013567ffffffffffffffff8111156133e6576133e56131bf565b5b6133f28682870161335f565b9150509250925092565b613405816131fa565b82525050565b600060208201905061342060008301846133fc565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061345182613426565b9050919050565b61346181613446565b811461346c57600080fd5b50565b60008135905061347e81613458565b92915050565b60006020828403121561349a576134996131ba565b5b60006134a88482850161346f565b91505092915050565b600080604083850312156134c8576134c76131ba565b5b60006134d6858286016131e5565b92505060206134e78582860161346f565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613526816131c4565b82525050565b61353581613446565b82525050565b60008115159050919050565b6135508161353b565b82525050565b60c08201600082015161356c600085018261351d565b50602082015161357f602085018261352c565b506040820151613592604085018261351d565b5060608201516135a56060850182613547565b5060808201516135b86080850182613547565b5060a08201516135cb60a085018261351d565b50505050565b60006135dd8383613556565b60c08301905092915050565b6000602082019050919050565b6000613601826134f1565b61360b81856134fc565b93506136168361350d565b8060005b8381101561364757815161362e88826135d1565b9750613639836135e9565b92505060018101905061361a565b5085935050505092915050565b6000602082019050818103600083015261366e81846135f6565b905092915050565b60006020828403121561368c5761368b6131ba565b5b600061369a848285016131e5565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006136db838361351d565b60208301905092915050565b6000602082019050919050565b60006136ff826136a3565b61370981856136ae565b9350613714836136bf565b8060005b8381101561374557815161372c88826136cf565b9750613737836136e7565b925050600181019050613718565b5085935050505092915050565b6000602082019050818103600083015261376c81846136f4565b905092915050565b61377d816131c4565b82525050565b60006020820190506137986000830184613774565b92915050565b600080604083850312156137b5576137b46131ba565b5b60006137c38582860161321f565b925050602083013567ffffffffffffffff8111156137e4576137e36131bf565b5b6137f08582860161335f565b9150509250929050565b6138038161353b565b82525050565b600060208201905061381e60008301846137fa565b92915050565b6000819050919050565b600061384961384461383f84613426565b613824565b613426565b9050919050565b600061385b8261382e565b9050919050565b600061386d82613850565b9050919050565b61387d81613862565b82525050565b60006020820190506138986000830184613874565b92915050565b600067ffffffffffffffff8211156138b9576138b861324a565b5b602082029050602081019050919050565b60006138dd6138d88461389e565b6132aa565b90508083825260208201905060208402830185811115613900576138ff6132f1565b5b835b81811015613929578061391588826131e5565b845260208401935050602081019050613902565b5050509392505050565b600082601f83011261394857613947613234565b5b81356139588482602086016138ca565b91505092915050565b60008060408385031215613978576139776131ba565b5b6000613986858286016131e5565b925050602083013567ffffffffffffffff8111156139a7576139a66131bf565b5b6139b385828601613933565b9150509250929050565b6139c681613446565b82525050565b60006020820190506139e160008301846139bd565b92915050565b600b81106139f457600080fd5b50565b600081359050613a06816139e7565b92915050565b60008060408385031215613a2357613a226131ba565b5b6000613a31858286016131e5565b9250506020613a42858286016139f7565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600b8110613ab857613ab7613a78565b5b50565b6000819050613ac982613aa7565b919050565b6000613ad982613abb565b9050919050565b613ae981613ace565b82525050565b60c082016000820151613b05600085018261351d565b506020820151613b18602085018261352c565b506040820151613b2b6040850182613ae0565b506060820151613b3e6060850182613547565b506080820151613b516080850182613547565b5060a0820151613b6460a085018261351d565b50505050565b6000613b768383613aef565b60c08301905092915050565b6000602082019050919050565b6000613b9a82613a4c565b613ba48185613a57565b9350613baf83613a68565b8060005b83811015613be0578151613bc78882613b6a565b9750613bd283613b82565b925050600181019050613bb3565b5085935050505092915050565b60006020820190508181036000830152613c078184613b8f565b905092915050565b613c188161353b565b8114613c2357600080fd5b50565b600081359050613c3581613c0f565b92915050565b600080600060608486031215613c5457613c536131ba565b5b6000613c62868287016131e5565b9350506020613c738682870161346f565b9250506040613c8486828701613c26565b9150509250925092565b60008060408385031215613ca557613ca46131ba565b5b6000613cb38582860161321f565b9250506020613cc485828601613c26565b9150509250929050565b613cd781613ace565b82525050565b6000602082019050613cf26000830184613cce565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613d2d816131fa565b82525050565b6000613d3f8383613d24565b60208301905092915050565b6000602082019050919050565b6000613d6382613cf8565b613d6d8185613d03565b9350613d7883613d14565b8060005b83811015613da9578151613d908882613d33565b9750613d9b83613d4b565b925050600181019050613d7c565b5085935050505092915050565b60006020820190508181036000830152613dd08184613d58565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613e12826131c4565b9150613e1d836131c4565b925082613e2d57613e2c613dd8565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613e72826131c4565b9150613e7d836131c4565b9250828201905080821115613e9557613e94613e38565b5b92915050565b6000604082019050613eb060008301856133fc565b613ebd60208301846133fc565b9392505050565b6000613ecf826131fa565b915061ffff8203613ee357613ee2613e38565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000613f28826131c4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613f5a57613f59613e38565b5b600182019050919050565b6000613f70826131c4565b9150613f7b836131c4565b9250828203905081811115613f9357613f92613e38565b5b92915050565b600081519050613fa881613458565b92915050565b600060208284031215613fc457613fc36131ba565b5b6000613fd284828501613f99565b91505092915050565b600080fd5b600080fd5b600081519050613ff4816131ce565b92915050565b60008151905061400981613c0f565b92915050565b60008151905061401e81613208565b92915050565b6000614037614032846132c5565b6132aa565b9050808382526020820190506020840283018581111561405a576140596132f1565b5b835b81811015614083578061406f888261400f565b84526020840193505060208101905061405c565b5050509392505050565b600082601f8301126140a2576140a1613234565b5b81516140b2848260208601614024565b91505092915050565b60006140ce6140c98461389e565b6132aa565b905080838252602082019050602084028301858111156140f1576140f06132f1565b5b835b8181101561411a57806141068882613fe5565b8452602084019350506020810190506140f3565b5050509392505050565b600082601f83011261413957614138613234565b5b81516141498482602086016140bb565b91505092915050565b6000610160828403121561416957614168613fdb565b5b6141746101606132aa565b9050600061418484828501613fe5565b600083015250602061419884828501613fe5565b60208301525060406141ac84828501613fe5565b60408301525060606141c084828501613ffa565b606083015250608082015167ffffffffffffffff8111156141e4576141e3613fe0565b5b6141f08482850161408d565b60808301525060a082015167ffffffffffffffff81111561421457614213613fe0565b5b61422084828501614124565b60a08301525060c06142348482850161400f565b60c08301525060e082015167ffffffffffffffff81111561425857614257613fe0565b5b61426484828501614124565b60e0830152506101006142798482850161400f565b6101008301525061012082015167ffffffffffffffff81111561429f5761429e613fe0565b5b6142ab84828501614124565b610120830152506101406142c18482850161400f565b6101408301525092915050565b6000602082840312156142e4576142e36131ba565b5b600082015167ffffffffffffffff811115614302576143016131bf565b5b61430e84828501614152565b91505092915050565b60006020828403121561432d5761432c6131ba565b5b600061433b84828501613fe5565b91505092915050565b600060a0828403121561435a57614359613fdb565b5b61436460a06132aa565b9050600061437484828501613fe5565b600083015250602061438884828501613f99565b602083015250604061439c84828501613fe5565b60408301525060606143b084828501613ffa565b60608301525060806143c484828501613ffa565b60808301525092915050565b600060a082840312156143e6576143e56131ba565b5b60006143f484828501614344565b91505092915050565b6000614408826131c4565b9150614413836131c4565b92508261442357614422613dd8565b5b828204905092915050565b600082825260208201905092915050565b7f496e76616c696420766963746f72792074696572000000000000000000000000600082015250565b600061447560148361442e565b91506144808261443f565b602082019050919050565b600060208201905081810360008301526144a481614468565b9050919050565b6000815190506144ba816139e7565b92915050565b600060c082840312156144d6576144d5613fdb565b5b6144e060c06132aa565b905060006144f084828501613fe5565b600083015250602061450484828501613f99565b602083015250604061451884828501613f99565b604083015250606061452c84828501613ffa565b606083015250608061454084828501613fe5565b60808301525060a0614554848285016144ab565b60a08301525092915050565b600060c08284031215614576576145756131ba565b5b6000614584848285016144c0565b91505092915050565b6000602082840312156145a3576145a26131ba565b5b600082015167ffffffffffffffff8111156145c1576145c06131bf565b5b6145cd8482850161408d565b91505092915050565b6000602082840312156145ec576145eb6131ba565b5b60006145fa8482850161400f565b91505092915050565b600060408201905061461860008301856139bd565b6146256020830184613774565b9392505050565b600060208284031215614642576146416131ba565b5b600061465084828501613ffa565b91505092915050565b600081519050919050565b600081905092915050565b60005b8381101561468d578082015181840152602081019050614672565b60008484015250505050565b60006146a482614659565b6146ae8185614664565b93506146be81856020860161466f565b80840191505092915050565b60006146d68284614699565b91508190509291505056fea26469706673582212201b518ffd2f7db205ff4014370fb66b214d7f029929c6382cd198b75d0058e89964736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a95760003560e01c8063715018a6116100f9578063b7991e3311610097578063eed2589611610071578063eed2589614610552578063f1664df614610582578063f2fde38b146105b2578063fdfe8185146105ce576101a9565b8063b7991e33146104e8578063bbd1783a14610518578063e34208e614610522576101a9565b80638e0e3fcd116100d35780638e0e3fcd1461043c578063998da3e91461046c5780639f75e5c914610488578063a521dc95146104b8576101a9565b8063715018a6146103e45780638285cc5a146103ee5780638da5cb5b1461041e576101a9565b806348b2e35c1161016657806359103c121161014057806359103c12146103365780635dc9dbe81461036657806361ab0c891461038457806368525a4e146103b4576101a9565b806348b2e35c146102a657806349a0a1f6146102d65780634e00b9d314610306576101a9565b80630c746a8a146101ae57806314eb76ac146101de57806317ba3b7d146101fa57806322bd49a81461022a578063283b7f28146102465780633c73b4c414610276575b600080fd5b6101c860048036038101906101c3919061338d565b6105fe565b6040516101d5919061340b565b60405180910390f35b6101f860048036038101906101f39190613484565b6106aa565b005b610214600480360381019061020f91906134b1565b6106f6565b6040516102219190613654565b60405180910390f35b610244600480360381019061023f9190613484565b6108f1565b005b610260600480360381019061025b9190613676565b61093d565b60405161026d9190613752565b60405180910390f35b610290600480360381019061028b9190613676565b610a6b565b60405161029d9190613783565b60405180910390f35b6102c060048036038101906102bb9190613676565b6111b8565b6040516102cd9190613654565b60405180910390f35b6102f060048036038101906102eb9190613676565b6115d0565b6040516102fd9190613783565b60405180910390f35b610320600480360381019061031b919061379e565b6116fb565b60405161032d9190613809565b60405180910390f35b610350600480360381019061034b919061379e565b611715565b60405161035d9190613809565b60405180910390f35b61036e611772565b60405161037b9190613883565b60405180910390f35b61039e60048036038101906103999190613676565b611798565b6040516103ab9190613783565b60405180910390f35b6103ce60048036038101906103c99190613676565b6118c3565b6040516103db9190613783565b60405180910390f35b6103ec6119ee565b005b61040860048036038101906104039190613961565b611a02565b6040516104159190613809565b60405180910390f35b610426611a57565b60405161043391906139cc565b60405180910390f35b61045660048036038101906104519190613a0c565b611a80565b6040516104639190613783565b60405180910390f35b61048660048036038101906104819190613484565b611cfd565b005b6104a2600480360381019061049d9190613676565b611dbe565b6040516104af9190613bed565b60405180910390f35b6104d260048036038101906104cd9190613c3b565b612367565b6040516104df9190613783565b60405180910390f35b61050260048036038101906104fd9190613c3b565b6124a5565b60405161050f9190613783565b60405180910390f35b610520612607565b005b61053c60048036038101906105379190613c8e565b612684565b6040516105499190613cdd565b60405180910390f35b61056c600480360381019061056791906134b1565b61272d565b6040516105799190613bed565b60405180910390f35b61059c60048036038101906105979190613676565b612928565b6040516105a9919061340b565b60405180910390f35b6105cc60048036038101906105c79190613484565b612b2a565b005b6105e860048036038101906105e39190613676565b612bb0565b6040516105f59190613db6565b60405180910390f35b60008060018461ffff16866106139190613e07565b61061d9190613e67565b905060008061062c8386611715565b90505b801561069d5760018661ffff16848460405160200161064f929190613e9b565b6040516020818303038152906040528051906020012060001c6106729190613e07565b61067c9190613e67565b92506106888386611715565b9050818061069590613ec4565b92505061062f565b8293505050509392505050565b6106b2612cde565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000610703846111b8565b9050600080825167ffffffffffffffff8111156107235761072261324a565b5b60405190808252806020026020018201604052801561075c57816020015b6107496130fe565b8152602001906001900390816107415790505b50905060005b8351811015610839578573ffffffffffffffffffffffffffffffffffffffff1684828151811061079557610794613eee565b5b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff161480156107df57508381815181106107d2576107d1613eee565b5b6020026020010151606001515b1561082c578381815181106107f7576107f6613eee565b5b602002602001015182848151811061081257610811613eee565b5b6020026020010181905250828061082890613f1d565b9350505b8080600101915050610762565b5060008267ffffffffffffffff8111156108565761085561324a565b5b60405190808252806020026020018201604052801561088f57816020015b61087c6130fe565b8152602001906001900390816108745790505b50905060005b838110156108e3578281815181106108b0576108af613eee565b5b60200260200101518282815181106108cb576108ca613eee565b5b60200260200101819052508080600101915050610895565b508094505050505092915050565b6108f9612cde565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f60018561098c9190613f65565b6040518263ffffffff1660e01b81526004016109a89190613783565b602060405180830381865afa1580156109c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e99190613fae565b73ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa158015610a33573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610a5c91906142ce565b90508060a00151915050919050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600185610ab99190613f65565b6040518263ffffffff1660e01b8152600401610ad59190613783565b602060405180830381865afa158015610af2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b169190613fae565b9050600080610b2485611dbe565b90506000610b31866111b8565b905060008060008060008060005b88518161ffff161015610da6576001600a811115610b6057610b5f613a78565b5b898261ffff1681518110610b7757610b76613eee565b5b602002602001015160400151600a811115610b9557610b94613a78565b5b03610bad578680610ba590613f1d565b975050610d93565b6002600a811115610bc157610bc0613a78565b5b898261ffff1681518110610bd857610bd7613eee565b5b602002602001015160400151600a811115610bf657610bf5613a78565b5b03610c0e578580610c0690613f1d565b965050610d92565b6003600a811115610c2257610c21613a78565b5b898261ffff1681518110610c3957610c38613eee565b5b602002602001015160400151600a811115610c5757610c56613a78565b5b03610c6f578480610c6790613f1d565b955050610d91565b6004600a811115610c8357610c82613a78565b5b898261ffff1681518110610c9a57610c99613eee565b5b602002602001015160400151600a811115610cb857610cb7613a78565b5b03610cd0578380610cc890613f1d565b945050610d90565b6005600a811115610ce457610ce3613a78565b5b898261ffff1681518110610cfb57610cfa613eee565b5b602002602001015160400151600a811115610d1957610d18613a78565b5b03610d31578280610d2990613f1d565b935050610d8f565b6006600a811115610d4557610d44613a78565b5b898261ffff1681518110610d5c57610d5b613eee565b5b602002602001015160400151600a811115610d7a57610d79613a78565b5b03610d8e578180610d8a90613f1d565b9250505b5b5b5b5b5b8080610d9e90613ec4565b915050610b3f565b506000861115610e39578973ffffffffffffffffffffffffffffffffffffffff1663e2e3083060016040518263ffffffff1660e01b8152600401610dea9190613cdd565b602060405180830381865afa158015610e07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2b9190614317565b89610e369190613e67565b98505b6000851115610ecb578973ffffffffffffffffffffffffffffffffffffffff1663e2e3083060026040518263ffffffff1660e01b8152600401610e7c9190613cdd565b602060405180830381865afa158015610e99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebd9190614317565b89610ec89190613e67565b98505b6000841115610f5d578973ffffffffffffffffffffffffffffffffffffffff1663e2e3083060036040518263ffffffff1660e01b8152600401610f0e9190613cdd565b602060405180830381865afa158015610f2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4f9190614317565b89610f5a9190613e67565b98505b6000831115610fef578973ffffffffffffffffffffffffffffffffffffffff1663e2e3083060046040518263ffffffff1660e01b8152600401610fa09190613cdd565b602060405180830381865afa158015610fbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe19190614317565b89610fec9190613e67565b98505b6000821115611081578973ffffffffffffffffffffffffffffffffffffffff1663e2e3083060056040518263ffffffff1660e01b81526004016110329190613cdd565b602060405180830381865afa15801561104f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110739190614317565b8961107e9190613e67565b98505b6000811115611113578973ffffffffffffffffffffffffffffffffffffffff1663e2e3083060066040518263ffffffff1660e01b81526004016110c49190613cdd565b602060405180830381865afa1580156110e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111059190614317565b896111109190613e67565b98505b6000875111156111a6578973ffffffffffffffffffffffffffffffffffffffff1663e2e3083060076040518263ffffffff1660e01b81526004016111579190613cdd565b602060405180830381865afa158015611174573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111989190614317565b896111a39190613e67565b98505b889a5050505050505050505050919050565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f6001856112079190613f65565b6040518263ffffffff1660e01b81526004016112239190613783565b602060405180830381865afa158015611240573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112649190613fae565b905060008173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa1580156112b3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906112dc91906142ce565b9050600081610140015161ffff1667ffffffffffffffff8111156113035761130261324a565b5b60405190808252806020026020018201604052801561133c57816020015b6113296130fe565b8152602001906001900390816113215790505b5090506000805b83610140015161ffff168161ffff1610156115c35760008573ffffffffffffffffffffffffffffffffffffffff1663dd85ae5f8661012001518461ffff168151811061139257611391613eee565b5b60200260200101516040518263ffffffff1660e01b81526004016113b69190613783565b60a060405180830381865afa1580156113d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f791906143d0565b9050600061140d82604001518760a00151611a02565b90506000818015611498575060008873ffffffffffffffffffffffffffffffffffffffff1663efa3d53160076040518263ffffffff1660e01b81526004016114559190613cdd565b602060405180830381865afa158015611472573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114969190614317565b115b1561152e578773ffffffffffffffffffffffffffffffffffffffff1663efa3d53160076040518263ffffffff1660e01b81526004016114d79190613cdd565b602060405180830381865afa1580156114f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115189190614317565b6115218b6118c3565b61152b91906143fd565b90505b6040518060c0016040528084600001518152602001846020015173ffffffffffffffffffffffffffffffffffffffff1681526020018460400151815260200183151581526020018460800151151581526020018281525086868061159190613ec4565b975061ffff16815181106115a8576115a7613eee565b5b60200260200101819052505050508080600101915050611343565b5081945050505050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f60018461161d9190613f65565b6040518263ffffffff1660e01b81526004016116399190613783565b602060405180830381865afa158015611656573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167a9190613fae565b73ffffffffffffffffffffffffffffffffffffffff1663e2e3083060096040518263ffffffff1660e01b81526004016116b39190613cdd565b602060405180830381865afa1580156116d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f49190614317565b9050919050565b600080151561170a8484611715565b151514905092915050565b600080600090505b8251811015611766578361ffff1683828151811061173e5761173d613eee565b5b602002602001015161ffff160361175957600191505061176c565b808060010191505061171d565b50600090505b92915050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f6001846117e59190613f65565b6040518263ffffffff1660e01b81526004016118019190613783565b602060405180830381865afa15801561181e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118429190613fae565b73ffffffffffffffffffffffffffffffffffffffff1663e2e30830600a6040518263ffffffff1660e01b815260040161187b9190613cdd565b602060405180830381865afa158015611898573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118bc9190614317565b9050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f6001846119109190613f65565b6040518263ffffffff1660e01b815260040161192c9190613783565b602060405180830381865afa158015611949573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196d9190613fae565b73ffffffffffffffffffffffffffffffffffffffff1663e2e3083060076040518263ffffffff1660e01b81526004016119a69190613cdd565b602060405180830381865afa1580156119c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e79190614317565b9050919050565b6119f6612cde565b611a006000612d65565b565b600080600090505b8251811015611a4b5783838281518110611a2757611a26613eee565b5b602002602001015103611a3e576001915050611a51565b8080600101915050611a0a565b50600090505b92915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006001600a811115611a9657611a95613a78565b5b82600a811115611aa957611aa8613a78565b5b1480611ad957506002600a811115611ac457611ac3613a78565b5b82600a811115611ad757611ad6613a78565b5b145b80611b0857506003600a811115611af357611af2613a78565b5b82600a811115611b0657611b05613a78565b5b145b80611b3757506004600a811115611b2257611b21613a78565b5b82600a811115611b3557611b34613a78565b5b145b80611b6657506005600a811115611b5157611b50613a78565b5b82600a811115611b6457611b63613a78565b5b145b80611b9557506006600a811115611b8057611b7f613a78565b5b82600a811115611b9357611b92613a78565b5b145b611bd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bcb9061448b565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600185611c1f9190613f65565b6040518263ffffffff1660e01b8152600401611c3b9190613783565b602060405180830381865afa158015611c58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7c9190613fae565b73ffffffffffffffffffffffffffffffffffffffff1663e2e30830836040518263ffffffff1660e01b8152600401611cb49190613cdd565b602060405180830381865afa158015611cd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf59190614317565b905092915050565b611d05612cde565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611d4091906139cc565b602060405180830381865afa158015611d5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d819190614317565b90506000811115611dba57611db982600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683612e29565b5b5050565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600185611e0d9190613f65565b6040518263ffffffff1660e01b8152600401611e299190613783565b602060405180830381865afa158015611e46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6a9190613fae565b905060008173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa158015611eb9573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611ee291906142ce565b905060008161010001519050600082610100015161ffff1667ffffffffffffffff811115611f1357611f1261324a565b5b604051908082528060200260200182016040528015611f4c57816020015b611f3961314e565b815260200190600190039081611f315790505b5090506000805b8361ffff168161ffff1610156123595760008673ffffffffffffffffffffffffffffffffffffffff16639b7be8fc8760e001518461ffff1681518110611f9c57611f9b613eee565b5b60200260200101516040518263ffffffff1660e01b8152600401611fc09190613783565b60c060405180830381865afa158015611fdd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120019190614560565b905060008773ffffffffffffffffffffffffffffffffffffffff1663598f3b9d83600001516040518263ffffffff1660e01b81526004016120429190613783565b600060405180830381865afa15801561205f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612088919061458d565b9050600087608001516005815181106120a4576120a3613eee565b5b602002602001015161ffff16826005815181106120c4576120c3613eee565b5b602002602001015161ffff161490506000805b60058161ffff161015612137576000848261ffff16815181106120fd576120fc613eee565b5b60200260200101519050612115818c60800151611715565b1561212957828061212590613ec4565b9350505b5080806001019150506120d7565b5060006121448284612684565b9050600080600a81111561215b5761215a613a78565b5b82600a81111561216e5761216d613a78565b5b141580156121f5575060008c73ffffffffffffffffffffffffffffffffffffffff1663efa3d531846040518263ffffffff1660e01b81526004016121b29190613cdd565b602060405180830381865afa1580156121cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f39190614317565b115b1561228b578b73ffffffffffffffffffffffffffffffffffffffff1663efa3d531836040518263ffffffff1660e01b81526004016122339190613cdd565b602060405180830381865afa158015612250573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122749190614317565b61227e8f84611a80565b61228891906143fd565b90505b6040518060c0016040528087600001518152602001876020015173ffffffffffffffffffffffffffffffffffffffff16815260200183600a8111156122d3576122d2613a78565b5b81526020016000600a8111156122ec576122eb613a78565b5b84600a8111156122ff576122fe613a78565b5b1415151581526020018760600151151581526020018281525089898061232490613ec4565b9a5061ffff168151811061233b5761233a613eee565b5b60200260200101819052505050505050508080600101915050611f53565b508195505050505050919050565b600080600090506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f6001886123bb9190613f65565b6040518263ffffffff1660e01b81526004016123d79190613783565b602060405180830381865afa1580156123f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124189190613fae565b9050600061242687876106f6565b905060005b81518110156124975785151582828151811061244a57612449613eee565b5b60200260200101516080015115150361248a578181815181106124705761246f613eee565b5b602002602001015160a00151846124879190613e67565b93505b808060010191505061242b565b508293505050509392505050565b600080600090506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f6001886124f99190613f65565b6040518263ffffffff1660e01b81526004016125159190613783565b602060405180830381865afa158015612532573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125569190613fae565b90506000612564878761272d565b905060005b81518110156125f95785151582828151811061258857612587613eee565b5b6020026020010151608001511515036125ec5760008282815181106125b0576125af613eee565b5b60200260200101516040015190508282815181106125d1576125d0613eee565b5b602002602001015160a00151856125e89190613e67565b9450505b8080600101915050612569565b508293505050509392505050565b61260f612cde565b600047111561268257600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015612680573d6000803e3d6000fd5b505b565b600060058361ffff161480156126975750815b156126a55760019050612727565b60058361ffff16036126ba5760029050612727565b60048361ffff161480156126cb5750815b156126d95760039050612727565b60048361ffff16036126ee5760049050612727565b60038361ffff161480156126ff5750815b1561270d5760059050612727565b60038361ffff16036127225760069050612727565b600090505b92915050565b6060600061273a84611dbe565b9050600080825167ffffffffffffffff81111561275a5761275961324a565b5b60405190808252806020026020018201604052801561279357816020015b61278061314e565b8152602001906001900390816127785790505b50905060005b8351811015612870578573ffffffffffffffffffffffffffffffffffffffff168482815181106127cc576127cb613eee565b5b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff16148015612816575083818151811061280957612808613eee565b5b6020026020010151606001515b156128635783818151811061282e5761282d613eee565b5b602002602001015182848151811061284957612848613eee565b5b6020026020010181905250828061285f90613f1d565b9350505b8080600101915050612799565b5060008267ffffffffffffffff81111561288d5761288c61324a565b5b6040519080825280602002602001820160405280156128c657816020015b6128b361314e565b8152602001906001900390816128ab5790505b50905060005b8381101561291a578281815181106128e7576128e6613eee565b5b602002602001015182828151811061290257612901613eee565b5b602002602001018190525080806001019150506128cc565b508094505050505092915050565b600080600090506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f60018661297c9190613f65565b6040518263ffffffff1660e01b81526004016129989190613783565b602060405180830381865afa1580156129b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129d99190613fae565b73ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa158015612a23573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612a4c91906142ce565b61014001519050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f4dec22b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ac0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ae491906145d6565b61ffff168161ffff1681612afb57612afa613dd8565b5b04915060008261ffff16148015612b16575060008161ffff16115b15612b2057600191505b8192505050919050565b612b32612cde565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612ba45760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401612b9b91906139cc565b60405180910390fd5b612bad81612d65565b50565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600185612bff9190613f65565b6040518263ffffffff1660e01b8152600401612c1b9190613783565b602060405180830381865afa158015612c38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c5c9190613fae565b73ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa158015612ca6573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612ccf91906142ce565b90508060800151915050919050565b612ce6612ea8565b73ffffffffffffffffffffffffffffffffffffffff16612d04611a57565b73ffffffffffffffffffffffffffffffffffffffff1614612d6357612d27612ea8565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401612d5a91906139cc565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b612ea3838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401612e5c929190614603565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612eb0565b505050565b600033905090565b6000612edb828473ffffffffffffffffffffffffffffffffffffffff16612f4790919063ffffffff16565b90506000815114158015612f00575080806020019051810190612efe919061462c565b155b15612f4257826040517f5274afe7000000000000000000000000000000000000000000000000000000008152600401612f3991906139cc565b60405180910390fd5b505050565b6060612f5583836000612f5d565b905092915050565b606081471015612fa457306040517fcd786059000000000000000000000000000000000000000000000000000000008152600401612f9b91906139cc565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff168486604051612fcd91906146ca565b60006040518083038185875af1925050503d806000811461300a576040519150601f19603f3d011682016040523d82523d6000602084013e61300f565b606091505b509150915061301f86838361302a565b925050509392505050565b60608261303f5761303a826130b9565b6130b1565b60008251148015613067575060008473ffffffffffffffffffffffffffffffffffffffff163b145b156130a957836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016130a091906139cc565b60405180910390fd5b8190506130b2565b5b9392505050565b6000815111156130cc5780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600015158152602001600015158152602001600081525090565b6040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000600a81111561319157613190613a78565b5b8152602001600015158152602001600015158152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6131d7816131c4565b81146131e257600080fd5b50565b6000813590506131f4816131ce565b92915050565b600061ffff82169050919050565b613211816131fa565b811461321c57600080fd5b50565b60008135905061322e81613208565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61328282613239565b810181811067ffffffffffffffff821117156132a1576132a061324a565b5b80604052505050565b60006132b46131b0565b90506132c08282613279565b919050565b600067ffffffffffffffff8211156132e0576132df61324a565b5b602082029050602081019050919050565b600080fd5b6000613309613304846132c5565b6132aa565b9050808382526020820190506020840283018581111561332c5761332b6132f1565b5b835b818110156133555780613341888261321f565b84526020840193505060208101905061332e565b5050509392505050565b600082601f83011261337457613373613234565b5b81356133848482602086016132f6565b91505092915050565b6000806000606084860312156133a6576133a56131ba565b5b60006133b4868287016131e5565b93505060206133c58682870161321f565b925050604084013567ffffffffffffffff8111156133e6576133e56131bf565b5b6133f28682870161335f565b9150509250925092565b613405816131fa565b82525050565b600060208201905061342060008301846133fc565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061345182613426565b9050919050565b61346181613446565b811461346c57600080fd5b50565b60008135905061347e81613458565b92915050565b60006020828403121561349a576134996131ba565b5b60006134a88482850161346f565b91505092915050565b600080604083850312156134c8576134c76131ba565b5b60006134d6858286016131e5565b92505060206134e78582860161346f565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613526816131c4565b82525050565b61353581613446565b82525050565b60008115159050919050565b6135508161353b565b82525050565b60c08201600082015161356c600085018261351d565b50602082015161357f602085018261352c565b506040820151613592604085018261351d565b5060608201516135a56060850182613547565b5060808201516135b86080850182613547565b5060a08201516135cb60a085018261351d565b50505050565b60006135dd8383613556565b60c08301905092915050565b6000602082019050919050565b6000613601826134f1565b61360b81856134fc565b93506136168361350d565b8060005b8381101561364757815161362e88826135d1565b9750613639836135e9565b92505060018101905061361a565b5085935050505092915050565b6000602082019050818103600083015261366e81846135f6565b905092915050565b60006020828403121561368c5761368b6131ba565b5b600061369a848285016131e5565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006136db838361351d565b60208301905092915050565b6000602082019050919050565b60006136ff826136a3565b61370981856136ae565b9350613714836136bf565b8060005b8381101561374557815161372c88826136cf565b9750613737836136e7565b925050600181019050613718565b5085935050505092915050565b6000602082019050818103600083015261376c81846136f4565b905092915050565b61377d816131c4565b82525050565b60006020820190506137986000830184613774565b92915050565b600080604083850312156137b5576137b46131ba565b5b60006137c38582860161321f565b925050602083013567ffffffffffffffff8111156137e4576137e36131bf565b5b6137f08582860161335f565b9150509250929050565b6138038161353b565b82525050565b600060208201905061381e60008301846137fa565b92915050565b6000819050919050565b600061384961384461383f84613426565b613824565b613426565b9050919050565b600061385b8261382e565b9050919050565b600061386d82613850565b9050919050565b61387d81613862565b82525050565b60006020820190506138986000830184613874565b92915050565b600067ffffffffffffffff8211156138b9576138b861324a565b5b602082029050602081019050919050565b60006138dd6138d88461389e565b6132aa565b90508083825260208201905060208402830185811115613900576138ff6132f1565b5b835b81811015613929578061391588826131e5565b845260208401935050602081019050613902565b5050509392505050565b600082601f83011261394857613947613234565b5b81356139588482602086016138ca565b91505092915050565b60008060408385031215613978576139776131ba565b5b6000613986858286016131e5565b925050602083013567ffffffffffffffff8111156139a7576139a66131bf565b5b6139b385828601613933565b9150509250929050565b6139c681613446565b82525050565b60006020820190506139e160008301846139bd565b92915050565b600b81106139f457600080fd5b50565b600081359050613a06816139e7565b92915050565b60008060408385031215613a2357613a226131ba565b5b6000613a31858286016131e5565b9250506020613a42858286016139f7565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600b8110613ab857613ab7613a78565b5b50565b6000819050613ac982613aa7565b919050565b6000613ad982613abb565b9050919050565b613ae981613ace565b82525050565b60c082016000820151613b05600085018261351d565b506020820151613b18602085018261352c565b506040820151613b2b6040850182613ae0565b506060820151613b3e6060850182613547565b506080820151613b516080850182613547565b5060a0820151613b6460a085018261351d565b50505050565b6000613b768383613aef565b60c08301905092915050565b6000602082019050919050565b6000613b9a82613a4c565b613ba48185613a57565b9350613baf83613a68565b8060005b83811015613be0578151613bc78882613b6a565b9750613bd283613b82565b925050600181019050613bb3565b5085935050505092915050565b60006020820190508181036000830152613c078184613b8f565b905092915050565b613c188161353b565b8114613c2357600080fd5b50565b600081359050613c3581613c0f565b92915050565b600080600060608486031215613c5457613c536131ba565b5b6000613c62868287016131e5565b9350506020613c738682870161346f565b9250506040613c8486828701613c26565b9150509250925092565b60008060408385031215613ca557613ca46131ba565b5b6000613cb38582860161321f565b9250506020613cc485828601613c26565b9150509250929050565b613cd781613ace565b82525050565b6000602082019050613cf26000830184613cce565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613d2d816131fa565b82525050565b6000613d3f8383613d24565b60208301905092915050565b6000602082019050919050565b6000613d6382613cf8565b613d6d8185613d03565b9350613d7883613d14565b8060005b83811015613da9578151613d908882613d33565b9750613d9b83613d4b565b925050600181019050613d7c565b5085935050505092915050565b60006020820190508181036000830152613dd08184613d58565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613e12826131c4565b9150613e1d836131c4565b925082613e2d57613e2c613dd8565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613e72826131c4565b9150613e7d836131c4565b9250828201905080821115613e9557613e94613e38565b5b92915050565b6000604082019050613eb060008301856133fc565b613ebd60208301846133fc565b9392505050565b6000613ecf826131fa565b915061ffff8203613ee357613ee2613e38565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000613f28826131c4565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613f5a57613f59613e38565b5b600182019050919050565b6000613f70826131c4565b9150613f7b836131c4565b9250828203905081811115613f9357613f92613e38565b5b92915050565b600081519050613fa881613458565b92915050565b600060208284031215613fc457613fc36131ba565b5b6000613fd284828501613f99565b91505092915050565b600080fd5b600080fd5b600081519050613ff4816131ce565b92915050565b60008151905061400981613c0f565b92915050565b60008151905061401e81613208565b92915050565b6000614037614032846132c5565b6132aa565b9050808382526020820190506020840283018581111561405a576140596132f1565b5b835b81811015614083578061406f888261400f565b84526020840193505060208101905061405c565b5050509392505050565b600082601f8301126140a2576140a1613234565b5b81516140b2848260208601614024565b91505092915050565b60006140ce6140c98461389e565b6132aa565b905080838252602082019050602084028301858111156140f1576140f06132f1565b5b835b8181101561411a57806141068882613fe5565b8452602084019350506020810190506140f3565b5050509392505050565b600082601f83011261413957614138613234565b5b81516141498482602086016140bb565b91505092915050565b6000610160828403121561416957614168613fdb565b5b6141746101606132aa565b9050600061418484828501613fe5565b600083015250602061419884828501613fe5565b60208301525060406141ac84828501613fe5565b60408301525060606141c084828501613ffa565b606083015250608082015167ffffffffffffffff8111156141e4576141e3613fe0565b5b6141f08482850161408d565b60808301525060a082015167ffffffffffffffff81111561421457614213613fe0565b5b61422084828501614124565b60a08301525060c06142348482850161400f565b60c08301525060e082015167ffffffffffffffff81111561425857614257613fe0565b5b61426484828501614124565b60e0830152506101006142798482850161400f565b6101008301525061012082015167ffffffffffffffff81111561429f5761429e613fe0565b5b6142ab84828501614124565b610120830152506101406142c18482850161400f565b6101408301525092915050565b6000602082840312156142e4576142e36131ba565b5b600082015167ffffffffffffffff811115614302576143016131bf565b5b61430e84828501614152565b91505092915050565b60006020828403121561432d5761432c6131ba565b5b600061433b84828501613fe5565b91505092915050565b600060a0828403121561435a57614359613fdb565b5b61436460a06132aa565b9050600061437484828501613fe5565b600083015250602061438884828501613f99565b602083015250604061439c84828501613fe5565b60408301525060606143b084828501613ffa565b60608301525060806143c484828501613ffa565b60808301525092915050565b600060a082840312156143e6576143e56131ba565b5b60006143f484828501614344565b91505092915050565b6000614408826131c4565b9150614413836131c4565b92508261442357614422613dd8565b5b828204905092915050565b600082825260208201905092915050565b7f496e76616c696420766963746f72792074696572000000000000000000000000600082015250565b600061447560148361442e565b91506144808261443f565b602082019050919050565b600060208201905081810360008301526144a481614468565b9050919050565b6000815190506144ba816139e7565b92915050565b600060c082840312156144d6576144d5613fdb565b5b6144e060c06132aa565b905060006144f084828501613fe5565b600083015250602061450484828501613f99565b602083015250604061451884828501613f99565b604083015250606061452c84828501613ffa565b606083015250608061454084828501613fe5565b60808301525060a0614554848285016144ab565b60a08301525092915050565b600060c08284031215614576576145756131ba565b5b6000614584848285016144c0565b91505092915050565b6000602082840312156145a3576145a26131ba565b5b600082015167ffffffffffffffff8111156145c1576145c06131bf565b5b6145cd8482850161408d565b91505092915050565b6000602082840312156145ec576145eb6131ba565b5b60006145fa8482850161400f565b91505092915050565b600060408201905061461860008301856139bd565b6146256020830184613774565b9392505050565b600060208284031215614642576146416131ba565b5b600061465084828501613ffa565b91505092915050565b600081519050919050565b600081905092915050565b60005b8381101561468d578082015181840152602081019050614672565b60008484015250505050565b60006146a482614659565b6146ae8185614664565b93506146be81856020860161466f565b80840191505092915050565b60006146d68284614699565b91508190509291505056fea26469706673582212201b518ffd2f7db205ff4014370fb66b214d7f029929c6382cd198b75d0058e89964736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/LotteryReader.sol:LotteryReader",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4896,
        "contract": "contracts/LotteryReader.sol:LotteryReader",
        "label": "teamAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2034,
        "contract": "contracts/LotteryReader.sol:LotteryReader",
        "label": "lotteryMaster",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(LotteryMaster)2004"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(LotteryMaster)2004": {
        "encoding": "inplace",
        "label": "contract LotteryMaster",
        "numberOfBytes": "20"
      }
    }
  }
}