{
  "address": "0x112Df1d1F9f43ac192Df4458D2E996af63352E81",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "amountWonInRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "claimed",
          "type": "bool"
        }
      ],
      "name": "evaluateWonReferralAmountForWallet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "evaluateWonReferralFoWallet",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "referralTicketId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "buyerAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "referralAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "referralTicketNumber",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "won",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "claimed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amountWon",
              "type": "uint256"
            }
          ],
          "internalType": "struct ReferralTicketResults[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "evaluateWonReferralForRound",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "referralTicketId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "buyerAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "referralAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "referralTicketNumber",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "won",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "claimed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amountWon",
              "type": "uint256"
            }
          ],
          "internalType": "struct ReferralTicketResults[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "claimed",
          "type": "bool"
        }
      ],
      "name": "evaluateWonTicketsAmountForWallet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "evaluateWonTicketsForRound",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "ticketId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "participantAddress",
              "type": "address"
            },
            {
              "internalType": "enum RoundVictoryTier",
              "name": "victoryTier",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "won",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "claimed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amountWon",
              "type": "uint256"
            }
          ],
          "internalType": "struct TicketResults[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "evaluateWonTicketsForWallet",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "ticketId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "participantAddress",
              "type": "address"
            },
            {
              "internalType": "enum RoundVictoryTier",
              "name": "victoryTier",
              "type": "uint8"
            },
            {
              "internalType": "bool",
              "name": "won",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "claimed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "amountWon",
              "type": "uint256"
            }
          ],
          "internalType": "struct TicketResults[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "num",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "arr",
          "type": "uint256[]"
        }
      ],
      "name": "existInArrayBigNumber",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "num",
          "type": "uint16"
        },
        {
          "internalType": "uint16[]",
          "name": "arr",
          "type": "uint16[]"
        }
      ],
      "name": "existInArrayNumber",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "getAllTicketsNumbersForRound",
      "outputs": [
        {
          "internalType": "uint16[]",
          "name": "",
          "type": "uint16[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "randomNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "maxValue",
          "type": "uint16"
        },
        {
          "internalType": "uint16[]",
          "name": "arr",
          "type": "uint16[]"
        }
      ],
      "name": "getRandomUniqueNumberInArrayForMaxValue",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "getReferralTicketsForRound",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "buyerAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "referralAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "referralTicketNumber",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "winner",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "claimed",
              "type": "bool"
            }
          ],
          "internalType": "struct ReferralTicket[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "getTicketsForRound",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "participantAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "referralAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "claimed",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "enum RoundVictoryTier",
              "name": "victoryTier",
              "type": "uint8"
            }
          ],
          "internalType": "struct Ticket[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lotteryMaster",
      "outputs": [
        {
          "internalType": "contract LotteryMaster",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "num",
          "type": "uint16"
        },
        {
          "internalType": "uint16[]",
          "name": "arr",
          "type": "uint16[]"
        }
      ],
      "name": "notExistInArrayNumber",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "numberOfReferralWinnersForRoundId",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "poolForReferral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "enum RoundVictoryTier",
          "name": "victoryTier",
          "type": "uint8"
        }
      ],
      "name": "poolForVictoryTier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "referralWinnersNumber",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "roundNumbers",
      "outputs": [
        {
          "internalType": "uint16[]",
          "name": "",
          "type": "uint16[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendCryptoToTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "sendTokenToTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lotteryMaster",
          "type": "address"
        }
      ],
      "name": "setLotteryMaster",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "rightNumbersForTicket",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "powerNumberFound",
          "type": "bool"
        }
      ],
      "name": "tierFromResults",
      "outputs": [
        {
          "internalType": "enum RoundVictoryTier",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "tokenHoldersPoolAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "treasuryPoolAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_teamAddress",
          "type": "address"
        }
      ],
      "name": "updateTeamAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x95856a0aa7d6823ab24d54c9a1517b9df4927fb7a95f525ebabbbd63e8bbda4a",
  "receipt": {
    "to": null,
    "from": "0x4eCa23Ffd5710970E22558C484a0D6943dA5eAa5",
    "contractAddress": "0x112Df1d1F9f43ac192Df4458D2E996af63352E81",
    "transactionIndex": 0,
    "gasUsed": "4455157",
    "logsBloom": "0x
    "blockHash": "0xdf615f7e88ca8fe5f2d14217e18d1e026f6ab63df4be57e2c09d2bfa00030270",
    "transactionHash": "0x95856a0aa7d6823ab24d54c9a1517b9df4927fb7a95f525ebabbbd63e8bbda4a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 32971954,
        "transactionHash": "0x95856a0aa7d6823ab24d54c9a1517b9df4927fb7a95f525ebabbbd63e8bbda4a",
        "address": "0x112Df1d1F9f43ac192Df4458D2E996af63352E81",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004eca23ffd5710970e22558c484a0d6943da5eaa5"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xdf615f7e88ca8fe5f2d14217e18d1e026f6ab63df4be57e2c09d2bfa00030270"
      }
    ],
    "blockNumber": 32971954,
    "cumulativeGasUsed": "4455157",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "797b9c502b6304311e881f95a6a81299",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"amountWonInRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"name\":\"evaluateWonReferralAmountForWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"evaluateWonReferralFoWallet\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"referralTicketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referralAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralTicketNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"won\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountWon\",\"type\":\"uint256\"}],\"internalType\":\"struct ReferralTicketResults[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"evaluateWonReferralForRound\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"referralTicketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referralAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralTicketNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"won\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountWon\",\"type\":\"uint256\"}],\"internalType\":\"struct ReferralTicketResults[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"name\":\"evaluateWonTicketsAmountForWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"evaluateWonTicketsForRound\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"participantAddress\",\"type\":\"address\"},{\"internalType\":\"enum RoundVictoryTier\",\"name\":\"victoryTier\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"won\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountWon\",\"type\":\"uint256\"}],\"internalType\":\"struct TicketResults[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"evaluateWonTicketsForWallet\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"participantAddress\",\"type\":\"address\"},{\"internalType\":\"enum RoundVictoryTier\",\"name\":\"victoryTier\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"won\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountWon\",\"type\":\"uint256\"}],\"internalType\":\"struct TicketResults[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"arr\",\"type\":\"uint256[]\"}],\"name\":\"existInArrayBigNumber\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"num\",\"type\":\"uint16\"},{\"internalType\":\"uint16[]\",\"name\":\"arr\",\"type\":\"uint16[]\"}],\"name\":\"existInArrayNumber\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getAllTicketsNumbersForRound\",\"outputs\":[{\"internalType\":\"uint16[]\",\"name\":\"\",\"type\":\"uint16[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"maxValue\",\"type\":\"uint16\"},{\"internalType\":\"uint16[]\",\"name\":\"arr\",\"type\":\"uint16[]\"}],\"name\":\"getRandomUniqueNumberInArrayForMaxValue\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getReferralTicketsForRound\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"buyerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referralAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralTicketNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"winner\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"internalType\":\"struct ReferralTicket[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"getTicketsForRound\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"participantAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referralAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"enum RoundVictoryTier\",\"name\":\"victoryTier\",\"type\":\"uint8\"}],\"internalType\":\"struct Ticket[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryMaster\",\"outputs\":[{\"internalType\":\"contract LotteryMaster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"num\",\"type\":\"uint16\"},{\"internalType\":\"uint16[]\",\"name\":\"arr\",\"type\":\"uint16[]\"}],\"name\":\"notExistInArrayNumber\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"numberOfReferralWinnersForRoundId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"poolForReferral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"enum RoundVictoryTier\",\"name\":\"victoryTier\",\"type\":\"uint8\"}],\"name\":\"poolForVictoryTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"referralWinnersNumber\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"roundNumbers\",\"outputs\":[{\"internalType\":\"uint16[]\",\"name\":\"\",\"type\":\"uint16[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendCryptoToTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sendTokenToTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lotteryMaster\",\"type\":\"address\"}],\"name\":\"setLotteryMaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"rightNumbersForTicket\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"powerNumberFound\",\"type\":\"bool\"}],\"name\":\"tierFromResults\",\"outputs\":[{\"internalType\":\"enum RoundVictoryTier\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"tokenHoldersPoolAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"treasuryPoolAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teamAddress\",\"type\":\"address\"}],\"name\":\"updateTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LotteryReader.sol\":\"LotteryReader\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/CyclixRandomizerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface CyclixRandomizerInterface {\\n    function requestRandomWords(uint32 numWords) external returns (uint256 requestId);\\n    function getRequestStatus(uint256 _requestId) external view returns (bool fulfilled, uint256[] memory randomWords);\\n    function registerGameContract(address gameAddress, string calldata name) external;\\n    function getLastRequestIdForCaller(address _gameAddress) external view returns (uint256);\\n    function recoverLostNumberRequest(uint256 _requestId) external returns (uint256);\\n}\",\"keccak256\":\"0xc71c2b020044355f41cc53069e9a6f9f2778311e8d601a29bcc608301a0dfe24\",\"license\":\"MIT\"},\"contracts/LotteryCommon.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\n    enum RoundVictoryTier {\\n        Tier5_1,\\n        Tier5,\\n        Tier4_1,\\n        Tier4,\\n        Tier3_1,\\n        Tier3,\\n        Referrer,\\n        TokenHolders,\\n        Treasury,\\n        NO_WIN\\n    }\\n\\n    struct Round {\\n        uint256 id;\\n        uint256 uiId;\\n        uint256 startTime;\\n        uint256 endTime;\\n        bool ended;\\n        uint16[] roundNumbers;\\n        uint256[] referralWinnersNumber;\\n        uint16 referralWinnersNumberCount;\\n        uint256[] ticketIds;\\n        uint16 ticketsCount;\\n        uint256[] referralTicketIds;\\n        uint16 referralCounts;\\n    }\\n\\n    struct Ticket {\\n        uint256 id;\\n        address participantAddress;\\n        address referralAddress;\\n        bool claimed;\\n        uint256 chainId;\\n        RoundVictoryTier victoryTier;\\n    }\\n\\n    struct TicketResults {\\n        uint256 ticketId;\\n        address participantAddress;\\n        RoundVictoryTier victoryTier;\\n        bool won;\\n        bool claimed;\\n        uint256 amountWon;\\n    }\\n\\n    struct ReferralTicket {\\n        uint256 id;\\n        address buyerAddress;\\n        address referralAddress;\\n        uint256 referralTicketNumber;\\n        bool winner;\\n        bool claimed;\\n    }\\n\\n    struct ReferralTicketResults {\\n        uint256 referralTicketId;\\n        address buyerAddress;\\n        address referralAddress;\\n        uint256 referralTicketNumber;\\n        bool won;\\n        bool claimed;\\n        uint256 amountWon;\\n    }\",\"keccak256\":\"0x18f928f2fd3df4033c8a3ee722d2eb90b69d7b12ebd66a09d60fc679425c2a0c\",\"license\":\"UNLICENSED\"},\"contracts/LotteryMaster.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {CyclixRandomizerInterface} from \\\"./CyclixRandomizerInterface.sol\\\";\\nimport {EmergencyFunctions} from \\\"./utils/EmergencyFunctions.sol\\\";\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\nimport { LotteryRoundInterface } from \\\"./LotteryRoundInterface.sol\\\";\\nimport { LotteryReaderInterface } from \\\"./LotteryReaderInterface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./LotteryRoundCreatorInterface.sol\\\";\\n    enum LotteryStatuses {\\n        DrawOpen,\\n        EvaluatingResults,\\n        ResultsEvaluated,\\n        ClaimInProgress\\n    }\\n\\ncontract LotteryMaster is EmergencyFunctions {\\n\\n    uint256 public roundCount;\\n    address[] public rounds;\\n    LotteryStatuses public lotteryStatus;\\n    uint256 public statusStartTime;\\n    uint256 public statusEndTime;\\n\\n    mapping(address => uint256) public freeRounds;\\n    mapping(address => bool) public crossChainOperator;\\n    function setCrossChainOperator(address operator, bool value) public onlyOwner {\\n        crossChainOperator[operator] = value;\\n    }\\n\\n    uint16 public counterForBankWallets;\\n    address[] public bankWallets;\\n    function setBankWallet(address wallet, bool add) public onlyOwner {\\n        for (uint i = 0; i < bankWallets.length; i++) {\\n            if (bankWallets[i] == wallet) {\\n                if (add) {\\n                    require(false, \\\"Wallet already added\\\");\\n                } else {\\n                    bankWallets[i] = bankWallets[bankWallets.length - 1];\\n                    bankWallets.pop();\\n                }\\n            }\\n        }\\n        if (add) {\\n            bankWallets.push(wallet);\\n        }\\n    }\\n\\n    IERC20Metadata public paymentToken;\\n    CyclixRandomizerInterface public randomizer;\\n    LotteryReaderInterface public reader;\\n    uint256 public ticketPrice;\\n    bool public freeRoundsAreEnabled = false;\\n    uint16 public percentageOfReferralWinners = 10;\\n    LotteryRoundCreatorInterface public lotteryRoundCreator;\\n\\n    constructor(address cyclixRandomizer, address lotteryReader, address _lotteryRoundCreator, address _paymentToken, uint256 _ticketPrice, bool _freeRoundsAreEnabled)\\n    EmergencyFunctions(msg.sender) {\\n        randomizer = CyclixRandomizerInterface(cyclixRandomizer);\\n        randomizer.registerGameContract(address(this), \\\"LotteryMasterV0.1\\\");\\n        reader = LotteryReaderInterface(lotteryReader);\\n        lotteryRoundCreator = LotteryRoundCreatorInterface(_lotteryRoundCreator);\\n        paymentToken = IERC20Metadata(_paymentToken);\\n        ticketPrice = _ticketPrice * (10 ** uint256(paymentToken.decimals()));\\n        freeRoundsAreEnabled = _freeRoundsAreEnabled;\\n        bankWallets.push(msg.sender);\\n    }\\n\\n    function updateSetup(address cyclixRandomizer, address lotteryReader, address _lotteryRoundCreator, address _paymentToken, uint256 _ticketPrice,\\n        uint16 _percentageOfReferralWinners, uint16[] memory _poolPercentagesBasePoints, bool _freeRoundsAreEnabled) public onlyOwner {\\n        if (address(randomizer) != cyclixRandomizer) {\\n            randomizer = CyclixRandomizerInterface(cyclixRandomizer);\\n            randomizer.registerGameContract(address(this), \\\"LotteryMasterV0.1\\\");\\n        }\\n        reader = LotteryReaderInterface(lotteryReader);\\n        lotteryRoundCreator = LotteryRoundCreatorInterface(_lotteryRoundCreator);\\n        paymentToken = IERC20Metadata(_paymentToken);\\n        ticketPrice = _ticketPrice * (10 ** uint256(paymentToken.decimals()));\\n        percentageOfReferralWinners = _percentageOfReferralWinners;\\n        LotteryRoundInterface(rounds[roundCount - 1]).setPoolPercentagesBasePoints(_poolPercentagesBasePoints);\\n        freeRoundsAreEnabled = _freeRoundsAreEnabled;\\n    }\\n\\n    function startNewRound(uint256 _statusEndTime) public onlyOwner {\\n        if (roundCount > 0) {\\n            startNewRoundForUpgrade(_statusEndTime, rounds[roundCount - 1], 0);\\n        } else {\\n            startNewRoundForUpgrade(_statusEndTime, address(0), 0);\\n        }\\n    }\\n\\n    function startNewRoundForUpgrade(uint256 _statusEndTime, address previousRound, uint256 forcedUiIdForUpgrade) public onlyOwner {\\n        roundCount++;\\n        rounds.push(lotteryRoundCreator.startNewRound(_statusEndTime, previousRound, forcedUiIdForUpgrade));\\n        require(previousRound == address(0) || forcedUiIdForUpgrade > 0 || (lotteryStatus == LotteryStatuses.ClaimInProgress && statusEndTime < block.timestamp), \\\"Previous round not ended\\\");\\n        setLotteryStatus(LotteryStatuses.DrawOpen, _statusEndTime);\\n    }\\n\\n    function setLotteryStatus(LotteryStatuses _lotteryStatus, uint256 _statusEndTime) internal onlyOwner {\\n        lotteryStatus = _lotteryStatus;\\n        statusStartTime = block.timestamp;\\n        statusEndTime = block.timestamp + _statusEndTime;\\n    }\\n\\n    function buyTickets(uint256 chainId, uint16[] memory moreTicketNumbers, address referral, address buyer) public {\\n        bool paidWithFreeTicket = false;\\n        for (uint i = 0; i < moreTicketNumbers.length; i += 6) {\\n            uint16[] memory chosenNumbers = new uint16[](6);\\n            for (uint j = 0; j < 6; j++) {\\n                chosenNumbers[j] = moreTicketNumbers[i + j];\\n            }\\n            paidWithFreeTicket = buyTicket(chainId, chosenNumbers, referral, buyer);\\n        }\\n\\n        if (referral != address(0) && freeRoundsAreEnabled && !paidWithFreeTicket) {\\n            unchecked {\\n                freeRounds[buyer] = freeRounds[buyer] + moreTicketNumbers.length / 6;\\n                freeRounds[referral] = freeRounds[referral] + moreTicketNumbers.length / 6;\\n            }\\n        }\\n    }\\n\\n    function buyTicket(uint256 chainId, uint16[] memory chosenNumbers, address referral, address buyer) internal returns(bool) {\\n        require(freeRounds[buyer] > 0\\n        || paymentToken.allowance(buyer, address(this)) >= ticketPrice\\n        || crossChainOperator[msg.sender], \\\"Missing Allowance\\\");\\n        LotteryRoundInterface lotteryRound = LotteryRoundInterface(rounds[roundCount - 1]);\\n        bool paidWithFreeTicket = false;\\n        if (freeRounds[buyer] > 0) {\\n            freeRounds[buyer]--;\\n            paidWithFreeTicket = true;\\n        } else {\\n            if (!crossChainOperator[msg.sender]) {\\n                require(paymentToken.balanceOf(tx.origin) >= ticketPrice, \\\"Insufficient funds\\\");\\n                counterForBankWallets = uint16(counterForBankWallets++ % bankWallets.length);\\n                SafeERC20.safeTransferFrom(paymentToken, buyer, bankWallets[counterForBankWallets], ticketPrice);\\n            }\\n            lotteryRound.updateVictoryPoolForTicket(ticketPrice);\\n        }\\n\\n        if (paidWithFreeTicket) {\\n            lotteryRound.buyTicket(chainId, chosenNumbers, address(0), buyer);\\n        } else {\\n            lotteryRound.buyTicket(chainId, chosenNumbers, referral, buyer);\\n        }\\n        return paidWithFreeTicket;\\n    }\\n\\n    function addFreeRound(address[] calldata participant) public onlyOwner {\\n        for (uint i = 0; i < participant.length; i++) {\\n            freeRounds[participant[i]]++;\\n        }\\n    }\\n\\n    mapping(uint256 => uint256) public publicRoundRandomNumbersRequestId;\\n\\n    function closeRound(uint256 _statusEndTime) external onlyOwner {\\n        LotteryRoundInterface lotteryRound = LotteryRoundInterface(rounds[roundCount - 1]);\\n        lotteryRound.closeRound();\\n        uint16 referralWinners = reader.numberOfReferralWinnersForRoundId(roundCount);\\n        publicRoundRandomNumbersRequestId[roundCount] = randomizer.requestRandomWords(6 + referralWinners);\\n        setLotteryStatus(LotteryStatuses.EvaluatingResults, _statusEndTime);\\n    }\\n\\n    function fetchRoundNumbers(uint256 roundId, uint256 _statusEndTime) external onlyOwner {\\n        LotteryRoundInterface round = LotteryRoundInterface(rounds[roundId - 1]);\\n        round.couldReceiveWinningNumbers();\\n        (bool fulfilled, uint256[] memory randomWords) = randomizer.getRequestStatus(publicRoundRandomNumbersRequestId[roundId]);\\n        require(fulfilled, \\\"Random numbers not ready\\\");\\n        uint16[] memory roundNumbers = new uint16[](6);\\n        uint16[] memory referralWinnersNumber = new uint16[](randomWords.length - 6);\\n        if (fulfilled) {\\n            for (uint i = 0; i < 6; i++) {\\n                roundNumbers[i] = reader.getRandomUniqueNumberInArrayForMaxValue(randomWords[i], 69, roundNumbers);\\n            }\\n            roundNumbers[5] = uint16(randomWords[5] % 26 + 1);\\n            for (uint i = 6; i < randomWords.length; i++) {\\n                referralWinnersNumber [i - 6] = reader.getRandomUniqueNumberInArrayForMaxValue(randomWords[i],\\n                    round.getRound().referralCounts, referralWinnersNumber);\\n            }\\n        }\\n        round.storeWinningNumbers(roundNumbers, referralWinnersNumber);\\n        setLotteryStatus(LotteryStatuses.ResultsEvaluated, _statusEndTime);\\n    }\\n\\n    function markWinners(uint256 roundId, uint256 _statusEndTime) public onlyOwner {\\n        LotteryRoundInterface(rounds[roundId - 1]).markWinners(reader.evaluateWonTicketsForRound(roundId), reader.evaluateWonReferralForRound(roundId));\\n        setLotteryStatus(LotteryStatuses.ClaimInProgress, _statusEndTime);\\n    }\\n\\n    function claimVictory() public {\\n        require(lotteryStatus == LotteryStatuses.ClaimInProgress, \\\"Lottery is not in claim period\\\");\\n        require(statusEndTime > block.timestamp, \\\"Claim Period ended\\\");\\n        uint256 amountForEntries = reader.evaluateWonTicketsAmountForWallet(roundCount, msg.sender, false);\\n        uint256 amountForReferral = reader.evaluateWonReferralAmountForWallet(roundCount, msg.sender, false);\\n        require(amountForEntries > 0 || amountForReferral > 0, \\\"Nothing to claim for this wallet\\\");\\n        require(paymentToken.balanceOf(address(this)) >= amountForEntries + amountForReferral, \\\"Not enough funds on contract\\\");\\n        LotteryRoundInterface(rounds[roundCount - 1]).markVictoryClaimed(\\n            reader.evaluateWonTicketsForWallet(roundCount, msg.sender),\\n            reader.evaluateWonReferralFoWallet(roundCount, msg.sender)\\n        );\\n        paymentToken.transfer(msg.sender, amountForEntries + amountForReferral);\\n    }\\n}\",\"keccak256\":\"0xf6e04ea20ffdc68a8a7ff3ddeb03fe597e587ee746fb1537324bcd232a5474cf\",\"license\":\"UNLICENSED\"},\"contracts/LotteryReader.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {TestFunctions} from \\\"./utils/TestUtils.sol\\\";\\nimport {EmergencyFunctions} from \\\"./utils/EmergencyFunctions.sol\\\";\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\nimport { LotteryRound } from \\\"./LotteryRound.sol\\\";\\nimport { LotteryMaster } from \\\"./LotteryMaster.sol\\\";\\nimport {LotteryReaderInterface} from \\\"./LotteryReaderInterface.sol\\\";\\n\\ncontract LotteryReader is LotteryReaderInterface, EmergencyFunctions {\\n    LotteryMaster public lotteryMaster;\\n\\n    function setLotteryMaster(address _lotteryMaster) public onlyOwner {\\n        lotteryMaster = LotteryMaster(_lotteryMaster);\\n    }\\n\\n    constructor() EmergencyFunctions(tx.origin) {}\\n\\n    function poolForVictoryTier(uint256 roundId, RoundVictoryTier victoryTier) public view override returns(uint256) {\\n        require(victoryTier == RoundVictoryTier.Tier5_1 || victoryTier == RoundVictoryTier.Tier5 || victoryTier == RoundVictoryTier.Tier4_1 ||\\n        victoryTier == RoundVictoryTier.Tier4 || victoryTier == RoundVictoryTier.Tier3_1 || victoryTier == RoundVictoryTier.Tier3,\\n            \\\"Invalid victory tier\\\");\\n        return LotteryRound(lotteryMaster.rounds(roundId -1)).victoryTierAmounts(victoryTier);\\n    }\\n\\n    function roundNumbers(uint256 roundId) public view returns(uint16[] memory) {\\n        Round memory round = LotteryRound(lotteryMaster.rounds(roundId -1)).getRound();\\n        return round.roundNumbers;\\n    }\\n\\n    function referralWinnersNumber(uint256 roundId) public view returns(uint256[] memory) {\\n        Round memory round = LotteryRound(lotteryMaster.rounds(roundId -1)).getRound();\\n        return round.referralWinnersNumber;\\n    }\\n\\n    function poolForReferral(uint256 roundId) public view override returns(uint256) {\\n        return LotteryRound(lotteryMaster.rounds(roundId -1)).victoryTierAmounts(RoundVictoryTier.Referrer);\\n    }\\n\\n    function tokenHoldersPoolAmount(uint256 roundId) public view override returns (uint256) {\\n        return LotteryRound(lotteryMaster.rounds(roundId -1)).victoryTierAmounts(RoundVictoryTier.TokenHolders);\\n    }\\n\\n    function treasuryPoolAmount(uint256 roundId) public view override returns (uint256) {\\n        return LotteryRound(lotteryMaster.rounds(roundId -1)).victoryTierAmounts(RoundVictoryTier.Treasury);\\n    }\\n\\n    function numberOfReferralWinnersForRoundId(uint256 roundId) public view override returns (uint16) {\\n        uint16 referralWinnersForRound = 0;\\n        uint16 referralCounts = LotteryRound(lotteryMaster.rounds(roundId -1)).getRound().referralCounts;\\n        unchecked {\\n            referralWinnersForRound = referralCounts / lotteryMaster.percentageOfReferralWinners();\\n        }\\n        if (referralWinnersForRound == 0 && referralCounts > 0) {\\n            referralWinnersForRound = 1;\\n        }\\n        return referralWinnersForRound;\\n    }\\n\\n    function existInArrayBigNumber(uint256 num, uint256[] memory arr) public pure override returns (bool) {\\n        for (uint i = 0; i < arr.length; i++) {\\n            if (arr[i] == num) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function existInArrayNumber(uint16 num, uint16[] memory arr) public pure override returns (bool) {\\n        for (uint i = 0; i < arr.length; i++) {\\n            if (arr[i] == num) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function notExistInArrayNumber(uint16 num, uint16[] memory arr) public pure override returns (bool) {\\n        return existInArrayNumber(num, arr) == false;\\n    }\\n\\n    function getRandomUniqueNumberInArrayForMaxValue(uint256 randomNumber, uint16 maxValue, uint16[] memory arr) public pure override returns (uint16) {\\n        uint16 returnedNumber = uint16(randomNumber % maxValue + 1);\\n        uint16 counter = 0;\\n        bool existInNumbers = existInArrayNumber(returnedNumber, arr);\\n        while (existInNumbers) {\\n            returnedNumber =  uint16(uint256(keccak256(abi.encode(returnedNumber, counter))) % maxValue + 1);\\n            existInNumbers = existInArrayNumber(returnedNumber, arr);\\n            counter++;\\n        }\\n        return returnedNumber;\\n    }\\n\\n\\n    function tierFromResults(uint16 rightNumbersForTicket, bool powerNumberFound) public pure override returns (RoundVictoryTier) {\\n        if (rightNumbersForTicket == 5 && powerNumberFound) {\\n            return RoundVictoryTier.Tier5_1;\\n        } else if (rightNumbersForTicket == 5) {\\n            return RoundVictoryTier.Tier5;\\n        } else if (rightNumbersForTicket == 4 && powerNumberFound) {\\n            return RoundVictoryTier.Tier4_1;\\n        } else if (rightNumbersForTicket == 4) {\\n            return RoundVictoryTier.Tier4;\\n        } else if (rightNumbersForTicket == 3 && powerNumberFound) {\\n            return RoundVictoryTier.Tier3_1;\\n        } else if (rightNumbersForTicket == 3) {\\n            return RoundVictoryTier.Tier3;\\n        }\\n        return RoundVictoryTier.NO_WIN;\\n    }\\n\\n    function getTicketsForRound(uint256 roundId) public view override returns(Ticket[] memory) {\\n        LotteryRound lotteryRound = LotteryRound(lotteryMaster.rounds(roundId - 1));\\n        Round memory roundForEvaluation = lotteryRound.getRound();\\n        Ticket[] memory results = new Ticket[](roundForEvaluation.ticketsCount);\\n        for (uint256 i = 0; i < roundForEvaluation.ticketsCount; i++) {\\n            results[i] = lotteryRound.ticketById(roundForEvaluation.ticketIds[i]);\\n        }\\n        return results;\\n    }\\n\\n    function getAllTicketsNumbersForRound(uint256 roundId) public view override returns(uint16[] memory) {\\n        LotteryRound lotteryRound = LotteryRound(lotteryMaster.rounds(roundId - 1));\\n        Round memory roundForEvaluation = lotteryRound.getRound();\\n        uint16[] memory numbersForAllTickets = new uint16[](roundForEvaluation.ticketsCount * 6);\\n        for (uint256 i = 0; i < roundForEvaluation.ticketsCount; i++) {\\n            uint16[] memory numbersForTicket = lotteryRound.numbersForTicketId(i);\\n            for (uint256 j = 0; j < numbersForTicket.length; j++) {\\n                numbersForAllTickets[(i * 6) + j] = numbersForTicket[j];\\n            }\\n        }\\n        return numbersForAllTickets;\\n    }\\n\\n    function getReferralTicketsForRound(uint256 roundId) public view override returns(ReferralTicket[] memory) {\\n        LotteryRound lotteryRound = LotteryRound(lotteryMaster.rounds(roundId - 1));\\n        Round memory roundForEvaluation = lotteryRound.getRound();\\n        ReferralTicket[] memory results = new ReferralTicket[](roundForEvaluation.referralCounts);\\n        for (uint256 i = 0; i < roundForEvaluation.referralCounts; i++) {\\n            results[i] = lotteryRound.referralTicketById(roundForEvaluation.ticketIds[i]);\\n        }\\n        return results;\\n    }\\n\\n    function evaluateWonTicketsForRound(uint256 roundId) public view override returns (TicketResults[] memory){\\n        LotteryRound lotteryRound = LotteryRound(lotteryMaster.rounds(roundId - 1));\\n        Round memory roundForEvaluation = lotteryRound.getRound();\\n        uint16 roundTicketCount = roundForEvaluation.ticketsCount;\\n        TicketResults[] memory ticketResults = new TicketResults[](roundForEvaluation.ticketsCount);\\n        uint16 counter = 0;\\n        for(uint16 ticketIndexForRound = 0; ticketIndexForRound < roundTicketCount; ticketIndexForRound++) {\\n            Ticket memory ticket = lotteryRound.ticketById(roundForEvaluation.ticketIds[ticketIndexForRound]);\\n            uint16[] memory ticketNumbers = lotteryRound.numbersForTicketId(ticket.id);\\n            bool powerNumberFound = ticketNumbers[5] == roundForEvaluation.roundNumbers[5];\\n            uint16 rightNumbersForTicket = 0;\\n            for(uint16 i = 0; i < 5; i++) {\\n                uint16 ticketNumber = ticketNumbers[i];\\n                if (existInArrayNumber(ticketNumber, roundForEvaluation.roundNumbers)) {\\n                    rightNumbersForTicket++;\\n                }\\n            }\\n            RoundVictoryTier tierResult = tierFromResults(rightNumbersForTicket, powerNumberFound);\\n            uint256 amountWon = 0;\\n            if (tierResult != RoundVictoryTier.NO_WIN && lotteryRound.winnersForEachTier(tierResult) > 0) {\\n                amountWon = poolForVictoryTier(roundId, tierResult) / lotteryRound.winnersForEachTier(tierResult);\\n            }\\n            ticketResults[counter++] = TicketResults({\\n                ticketId: ticket.id,\\n                participantAddress : ticket.participantAddress,\\n                victoryTier: tierResult,\\n                won: tierResult != RoundVictoryTier.NO_WIN,\\n                claimed: ticket.claimed,\\n                amountWon : amountWon\\n            });\\n        }\\n        return ticketResults;\\n    }\\n\\n    function evaluateWonTicketsAmountForWallet(uint256 roundId, address wallet, bool claimed) public view override returns(uint256) {\\n        uint256 wonAmount = 0;\\n        TicketResults[] memory results = evaluateWonTicketsForWallet(roundId, wallet);\\n        for (uint256 i = 0; i < results.length; i++) {\\n            if (results[i].claimed == claimed) {\\n                wonAmount += results[i].amountWon;\\n            }\\n        }\\n        return wonAmount;\\n    }\\n\\n    function evaluateWonTicketsForWallet(uint256 roundId, address wallet) public view override returns(TicketResults[] memory) {\\n        TicketResults[] memory results = evaluateWonTicketsForRound(roundId);\\n        uint256 counterForWalletTicket = 0;\\n        TicketResults[] memory resultsForWallet = new TicketResults[](results.length);\\n        for (uint256 i = 0; i < results.length; i++) {\\n            if (results[i].participantAddress == wallet && results[i].won) {\\n                resultsForWallet[counterForWalletTicket] = results[i];\\n                counterForWalletTicket++;\\n            }\\n        }\\n        TicketResults[] memory onlyResultsForWallet = new TicketResults[](counterForWalletTicket);\\n        for (uint256 i = 0; i < counterForWalletTicket; i++) {\\n            onlyResultsForWallet[i] = resultsForWallet[i];\\n        }\\n        return onlyResultsForWallet;\\n    }\\n\\n    function evaluateWonReferralForRound(uint256 roundId) public view override returns (ReferralTicketResults[] memory) {\\n        LotteryRound lotteryRound = LotteryRound(lotteryMaster.rounds(roundId - 1));\\n        Round memory roundForEvaluation = lotteryRound.getRound();\\n        ReferralTicketResults[] memory referralWinnerIds = new ReferralTicketResults[](roundForEvaluation.referralCounts);\\n        uint16 counter = 0;\\n        for(uint16 referralIndexForRound = 0; referralIndexForRound < roundForEvaluation.referralCounts; referralIndexForRound++) {\\n            ReferralTicket memory referralTicket = lotteryRound.referralTicketById(roundForEvaluation.referralTicketIds[referralIndexForRound]);\\n            bool referralWon = existInArrayBigNumber(referralTicket.referralTicketNumber, roundForEvaluation.referralWinnersNumber);\\n            uint256 amountWon = 0;\\n            if (referralWon && lotteryRound.winnersForEachTier(RoundVictoryTier.Referrer) > 0) {\\n                amountWon = poolForReferral(roundId) / lotteryRound.winnersForEachTier(RoundVictoryTier.Referrer);\\n            }\\n            referralWinnerIds[counter++] = ReferralTicketResults({\\n                referralTicketId: referralTicket.id,\\n                buyerAddress : referralTicket.buyerAddress,\\n                referralAddress : referralTicket.referralAddress,\\n                referralTicketNumber: referralTicket.referralTicketNumber,\\n                won: referralWon,\\n                claimed: referralTicket.claimed,\\n                amountWon : amountWon\\n            });\\n        }\\n        return referralWinnerIds;\\n    }\\n\\n    function evaluateWonReferralAmountForWallet(uint256 roundId, address wallet, bool claimed) public view override returns(uint256) {\\n        uint256 wonAmount = 0;\\n        ReferralTicketResults[] memory results = evaluateWonReferralFoWallet(roundId, wallet);\\n        for (uint256 i = 0; i < results.length; i++) {\\n            if (results[i].claimed == claimed) {\\n                wonAmount += results[i].amountWon;\\n            }\\n        }\\n        return wonAmount;\\n    }\\n\\n    function evaluateWonReferralFoWallet(uint256 roundId, address wallet) public view override returns(ReferralTicketResults[] memory) {\\n        ReferralTicketResults[] memory results = evaluateWonReferralForRound(roundId);\\n        uint256 counterForWalletTicket = 0;\\n        ReferralTicketResults[] memory resultsForWallet = new ReferralTicketResults[](results.length);\\n        for (uint256 i = 0; i < results.length; i++) {\\n            if (results[i].referralAddress == wallet && results[i].won) {\\n                resultsForWallet[counterForWalletTicket] = results[i];\\n                counterForWalletTicket++;\\n            }\\n        }\\n        ReferralTicketResults[] memory onlyResultsForWallet = new ReferralTicketResults[](counterForWalletTicket);\\n        for (uint256 i = 0; i < counterForWalletTicket; i++) {\\n            onlyResultsForWallet[i] = resultsForWallet[i];\\n        }\\n        return onlyResultsForWallet;\\n    }\\n\\n    function amountWonInRound(uint256 roundId) public view override returns (uint256) {\\n        LotteryRound lotteryRound = LotteryRound(lotteryMaster.rounds(roundId -1));\\n        uint256 amountWon = 0;\\n        TicketResults[] memory ticketResults = evaluateWonTicketsForRound(roundId);\\n        ReferralTicketResults[] memory referralResults = evaluateWonReferralForRound(roundId);\\n        uint256[] memory winnersForPools = new uint256[](6);\\n        for(uint16 i = 0; i < ticketResults.length; i++) {\\n            if (ticketResults[i].victoryTier != RoundVictoryTier.NO_WIN) {\\n                winnersForPools[uint(ticketResults[i].victoryTier)] = winnersForPools[uint(ticketResults[i].victoryTier)] + 1;\\n            }\\n        }\\n        for(uint16 i = 0; i < 6; i++) {\\n            if (winnersForPools[i] > 0) {\\n                amountWon += lotteryRound.victoryTierAmounts(RoundVictoryTier(i));\\n            }\\n        }\\n        if (referralResults.length > 0) {\\n            amountWon += lotteryRound.victoryTierAmounts(RoundVictoryTier.Referrer);\\n        }\\n        return amountWon;\\n    }\\n}\",\"keccak256\":\"0x51af6580b1452a61133e6c7c08d945750eb5091a65961bb7f5259df32261c45f\",\"license\":\"UNLICENSED\"},\"contracts/LotteryReaderInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {TestFunctions} from \\\"./utils/TestUtils.sol\\\";\\nimport {CyclixRandomizerInterface} from \\\"./CyclixRandomizerInterface.sol\\\";\\nimport {EmergencyFunctions} from \\\"./utils/EmergencyFunctions.sol\\\";\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\n\\ninterface LotteryReaderInterface {\\n    function poolForVictoryTier(uint256 roundId, RoundVictoryTier victoryTier) external view returns(uint256) ;\\n    function poolForReferral(uint256 roundId) external view returns(uint256) ;\\n    function tokenHoldersPoolAmount(uint256 roundId) external view returns (uint256) ;\\n    function treasuryPoolAmount(uint256 roundId) external view returns (uint256) ;\\n    function numberOfReferralWinnersForRoundId(uint256 roundId) external view returns (uint16) ;\\n    function existInArrayBigNumber(uint256 num, uint256[] memory arr) external pure returns (bool) ;\\n    function existInArrayNumber(uint16 num, uint16[] memory arr) external pure returns (bool) ;\\n    function notExistInArrayNumber(uint16 num, uint16[] memory arr) external pure returns (bool) ;\\n    function getRandomUniqueNumberInArrayForMaxValue(uint256 randomNumber, uint16 maxValue, uint16[] memory arr) external pure returns (uint16) ;\\n    function tierFromResults(uint16 rightNumbersForTicket, bool powerNumberFound) external pure returns (RoundVictoryTier) ;\\n    function getTicketsForRound(uint256 roundId) external view returns(Ticket[] memory);\\n    function getAllTicketsNumbersForRound(uint256 roundId) external view returns(uint16[] memory);\\n    function getReferralTicketsForRound(uint256 roundId) external view returns(ReferralTicket[] memory);\\n    function evaluateWonTicketsForRound(uint256 roundId) external view returns (TicketResults[] memory);\\n    function evaluateWonTicketsAmountForWallet(uint256 roundId, address wallet, bool claimed) external view returns(uint256);\\n    function evaluateWonTicketsForWallet(uint256 roundId, address wallet) external view returns(TicketResults[] memory);\\n    function evaluateWonReferralForRound(uint256 roundId) external view returns (ReferralTicketResults[] memory);\\n    function evaluateWonReferralAmountForWallet(uint256 roundId, address wallet, bool claimed) external view returns(uint256);\\n    function evaluateWonReferralFoWallet(uint256 roundId, address wallet) external view returns (ReferralTicketResults[] memory);\\n    function amountWonInRound(uint256 roundId) external view returns (uint256) ;\\n    function roundNumbers(uint256 roundId) external view returns(uint16[] memory);\\n    function referralWinnersNumber(uint256 roundId) external view returns(uint256[] memory);\\n}\",\"keccak256\":\"0x815fb0592bae303a980a5bdc44ae9d50653a6606c310f1b51e6096e8f83fbb1a\",\"license\":\"UNLICENSED\"},\"contracts/LotteryRound.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\nimport {LotteryRoundInterface} from \\\"./LotteryRoundInterface.sol\\\";\\n\\ncontract LotteryRound is Ownable, LotteryRoundInterface {\\n    Round public round;\\n    function getRound() public view returns (Round memory) {\\n        return round;\\n    }\\n\\n    Ticket[] public tickets;\\n    function ticketById(uint256 ticketId) public view returns (Ticket memory) {\\n        return tickets[ticketId];\\n    }\\n    mapping(uint256 => uint16[]) public ticketNumbers;\\n    function numbersForTicketId(uint256 ticketId) public view returns (uint16[] memory) {\\n        return ticketNumbers[ticketId];\\n    }\\n    mapping(address => uint256[]) public roundTicketsByAddress;\\n    mapping(address => uint256) public roundTicketsByAddressCount;\\n\\n    ReferralTicket[] public referralTickets;\\n    function referralTicketById(uint256 index) public view returns (ReferralTicket memory) {\\n        return referralTickets[index];\\n    }\\n    mapping(address => uint256[]) public roundReferralTicketsByAddress;\\n    mapping(address => uint256) public roundReferralTicketsByAddressCount;\\n\\n    mapping(RoundVictoryTier => uint256) public victoryTierAmounts;\\n    mapping(RoundVictoryTier => uint256) public victoryTierAmountsClaimed;\\n    uint256 public totalVictoryPool;\\n    uint256 public totalClaimed;\\n    mapping(RoundVictoryTier => uint256) public winnersForEachTier;\\n    address public previousRound;\\n\\n    uint16[]  public  poolPercentagesBasePoints = [3000, 1500, 1000, 700, 500, 300, 1500, 1000, 500];\\n    function setPoolPercentagesBasePoints(uint16[] memory _poolPercentagesBasePoints) public onlyOwner {\\n        poolPercentagesBasePoints = _poolPercentagesBasePoints;\\n    }\\n\\n    constructor(address previousRoundAddress, uint256 roundDurationInSeconds, uint256 forcedUiIdForUpgrade) Ownable(msg.sender) {\\n        uint256 id = 1;\\n        uint256 uiId = 1;\\n        previousRound = previousRoundAddress;\\n        if (previousRoundAddress != address(0)) {\\n            LotteryRound previousLotteryRound = LotteryRound(previousRoundAddress);\\n            id = previousLotteryRound.getRound().id + 1;\\n            uiId = previousLotteryRound.getRound().uiId + 1;\\n            propagateWinningFromPreviousRound();\\n        }\\n        if (forcedUiIdForUpgrade > 0) {\\n            id = 1;\\n            uiId = forcedUiIdForUpgrade;\\n        }\\n        round = Round({\\n            id: id,\\n            uiId:  uiId,\\n            startTime: block.timestamp,\\n            endTime: block.timestamp + roundDurationInSeconds,\\n            ended : false,\\n            roundNumbers: new uint16[](0),\\n            referralWinnersNumber: new uint256[](0),\\n            referralWinnersNumberCount : 0,\\n            ticketIds : new uint256[](0),\\n            ticketsCount : 0,\\n            referralTicketIds : new uint256[](0),\\n            referralCounts : 0\\n        });\\n    }\\n\\n    function propagateWinningFromPreviousRound() internal {\\n        LotteryRound previousLotteryRound = LotteryRound(previousRound);\\n        updateVictoryPoolForTicket(previousLotteryRound.totalVictoryPool() - previousLotteryRound.totalClaimed());\\n    }\\n\\n    function numberIsInRangeForRound(uint256 number) public pure returns (bool) {\\n        return number > 0 && number <= 69;\\n    }\\n\\n    function numberIsInRangeForPowerNumber(uint256 number) public pure returns (bool) {\\n        return number > 0 && number <= 26;\\n    }\\n\\n    function validateBuyTicket(uint16[] memory numbers, address referral) public view onlyOwner {\\n        require(tx.origin != address(0), \\\"Invalid sender\\\");\\n        require(block.timestamp < round.endTime, \\\"Round is over\\\");\\n        require(numbers.length == 6, \\\"Invalid numbers count\\\");\\n        for (uint i = 0; i < numbers.length - 1; i++) {\\n            require(numberIsInRangeForRound(numbers[i]), \\\"Invalid numbers\\\");\\n        }\\n        require(numberIsInRangeForPowerNumber(numbers[5]), \\\"Invalid power number\\\");\\n        require(referral != tx.origin, \\\"Referral cannot be the same as the participant\\\");\\n    }\\n\\n    function percentageInBasisPoint(uint256 amount, uint256 basisPoint) public pure returns (uint256) {\\n        return amount * basisPoint / 10000;\\n    }\\n\\n    function treasuryAmountOnTicket(uint256 paymentTokenAmount) public view returns (uint256) {\\n        return percentageInBasisPoint(paymentTokenAmount, poolPercentagesBasePoints[8]);\\n    }\\n\\n    function updateVictoryPoolForTicket(uint256 paymentTokenAmount) public onlyOwner {\\n        totalVictoryPool += paymentTokenAmount - percentageInBasisPoint(paymentTokenAmount, poolPercentagesBasePoints[uint(RoundVictoryTier.TokenHolders)]) -\\n                        percentageInBasisPoint(paymentTokenAmount, poolPercentagesBasePoints[uint(RoundVictoryTier.Treasury)]);\\n        for(uint i = 0; i < 9; i++) {\\n            victoryTierAmounts[RoundVictoryTier(i)] += percentageInBasisPoint(paymentTokenAmount, poolPercentagesBasePoints[i]);\\n        }\\n    }\\n\\n    function buyTicket(uint256 chainId, uint16[] memory chosenNumbers, address referral, address buyer) public onlyOwner {\\n        validateBuyTicket(chosenNumbers, referral);\\n\\n        uint256 ticketId = tickets.length;\\n        tickets.push(Ticket({\\n            id: ticketId,\\n            participantAddress: buyer,\\n            referralAddress: referral,\\n            claimed: false,\\n            chainId: chainId,\\n            victoryTier: RoundVictoryTier.NO_WIN\\n        }));\\n        for(uint i = 0; i < chosenNumbers.length; i++) {\\n            ticketNumbers[ticketId].push(chosenNumbers[i]);\\n        }\\n        round.ticketIds.push(ticketId);\\n        round.ticketsCount++;\\n\\n        roundTicketsByAddress[buyer].push(tickets.length - 1);\\n        roundTicketsByAddressCount[buyer]++;\\n        if (referral != address(0)) {\\n            uint256 referralTicketId = referralTickets.length;\\n            round.referralTicketIds.push(referralTicketId);\\n            round.referralCounts++;\\n            referralTickets.push(ReferralTicket({\\n                id: referralTicketId,\\n                buyerAddress: buyer,\\n                referralAddress: referral,\\n                referralTicketNumber: uint16(round.referralCounts),\\n                winner: false,\\n                claimed: false\\n            }));\\n\\n            roundReferralTicketsByAddress[referral].push(referralTickets.length - 1);\\n            roundReferralTicketsByAddressCount[referral]++;\\n        }\\n    }\\n\\n    function closeRound() public onlyOwner {\\n        require(block.timestamp >= round.endTime, \\\"Round is not over yet\\\");\\n        round.ended = true;\\n    }\\n\\n    function couldReceiveWinningNumbers() public view {\\n        require(block.timestamp >= round.endTime, \\\"Round is not over yet\\\");\\n        require(round.roundNumbers.length == 0, \\\"Winning numbers already set\\\");\\n    }\\n\\n    function storeWinningNumbers(uint16[] memory roundNumbers, uint16[] memory referralWinnersNumber) public onlyOwner {\\n        round.roundNumbers = roundNumbers;\\n        round.referralWinnersNumber = referralWinnersNumber;\\n        round.referralWinnersNumberCount = uint16(referralWinnersNumber.length);\\n    }\\n\\n    function markWinners(TicketResults[] memory ticketResults, ReferralTicketResults[] memory referralTicketResults) public onlyOwner {\\n        for (uint i = 0; i < ticketResults.length; i++) {\\n            TicketResults memory ticketResult = ticketResults[i];\\n            Ticket storage ticket = tickets[ticketResult.ticketId];\\n            ticket.victoryTier = ticketResult.victoryTier;\\n            winnersForEachTier[ticketResult.victoryTier]++;\\n        }\\n        for (uint i = 0; i < referralTicketResults.length; i++) {\\n            ReferralTicketResults memory referralTicketResult = referralTicketResults[i];\\n            ReferralTicket storage referralTicket = referralTickets[referralTicketResult.referralTicketId];\\n            referralTicket.winner = referralTicketResult.won;\\n            if (referralTicketResult.won) {\\n                winnersForEachTier[RoundVictoryTier.Referrer]++;\\n            }\\n        }\\n    }\\n\\n    function markVictoryClaimed(TicketResults[] memory ticketResults, ReferralTicketResults[] memory referralTicketResults) public onlyOwner {\\n        for(uint i = 0; i < ticketResults.length; i++) {\\n            TicketResults memory ticketResult = ticketResults[i];\\n            Ticket storage ticket = tickets[ticketResult.ticketId];\\n            ticket.claimed = true;\\n            victoryTierAmountsClaimed[ticketResult.victoryTier] += ticketResult.amountWon;\\n            totalClaimed += ticketResult.amountWon;\\n        }\\n        for(uint i = 0; i < referralTicketResults.length; i++) {\\n            ReferralTicketResults memory referralTicketResult = referralTicketResults[i];\\n            ReferralTicket storage referralTicket = referralTickets[referralTicketResult.referralTicketId];\\n            referralTicket.claimed = true;\\n            victoryTierAmountsClaimed[RoundVictoryTier.Referrer] += referralTicketResult.amountWon;\\n            totalClaimed += referralTicketResult.amountWon;\\n        }\\n    }\\n\\n    function markReferralVictoryClaimed(uint256 referralTicketId, uint256 amountClaimed) public onlyOwner {\\n        ReferralTicket storage referralTicket = referralTickets[referralTicketId];\\n        referralTicket.claimed = true;\\n        victoryTierAmountsClaimed[RoundVictoryTier.Referrer] += amountClaimed;\\n    }\\n}\",\"keccak256\":\"0x1375423a80fd35f6628897f1781140bd54410f6bc34fb2ef375465955ac7771a\",\"license\":\"UNLICENSED\"},\"contracts/LotteryRoundCreatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\ninterface LotteryRoundCreatorInterface {\\n   function startNewRound(uint256 roundDurationInSeconds, address previousRoundAddress, uint256 forcedUiIdForUpgrade) external returns(address);\\n}\",\"keccak256\":\"0xe927e4ac71030ab7137f7ea7a19f7cb8b6f074ae449fc03188237d3f2f2222fd\",\"license\":\"UNLICENSED\"},\"contracts/LotteryRoundInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\n\\ninterface LotteryRoundInterface {\\n    function getRound() external returns(Round memory);\\n    function markWinners(TicketResults[] memory ticketResults, ReferralTicketResults[] memory referralTicketResults) external;\\n    function markVictoryClaimed(TicketResults[] memory ticketResults, ReferralTicketResults[] memory referralTicketResults) external;\\n    function markReferralVictoryClaimed(uint256 referralTicketId, uint256 amountClaimed) external;\\n    function treasuryAmountOnTicket(uint256 paymentTokenAmount) external view returns (uint256);\\n    function updateVictoryPoolForTicket(uint256 paymentTokenAmount) external;\\n    function buyTicket(uint256 chainId, uint16[] memory chosenNumbers, address referral, address buyer) external;\\n    function closeRound() external;\\n    function couldReceiveWinningNumbers() external view;\\n    function storeWinningNumbers(uint16[] memory roundNumbers, uint16[] memory referralWinnersNumber) external;\\n    function ticketById(uint256 ticketId) external view returns (Ticket memory);\\n    function numbersForTicketId(uint256 ticketId) external view returns (uint16[] memory);\\n    function referralTicketById(uint256 index) external view returns (ReferralTicket memory);\\n    function setPoolPercentagesBasePoints(uint16[] memory _poolPercentagesBasePoints) external;\\n}\",\"keccak256\":\"0x5910a9ac432e27e783c9f6b5f9c595fa03d7be09a908e1d13376a76315c90e1e\",\"license\":\"UNLICENSED\"},\"contracts/utils/EmergencyFunctions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract EmergencyFunctions is Ownable {\\n    address internal teamAddress;\\n    constructor(address _teamAddress) Ownable(_teamAddress) {\\n        teamAddress = _teamAddress;\\n    }\\n\\n    function updateTeamAddress(address _teamAddress) public onlyOwner {\\n        teamAddress = _teamAddress;\\n    }\\n\\n    // Emergency Functions\\n    function sendTokenToTeam(address _token) public onlyOwner {\\n        uint256 amount = IERC20(_token).balanceOf(address(this));\\n        if (amount > 0) {\\n            SafeERC20.safeTransfer(IERC20(_token), teamAddress, amount);\\n        }\\n    }\\n\\n    function sendCryptoToTeam() public onlyOwner {\\n        if (address(this).balance > 0) {\\n            payable(teamAddress).transfer(address(this).balance);\\n        }\\n    }\\n\\n    /** @notice Check if an address is a contract */\\n    function _isContract(address _addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x68dcc6a4104e2905f65c342fdb2dbde1908113d10c006f5857b52dc0bbefd419\",\"license\":\"MIT\"},\"contracts/utils/TestUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.x <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IERC20Extension {\\n    function decimals() external view returns (uint8);\\n}\\n\\ncontract TestFunctions is Ownable {\\n    constructor() Ownable(msg.sender) {}\\n    //Used for mock testing, contract ownership will be renounced on release\\n    uint public currentTimestampOverride;\\n    function updateCurrentTimestampOverride(uint _v) external onlyOwner {\\n        currentTimestampOverride = _v;\\n    }\\n    function currentTimestamp() public view returns(uint) {\\n        if (currentTimestampOverride > 0) {\\n            return currentTimestampOverride;\\n        }\\n        return block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x8edb22ef91efc1d38ffbd50b48821f4fe23bdaf84a14de75d0df8231eb772bc4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b503280600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000895760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000809190620001ec565b60405180910390fd5b6200009a81620000e360201b60201c565b5080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000209565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001d482620001a7565b9050919050565b620001e681620001c7565b82525050565b6000602082019050620002036000830184620001db565b92915050565b614eb680620002196000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80638285cc5a11610104578063b7991e33116100a2578063eed2589611610071578063eed2589614610613578063f1664df614610643578063f2fde38b14610673578063fdfe81851461068f576101da565b8063b7991e3314610579578063bbd1783a146105a9578063caac49a7146105b3578063e34208e6146105e3576101da565b8063998da3e9116100de578063998da3e9146104cd5780639f75e5c9146104e9578063a521dc9514610519578063a65d31b914610549576101da565b80638285cc5a1461044f5780638da5cb5b1461047f5780638e0e3fcd1461049d576101da565b806348b2e35c1161017c5780635dc9dbe81161014b5780635dc9dbe8146103c757806361ab0c89146103e557806368525a4e14610415578063715018a614610445576101da565b806348b2e35c1461030757806349a0a1f6146103375780634e00b9d31461036757806359103c1214610397576101da565b806322bd49a8116101b857806322bd49a81461025b578063283b7f28146102775780632f877497146102a75780633c73b4c4146102d7576101da565b80630c746a8a146101df57806314eb76ac1461020f57806317ba3b7d1461022b575b600080fd5b6101f960048036038101906101f491906137d8565b6106bf565b6040516102069190613856565b60405180910390f35b610229600480360381019061022491906138cf565b61076b565b005b610245600480360381019061024091906138fc565b6107b7565b6040516102529190613ab2565b60405180910390f35b610275600480360381019061027091906138cf565b6109b2565b005b610291600480360381019061028c9190613ad4565b6109fe565b60405161029e9190613bb0565b60405180910390f35b6102c160048036038101906102bc9190613ad4565b610b2c565b6040516102ce9190613d73565b60405180910390f35b6102f160048036038101906102ec9190613ad4565b610d97565b6040516102fe9190613da4565b60405180910390f35b610321600480360381019061031c9190613ad4565b611150565b60405161032e9190613ab2565b60405180910390f35b610351600480360381019061034c9190613ad4565b611588565b60405161035e9190613da4565b60405180910390f35b610381600480360381019061037c9190613dbf565b6116b3565b60405161038e9190613e2a565b60405180910390f35b6103b160048036038101906103ac9190613dbf565b6116cd565b6040516103be9190613e2a565b60405180910390f35b6103cf61172a565b6040516103dc9190613ea4565b60405180910390f35b6103ff60048036038101906103fa9190613ad4565b611750565b60405161040c9190613da4565b60405180910390f35b61042f600480360381019061042a9190613ad4565b61187b565b60405161043c9190613da4565b60405180910390f35b61044d6119a6565b005b61046960048036038101906104649190613f82565b6119ba565b6040516104769190613e2a565b60405180910390f35b610487611a0f565b6040516104949190613fed565b60405180910390f35b6104b760048036038101906104b2919061402d565b611a38565b6040516104c49190613da4565b60405180910390f35b6104e760048036038101906104e291906138cf565b611cb4565b005b61050360048036038101906104fe9190613ad4565b611d75565b6040516105109190614197565b60405180910390f35b610533600480360381019061052e91906141e5565b61231e565b6040516105409190613da4565b60405180910390f35b610563600480360381019061055e9190613ad4565b6123af565b6040516105709190614362565b60405180910390f35b610593600480360381019061058e91906141e5565b61261a565b6040516105a09190613da4565b60405180910390f35b6105b16126ab565b005b6105cd60048036038101906105c89190613ad4565b612728565b6040516105da9190614442565b60405180910390f35b6105fd60048036038101906105f89190614464565b6129d6565b60405161060a91906144b3565b60405180910390f35b61062d600480360381019061062891906138fc565b612a7f565b60405161063a9190614197565b60405180910390f35b61065d60048036038101906106589190613ad4565b612c7a565b60405161066a9190613856565b60405180910390f35b61068d600480360381019061068891906138cf565b612e7c565b005b6106a960048036038101906106a49190613ad4565b612f02565b6040516106b69190614442565b60405180910390f35b60008060018461ffff16866106d491906144fd565b6106de919061455d565b90506000806106ed83866116cd565b90505b801561075e5760018661ffff168484604051602001610710929190614591565b6040516020818303038152906040528051906020012060001c61073391906144fd565b61073d919061455d565b925061074983866116cd565b90508180610756906145ba565b9250506106f0565b8293505050509392505050565b610773613030565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606060006107c484611150565b9050600080825167ffffffffffffffff8111156107e4576107e3613695565b5b60405190808252806020026020018201604052801561081d57816020015b61080a613450565b8152602001906001900390816108025790505b50905060005b83518110156108fa578573ffffffffffffffffffffffffffffffffffffffff16848281518110610856576108556145e4565b5b60200260200101516040015173ffffffffffffffffffffffffffffffffffffffff161480156108a05750838181518110610893576108926145e4565b5b6020026020010151608001515b156108ed578381815181106108b8576108b76145e4565b5b60200260200101518284815181106108d3576108d26145e4565b5b602002602001018190525082806108e990614613565b9350505b8080600101915050610823565b5060008267ffffffffffffffff81111561091757610916613695565b5b60405190808252806020026020018201604052801561095057816020015b61093d613450565b8152602001906001900390816109355790505b50905060005b838110156109a457828181518110610971576109706145e4565b5b602002602001015182828151811061098c5761098b6145e4565b5b60200260200101819052508080600101915050610956565b508094505050505092915050565b6109ba613030565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600185610a4d919061465b565b6040518263ffffffff1660e01b8152600401610a699190613da4565b602060405180830381865afa158015610a86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aaa91906146a4565b73ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa158015610af4573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610b1d91906149da565b90508060c00151915050919050565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600185610b7b919061465b565b6040518263ffffffff1660e01b8152600401610b979190613da4565b602060405180830381865afa158015610bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd891906146a4565b905060008173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa158015610c27573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610c5091906149da565b9050600081610120015161ffff1667ffffffffffffffff811115610c7757610c76613695565b5b604051908082528060200260200182016040528015610cb057816020015b610c9d6134bd565b815260200190600190039081610c955790505b50905060005b82610120015161ffff16811015610d8b578373ffffffffffffffffffffffffffffffffffffffff16639b7be8fc8461010001518381518110610cfb57610cfa6145e4565b5b60200260200101516040518263ffffffff1660e01b8152600401610d1f9190613da4565b60c060405180830381865afa158015610d3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d609190614ad8565b828281518110610d7357610d726145e4565b5b60200260200101819052508080600101915050610cb6565b50809350505050919050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600185610de5919061465b565b6040518263ffffffff1660e01b8152600401610e019190613da4565b602060405180830381865afa158015610e1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4291906146a4565b9050600080610e5085611d75565b90506000610e5d86611150565b90506000600667ffffffffffffffff811115610e7c57610e7b613695565b5b604051908082528060200260200182016040528015610eaa5781602001602082028036833780820191505090505b50905060005b83518161ffff161015610fcc57600980811115610ed057610ecf613bfe565b5b848261ffff1681518110610ee757610ee66145e4565b5b6020026020010151604001516009811115610f0557610f04613bfe565b5b14610fb957600182858361ffff1681518110610f2457610f236145e4565b5b6020026020010151604001516009811115610f4257610f41613bfe565b5b81518110610f5357610f526145e4565b5b6020026020010151610f65919061455d565b82858361ffff1681518110610f7d57610f7c6145e4565b5b6020026020010151604001516009811115610f9b57610f9a613bfe565b5b81518110610fac57610fab6145e4565b5b6020026020010181815250505b8080610fc4906145ba565b915050610eb0565b5060005b60068161ffff1610156110af576000828261ffff1681518110610ff657610ff56145e4565b5b602002602001015111156110a2578573ffffffffffffffffffffffffffffffffffffffff1663e2e308308261ffff16600981111561103757611036613bfe565b5b6040518263ffffffff1660e01b815260040161105391906144b3565b602060405180830381865afa158015611070573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110949190614b05565b8561109f919061455d565b94505b8080600101915050610fd0565b50600082511115611143578473ffffffffffffffffffffffffffffffffffffffff1663e2e3083060066040518263ffffffff1660e01b81526004016110f491906144b3565b602060405180830381865afa158015611111573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111359190614b05565b84611140919061455d565b93505b8395505050505050919050565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f60018561119f919061465b565b6040518263ffffffff1660e01b81526004016111bb9190613da4565b602060405180830381865afa1580156111d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fc91906146a4565b905060008173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa15801561124b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061127491906149da565b9050600081610160015161ffff1667ffffffffffffffff81111561129b5761129a613695565b5b6040519080825280602002602001820160405280156112d457816020015b6112c1613450565b8152602001906001900390816112b95790505b5090506000805b83610160015161ffff168161ffff16101561157b5760008573ffffffffffffffffffffffffffffffffffffffff1663dd85ae5f8661014001518461ffff168151811061132a576113296145e4565b5b60200260200101516040518263ffffffff1660e01b815260040161134e9190613da4565b60c060405180830381865afa15801561136b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138f9190614bd2565b905060006113a582606001518760c001516119ba565b90506000818015611430575060008873ffffffffffffffffffffffffffffffffffffffff1663efa3d53160066040518263ffffffff1660e01b81526004016113ed91906144b3565b602060405180830381865afa15801561140a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142e9190614b05565b115b156114c6578773ffffffffffffffffffffffffffffffffffffffff1663efa3d53160066040518263ffffffff1660e01b815260040161146f91906144b3565b602060405180830381865afa15801561148c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b09190614b05565b6114b98b61187b565b6114c39190614bff565b90505b6040518060e0016040528084600001518152602001846020015173ffffffffffffffffffffffffffffffffffffffff168152602001846040015173ffffffffffffffffffffffffffffffffffffffff1681526020018460600151815260200183151581526020018460a001511515815260200182815250868680611549906145ba565b975061ffff16815181106115605761155f6145e4565b5b602002602001018190525050505080806001019150506112db565b5081945050505050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f6001846115d5919061465b565b6040518263ffffffff1660e01b81526004016115f19190613da4565b602060405180830381865afa15801561160e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163291906146a4565b73ffffffffffffffffffffffffffffffffffffffff1663e2e3083060076040518263ffffffff1660e01b815260040161166b91906144b3565b602060405180830381865afa158015611688573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ac9190614b05565b9050919050565b60008015156116c284846116cd565b151514905092915050565b600080600090505b825181101561171e578361ffff168382815181106116f6576116f56145e4565b5b602002602001015161ffff1603611711576001915050611724565b80806001019150506116d5565b50600090505b92915050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f60018461179d919061465b565b6040518263ffffffff1660e01b81526004016117b99190613da4565b602060405180830381865afa1580156117d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117fa91906146a4565b73ffffffffffffffffffffffffffffffffffffffff1663e2e3083060086040518263ffffffff1660e01b815260040161183391906144b3565b602060405180830381865afa158015611850573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118749190614b05565b9050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f6001846118c8919061465b565b6040518263ffffffff1660e01b81526004016118e49190613da4565b602060405180830381865afa158015611901573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192591906146a4565b73ffffffffffffffffffffffffffffffffffffffff1663e2e3083060066040518263ffffffff1660e01b815260040161195e91906144b3565b602060405180830381865afa15801561197b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199f9190614b05565b9050919050565b6119ae613030565b6119b860006130b7565b565b600080600090505b8251811015611a0357838382815181106119df576119de6145e4565b5b6020026020010151036119f6576001915050611a09565b80806001019150506119c2565b50600090505b92915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000806009811115611a4d57611a4c613bfe565b5b826009811115611a6057611a5f613bfe565b5b1480611a90575060016009811115611a7b57611a7a613bfe565b5b826009811115611a8e57611a8d613bfe565b5b145b80611abf575060026009811115611aaa57611aa9613bfe565b5b826009811115611abd57611abc613bfe565b5b145b80611aee575060036009811115611ad957611ad8613bfe565b5b826009811115611aec57611aeb613bfe565b5b145b80611b1d575060046009811115611b0857611b07613bfe565b5b826009811115611b1b57611b1a613bfe565b5b145b80611b4c575060056009811115611b3757611b36613bfe565b5b826009811115611b4a57611b49613bfe565b5b145b611b8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b8290614c8d565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600185611bd6919061465b565b6040518263ffffffff1660e01b8152600401611bf29190613da4565b602060405180830381865afa158015611c0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c3391906146a4565b73ffffffffffffffffffffffffffffffffffffffff1663e2e30830836040518263ffffffff1660e01b8152600401611c6b91906144b3565b602060405180830381865afa158015611c88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cac9190614b05565b905092915050565b611cbc613030565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611cf79190613fed565b602060405180830381865afa158015611d14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d389190614b05565b90506000811115611d7157611d7082600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168361317b565b5b5050565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600185611dc4919061465b565b6040518263ffffffff1660e01b8152600401611de09190613da4565b602060405180830381865afa158015611dfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e2191906146a4565b905060008173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa158015611e70573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611e9991906149da565b905060008161012001519050600082610120015161ffff1667ffffffffffffffff811115611eca57611ec9613695565b5b604051908082528060200260200182016040528015611f0357816020015b611ef0613533565b815260200190600190039081611ee85790505b5090506000805b8361ffff168161ffff1610156123105760008673ffffffffffffffffffffffffffffffffffffffff16639b7be8fc8761010001518461ffff1681518110611f5457611f536145e4565b5b60200260200101516040518263ffffffff1660e01b8152600401611f789190613da4565b60c060405180830381865afa158015611f95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fb99190614ad8565b905060008773ffffffffffffffffffffffffffffffffffffffff1663598f3b9d83600001516040518263ffffffff1660e01b8152600401611ffa9190613da4565b600060405180830381865afa158015612017573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906120409190614cad565b905060008760a0015160058151811061205c5761205b6145e4565b5b602002602001015161ffff168260058151811061207c5761207b6145e4565b5b602002602001015161ffff161490506000805b60058161ffff1610156120ef576000848261ffff16815181106120b5576120b46145e4565b5b602002602001015190506120cd818c60a001516116cd565b156120e15782806120dd906145ba565b9350505b50808060010191505061208f565b5060006120fc82846129d6565b9050600060098081111561211357612112613bfe565b5b82600981111561212657612125613bfe565b5b141580156121ad575060008c73ffffffffffffffffffffffffffffffffffffffff1663efa3d531846040518263ffffffff1660e01b815260040161216a91906144b3565b602060405180830381865afa158015612187573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ab9190614b05565b115b15612243578b73ffffffffffffffffffffffffffffffffffffffff1663efa3d531836040518263ffffffff1660e01b81526004016121eb91906144b3565b602060405180830381865afa158015612208573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222c9190614b05565b6122368f84611a38565b6122409190614bff565b90505b6040518060c0016040528087600001518152602001876020015173ffffffffffffffffffffffffffffffffffffffff16815260200183600981111561228b5761228a613bfe565b5b81526020016009808111156122a3576122a2613bfe565b5b8460098111156122b6576122b5613bfe565b5b141515158152602001876060015115158152602001828152508989806122db906145ba565b9a5061ffff16815181106122f2576122f16145e4565b5b60200260200101819052505050505050508080600101915050611f0a565b508195505050505050919050565b60008060009050600061233186866107b7565b905060005b81518110156123a257841515828281518110612355576123546145e4565b5b602002602001015160a001511515036123955781818151811061237b5761237a6145e4565b5b602002602001015160c0015183612392919061455d565b92505b8080600101915050612336565b5081925050509392505050565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f6001856123fe919061465b565b6040518263ffffffff1660e01b815260040161241a9190613da4565b602060405180830381865afa158015612437573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245b91906146a4565b905060008173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa1580156124aa573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906124d391906149da565b9050600081610160015161ffff1667ffffffffffffffff8111156124fa576124f9613695565b5b60405190808252806020026020018201604052801561253357816020015b612520613595565b8152602001906001900390816125185790505b50905060005b82610160015161ffff1681101561260e578373ffffffffffffffffffffffffffffffffffffffff1663dd85ae5f846101000151838151811061257e5761257d6145e4565b5b60200260200101516040518263ffffffff1660e01b81526004016125a29190613da4565b60c060405180830381865afa1580156125bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e39190614bd2565b8282815181106125f6576125f56145e4565b5b60200260200101819052508080600101915050612539565b50809350505050919050565b60008060009050600061262d8686612a7f565b905060005b815181101561269e57841515828281518110612651576126506145e4565b5b60200260200101516080015115150361269157818181518110612677576126766145e4565b5b602002602001015160a001518361268e919061455d565b92505b8080600101915050612632565b5081925050509392505050565b6126b3613030565b600047111561272657600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015612724573d6000803e3d6000fd5b505b565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600185612777919061465b565b6040518263ffffffff1660e01b81526004016127939190613da4565b602060405180830381865afa1580156127b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127d491906146a4565b905060008173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa158015612823573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061284c91906149da565b9050600060068261012001516128629190614cf6565b61ffff1667ffffffffffffffff81111561287f5761287e613695565b5b6040519080825280602002602001820160405280156128ad5781602001602082028036833780820191505090505b50905060005b82610120015161ffff168110156129ca5760008473ffffffffffffffffffffffffffffffffffffffff1663598f3b9d836040518263ffffffff1660e01b81526004016128ff9190613da4565b600060405180830381865afa15801561291c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906129459190614cad565b905060005b81518110156129bb57818181518110612966576129656145e4565b5b6020026020010151848260068661297d9190614d33565b612987919061455d565b81518110612998576129976145e4565b5b602002602001019061ffff16908161ffff1681525050808060010191505061294a565b505080806001019150506128b3565b50809350505050919050565b600060058361ffff161480156129e95750815b156129f75760009050612a79565b60058361ffff1603612a0c5760019050612a79565b60048361ffff16148015612a1d5750815b15612a2b5760029050612a79565b60048361ffff1603612a405760039050612a79565b60038361ffff16148015612a515750815b15612a5f5760049050612a79565b60038361ffff1603612a745760059050612a79565b600990505b92915050565b60606000612a8c84611d75565b9050600080825167ffffffffffffffff811115612aac57612aab613695565b5b604051908082528060200260200182016040528015612ae557816020015b612ad2613533565b815260200190600190039081612aca5790505b50905060005b8351811015612bc2578573ffffffffffffffffffffffffffffffffffffffff16848281518110612b1e57612b1d6145e4565b5b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff16148015612b685750838181518110612b5b57612b5a6145e4565b5b6020026020010151606001515b15612bb557838181518110612b8057612b7f6145e4565b5b6020026020010151828481518110612b9b57612b9a6145e4565b5b60200260200101819052508280612bb190614613565b9350505b8080600101915050612aeb565b5060008267ffffffffffffffff811115612bdf57612bde613695565b5b604051908082528060200260200182016040528015612c1857816020015b612c05613533565b815260200190600190039081612bfd5790505b50905060005b83811015612c6c57828181518110612c3957612c386145e4565b5b6020026020010151828281518110612c5457612c536145e4565b5b60200260200101819052508080600101915050612c1e565b508094505050505092915050565b600080600090506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600186612cce919061465b565b6040518263ffffffff1660e01b8152600401612cea9190613da4565b602060405180830381865afa158015612d07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d2b91906146a4565b73ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa158015612d75573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612d9e91906149da565b61016001519050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f4dec22b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e369190614d75565b61ffff168161ffff1681612e4d57612e4c6144ce565b5b04915060008261ffff16148015612e68575060008161ffff16115b15612e7257600191505b8192505050919050565b612e84613030565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612ef65760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401612eed9190613fed565b60405180910390fd5b612eff816130b7565b50565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600185612f51919061465b565b6040518263ffffffff1660e01b8152600401612f6d9190613da4565b602060405180830381865afa158015612f8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fae91906146a4565b73ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa158015612ff8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061302191906149da565b90508060a00151915050919050565b6130386131fa565b73ffffffffffffffffffffffffffffffffffffffff16613056611a0f565b73ffffffffffffffffffffffffffffffffffffffff16146130b5576130796131fa565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016130ac9190613fed565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6131f5838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040516024016131ae929190614da2565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613202565b505050565b600033905090565b600061322d828473ffffffffffffffffffffffffffffffffffffffff1661329990919063ffffffff16565b905060008151141580156132525750808060200190518101906132509190614dcb565b155b1561329457826040517f5274afe700000000000000000000000000000000000000000000000000000000815260040161328b9190613fed565b60405180910390fd5b505050565b60606132a7838360006132af565b905092915050565b6060814710156132f657306040517fcd7860590000000000000000000000000000000000000000000000000000000081526004016132ed9190613fed565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff16848660405161331f9190614e69565b60006040518083038185875af1925050503d806000811461335c576040519150601f19603f3d011682016040523d82523d6000602084013e613361565b606091505b509150915061337186838361337c565b925050509392505050565b6060826133915761338c8261340b565b613403565b600082511480156133b9575060008473ffffffffffffffffffffffffffffffffffffffff163b145b156133fb57836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016133f29190613fed565b60405180910390fd5b819050613404565b5b9392505050565b60008151111561341e5780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518060e0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600015158152602001600015158152602001600081525090565b6040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001600081526020016000600981111561352d5761352c613bfe565b5b81525090565b6040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000600981111561357657613575613bfe565b5b8152602001600015158152602001600015158152602001600081525090565b6040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581526020016000151581525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6136228161360f565b811461362d57600080fd5b50565b60008135905061363f81613619565b92915050565b600061ffff82169050919050565b61365c81613645565b811461366757600080fd5b50565b60008135905061367981613653565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6136cd82613684565b810181811067ffffffffffffffff821117156136ec576136eb613695565b5b80604052505050565b60006136ff6135fb565b905061370b82826136c4565b919050565b600067ffffffffffffffff82111561372b5761372a613695565b5b602082029050602081019050919050565b600080fd5b600061375461374f84613710565b6136f5565b905080838252602082019050602084028301858111156137775761377661373c565b5b835b818110156137a0578061378c888261366a565b845260208401935050602081019050613779565b5050509392505050565b600082601f8301126137bf576137be61367f565b5b81356137cf848260208601613741565b91505092915050565b6000806000606084860312156137f1576137f0613605565b5b60006137ff86828701613630565b93505060206138108682870161366a565b925050604084013567ffffffffffffffff8111156138315761383061360a565b5b61383d868287016137aa565b9150509250925092565b61385081613645565b82525050565b600060208201905061386b6000830184613847565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061389c82613871565b9050919050565b6138ac81613891565b81146138b757600080fd5b50565b6000813590506138c9816138a3565b92915050565b6000602082840312156138e5576138e4613605565b5b60006138f3848285016138ba565b91505092915050565b6000806040838503121561391357613912613605565b5b600061392185828601613630565b9250506020613932858286016138ba565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6139718161360f565b82525050565b61398081613891565b82525050565b60008115159050919050565b61399b81613986565b82525050565b60e0820160008201516139b76000850182613968565b5060208201516139ca6020850182613977565b5060408201516139dd6040850182613977565b5060608201516139f06060850182613968565b506080820151613a036080850182613992565b5060a0820151613a1660a0850182613992565b5060c0820151613a2960c0850182613968565b50505050565b6000613a3b83836139a1565b60e08301905092915050565b6000602082019050919050565b6000613a5f8261393c565b613a698185613947565b9350613a7483613958565b8060005b83811015613aa5578151613a8c8882613a2f565b9750613a9783613a47565b925050600181019050613a78565b5085935050505092915050565b60006020820190508181036000830152613acc8184613a54565b905092915050565b600060208284031215613aea57613ae9613605565b5b6000613af884828501613630565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000613b398383613968565b60208301905092915050565b6000602082019050919050565b6000613b5d82613b01565b613b678185613b0c565b9350613b7283613b1d565b8060005b83811015613ba3578151613b8a8882613b2d565b9750613b9583613b45565b925050600181019050613b76565b5085935050505092915050565b60006020820190508181036000830152613bca8184613b52565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600a8110613c3e57613c3d613bfe565b5b50565b6000819050613c4f82613c2d565b919050565b6000613c5f82613c41565b9050919050565b613c6f81613c54565b82525050565b60c082016000820151613c8b6000850182613968565b506020820151613c9e6020850182613977565b506040820151613cb16040850182613977565b506060820151613cc46060850182613992565b506080820151613cd76080850182613968565b5060a0820151613cea60a0850182613c66565b50505050565b6000613cfc8383613c75565b60c08301905092915050565b6000602082019050919050565b6000613d2082613bd2565b613d2a8185613bdd565b9350613d3583613bee565b8060005b83811015613d66578151613d4d8882613cf0565b9750613d5883613d08565b925050600181019050613d39565b5085935050505092915050565b60006020820190508181036000830152613d8d8184613d15565b905092915050565b613d9e8161360f565b82525050565b6000602082019050613db96000830184613d95565b92915050565b60008060408385031215613dd657613dd5613605565b5b6000613de48582860161366a565b925050602083013567ffffffffffffffff811115613e0557613e0461360a565b5b613e11858286016137aa565b9150509250929050565b613e2481613986565b82525050565b6000602082019050613e3f6000830184613e1b565b92915050565b6000819050919050565b6000613e6a613e65613e6084613871565b613e45565b613871565b9050919050565b6000613e7c82613e4f565b9050919050565b6000613e8e82613e71565b9050919050565b613e9e81613e83565b82525050565b6000602082019050613eb96000830184613e95565b92915050565b600067ffffffffffffffff821115613eda57613ed9613695565b5b602082029050602081019050919050565b6000613efe613ef984613ebf565b6136f5565b90508083825260208201905060208402830185811115613f2157613f2061373c565b5b835b81811015613f4a5780613f368882613630565b845260208401935050602081019050613f23565b5050509392505050565b600082601f830112613f6957613f6861367f565b5b8135613f79848260208601613eeb565b91505092915050565b60008060408385031215613f9957613f98613605565b5b6000613fa785828601613630565b925050602083013567ffffffffffffffff811115613fc857613fc761360a565b5b613fd485828601613f54565b9150509250929050565b613fe781613891565b82525050565b60006020820190506140026000830184613fde565b92915050565b600a811061401557600080fd5b50565b60008135905061402781614008565b92915050565b6000806040838503121561404457614043613605565b5b600061405285828601613630565b925050602061406385828601614018565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60c0820160008201516140af6000850182613968565b5060208201516140c26020850182613977565b5060408201516140d56040850182613c66565b5060608201516140e86060850182613992565b5060808201516140fb6080850182613992565b5060a082015161410e60a0850182613968565b50505050565b60006141208383614099565b60c08301905092915050565b6000602082019050919050565b60006141448261406d565b61414e8185614078565b935061415983614089565b8060005b8381101561418a5781516141718882614114565b975061417c8361412c565b92505060018101905061415d565b5085935050505092915050565b600060208201905081810360008301526141b18184614139565b905092915050565b6141c281613986565b81146141cd57600080fd5b50565b6000813590506141df816141b9565b92915050565b6000806000606084860312156141fe576141fd613605565b5b600061420c86828701613630565b935050602061421d868287016138ba565b925050604061422e868287016141d0565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60c08201600082015161427a6000850182613968565b50602082015161428d6020850182613977565b5060408201516142a06040850182613977565b5060608201516142b36060850182613968565b5060808201516142c66080850182613992565b5060a08201516142d960a0850182613992565b50505050565b60006142eb8383614264565b60c08301905092915050565b6000602082019050919050565b600061430f82614238565b6143198185614243565b935061432483614254565b8060005b8381101561435557815161433c88826142df565b9750614347836142f7565b925050600181019050614328565b5085935050505092915050565b6000602082019050818103600083015261437c8184614304565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6143b981613645565b82525050565b60006143cb83836143b0565b60208301905092915050565b6000602082019050919050565b60006143ef82614384565b6143f9818561438f565b9350614404836143a0565b8060005b8381101561443557815161441c88826143bf565b9750614427836143d7565b925050600181019050614408565b5085935050505092915050565b6000602082019050818103600083015261445c81846143e4565b905092915050565b6000806040838503121561447b5761447a613605565b5b60006144898582860161366a565b925050602061449a858286016141d0565b9150509250929050565b6144ad81613c54565b82525050565b60006020820190506144c860008301846144a4565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006145088261360f565b91506145138361360f565b925082614523576145226144ce565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006145688261360f565b91506145738361360f565b925082820190508082111561458b5761458a61452e565b5b92915050565b60006040820190506145a66000830185613847565b6145b36020830184613847565b9392505050565b60006145c582613645565b915061ffff82036145d9576145d861452e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061461e8261360f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036146505761464f61452e565b5b600182019050919050565b60006146668261360f565b91506146718361360f565b92508282039050818111156146895761468861452e565b5b92915050565b60008151905061469e816138a3565b92915050565b6000602082840312156146ba576146b9613605565b5b60006146c88482850161468f565b91505092915050565b600080fd5b600080fd5b6000815190506146ea81613619565b92915050565b6000815190506146ff816141b9565b92915050565b60008151905061471481613653565b92915050565b600061472d61472884613710565b6136f5565b905080838252602082019050602084028301858111156147505761474f61373c565b5b835b8181101561477957806147658882614705565b845260208401935050602081019050614752565b5050509392505050565b600082601f8301126147985761479761367f565b5b81516147a884826020860161471a565b91505092915050565b60006147c46147bf84613ebf565b6136f5565b905080838252602082019050602084028301858111156147e7576147e661373c565b5b835b8181101561481057806147fc88826146db565b8452602084019350506020810190506147e9565b5050509392505050565b600082601f83011261482f5761482e61367f565b5b815161483f8482602086016147b1565b91505092915050565b6000610180828403121561485f5761485e6146d1565b5b61486a6101806136f5565b9050600061487a848285016146db565b600083015250602061488e848285016146db565b60208301525060406148a2848285016146db565b60408301525060606148b6848285016146db565b60608301525060806148ca848285016146f0565b60808301525060a082015167ffffffffffffffff8111156148ee576148ed6146d6565b5b6148fa84828501614783565b60a08301525060c082015167ffffffffffffffff81111561491e5761491d6146d6565b5b61492a8482850161481a565b60c08301525060e061493e84828501614705565b60e08301525061010082015167ffffffffffffffff811115614963576149626146d6565b5b61496f8482850161481a565b6101008301525061012061498584828501614705565b6101208301525061014082015167ffffffffffffffff8111156149ab576149aa6146d6565b5b6149b78482850161481a565b610140830152506101606149cd84828501614705565b6101608301525092915050565b6000602082840312156149f0576149ef613605565b5b600082015167ffffffffffffffff811115614a0e57614a0d61360a565b5b614a1a84828501614848565b91505092915050565b600081519050614a3281614008565b92915050565b600060c08284031215614a4e57614a4d6146d1565b5b614a5860c06136f5565b90506000614a68848285016146db565b6000830152506020614a7c8482850161468f565b6020830152506040614a908482850161468f565b6040830152506060614aa4848285016146f0565b6060830152506080614ab8848285016146db565b60808301525060a0614acc84828501614a23565b60a08301525092915050565b600060c08284031215614aee57614aed613605565b5b6000614afc84828501614a38565b91505092915050565b600060208284031215614b1b57614b1a613605565b5b6000614b29848285016146db565b91505092915050565b600060c08284031215614b4857614b476146d1565b5b614b5260c06136f5565b90506000614b62848285016146db565b6000830152506020614b768482850161468f565b6020830152506040614b8a8482850161468f565b6040830152506060614b9e848285016146db565b6060830152506080614bb2848285016146f0565b60808301525060a0614bc6848285016146f0565b60a08301525092915050565b600060c08284031215614be857614be7613605565b5b6000614bf684828501614b32565b91505092915050565b6000614c0a8261360f565b9150614c158361360f565b925082614c2557614c246144ce565b5b828204905092915050565b600082825260208201905092915050565b7f496e76616c696420766963746f72792074696572000000000000000000000000600082015250565b6000614c77601483614c30565b9150614c8282614c41565b602082019050919050565b60006020820190508181036000830152614ca681614c6a565b9050919050565b600060208284031215614cc357614cc2613605565b5b600082015167ffffffffffffffff811115614ce157614ce061360a565b5b614ced84828501614783565b91505092915050565b6000614d0182613645565b9150614d0c83613645565b9250828202614d1a81613645565b9150808214614d2c57614d2b61452e565b5b5092915050565b6000614d3e8261360f565b9150614d498361360f565b9250828202614d578161360f565b91508282048414831517614d6e57614d6d61452e565b5b5092915050565b600060208284031215614d8b57614d8a613605565b5b6000614d9984828501614705565b91505092915050565b6000604082019050614db76000830185613fde565b614dc46020830184613d95565b9392505050565b600060208284031215614de157614de0613605565b5b6000614def848285016146f0565b91505092915050565b600081519050919050565b600081905092915050565b60005b83811015614e2c578082015181840152602081019050614e11565b60008484015250505050565b6000614e4382614df8565b614e4d8185614e03565b9350614e5d818560208601614e0e565b80840191505092915050565b6000614e758284614e38565b91508190509291505056fea26469706673582212207c0f813f49ab97019d578149833edad68eabe132a67ac84ae98867e511c650aa64736f6c63430008180033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c80638285cc5a11610104578063b7991e33116100a2578063eed2589611610071578063eed2589614610613578063f1664df614610643578063f2fde38b14610673578063fdfe81851461068f576101da565b8063b7991e3314610579578063bbd1783a146105a9578063caac49a7146105b3578063e34208e6146105e3576101da565b8063998da3e9116100de578063998da3e9146104cd5780639f75e5c9146104e9578063a521dc9514610519578063a65d31b914610549576101da565b80638285cc5a1461044f5780638da5cb5b1461047f5780638e0e3fcd1461049d576101da565b806348b2e35c1161017c5780635dc9dbe81161014b5780635dc9dbe8146103c757806361ab0c89146103e557806368525a4e14610415578063715018a614610445576101da565b806348b2e35c1461030757806349a0a1f6146103375780634e00b9d31461036757806359103c1214610397576101da565b806322bd49a8116101b857806322bd49a81461025b578063283b7f28146102775780632f877497146102a75780633c73b4c4146102d7576101da565b80630c746a8a146101df57806314eb76ac1461020f57806317ba3b7d1461022b575b600080fd5b6101f960048036038101906101f491906137d8565b6106bf565b6040516102069190613856565b60405180910390f35b610229600480360381019061022491906138cf565b61076b565b005b610245600480360381019061024091906138fc565b6107b7565b6040516102529190613ab2565b60405180910390f35b610275600480360381019061027091906138cf565b6109b2565b005b610291600480360381019061028c9190613ad4565b6109fe565b60405161029e9190613bb0565b60405180910390f35b6102c160048036038101906102bc9190613ad4565b610b2c565b6040516102ce9190613d73565b60405180910390f35b6102f160048036038101906102ec9190613ad4565b610d97565b6040516102fe9190613da4565b60405180910390f35b610321600480360381019061031c9190613ad4565b611150565b60405161032e9190613ab2565b60405180910390f35b610351600480360381019061034c9190613ad4565b611588565b60405161035e9190613da4565b60405180910390f35b610381600480360381019061037c9190613dbf565b6116b3565b60405161038e9190613e2a565b60405180910390f35b6103b160048036038101906103ac9190613dbf565b6116cd565b6040516103be9190613e2a565b60405180910390f35b6103cf61172a565b6040516103dc9190613ea4565b60405180910390f35b6103ff60048036038101906103fa9190613ad4565b611750565b60405161040c9190613da4565b60405180910390f35b61042f600480360381019061042a9190613ad4565b61187b565b60405161043c9190613da4565b60405180910390f35b61044d6119a6565b005b61046960048036038101906104649190613f82565b6119ba565b6040516104769190613e2a565b60405180910390f35b610487611a0f565b6040516104949190613fed565b60405180910390f35b6104b760048036038101906104b2919061402d565b611a38565b6040516104c49190613da4565b60405180910390f35b6104e760048036038101906104e291906138cf565b611cb4565b005b61050360048036038101906104fe9190613ad4565b611d75565b6040516105109190614197565b60405180910390f35b610533600480360381019061052e91906141e5565b61231e565b6040516105409190613da4565b60405180910390f35b610563600480360381019061055e9190613ad4565b6123af565b6040516105709190614362565b60405180910390f35b610593600480360381019061058e91906141e5565b61261a565b6040516105a09190613da4565b60405180910390f35b6105b16126ab565b005b6105cd60048036038101906105c89190613ad4565b612728565b6040516105da9190614442565b60405180910390f35b6105fd60048036038101906105f89190614464565b6129d6565b60405161060a91906144b3565b60405180910390f35b61062d600480360381019061062891906138fc565b612a7f565b60405161063a9190614197565b60405180910390f35b61065d60048036038101906106589190613ad4565b612c7a565b60405161066a9190613856565b60405180910390f35b61068d600480360381019061068891906138cf565b612e7c565b005b6106a960048036038101906106a49190613ad4565b612f02565b6040516106b69190614442565b60405180910390f35b60008060018461ffff16866106d491906144fd565b6106de919061455d565b90506000806106ed83866116cd565b90505b801561075e5760018661ffff168484604051602001610710929190614591565b6040516020818303038152906040528051906020012060001c61073391906144fd565b61073d919061455d565b925061074983866116cd565b90508180610756906145ba565b9250506106f0565b8293505050509392505050565b610773613030565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606060006107c484611150565b9050600080825167ffffffffffffffff8111156107e4576107e3613695565b5b60405190808252806020026020018201604052801561081d57816020015b61080a613450565b8152602001906001900390816108025790505b50905060005b83518110156108fa578573ffffffffffffffffffffffffffffffffffffffff16848281518110610856576108556145e4565b5b60200260200101516040015173ffffffffffffffffffffffffffffffffffffffff161480156108a05750838181518110610893576108926145e4565b5b6020026020010151608001515b156108ed578381815181106108b8576108b76145e4565b5b60200260200101518284815181106108d3576108d26145e4565b5b602002602001018190525082806108e990614613565b9350505b8080600101915050610823565b5060008267ffffffffffffffff81111561091757610916613695565b5b60405190808252806020026020018201604052801561095057816020015b61093d613450565b8152602001906001900390816109355790505b50905060005b838110156109a457828181518110610971576109706145e4565b5b602002602001015182828151811061098c5761098b6145e4565b5b60200260200101819052508080600101915050610956565b508094505050505092915050565b6109ba613030565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600185610a4d919061465b565b6040518263ffffffff1660e01b8152600401610a699190613da4565b602060405180830381865afa158015610a86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aaa91906146a4565b73ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa158015610af4573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610b1d91906149da565b90508060c00151915050919050565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600185610b7b919061465b565b6040518263ffffffff1660e01b8152600401610b979190613da4565b602060405180830381865afa158015610bb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd891906146a4565b905060008173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa158015610c27573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610c5091906149da565b9050600081610120015161ffff1667ffffffffffffffff811115610c7757610c76613695565b5b604051908082528060200260200182016040528015610cb057816020015b610c9d6134bd565b815260200190600190039081610c955790505b50905060005b82610120015161ffff16811015610d8b578373ffffffffffffffffffffffffffffffffffffffff16639b7be8fc8461010001518381518110610cfb57610cfa6145e4565b5b60200260200101516040518263ffffffff1660e01b8152600401610d1f9190613da4565b60c060405180830381865afa158015610d3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d609190614ad8565b828281518110610d7357610d726145e4565b5b60200260200101819052508080600101915050610cb6565b50809350505050919050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600185610de5919061465b565b6040518263ffffffff1660e01b8152600401610e019190613da4565b602060405180830381865afa158015610e1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4291906146a4565b9050600080610e5085611d75565b90506000610e5d86611150565b90506000600667ffffffffffffffff811115610e7c57610e7b613695565b5b604051908082528060200260200182016040528015610eaa5781602001602082028036833780820191505090505b50905060005b83518161ffff161015610fcc57600980811115610ed057610ecf613bfe565b5b848261ffff1681518110610ee757610ee66145e4565b5b6020026020010151604001516009811115610f0557610f04613bfe565b5b14610fb957600182858361ffff1681518110610f2457610f236145e4565b5b6020026020010151604001516009811115610f4257610f41613bfe565b5b81518110610f5357610f526145e4565b5b6020026020010151610f65919061455d565b82858361ffff1681518110610f7d57610f7c6145e4565b5b6020026020010151604001516009811115610f9b57610f9a613bfe565b5b81518110610fac57610fab6145e4565b5b6020026020010181815250505b8080610fc4906145ba565b915050610eb0565b5060005b60068161ffff1610156110af576000828261ffff1681518110610ff657610ff56145e4565b5b602002602001015111156110a2578573ffffffffffffffffffffffffffffffffffffffff1663e2e308308261ffff16600981111561103757611036613bfe565b5b6040518263ffffffff1660e01b815260040161105391906144b3565b602060405180830381865afa158015611070573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110949190614b05565b8561109f919061455d565b94505b8080600101915050610fd0565b50600082511115611143578473ffffffffffffffffffffffffffffffffffffffff1663e2e3083060066040518263ffffffff1660e01b81526004016110f491906144b3565b602060405180830381865afa158015611111573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111359190614b05565b84611140919061455d565b93505b8395505050505050919050565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f60018561119f919061465b565b6040518263ffffffff1660e01b81526004016111bb9190613da4565b602060405180830381865afa1580156111d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111fc91906146a4565b905060008173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa15801561124b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061127491906149da565b9050600081610160015161ffff1667ffffffffffffffff81111561129b5761129a613695565b5b6040519080825280602002602001820160405280156112d457816020015b6112c1613450565b8152602001906001900390816112b95790505b5090506000805b83610160015161ffff168161ffff16101561157b5760008573ffffffffffffffffffffffffffffffffffffffff1663dd85ae5f8661014001518461ffff168151811061132a576113296145e4565b5b60200260200101516040518263ffffffff1660e01b815260040161134e9190613da4565b60c060405180830381865afa15801561136b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138f9190614bd2565b905060006113a582606001518760c001516119ba565b90506000818015611430575060008873ffffffffffffffffffffffffffffffffffffffff1663efa3d53160066040518263ffffffff1660e01b81526004016113ed91906144b3565b602060405180830381865afa15801561140a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142e9190614b05565b115b156114c6578773ffffffffffffffffffffffffffffffffffffffff1663efa3d53160066040518263ffffffff1660e01b815260040161146f91906144b3565b602060405180830381865afa15801561148c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b09190614b05565b6114b98b61187b565b6114c39190614bff565b90505b6040518060e0016040528084600001518152602001846020015173ffffffffffffffffffffffffffffffffffffffff168152602001846040015173ffffffffffffffffffffffffffffffffffffffff1681526020018460600151815260200183151581526020018460a001511515815260200182815250868680611549906145ba565b975061ffff16815181106115605761155f6145e4565b5b602002602001018190525050505080806001019150506112db565b5081945050505050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f6001846115d5919061465b565b6040518263ffffffff1660e01b81526004016115f19190613da4565b602060405180830381865afa15801561160e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163291906146a4565b73ffffffffffffffffffffffffffffffffffffffff1663e2e3083060076040518263ffffffff1660e01b815260040161166b91906144b3565b602060405180830381865afa158015611688573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ac9190614b05565b9050919050565b60008015156116c284846116cd565b151514905092915050565b600080600090505b825181101561171e578361ffff168382815181106116f6576116f56145e4565b5b602002602001015161ffff1603611711576001915050611724565b80806001019150506116d5565b50600090505b92915050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f60018461179d919061465b565b6040518263ffffffff1660e01b81526004016117b99190613da4565b602060405180830381865afa1580156117d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117fa91906146a4565b73ffffffffffffffffffffffffffffffffffffffff1663e2e3083060086040518263ffffffff1660e01b815260040161183391906144b3565b602060405180830381865afa158015611850573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118749190614b05565b9050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f6001846118c8919061465b565b6040518263ffffffff1660e01b81526004016118e49190613da4565b602060405180830381865afa158015611901573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192591906146a4565b73ffffffffffffffffffffffffffffffffffffffff1663e2e3083060066040518263ffffffff1660e01b815260040161195e91906144b3565b602060405180830381865afa15801561197b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199f9190614b05565b9050919050565b6119ae613030565b6119b860006130b7565b565b600080600090505b8251811015611a0357838382815181106119df576119de6145e4565b5b6020026020010151036119f6576001915050611a09565b80806001019150506119c2565b50600090505b92915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000806009811115611a4d57611a4c613bfe565b5b826009811115611a6057611a5f613bfe565b5b1480611a90575060016009811115611a7b57611a7a613bfe565b5b826009811115611a8e57611a8d613bfe565b5b145b80611abf575060026009811115611aaa57611aa9613bfe565b5b826009811115611abd57611abc613bfe565b5b145b80611aee575060036009811115611ad957611ad8613bfe565b5b826009811115611aec57611aeb613bfe565b5b145b80611b1d575060046009811115611b0857611b07613bfe565b5b826009811115611b1b57611b1a613bfe565b5b145b80611b4c575060056009811115611b3757611b36613bfe565b5b826009811115611b4a57611b49613bfe565b5b145b611b8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b8290614c8d565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600185611bd6919061465b565b6040518263ffffffff1660e01b8152600401611bf29190613da4565b602060405180830381865afa158015611c0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c3391906146a4565b73ffffffffffffffffffffffffffffffffffffffff1663e2e30830836040518263ffffffff1660e01b8152600401611c6b91906144b3565b602060405180830381865afa158015611c88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cac9190614b05565b905092915050565b611cbc613030565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611cf79190613fed565b602060405180830381865afa158015611d14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d389190614b05565b90506000811115611d7157611d7082600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168361317b565b5b5050565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600185611dc4919061465b565b6040518263ffffffff1660e01b8152600401611de09190613da4565b602060405180830381865afa158015611dfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e2191906146a4565b905060008173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa158015611e70573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611e9991906149da565b905060008161012001519050600082610120015161ffff1667ffffffffffffffff811115611eca57611ec9613695565b5b604051908082528060200260200182016040528015611f0357816020015b611ef0613533565b815260200190600190039081611ee85790505b5090506000805b8361ffff168161ffff1610156123105760008673ffffffffffffffffffffffffffffffffffffffff16639b7be8fc8761010001518461ffff1681518110611f5457611f536145e4565b5b60200260200101516040518263ffffffff1660e01b8152600401611f789190613da4565b60c060405180830381865afa158015611f95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fb99190614ad8565b905060008773ffffffffffffffffffffffffffffffffffffffff1663598f3b9d83600001516040518263ffffffff1660e01b8152600401611ffa9190613da4565b600060405180830381865afa158015612017573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906120409190614cad565b905060008760a0015160058151811061205c5761205b6145e4565b5b602002602001015161ffff168260058151811061207c5761207b6145e4565b5b602002602001015161ffff161490506000805b60058161ffff1610156120ef576000848261ffff16815181106120b5576120b46145e4565b5b602002602001015190506120cd818c60a001516116cd565b156120e15782806120dd906145ba565b9350505b50808060010191505061208f565b5060006120fc82846129d6565b9050600060098081111561211357612112613bfe565b5b82600981111561212657612125613bfe565b5b141580156121ad575060008c73ffffffffffffffffffffffffffffffffffffffff1663efa3d531846040518263ffffffff1660e01b815260040161216a91906144b3565b602060405180830381865afa158015612187573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ab9190614b05565b115b15612243578b73ffffffffffffffffffffffffffffffffffffffff1663efa3d531836040518263ffffffff1660e01b81526004016121eb91906144b3565b602060405180830381865afa158015612208573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061222c9190614b05565b6122368f84611a38565b6122409190614bff565b90505b6040518060c0016040528087600001518152602001876020015173ffffffffffffffffffffffffffffffffffffffff16815260200183600981111561228b5761228a613bfe565b5b81526020016009808111156122a3576122a2613bfe565b5b8460098111156122b6576122b5613bfe565b5b141515158152602001876060015115158152602001828152508989806122db906145ba565b9a5061ffff16815181106122f2576122f16145e4565b5b60200260200101819052505050505050508080600101915050611f0a565b508195505050505050919050565b60008060009050600061233186866107b7565b905060005b81518110156123a257841515828281518110612355576123546145e4565b5b602002602001015160a001511515036123955781818151811061237b5761237a6145e4565b5b602002602001015160c0015183612392919061455d565b92505b8080600101915050612336565b5081925050509392505050565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f6001856123fe919061465b565b6040518263ffffffff1660e01b815260040161241a9190613da4565b602060405180830381865afa158015612437573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245b91906146a4565b905060008173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa1580156124aa573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906124d391906149da565b9050600081610160015161ffff1667ffffffffffffffff8111156124fa576124f9613695565b5b60405190808252806020026020018201604052801561253357816020015b612520613595565b8152602001906001900390816125185790505b50905060005b82610160015161ffff1681101561260e578373ffffffffffffffffffffffffffffffffffffffff1663dd85ae5f846101000151838151811061257e5761257d6145e4565b5b60200260200101516040518263ffffffff1660e01b81526004016125a29190613da4565b60c060405180830381865afa1580156125bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125e39190614bd2565b8282815181106125f6576125f56145e4565b5b60200260200101819052508080600101915050612539565b50809350505050919050565b60008060009050600061262d8686612a7f565b905060005b815181101561269e57841515828281518110612651576126506145e4565b5b60200260200101516080015115150361269157818181518110612677576126766145e4565b5b602002602001015160a001518361268e919061455d565b92505b8080600101915050612632565b5081925050509392505050565b6126b3613030565b600047111561272657600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015612724573d6000803e3d6000fd5b505b565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600185612777919061465b565b6040518263ffffffff1660e01b81526004016127939190613da4565b602060405180830381865afa1580156127b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127d491906146a4565b905060008173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa158015612823573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061284c91906149da565b9050600060068261012001516128629190614cf6565b61ffff1667ffffffffffffffff81111561287f5761287e613695565b5b6040519080825280602002602001820160405280156128ad5781602001602082028036833780820191505090505b50905060005b82610120015161ffff168110156129ca5760008473ffffffffffffffffffffffffffffffffffffffff1663598f3b9d836040518263ffffffff1660e01b81526004016128ff9190613da4565b600060405180830381865afa15801561291c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906129459190614cad565b905060005b81518110156129bb57818181518110612966576129656145e4565b5b6020026020010151848260068661297d9190614d33565b612987919061455d565b81518110612998576129976145e4565b5b602002602001019061ffff16908161ffff1681525050808060010191505061294a565b505080806001019150506128b3565b50809350505050919050565b600060058361ffff161480156129e95750815b156129f75760009050612a79565b60058361ffff1603612a0c5760019050612a79565b60048361ffff16148015612a1d5750815b15612a2b5760029050612a79565b60048361ffff1603612a405760039050612a79565b60038361ffff16148015612a515750815b15612a5f5760049050612a79565b60038361ffff1603612a745760059050612a79565b600990505b92915050565b60606000612a8c84611d75565b9050600080825167ffffffffffffffff811115612aac57612aab613695565b5b604051908082528060200260200182016040528015612ae557816020015b612ad2613533565b815260200190600190039081612aca5790505b50905060005b8351811015612bc2578573ffffffffffffffffffffffffffffffffffffffff16848281518110612b1e57612b1d6145e4565b5b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff16148015612b685750838181518110612b5b57612b5a6145e4565b5b6020026020010151606001515b15612bb557838181518110612b8057612b7f6145e4565b5b6020026020010151828481518110612b9b57612b9a6145e4565b5b60200260200101819052508280612bb190614613565b9350505b8080600101915050612aeb565b5060008267ffffffffffffffff811115612bdf57612bde613695565b5b604051908082528060200260200182016040528015612c1857816020015b612c05613533565b815260200190600190039081612bfd5790505b50905060005b83811015612c6c57828181518110612c3957612c386145e4565b5b6020026020010151828281518110612c5457612c536145e4565b5b60200260200101819052508080600101915050612c1e565b508094505050505092915050565b600080600090506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600186612cce919061465b565b6040518263ffffffff1660e01b8152600401612cea9190613da4565b602060405180830381865afa158015612d07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d2b91906146a4565b73ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa158015612d75573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612d9e91906149da565b61016001519050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f4dec22b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e369190614d75565b61ffff168161ffff1681612e4d57612e4c6144ce565b5b04915060008261ffff16148015612e68575060008161ffff16115b15612e7257600191505b8192505050919050565b612e84613030565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612ef65760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401612eed9190613fed565b60405180910390fd5b612eff816130b7565b50565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600185612f51919061465b565b6040518263ffffffff1660e01b8152600401612f6d9190613da4565b602060405180830381865afa158015612f8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fae91906146a4565b73ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa158015612ff8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061302191906149da565b90508060a00151915050919050565b6130386131fa565b73ffffffffffffffffffffffffffffffffffffffff16613056611a0f565b73ffffffffffffffffffffffffffffffffffffffff16146130b5576130796131fa565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016130ac9190613fed565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6131f5838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040516024016131ae929190614da2565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613202565b505050565b600033905090565b600061322d828473ffffffffffffffffffffffffffffffffffffffff1661329990919063ffffffff16565b905060008151141580156132525750808060200190518101906132509190614dcb565b155b1561329457826040517f5274afe700000000000000000000000000000000000000000000000000000000815260040161328b9190613fed565b60405180910390fd5b505050565b60606132a7838360006132af565b905092915050565b6060814710156132f657306040517fcd7860590000000000000000000000000000000000000000000000000000000081526004016132ed9190613fed565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff16848660405161331f9190614e69565b60006040518083038185875af1925050503d806000811461335c576040519150601f19603f3d011682016040523d82523d6000602084013e613361565b606091505b509150915061337186838361337c565b925050509392505050565b6060826133915761338c8261340b565b613403565b600082511480156133b9575060008473ffffffffffffffffffffffffffffffffffffffff163b145b156133fb57836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016133f29190613fed565b60405180910390fd5b819050613404565b5b9392505050565b60008151111561341e5780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518060e0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600015158152602001600015158152602001600081525090565b6040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001600081526020016000600981111561352d5761352c613bfe565b5b81525090565b6040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000600981111561357657613575613bfe565b5b8152602001600015158152602001600015158152602001600081525090565b6040518060c0016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000151581526020016000151581525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6136228161360f565b811461362d57600080fd5b50565b60008135905061363f81613619565b92915050565b600061ffff82169050919050565b61365c81613645565b811461366757600080fd5b50565b60008135905061367981613653565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6136cd82613684565b810181811067ffffffffffffffff821117156136ec576136eb613695565b5b80604052505050565b60006136ff6135fb565b905061370b82826136c4565b919050565b600067ffffffffffffffff82111561372b5761372a613695565b5b602082029050602081019050919050565b600080fd5b600061375461374f84613710565b6136f5565b905080838252602082019050602084028301858111156137775761377661373c565b5b835b818110156137a0578061378c888261366a565b845260208401935050602081019050613779565b5050509392505050565b600082601f8301126137bf576137be61367f565b5b81356137cf848260208601613741565b91505092915050565b6000806000606084860312156137f1576137f0613605565b5b60006137ff86828701613630565b93505060206138108682870161366a565b925050604084013567ffffffffffffffff8111156138315761383061360a565b5b61383d868287016137aa565b9150509250925092565b61385081613645565b82525050565b600060208201905061386b6000830184613847565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061389c82613871565b9050919050565b6138ac81613891565b81146138b757600080fd5b50565b6000813590506138c9816138a3565b92915050565b6000602082840312156138e5576138e4613605565b5b60006138f3848285016138ba565b91505092915050565b6000806040838503121561391357613912613605565b5b600061392185828601613630565b9250506020613932858286016138ba565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6139718161360f565b82525050565b61398081613891565b82525050565b60008115159050919050565b61399b81613986565b82525050565b60e0820160008201516139b76000850182613968565b5060208201516139ca6020850182613977565b5060408201516139dd6040850182613977565b5060608201516139f06060850182613968565b506080820151613a036080850182613992565b5060a0820151613a1660a0850182613992565b5060c0820151613a2960c0850182613968565b50505050565b6000613a3b83836139a1565b60e08301905092915050565b6000602082019050919050565b6000613a5f8261393c565b613a698185613947565b9350613a7483613958565b8060005b83811015613aa5578151613a8c8882613a2f565b9750613a9783613a47565b925050600181019050613a78565b5085935050505092915050565b60006020820190508181036000830152613acc8184613a54565b905092915050565b600060208284031215613aea57613ae9613605565b5b6000613af884828501613630565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000613b398383613968565b60208301905092915050565b6000602082019050919050565b6000613b5d82613b01565b613b678185613b0c565b9350613b7283613b1d565b8060005b83811015613ba3578151613b8a8882613b2d565b9750613b9583613b45565b925050600181019050613b76565b5085935050505092915050565b60006020820190508181036000830152613bca8184613b52565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600a8110613c3e57613c3d613bfe565b5b50565b6000819050613c4f82613c2d565b919050565b6000613c5f82613c41565b9050919050565b613c6f81613c54565b82525050565b60c082016000820151613c8b6000850182613968565b506020820151613c9e6020850182613977565b506040820151613cb16040850182613977565b506060820151613cc46060850182613992565b506080820151613cd76080850182613968565b5060a0820151613cea60a0850182613c66565b50505050565b6000613cfc8383613c75565b60c08301905092915050565b6000602082019050919050565b6000613d2082613bd2565b613d2a8185613bdd565b9350613d3583613bee565b8060005b83811015613d66578151613d4d8882613cf0565b9750613d5883613d08565b925050600181019050613d39565b5085935050505092915050565b60006020820190508181036000830152613d8d8184613d15565b905092915050565b613d9e8161360f565b82525050565b6000602082019050613db96000830184613d95565b92915050565b60008060408385031215613dd657613dd5613605565b5b6000613de48582860161366a565b925050602083013567ffffffffffffffff811115613e0557613e0461360a565b5b613e11858286016137aa565b9150509250929050565b613e2481613986565b82525050565b6000602082019050613e3f6000830184613e1b565b92915050565b6000819050919050565b6000613e6a613e65613e6084613871565b613e45565b613871565b9050919050565b6000613e7c82613e4f565b9050919050565b6000613e8e82613e71565b9050919050565b613e9e81613e83565b82525050565b6000602082019050613eb96000830184613e95565b92915050565b600067ffffffffffffffff821115613eda57613ed9613695565b5b602082029050602081019050919050565b6000613efe613ef984613ebf565b6136f5565b90508083825260208201905060208402830185811115613f2157613f2061373c565b5b835b81811015613f4a5780613f368882613630565b845260208401935050602081019050613f23565b5050509392505050565b600082601f830112613f6957613f6861367f565b5b8135613f79848260208601613eeb565b91505092915050565b60008060408385031215613f9957613f98613605565b5b6000613fa785828601613630565b925050602083013567ffffffffffffffff811115613fc857613fc761360a565b5b613fd485828601613f54565b9150509250929050565b613fe781613891565b82525050565b60006020820190506140026000830184613fde565b92915050565b600a811061401557600080fd5b50565b60008135905061402781614008565b92915050565b6000806040838503121561404457614043613605565b5b600061405285828601613630565b925050602061406385828601614018565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60c0820160008201516140af6000850182613968565b5060208201516140c26020850182613977565b5060408201516140d56040850182613c66565b5060608201516140e86060850182613992565b5060808201516140fb6080850182613992565b5060a082015161410e60a0850182613968565b50505050565b60006141208383614099565b60c08301905092915050565b6000602082019050919050565b60006141448261406d565b61414e8185614078565b935061415983614089565b8060005b8381101561418a5781516141718882614114565b975061417c8361412c565b92505060018101905061415d565b5085935050505092915050565b600060208201905081810360008301526141b18184614139565b905092915050565b6141c281613986565b81146141cd57600080fd5b50565b6000813590506141df816141b9565b92915050565b6000806000606084860312156141fe576141fd613605565b5b600061420c86828701613630565b935050602061421d868287016138ba565b925050604061422e868287016141d0565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60c08201600082015161427a6000850182613968565b50602082015161428d6020850182613977565b5060408201516142a06040850182613977565b5060608201516142b36060850182613968565b5060808201516142c66080850182613992565b5060a08201516142d960a0850182613992565b50505050565b60006142eb8383614264565b60c08301905092915050565b6000602082019050919050565b600061430f82614238565b6143198185614243565b935061432483614254565b8060005b8381101561435557815161433c88826142df565b9750614347836142f7565b925050600181019050614328565b5085935050505092915050565b6000602082019050818103600083015261437c8184614304565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6143b981613645565b82525050565b60006143cb83836143b0565b60208301905092915050565b6000602082019050919050565b60006143ef82614384565b6143f9818561438f565b9350614404836143a0565b8060005b8381101561443557815161441c88826143bf565b9750614427836143d7565b925050600181019050614408565b5085935050505092915050565b6000602082019050818103600083015261445c81846143e4565b905092915050565b6000806040838503121561447b5761447a613605565b5b60006144898582860161366a565b925050602061449a858286016141d0565b9150509250929050565b6144ad81613c54565b82525050565b60006020820190506144c860008301846144a4565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006145088261360f565b91506145138361360f565b925082614523576145226144ce565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006145688261360f565b91506145738361360f565b925082820190508082111561458b5761458a61452e565b5b92915050565b60006040820190506145a66000830185613847565b6145b36020830184613847565b9392505050565b60006145c582613645565b915061ffff82036145d9576145d861452e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061461e8261360f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036146505761464f61452e565b5b600182019050919050565b60006146668261360f565b91506146718361360f565b92508282039050818111156146895761468861452e565b5b92915050565b60008151905061469e816138a3565b92915050565b6000602082840312156146ba576146b9613605565b5b60006146c88482850161468f565b91505092915050565b600080fd5b600080fd5b6000815190506146ea81613619565b92915050565b6000815190506146ff816141b9565b92915050565b60008151905061471481613653565b92915050565b600061472d61472884613710565b6136f5565b905080838252602082019050602084028301858111156147505761474f61373c565b5b835b8181101561477957806147658882614705565b845260208401935050602081019050614752565b5050509392505050565b600082601f8301126147985761479761367f565b5b81516147a884826020860161471a565b91505092915050565b60006147c46147bf84613ebf565b6136f5565b905080838252602082019050602084028301858111156147e7576147e661373c565b5b835b8181101561481057806147fc88826146db565b8452602084019350506020810190506147e9565b5050509392505050565b600082601f83011261482f5761482e61367f565b5b815161483f8482602086016147b1565b91505092915050565b6000610180828403121561485f5761485e6146d1565b5b61486a6101806136f5565b9050600061487a848285016146db565b600083015250602061488e848285016146db565b60208301525060406148a2848285016146db565b60408301525060606148b6848285016146db565b60608301525060806148ca848285016146f0565b60808301525060a082015167ffffffffffffffff8111156148ee576148ed6146d6565b5b6148fa84828501614783565b60a08301525060c082015167ffffffffffffffff81111561491e5761491d6146d6565b5b61492a8482850161481a565b60c08301525060e061493e84828501614705565b60e08301525061010082015167ffffffffffffffff811115614963576149626146d6565b5b61496f8482850161481a565b6101008301525061012061498584828501614705565b6101208301525061014082015167ffffffffffffffff8111156149ab576149aa6146d6565b5b6149b78482850161481a565b610140830152506101606149cd84828501614705565b6101608301525092915050565b6000602082840312156149f0576149ef613605565b5b600082015167ffffffffffffffff811115614a0e57614a0d61360a565b5b614a1a84828501614848565b91505092915050565b600081519050614a3281614008565b92915050565b600060c08284031215614a4e57614a4d6146d1565b5b614a5860c06136f5565b90506000614a68848285016146db565b6000830152506020614a7c8482850161468f565b6020830152506040614a908482850161468f565b6040830152506060614aa4848285016146f0565b6060830152506080614ab8848285016146db565b60808301525060a0614acc84828501614a23565b60a08301525092915050565b600060c08284031215614aee57614aed613605565b5b6000614afc84828501614a38565b91505092915050565b600060208284031215614b1b57614b1a613605565b5b6000614b29848285016146db565b91505092915050565b600060c08284031215614b4857614b476146d1565b5b614b5260c06136f5565b90506000614b62848285016146db565b6000830152506020614b768482850161468f565b6020830152506040614b8a8482850161468f565b6040830152506060614b9e848285016146db565b6060830152506080614bb2848285016146f0565b60808301525060a0614bc6848285016146f0565b60a08301525092915050565b600060c08284031215614be857614be7613605565b5b6000614bf684828501614b32565b91505092915050565b6000614c0a8261360f565b9150614c158361360f565b925082614c2557614c246144ce565b5b828204905092915050565b600082825260208201905092915050565b7f496e76616c696420766963746f72792074696572000000000000000000000000600082015250565b6000614c77601483614c30565b9150614c8282614c41565b602082019050919050565b60006020820190508181036000830152614ca681614c6a565b9050919050565b600060208284031215614cc357614cc2613605565b5b600082015167ffffffffffffffff811115614ce157614ce061360a565b5b614ced84828501614783565b91505092915050565b6000614d0182613645565b9150614d0c83613645565b9250828202614d1a81613645565b9150808214614d2c57614d2b61452e565b5b5092915050565b6000614d3e8261360f565b9150614d498361360f565b9250828202614d578161360f565b91508282048414831517614d6e57614d6d61452e565b5b5092915050565b600060208284031215614d8b57614d8a613605565b5b6000614d9984828501614705565b91505092915050565b6000604082019050614db76000830185613fde565b614dc46020830184613d95565b9392505050565b600060208284031215614de157614de0613605565b5b6000614def848285016146f0565b91505092915050565b600081519050919050565b600081905092915050565b60005b83811015614e2c578082015181840152602081019050614e11565b60008484015250505050565b6000614e4382614df8565b614e4d8185614e03565b9350614e5d818560208601614e0e565b80840191505092915050565b6000614e758284614e38565b91508190509291505056fea26469706673582212207c0f813f49ab97019d578149833edad68eabe132a67ac84ae98867e511c650aa64736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/LotteryReader.sol:LotteryReader",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4914,
        "contract": "contracts/LotteryReader.sol:LotteryReader",
        "label": "teamAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2105,
        "contract": "contracts/LotteryReader.sol:LotteryReader",
        "label": "lotteryMaster",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(LotteryMaster)2075"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(LotteryMaster)2075": {
        "encoding": "inplace",
        "label": "contract LotteryMaster",
        "numberOfBytes": "20"
      }
    }
  }
}