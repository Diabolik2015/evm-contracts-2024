{
  "address": "0x5e51d2003D1A4f33b0B0c47dDfE673d9FB5aE0F6",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "amountWonInRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "referralTicketId",
          "type": "uint256"
        }
      ],
      "name": "evaluateWonResultsForOneReferralTicket",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "referralTicketId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "won",
              "type": "bool"
            }
          ],
          "internalType": "struct ReferralTicketResults",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ticketId",
          "type": "uint256"
        }
      ],
      "name": "evaluateWonResultsForOneTicket",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "ticketId",
              "type": "uint256"
            },
            {
              "internalType": "enum RoundVictoryTier",
              "name": "victoryTier",
              "type": "uint8"
            }
          ],
          "internalType": "struct TicketResults",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "evaluateWonResultsForReferral",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "referralTicketId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "won",
              "type": "bool"
            }
          ],
          "internalType": "struct ReferralTicketResults[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "evaluateWonResultsForTickets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "ticketId",
              "type": "uint256"
            },
            {
              "internalType": "enum RoundVictoryTier",
              "name": "victoryTier",
              "type": "uint8"
            }
          ],
          "internalType": "struct TicketResults[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "num",
          "type": "uint16"
        },
        {
          "internalType": "uint16[]",
          "name": "arr",
          "type": "uint16[]"
        }
      ],
      "name": "existInArrayNumber",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "randomNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "maxValue",
          "type": "uint16"
        },
        {
          "internalType": "uint16[]",
          "name": "arr",
          "type": "uint16[]"
        }
      ],
      "name": "getRandomUniqueNumberInArrayForMaxValue",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lotteryMaster",
      "outputs": [
        {
          "internalType": "contract LotteryMaster",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "num",
          "type": "uint16"
        },
        {
          "internalType": "uint16[]",
          "name": "arr",
          "type": "uint16[]"
        }
      ],
      "name": "notExistInArrayNumber",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "numberOfReferralWinnersForRoundId",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "poolForReferral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "enum RoundVictoryTier",
          "name": "victoryTier",
          "type": "uint8"
        }
      ],
      "name": "poolForVictoryTier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendCryptoToTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "sendTokenToTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lotteryMaster",
          "type": "address"
        }
      ],
      "name": "setLotteryMaster",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "rightNumbersForTicket",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "powerNumberFound",
          "type": "bool"
        }
      ],
      "name": "tierFromResults",
      "outputs": [
        {
          "internalType": "enum RoundVictoryTier",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "tokenHoldersPoolAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "treasuryPoolAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_teamAddress",
          "type": "address"
        }
      ],
      "name": "updateTeamAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbd4ee10564a97f486ce282004bd593e91ade8fcf7306b339aa8435de44ff6daf",
  "receipt": {
    "to": null,
    "from": "0x4eCa23Ffd5710970E22558C484a0D6943dA5eAa5",
    "contractAddress": "0x5e51d2003D1A4f33b0B0c47dDfE673d9FB5aE0F6",
    "transactionIndex": 3,
    "gasUsed": "3122878",
    "logsBloom": "0x
    "blockHash": "0xf460dc812e5fd610edfc16b4489ccb8bab324ad10d0d84ce76b2bea8fb79f12a",
    "transactionHash": "0xbd4ee10564a97f486ce282004bd593e91ade8fcf7306b339aa8435de44ff6daf",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 32336264,
        "transactionHash": "0xbd4ee10564a97f486ce282004bd593e91ade8fcf7306b339aa8435de44ff6daf",
        "address": "0x5e51d2003D1A4f33b0B0c47dDfE673d9FB5aE0F6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004eca23ffd5710970e22558c484a0d6943da5eaa5"
        ],
        "data": "0x",
        "logIndex": 12,
        "blockHash": "0xf460dc812e5fd610edfc16b4489ccb8bab324ad10d0d84ce76b2bea8fb79f12a"
      }
    ],
    "blockNumber": 32336264,
    "cumulativeGasUsed": "3650149",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f8faed483cb7cae09382026b42b3b3d5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"amountWonInRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralTicketId\",\"type\":\"uint256\"}],\"name\":\"evaluateWonResultsForOneReferralTicket\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"referralTicketId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"won\",\"type\":\"bool\"}],\"internalType\":\"struct ReferralTicketResults\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"}],\"name\":\"evaluateWonResultsForOneTicket\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"},{\"internalType\":\"enum RoundVictoryTier\",\"name\":\"victoryTier\",\"type\":\"uint8\"}],\"internalType\":\"struct TicketResults\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"evaluateWonResultsForReferral\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"referralTicketId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"won\",\"type\":\"bool\"}],\"internalType\":\"struct ReferralTicketResults[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"evaluateWonResultsForTickets\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"},{\"internalType\":\"enum RoundVictoryTier\",\"name\":\"victoryTier\",\"type\":\"uint8\"}],\"internalType\":\"struct TicketResults[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"num\",\"type\":\"uint16\"},{\"internalType\":\"uint16[]\",\"name\":\"arr\",\"type\":\"uint16[]\"}],\"name\":\"existInArrayNumber\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"maxValue\",\"type\":\"uint16\"},{\"internalType\":\"uint16[]\",\"name\":\"arr\",\"type\":\"uint16[]\"}],\"name\":\"getRandomUniqueNumberInArrayForMaxValue\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryMaster\",\"outputs\":[{\"internalType\":\"contract LotteryMaster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"num\",\"type\":\"uint16\"},{\"internalType\":\"uint16[]\",\"name\":\"arr\",\"type\":\"uint16[]\"}],\"name\":\"notExistInArrayNumber\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"numberOfReferralWinnersForRoundId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"poolForReferral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"enum RoundVictoryTier\",\"name\":\"victoryTier\",\"type\":\"uint8\"}],\"name\":\"poolForVictoryTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendCryptoToTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sendTokenToTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lotteryMaster\",\"type\":\"address\"}],\"name\":\"setLotteryMaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"rightNumbersForTicket\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"powerNumberFound\",\"type\":\"bool\"}],\"name\":\"tierFromResults\",\"outputs\":[{\"internalType\":\"enum RoundVictoryTier\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"tokenHoldersPoolAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"treasuryPoolAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teamAddress\",\"type\":\"address\"}],\"name\":\"updateTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LotteryReader.sol\":\"LotteryReader\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/CyclixRandomizerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface CyclixRandomizerInterface {\\n    function requestRandomWords(uint32 numWords) external returns (uint256 requestId);\\n    function getRequestStatus(uint256 _requestId) external view returns (bool fulfilled, uint256[] memory randomWords);\\n    function registerGameContract(address gameAddress, string calldata name) external;\\n    function getLastRequestIdForCaller() external view returns (uint256);\\n}\",\"keccak256\":\"0x066c0e37e0bd528ce42d23ee3b5815f550f44571c61f1be89a4b844f1d52f71f\",\"license\":\"MIT\"},\"contracts/LotteryCommon.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\n    enum RoundVictoryTier {\\n        NO_WIN,\\n        Tier5_1,\\n        Tier5,\\n        Tier4_1,\\n        Tier4,\\n        Tier3_1,\\n        Tier3,\\n        Referrer,\\n        PublicPool,\\n        TokenHolders,\\n        Treasury\\n    }\\n\\n    struct Round {\\n        uint256 id;\\n        uint256 startTime;\\n        uint256 endTime;\\n        bool ended;\\n        uint16[] roundNumbers;\\n        uint16 powerNumber;\\n        uint16[] referralWinnersNumber;\\n        uint16 referralWinnersNumberCount;\\n        uint256[] ticketIds;\\n        uint16 ticketsCount;\\n        uint256[] referralTicketIds;\\n        uint16 referralCounts;\\n    }\\n\\n    struct Ticket {\\n        uint256 id;\\n        address participantAddress;\\n        address referralAddress;\\n        bool claimed;\\n        uint256 chainId;\\n        RoundVictoryTier victoryTier;\\n        uint16 powerNumber;\\n    }\\n\\n    struct TicketResults {\\n        uint256 ticketId;\\n        RoundVictoryTier victoryTier;\\n    }\\n\\n    struct ReferralTicket {\\n        uint256 id;\\n        address referralAddress;\\n        uint16 referralTicketNumber;\\n        bool winner;\\n        bool claimed;\\n    }\\n\\n    struct ReferralTicketResults {\\n        uint256 referralTicketId;\\n        bool won;\\n    }\",\"keccak256\":\"0x4a30f56a4b0850bdc3cd7ea3d9d9254038a29ea61c3abc6bf7ab0e2024e44796\",\"license\":\"UNLICENSED\"},\"contracts/LotteryMaster.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {TestFunctions} from \\\"./utils/TestUtils.sol\\\";\\nimport {CyclixRandomizerInterface} from \\\"./CyclixRandomizerInterface.sol\\\";\\nimport {EmergencyFunctions} from \\\"./utils/EmergencyFunctions.sol\\\";\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\nimport { LotteryRound } from \\\"./LotteryRound.sol\\\";\\nimport { LotteryReaderInterface } from \\\"./LotteryReaderInterface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract LotteryMaster is EmergencyFunctions {\\n\\n    uint256 public roundCount;\\n    address[] public rounds;\\n    function roundForId(uint256 roundId) public view returns (address) {\\n        return rounds[roundId - 1];\\n    }\\n\\n    function getCurrentRound() public view returns (address) {\\n        return rounds[roundCount - 1];\\n    }\\n    mapping(address => uint16) public freeRounds;\\n\\n    uint16 public counterForBankWallets;\\n    address[] public bankWallets;\\n    function addBankWallet(address wallet) public onlyOwner {\\n        for (uint i = 0; i < bankWallets.length; i++) {\\n            if (bankWallets[i] == wallet) {\\n                require(false, \\\"Wallet already added\\\");\\n            }\\n        }\\n        bankWallets.push(wallet);\\n    }\\n    function removeBankWallet(address wallet) public onlyOwner {\\n        for (uint i = 0; i < bankWallets.length; i++) {\\n            if (bankWallets[i] == wallet) {\\n                bankWallets[i] = bankWallets[bankWallets.length - 1];\\n                bankWallets.pop();\\n            }\\n        }\\n    }\\n    address public treasuryWallets;\\n    function setTreasuryWallet(address wallet) public onlyOwner {\\n        treasuryWallets = wallet;\\n    }\\n    IERC20Metadata public paymentToken;\\n    function setPaymentToken(address _paymentToken) public onlyOwner {\\n        paymentToken = IERC20Metadata(_paymentToken);\\n    }\\n    CyclixRandomizerInterface public randomizer;\\n    LotteryReaderInterface public reader;\\n    uint256 public ticketPrice;\\n    function setTicketPrice(uint256 _ticketPrice) public onlyOwner {\\n        ticketPrice = _ticketPrice;\\n    }\\n\\n    constructor(address cyclixRandomizer, address lotteryReader, address _paymentToken, uint256 _ticketPrice)\\n    EmergencyFunctions(msg.sender) {\\n        randomizer = CyclixRandomizerInterface(cyclixRandomizer);\\n        randomizer.registerGameContract(address(this), \\\"LotteryMasterV0.1\\\");\\n        reader = LotteryReaderInterface(lotteryReader);\\n        paymentToken = IERC20Metadata(_paymentToken);\\n        ticketPrice = _ticketPrice * (10 ** uint256(paymentToken.decimals()));\\n        treasuryWallets = msg.sender;\\n        bankWallets.push(msg.sender);\\n    }\\n\\n    function startNewRound(address newLotteryRoundAddress) public onlyOwner {\\n        roundCount++;\\n        rounds.push(address(newLotteryRoundAddress));\\n        if (roundCount > 1) {\\n            require(LotteryRound(rounds[roundCount - 2]).getRound().ended, \\\"Previous round not ended\\\");\\n            require(rounds[roundCount - 2] == LotteryRound(newLotteryRoundAddress).previousRound(), \\\"Previous round not propagated correctly\\\");\\n        }\\n    }\\n\\n    function buyTicket(uint256 chainId, uint16[] memory chosenNumbers, uint16 powerNumber, address referral) public {\\n        require(freeRounds[tx.origin] > 0 || paymentToken.allowance(tx.origin, address(this)) >= ticketPrice, \\\"Missing Allowance\\\");\\n        LotteryRound lotteryRound = LotteryRound(rounds[roundCount - 1]);\\n        if (freeRounds[msg.sender] > 0) {\\n            freeRounds[msg.sender]--;\\n        } else {\\n            require(paymentToken.balanceOf(tx.origin) >= ticketPrice, \\\"Insufficient funds\\\");\\n            counterForBankWallets = uint16(counterForBankWallets++ % bankWallets.length);\\n            uint256 treasuryAmount = lotteryRound.treasuryAmountOnTicket(ticketPrice);\\n            SafeERC20.safeTransferFrom(paymentToken, msg.sender, bankWallets[counterForBankWallets], ticketPrice - treasuryAmount);\\n            SafeERC20.safeTransferFrom(paymentToken, msg.sender, treasuryWallets, treasuryAmount);\\n            lotteryRound.updateVictoryPoolForTicket(ticketPrice);\\n        }\\n\\n        lotteryRound.buyTicket(chainId, chosenNumbers, powerNumber, referral);\\n    }\\n\\n    function addFreeRound(address[] calldata participant) public onlyOwner {\\n        for (uint i = 0; i < participant.length; i++) {\\n            freeRounds[participant[i]]++;\\n        }\\n    }\\n\\n    mapping(uint256 => uint256) public publicRoundRandomNumbersRequestId;\\n\\n    function closeRound() external onlyOwner {\\n        LotteryRound lotteryRound = LotteryRound(rounds[roundCount - 1]);\\n        lotteryRound.closeRound();\\n        uint16 referralWinners = reader.numberOfReferralWinnersForRoundId(roundCount);\\n        publicRoundRandomNumbersRequestId[roundCount] = randomizer.requestRandomWords(6 + referralWinners);\\n    }\\n\\n    function fetchRoundNumbers(uint256 roundId) external onlyOwner {\\n        LotteryRound round = LotteryRound(rounds[roundId - 1]);\\n        round.couldReceiveWinningNumbers();\\n        (bool fulfilled, uint256[] memory randomWords) = randomizer.getRequestStatus(publicRoundRandomNumbersRequestId[roundId]);\\n        require(fulfilled, \\\"Random numbers not ready\\\");\\n        uint16[] memory roundNumbers = new uint16[](5);\\n        uint16 powerNumber;\\n        uint16[] memory referralWinnersNumber = new uint16[](randomWords.length - 6);\\n        if (fulfilled) {\\n            for (uint i = 0; i < 5; i++) {\\n                roundNumbers[i] = reader.getRandomUniqueNumberInArrayForMaxValue(randomWords[i], 69, roundNumbers);\\n            }\\n            powerNumber = uint16(randomWords[5] % 26 + 1);\\n            for (uint i = 6; i < randomWords.length; i++) {\\n                referralWinnersNumber [i - 6] = reader.getRandomUniqueNumberInArrayForMaxValue(randomWords[i],\\n                    round.getRound().referralCounts, referralWinnersNumber);\\n            }\\n        }\\n        round.storeWinningNumbers(roundNumbers, powerNumber, referralWinnersNumber);\\n    }\\n\\n    function markWinners(uint256 roundId) public onlyOwner {\\n        LotteryRound(rounds[roundId - 1]).markWinners(reader.evaluateWonResultsForTickets(roundId), reader.evaluateWonResultsForReferral(roundId));\\n    }\\n\\n    function claimVictory(uint256 ticketId) public {\\n        LotteryRound lotteryRound = LotteryRound(getCurrentRound());\\n        Ticket memory ticket = lotteryRound.ticketById(ticketId);\\n        require(ticket.id == ticketId, \\\"Invalid ticket id\\\");\\n        require(ticket.participantAddress == msg.sender, \\\"Invalid ticket owner\\\");\\n        require(!ticket.claimed, \\\"Ticket already claimed\\\");\\n        require(lotteryRound.getRound().ended, \\\"Round not ended\\\");\\n        require(ticket.victoryTier != RoundVictoryTier.NO_WIN, \\\"No prize for this ticket\\\");\\n        require(ticket.victoryTier == reader.evaluateWonResultsForOneTicket(lotteryRound.getRound().id, ticketId).victoryTier, \\\"Invalid ticket tier\\\");\\n        unchecked {\\n            uint256 amountWon = lotteryRound.victoryTierAmounts(ticket.victoryTier) / lotteryRound.winnersForEachTier(ticket.victoryTier);\\n            require(paymentToken.balanceOf(address(this)) >= amountWon, \\\"Not enough funds on contract\\\");\\n            LotteryRound(getCurrentRound()).markVictoryClaimed(ticketId, amountWon);\\n            paymentToken.transfer(msg.sender, amountWon);\\n        }\\n    }\\n\\n    function claimReferralVictory(uint256 referralTicketId) public {\\n        LotteryRound lotteryRound = LotteryRound(getCurrentRound());\\n        ReferralTicket memory referralTicket = lotteryRound.referralTicketById(referralTicketId);\\n        require(referralTicket.id == referralTicketId, \\\"Invalid ticket id\\\");\\n        require(referralTicket.referralAddress == msg.sender, \\\"Invalid ticket owner\\\");\\n        require(!referralTicket.claimed, \\\"Ticket already claimed\\\");\\n        require(lotteryRound.getRound().ended, \\\"Round not ended\\\");\\n        require(referralTicket.winner == true, \\\"No prize for this ticket\\\");\\n        require(referralTicket.winner == reader.evaluateWonResultsForOneReferralTicket(lotteryRound.getRound().id, referralTicketId).won, \\\"Invalid ticket tier\\\");\\n        unchecked {\\n            uint256 amountWon = lotteryRound.victoryTierAmounts(RoundVictoryTier.Referrer) / reader.numberOfReferralWinnersForRoundId(lotteryRound.getRound().id);\\n            require(paymentToken.balanceOf(address(this)) >= amountWon, \\\"Not enough funds on contract\\\");\\n            LotteryRound(getCurrentRound()).markReferralVictoryClaimed(referralTicketId, amountWon);\\n            paymentToken.transfer(msg.sender, amountWon);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x15c27e2427fec85f95d9f5681badd3dbcb7244ca5714953c158ac9ab5608064b\",\"license\":\"UNLICENSED\"},\"contracts/LotteryReader.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {TestFunctions} from \\\"./utils/TestUtils.sol\\\";\\nimport {EmergencyFunctions} from \\\"./utils/EmergencyFunctions.sol\\\";\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\nimport { LotteryRound } from \\\"./LotteryRound.sol\\\";\\nimport { LotteryMaster } from \\\"./LotteryMaster.sol\\\";\\nimport {LotteryReaderInterface} from \\\"./LotteryReaderInterface.sol\\\";\\n\\ncontract LotteryReader is LotteryReaderInterface, EmergencyFunctions {\\n    LotteryMaster public lotteryMaster;\\n\\n    function setLotteryMaster(address _lotteryMaster) public onlyOwner {\\n        lotteryMaster = LotteryMaster(_lotteryMaster);\\n    }\\n\\n    constructor() EmergencyFunctions(tx.origin) {}\\n\\n    function poolForVictoryTier(uint256 roundId, RoundVictoryTier victoryTier) public view override returns(uint256) {\\n        require(victoryTier == RoundVictoryTier.Tier5_1 || victoryTier == RoundVictoryTier.Tier5 || victoryTier == RoundVictoryTier.Tier4_1 ||\\n        victoryTier == RoundVictoryTier.Tier4 || victoryTier == RoundVictoryTier.Tier3_1 || victoryTier == RoundVictoryTier.Tier3,\\n            \\\"Invalid victory tier\\\");\\n        return LotteryRound(lotteryMaster.rounds(roundId -1)).victoryTierAmounts(victoryTier);\\n    }\\n\\n    function poolForReferral(uint256 roundId) public view override returns(uint256) {\\n        return LotteryRound(lotteryMaster.rounds(roundId -1)).victoryTierAmounts(RoundVictoryTier.Referrer);\\n    }\\n\\n    function tokenHoldersPoolAmount(uint256 roundId) public view override returns (uint256) {\\n        return LotteryRound(lotteryMaster.rounds(roundId -1)).victoryTierAmounts(RoundVictoryTier.TokenHolders);\\n    }\\n\\n    function treasuryPoolAmount(uint256 roundId) public view override returns (uint256) {\\n        return LotteryRound(lotteryMaster.rounds(roundId -1)).victoryTierAmounts(RoundVictoryTier.Treasury);\\n    }\\n\\n    function numberOfReferralWinnersForRoundId(uint256 roundId) public view override returns (uint16) {\\n        uint16 referralWinnersForRound = 0;\\n        uint16 referralCounts = LotteryRound(lotteryMaster.rounds(roundId -1)).getRound().referralCounts;\\n        unchecked {\\n            referralWinnersForRound = referralCounts / 10;\\n        }\\n        if (referralWinnersForRound == 0 && referralCounts > 0) {\\n            referralWinnersForRound = 1;\\n        }\\n        return referralWinnersForRound;\\n    }\\n\\n    function existInArrayNumber(uint16 num, uint16[] memory arr) public pure override returns (bool) {\\n        for (uint i = 0; i < arr.length; i++) {\\n            if (arr[i] == num) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function notExistInArrayNumber(uint16 num, uint16[] memory arr) public pure override returns (bool) {\\n        return existInArrayNumber(num, arr) == false;\\n    }\\n\\n    function getRandomUniqueNumberInArrayForMaxValue(uint256 randomNumber, uint16 maxValue, uint16[] memory arr) public pure override returns (uint16) {\\n        uint16 returnedNumber = uint16(randomNumber % maxValue + 1);\\n        uint16 counter = 0;\\n        bool existInNumbers = existInArrayNumber(returnedNumber, arr);\\n        while (existInNumbers) {\\n            returnedNumber =  uint16(uint256(keccak256(abi.encode(returnedNumber, counter))) % maxValue + 1);\\n            existInNumbers = existInArrayNumber(returnedNumber, arr);\\n            counter++;\\n        }\\n        return returnedNumber;\\n    }\\n\\n\\n    function tierFromResults(uint16 rightNumbersForTicket, bool powerNumberFound) public pure override returns (RoundVictoryTier) {\\n        if (rightNumbersForTicket == 5 && powerNumberFound) {\\n            return RoundVictoryTier.Tier5_1;\\n        } else if (rightNumbersForTicket == 5) {\\n            return RoundVictoryTier.Tier5;\\n        } else if (rightNumbersForTicket == 4 && powerNumberFound) {\\n            return RoundVictoryTier.Tier4_1;\\n        } else if (rightNumbersForTicket == 4) {\\n            return RoundVictoryTier.Tier4;\\n        } else if (rightNumbersForTicket == 3 && powerNumberFound) {\\n            return RoundVictoryTier.Tier3_1;\\n        } else if (rightNumbersForTicket == 3) {\\n            return RoundVictoryTier.Tier3;\\n        }\\n        return RoundVictoryTier.NO_WIN;\\n    }\\n\\n    function evaluateWonResultsForOneTicket(uint256 roundId, uint256 ticketId) public view override returns (TicketResults memory){\\n        LotteryRound lotteryRound = LotteryRound(lotteryMaster.roundForId(roundId));\\n        Round memory roundForEvaluation = lotteryRound.getRound();\\n        Ticket memory ticket = lotteryRound.ticketById(roundForEvaluation.ticketIds[ticketId]);\\n        bool powerNumberFound = ticket.powerNumber == roundForEvaluation.powerNumber;\\n        uint16 rightNumbersForTicket = 0;\\n        uint16[] memory ticketNumbers = lotteryRound.numbersForTicketId(ticket.id);\\n        for(uint16 i = 0; i < 5; i++) {\\n            uint16 ticketNumber = ticketNumbers[i];\\n            if (existInArrayNumber(ticketNumber, roundForEvaluation.roundNumbers)) {\\n                rightNumbersForTicket++;\\n            }\\n        }\\n        return TicketResults({\\n            ticketId: ticket.id,\\n            victoryTier: tierFromResults(rightNumbersForTicket, powerNumberFound)\\n        });\\n    }\\n\\n    function evaluateWonResultsForTickets(uint256 roundId) public view override returns (TicketResults[] memory){\\n        LotteryRound lotteryRound = LotteryRound(lotteryMaster.roundForId(roundId));\\n        Round memory roundForEvaluation = lotteryRound.getRound();\\n        uint16 roundTicketCount = roundForEvaluation.ticketsCount;\\n        TicketResults[] memory ticketResults = new TicketResults[](roundForEvaluation.ticketsCount);\\n        uint16 counter = 0;\\n        for(uint16 ticketIndexForRound = 0; ticketIndexForRound < roundTicketCount; ticketIndexForRound++) {\\n            Ticket memory ticket = lotteryRound.ticketById(roundForEvaluation.ticketIds[ticketIndexForRound]);\\n            bool powerNumberFound = ticket.powerNumber == roundForEvaluation.powerNumber;\\n            uint16 rightNumbersForTicket = 0;\\n            uint16[] memory ticketNumbers = lotteryRound.numbersForTicketId(ticket.id);\\n            for(uint16 i = 0; i < 5; i++) {\\n                uint16 ticketNumber = ticketNumbers[i];\\n                if (existInArrayNumber(ticketNumber, roundForEvaluation.roundNumbers)) {\\n                    rightNumbersForTicket++;\\n                }\\n            }\\n            ticketResults[counter++] = TicketResults({\\n                ticketId: ticket.id,\\n                victoryTier: tierFromResults(rightNumbersForTicket, powerNumberFound)\\n            });\\n        }\\n        return ticketResults;\\n    }\\n\\n    function evaluateWonResultsForOneReferralTicket(uint256 roundId, uint256 referralTicketId) public view override returns (ReferralTicketResults memory) {\\n        LotteryRound lotteryRound = LotteryRound(lotteryMaster.roundForId(roundId));\\n        Round memory roundForEvaluation = lotteryRound.getRound();\\n        ReferralTicket memory referralTicket = lotteryRound.referralTicketById(roundForEvaluation.referralTicketIds[referralTicketId]);\\n        bool referralWon = existInArrayNumber(referralTicket.referralTicketNumber, roundForEvaluation.referralWinnersNumber);\\n        return ReferralTicketResults({\\n            referralTicketId: referralTicket.id,\\n            won: referralWon\\n        });\\n    }\\n\\n    function evaluateWonResultsForReferral(uint256 roundId) public view override returns (ReferralTicketResults[] memory) {\\n        LotteryRound lotteryRound = LotteryRound(lotteryMaster.roundForId(roundId));\\n        Round memory roundForEvaluation = lotteryRound.getRound();\\n        ReferralTicketResults[] memory referralWinnerIds = new ReferralTicketResults[](roundForEvaluation.referralCounts);\\n        uint16 counter = 0;\\n        for(uint16 referralIndexForRound = 0; referralIndexForRound < roundForEvaluation.referralCounts; referralIndexForRound++) {\\n            ReferralTicket memory referralTicket = lotteryRound.referralTicketById(roundForEvaluation.referralTicketIds[referralIndexForRound]);\\n            bool referralWon = existInArrayNumber(referralTicket.referralTicketNumber, roundForEvaluation.referralWinnersNumber);\\n            referralWinnerIds[counter++] = ReferralTicketResults({\\n                referralTicketId: referralTicket.id,\\n                won: referralWon\\n            });\\n        }\\n        return referralWinnerIds;\\n    }\\n\\n    function amountWonInRound(uint256 roundId) public view override returns (uint256) {\\n        LotteryRound lotteryRound = LotteryRound(lotteryMaster.rounds(roundId -1));\\n        return lotteryRound.victoryTierAmounts(RoundVictoryTier.Tier5_1) + lotteryRound.victoryTierAmounts(RoundVictoryTier.Tier5) + lotteryRound.victoryTierAmounts(RoundVictoryTier.Tier4_1) +\\n        lotteryRound.victoryTierAmounts(RoundVictoryTier.Tier4) + lotteryRound.victoryTierAmounts(RoundVictoryTier.Tier3_1) + lotteryRound.victoryTierAmounts(RoundVictoryTier.Tier3) +\\n            lotteryRound.victoryTierAmounts(RoundVictoryTier.Referrer);\\n    }\\n}\",\"keccak256\":\"0x4c0a4837b8befb4a2e1114c1c138c0bc3a56c4e2460a09cd30eba34f8d536e04\",\"license\":\"UNLICENSED\"},\"contracts/LotteryReaderInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {TestFunctions} from \\\"./utils/TestUtils.sol\\\";\\nimport {CyclixRandomizerInterface} from \\\"./CyclixRandomizerInterface.sol\\\";\\nimport {EmergencyFunctions} from \\\"./utils/EmergencyFunctions.sol\\\";\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\n\\ninterface LotteryReaderInterface {\\n    function poolForVictoryTier(uint256 roundId, RoundVictoryTier victoryTier) external view returns(uint256) ;\\n    function poolForReferral(uint256 roundId) external view returns(uint256) ;\\n    function tokenHoldersPoolAmount(uint256 roundId) external view returns (uint256) ;\\n    function treasuryPoolAmount(uint256 roundId) external view returns (uint256) ;\\n    function numberOfReferralWinnersForRoundId(uint256 roundId) external view returns (uint16) ;\\n    function existInArrayNumber(uint16 num, uint16[] memory arr) external pure returns (bool) ;\\n    function notExistInArrayNumber(uint16 num, uint16[] memory arr) external pure returns (bool) ;\\n    function getRandomUniqueNumberInArrayForMaxValue(uint256 randomNumber, uint16 maxValue, uint16[] memory arr) external pure returns (uint16) ;\\n    function tierFromResults(uint16 rightNumbersForTicket, bool powerNumberFound) external pure returns (RoundVictoryTier) ;\\n    function evaluateWonResultsForOneTicket(uint256 roundId, uint256 ticketId) external view returns (TicketResults memory);\\n    function evaluateWonResultsForTickets(uint256 roundId) external view returns (TicketResults[] memory);\\n    function evaluateWonResultsForOneReferralTicket(uint256 roundId, uint256 referralTicketId) external view returns (ReferralTicketResults memory);\\n    function evaluateWonResultsForReferral(uint256 roundId) external view returns (ReferralTicketResults[] memory);\\n    function amountWonInRound(uint256 roundId) external view returns (uint256) ;\\n}\",\"keccak256\":\"0x3a2614be9037e4f45b023a1701fe19d1c1f9ecaf3c9103e35764d7c1ada244a4\",\"license\":\"UNLICENSED\"},\"contracts/LotteryRound.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {TestFunctions} from \\\"./utils/TestUtils.sol\\\";\\nimport {CyclixRandomizerInterface} from \\\"./CyclixRandomizerInterface.sol\\\";\\nimport {EmergencyFunctions} from \\\"./utils/EmergencyFunctions.sol\\\";\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\n\\ncontract LotteryRound is EmergencyFunctions {\\n    Round public round;\\n    function getRound() public view returns (Round memory) {\\n        return round;\\n    }\\n\\n    Ticket[] public tickets;\\n    function ticketById(uint256 ticketId) public view returns (Ticket memory) {\\n        return tickets[ticketId];\\n    }\\n    mapping(uint256 => uint16[]) public ticketNumbers;\\n    function numbersForTicketId(uint256 ticketId) public view returns (uint16[] memory) {\\n        return ticketNumbers[ticketId];\\n    }\\n    mapping(address => uint256[]) public roundTicketsByAddress;\\n    mapping(address => uint256) public roundTicketsByAddressCount;\\n\\n    ReferralTicket[] public referralTickets;\\n    function referralTicketById(uint256 index) public view returns (ReferralTicket memory) {\\n        return referralTickets[index];\\n    }\\n    mapping(address => uint256[]) public roundReferralTicketsByAddress;\\n    mapping(address => uint256) public roundReferralTicketsByAddressCount;\\n\\n    mapping(RoundVictoryTier => uint256) public victoryTierAmounts;\\n    mapping(RoundVictoryTier => uint256) public victoryTierAmountsClaimed;\\n    mapping(RoundVictoryTier => uint256) public winnersForEachTier;\\n    address public previousRound;\\n\\n    constructor(address previousRoundAddress, uint16 roundDurationInSeconds) EmergencyFunctions(msg.sender) {\\n        uint256 id = 1;\\n        previousRound = previousRoundAddress;\\n        if (previousRoundAddress != address(0)) {\\n            LotteryRound previousLotteryRound = LotteryRound(previousRoundAddress);\\n            id = previousLotteryRound.getRound().id + 1;\\n            propagateWinningFromPreviousRound();\\n        }\\n        round = Round({\\n            id: id,\\n            startTime: block.timestamp,\\n            endTime: block.timestamp + roundDurationInSeconds,\\n            ended : false,\\n            roundNumbers: new uint16[](0),\\n            powerNumber: 0,\\n            referralWinnersNumber: new uint16[](0),\\n            referralWinnersNumberCount : 0,\\n            ticketIds : new uint256[](0),\\n            ticketsCount : 0,\\n            referralTicketIds : new uint256[](0),\\n            referralCounts : 0\\n        });\\n    }\\n\\n    function propagateWinningFromPreviousRound() internal {\\n        LotteryRound previousLotteryRound = LotteryRound(previousRound);\\n        victoryTierAmounts[RoundVictoryTier.Tier5_1] += previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Tier5_1) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Tier5_1);\\n        victoryTierAmounts[RoundVictoryTier.Tier5] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Tier5) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Tier5);\\n        victoryTierAmounts[RoundVictoryTier.Tier4_1] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Tier4_1) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Tier4_1);\\n        victoryTierAmounts[RoundVictoryTier.Tier4] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Tier4) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Tier4);\\n        victoryTierAmounts[RoundVictoryTier.Tier3_1] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Tier3_1) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Tier3_1);\\n        victoryTierAmounts[RoundVictoryTier.Tier3] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Tier3) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Tier3);\\n        victoryTierAmounts[RoundVictoryTier.PublicPool] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.PublicPool) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.PublicPool);\\n        victoryTierAmounts[RoundVictoryTier.Referrer] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Referrer) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Referrer);\\n        victoryTierAmounts[RoundVictoryTier.TokenHolders] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.TokenHolders) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.TokenHolders);\\n        victoryTierAmounts[RoundVictoryTier.Treasury] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Treasury) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Treasury);\\n    }\\n\\n    function numberIsInRangeForRound(uint256 number) public pure returns (bool) {\\n        return number > 0 && number <= 69;\\n    }\\n\\n    function numberIsInRangeForPowerNumber(uint256 number) public pure returns (bool) {\\n        return number > 0 && number <= 26;\\n    }\\n\\n    function validateBuyTicket(uint16[] memory numbers, uint16 powerNumber, address referral ) public view onlyOwner {\\n        require(tx.origin != address(0), \\\"Invalid sender\\\");\\n        require(block.timestamp < round.endTime, \\\"Round is over\\\");\\n        require(numbers.length == 5, \\\"Invalid numbers count\\\");\\n        for (uint i = 0; i < numbers.length; i++) {\\n            require(numberIsInRangeForRound(numbers[i]), \\\"Invalid numbers\\\");\\n        }\\n        require(numberIsInRangeForPowerNumber(powerNumber), \\\"Invalid power number\\\");\\n        require(referral != tx.origin, \\\"Referral cannot be the same as the participant\\\");\\n    }\\n\\n    function percentageInBasisPoint(uint256 amount, uint256 basisPoint) public pure returns (uint256) {\\n        return amount * basisPoint / 10000;\\n    }\\n\\n    function treasuryAmountOnTicket(uint256 paymentTokenAmount) public pure returns (uint256) {\\n        return percentageInBasisPoint(paymentTokenAmount, 5000);\\n    }\\n\\n    function updateVictoryPoolForTicket(uint256 paymentTokenAmount) public onlyOwner {\\n        uint256 forPublicPool = percentageInBasisPoint(paymentTokenAmount, 7000);\\n        victoryTierAmounts[RoundVictoryTier.Tier5_1] += percentageInBasisPoint(forPublicPool, 3500);\\n        victoryTierAmounts[RoundVictoryTier.Tier5] += percentageInBasisPoint(forPublicPool, 1500);\\n        victoryTierAmounts[RoundVictoryTier.Tier4_1] += percentageInBasisPoint(forPublicPool, 1000);\\n        victoryTierAmounts[RoundVictoryTier.Tier4] += percentageInBasisPoint(forPublicPool, 700);\\n        victoryTierAmounts[RoundVictoryTier.Tier3_1] += percentageInBasisPoint(forPublicPool, 500);\\n        victoryTierAmounts[RoundVictoryTier.Tier3] += percentageInBasisPoint(forPublicPool, 300);\\n        victoryTierAmounts[RoundVictoryTier.PublicPool] += forPublicPool;\\n        victoryTierAmounts[RoundVictoryTier.Referrer] += percentageInBasisPoint(paymentTokenAmount, 1500);\\n        victoryTierAmounts[RoundVictoryTier.TokenHolders] += percentageInBasisPoint(paymentTokenAmount, 1000);\\n        victoryTierAmounts[RoundVictoryTier.Treasury] += treasuryAmountOnTicket(paymentTokenAmount);\\n    }\\n\\n    function buyTicket(uint256 chainId, uint16[] memory chosenNumbers, uint16 powerNumber, address referral) public onlyOwner {\\n        validateBuyTicket(chosenNumbers, powerNumber, referral);\\n\\n        uint256 ticketId = tickets.length;\\n        tickets.push(Ticket({\\n            id: ticketId,\\n            participantAddress: tx.origin,\\n            referralAddress: referral,\\n            claimed: false,\\n            chainId: chainId,\\n            victoryTier: RoundVictoryTier.NO_WIN,\\n            powerNumber: powerNumber\\n        }));\\n        for(uint i = 0; i < chosenNumbers.length; i++) {\\n            ticketNumbers[ticketId].push(chosenNumbers[i]);\\n        }\\n        round.ticketIds.push(ticketId);\\n        round.ticketsCount++;\\n\\n        roundTicketsByAddress[msg.sender].push(tickets.length - 1);\\n        roundTicketsByAddressCount[msg.sender]++;\\n        if (referral != address(0)) {\\n            uint256 referralTicketId = referralTickets.length;\\n            round.referralTicketIds.push(referralTicketId);\\n            round.referralCounts++;\\n            referralTickets.push(ReferralTicket({\\n                id: referralTicketId,\\n                referralAddress: referral,\\n                referralTicketNumber: uint16(round.referralCounts),\\n                winner: false,\\n                claimed: false\\n            }));\\n\\n            roundReferralTicketsByAddress[referral].push(referralTickets.length - 1);\\n            roundReferralTicketsByAddressCount[referral]++;\\n        }\\n    }\\n\\n    function closeRound() public onlyOwner {\\n        require(block.timestamp >= round.endTime, \\\"Round is not over yet\\\");\\n        round.ended = true;\\n    }\\n\\n    function couldReceiveWinningNumbers() public view {\\n        require(block.timestamp >= round.endTime, \\\"Round is not over yet\\\");\\n        require(round.roundNumbers.length == 0, \\\"Winning numbers already set\\\");\\n    }\\n\\n    function storeWinningNumbers(uint16[] memory roundNumbers, uint16 powerNumber, uint16[] memory referralWinnersNumber) public onlyOwner {\\n        round.roundNumbers = roundNumbers;\\n        round.powerNumber = powerNumber;\\n        round.referralWinnersNumber = referralWinnersNumber;\\n        round.referralWinnersNumberCount = uint16(referralWinnersNumber.length);\\n    }\\n\\n    function markWinners(TicketResults[] memory ticketResults, ReferralTicketResults[] memory referralTicketResults) public onlyOwner {\\n        for (uint i = 0; i < ticketResults.length; i++) {\\n            TicketResults memory ticketResult = ticketResults[i];\\n            Ticket storage ticket = tickets[ticketResult.ticketId];\\n            ticket.victoryTier = ticketResult.victoryTier;\\n            winnersForEachTier[ticketResult.victoryTier]++;\\n        }\\n        for (uint i = 0; i < referralTicketResults.length; i++) {\\n            ReferralTicketResults memory referralTicketResult = referralTicketResults[i];\\n            ReferralTicket storage referralTicket = referralTickets[referralTicketResult.referralTicketId];\\n            referralTicket.winner = referralTicketResult.won;\\n            if (referralTicketResult.won) {\\n                winnersForEachTier[RoundVictoryTier.Referrer]++;\\n            }\\n        }\\n    }\\n\\n    function markVictoryClaimed(uint256 ticketId, uint256 amountClaimed) public onlyOwner {\\n        Ticket storage ticket = tickets[ticketId];\\n        ticket.claimed = true;\\n        victoryTierAmountsClaimed[ticket.victoryTier] += amountClaimed;\\n    }\\n\\n    function markReferralVictoryClaimed(uint256 referralTicketId, uint256 amountClaimed) public onlyOwner {\\n        ReferralTicket storage referralTicket = referralTickets[referralTicketId];\\n        referralTicket.claimed = true;\\n        victoryTierAmountsClaimed[RoundVictoryTier.Referrer] += amountClaimed;\\n    }\\n}\",\"keccak256\":\"0x757d2f22e97fb27f1baadd16af8d95639b3ed65c42f4fb8c65a4221abb6aa359\",\"license\":\"UNLICENSED\"},\"contracts/utils/EmergencyFunctions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract EmergencyFunctions is Ownable {\\n    address internal teamAddress;\\n    constructor(address _teamAddress) Ownable(_teamAddress) {\\n        teamAddress = _teamAddress;\\n    }\\n\\n    function updateTeamAddress(address _teamAddress) public onlyOwner {\\n        teamAddress = _teamAddress;\\n    }\\n\\n    // Emergency Functions\\n    function sendTokenToTeam(address _token) public onlyOwner {\\n        uint256 amount = IERC20(_token).balanceOf(address(this));\\n        if (amount > 0) {\\n            SafeERC20.safeTransfer(IERC20(_token), teamAddress, amount);\\n        }\\n    }\\n\\n    function sendCryptoToTeam() public onlyOwner {\\n        if (address(this).balance > 0) {\\n            payable(teamAddress).transfer(address(this).balance);\\n        }\\n    }\\n\\n    /** @notice Check if an address is a contract */\\n    function _isContract(address _addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x68dcc6a4104e2905f65c342fdb2dbde1908113d10c006f5857b52dc0bbefd419\",\"license\":\"MIT\"},\"contracts/utils/TestUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.x <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IERC20Extension {\\n    function decimals() external view returns (uint8);\\n}\\n\\ncontract TestFunctions is Ownable {\\n    constructor() Ownable(msg.sender) {}\\n    //Used for mock testing, contract ownership will be renounced on release\\n    uint public currentTimestampOverride;\\n    function updateCurrentTimestampOverride(uint _v) external onlyOwner {\\n        currentTimestampOverride = _v;\\n    }\\n    function currentTimestamp() public view returns(uint) {\\n        if (currentTimestampOverride > 0) {\\n            return currentTimestampOverride;\\n        }\\n        return block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x8edb22ef91efc1d38ffbd50b48821f4fe23bdaf84a14de75d0df8231eb772bc4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b503280600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000895760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000809190620001ec565b60405180910390fd5b6200009a81620000e360201b60201c565b5080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000209565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001d482620001a7565b9050919050565b620001e681620001c7565b82525050565b6000602082019050620002036000830184620001db565b92915050565b6136a080620002196000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c806368525a4e116100b8578063bbd1783a1161007c578063bbd1783a146103c1578063c099ae19146103cb578063d856f0d5146103fb578063e34208e61461042b578063f1664df61461045b578063f2fde38b1461048b57610142565b806368525a4e1461031d578063715018a61461034d5780638da5cb5b146103575780638e0e3fcd14610375578063998da3e9146103a557610142565b80633c73b4c41161010a5780633c73b4c41461020f57806349a0a1f61461023f5780634e00b9d31461026f57806359103c121461029f5780635dc9dbe8146102cf57806361ab0c89146102ed57610142565b8063078a6dbf146101475780630c746a8a1461017757806314eb76ac146101a757806322bd49a8146101c35780632aa60170146101df575b600080fd5b610161600480360381019061015c9190612509565b6104a7565b60405161016e91906125a2565b60405180910390f35b610191600480360381019061018c9190612750565b6106a1565b60405161019e91906127ce565b60405180910390f35b6101c160048036038101906101bc9190612847565b61074d565b005b6101dd60048036038101906101d89190612847565b610799565b005b6101f960048036038101906101f49190612509565b6107e5565b604051610206919061291a565b60405180910390f35b61022960048036038101906102249190612935565b610ae7565b6040516102369190612971565b60405180910390f35b61025960048036038101906102549190612935565b610f35565b6040516102669190612971565b60405180910390f35b6102896004803603810190610284919061298c565b611060565b60405161029691906129f7565b60405180910390f35b6102b960048036038101906102b4919061298c565b61107a565b6040516102c691906129f7565b60405180910390f35b6102d76110d7565b6040516102e49190612a71565b60405180910390f35b61030760048036038101906103029190612935565b6110fd565b6040516103149190612971565b60405180910390f35b61033760048036038101906103329190612935565b611228565b6040516103449190612971565b60405180910390f35b610355611353565b005b61035f611367565b60405161036c9190612a9b565b60405180910390f35b61038f600480360381019061038a9190612adb565b611390565b60405161039c9190612971565b60405180910390f35b6103bf60048036038101906103ba9190612847565b61160d565b005b6103c96116ce565b005b6103e560048036038101906103e09190612935565b61174b565b6040516103f29190612bf9565b60405180910390f35b61041560048036038101906104109190612935565b611b09565b6040516104229190612cf9565b60405180910390f35b61044560048036038101906104409190612d47565b611db9565b6040516104529190612d96565b60405180910390f35b61047560048036038101906104709190612935565b611e62565b60405161048291906127ce565b60405180910390f35b6104a560048036038101906104a09190612847565b611fd1565b005b6104af612477565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fd12e8cc856040518263ffffffff1660e01b815260040161050c9190612971565b602060405180830381865afa158015610529573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054d9190612dc6565b905060008173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa15801561059c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105c59190613128565b905060008273ffffffffffffffffffffffffffffffffffffffff1663dd85ae5f83610140015187815181106105fd576105fc613171565b5b60200260200101516040518263ffffffff1660e01b81526004016106219190612971565b60a060405180830381865afa15801561063e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610662919061322c565b9050600061067882604001518460c0015161107a565b905060405180604001604052808360000151815260200182151581525094505050505092915050565b60008060018461ffff16866106b69190613288565b6106c091906132e8565b90506000806106cf838661107a565b90505b80156107405760018661ffff1684846040516020016106f292919061331c565b6040516020818303038152906040528051906020012060001c6107159190613288565b61071f91906132e8565b925061072b838661107a565b9050818061073890613345565b9250506106d2565b8293505050509392505050565b610755612057565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6107a1612057565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6107ed612493565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fd12e8cc856040518263ffffffff1660e01b815260040161084a9190612971565b602060405180830381865afa158015610867573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088b9190612dc6565b905060008173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa1580156108da573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906109039190613128565b905060008273ffffffffffffffffffffffffffffffffffffffff16639b7be8fc836101000151878151811061093b5761093a613171565b5b60200260200101516040518263ffffffff1660e01b815260040161095f9190612971565b60e060405180830381865afa15801561097c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a09190613438565b905060008260a0015161ffff168260c0015161ffff161490506000808573ffffffffffffffffffffffffffffffffffffffff1663598f3b9d85600001516040518263ffffffff1660e01b81526004016109f99190612971565b600060405180830381865afa158015610a16573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610a3f9190613465565b905060005b60058161ffff161015610aa4576000828261ffff1681518110610a6a57610a69613171565b5b60200260200101519050610a8281886080015161107a565b15610a96578380610a9290613345565b9450505b508080600101915050610a44565b50604051806040016040528085600001518152602001610ac48486611db9565b600a811115610ad657610ad5612874565b5b815250965050505050505092915050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600185610b3591906134ae565b6040518263ffffffff1660e01b8152600401610b519190612971565b602060405180830381865afa158015610b6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b929190612dc6565b90508073ffffffffffffffffffffffffffffffffffffffff1663e2e3083060076040518263ffffffff1660e01b8152600401610bce9190612d96565b602060405180830381865afa158015610beb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0f91906134e2565b8173ffffffffffffffffffffffffffffffffffffffff1663e2e3083060066040518263ffffffff1660e01b8152600401610c499190612d96565b602060405180830381865afa158015610c66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8a91906134e2565b8273ffffffffffffffffffffffffffffffffffffffff1663e2e3083060056040518263ffffffff1660e01b8152600401610cc49190612d96565b602060405180830381865afa158015610ce1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0591906134e2565b8373ffffffffffffffffffffffffffffffffffffffff1663e2e3083060046040518263ffffffff1660e01b8152600401610d3f9190612d96565b602060405180830381865afa158015610d5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8091906134e2565b8473ffffffffffffffffffffffffffffffffffffffff1663e2e3083060036040518263ffffffff1660e01b8152600401610dba9190612d96565b602060405180830381865afa158015610dd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfb91906134e2565b8573ffffffffffffffffffffffffffffffffffffffff1663e2e3083060026040518263ffffffff1660e01b8152600401610e359190612d96565b602060405180830381865afa158015610e52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7691906134e2565b8673ffffffffffffffffffffffffffffffffffffffff1663e2e3083060016040518263ffffffff1660e01b8152600401610eb09190612d96565b602060405180830381865afa158015610ecd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef191906134e2565b610efb91906132e8565b610f0591906132e8565b610f0f91906132e8565b610f1991906132e8565b610f2391906132e8565b610f2d91906132e8565b915050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600184610f8291906134ae565b6040518263ffffffff1660e01b8152600401610f9e9190612971565b602060405180830381865afa158015610fbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdf9190612dc6565b73ffffffffffffffffffffffffffffffffffffffff1663e2e3083060096040518263ffffffff1660e01b81526004016110189190612d96565b602060405180830381865afa158015611035573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105991906134e2565b9050919050565b600080151561106f848461107a565b151514905092915050565b600080600090505b82518110156110cb578361ffff168382815181106110a3576110a2613171565b5b602002602001015161ffff16036110be5760019150506110d1565b8080600101915050611082565b50600090505b92915050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f60018461114a91906134ae565b6040518263ffffffff1660e01b81526004016111669190612971565b602060405180830381865afa158015611183573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a79190612dc6565b73ffffffffffffffffffffffffffffffffffffffff1663e2e30830600a6040518263ffffffff1660e01b81526004016111e09190612d96565b602060405180830381865afa1580156111fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122191906134e2565b9050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f60018461127591906134ae565b6040518263ffffffff1660e01b81526004016112919190612971565b602060405180830381865afa1580156112ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d29190612dc6565b73ffffffffffffffffffffffffffffffffffffffff1663e2e3083060076040518263ffffffff1660e01b815260040161130b9190612d96565b602060405180830381865afa158015611328573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061134c91906134e2565b9050919050565b61135b612057565b61136560006120de565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006001600a8111156113a6576113a5612874565b5b82600a8111156113b9576113b8612874565b5b14806113e957506002600a8111156113d4576113d3612874565b5b82600a8111156113e7576113e6612874565b5b145b8061141857506003600a81111561140357611402612874565b5b82600a81111561141657611415612874565b5b145b8061144757506004600a81111561143257611431612874565b5b82600a81111561144557611444612874565b5b145b8061147657506005600a81111561146157611460612874565b5b82600a81111561147457611473612874565b5b145b806114a557506006600a8111156114905761148f612874565b5b82600a8111156114a3576114a2612874565b5b145b6114e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114db9061356c565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f60018561152f91906134ae565b6040518263ffffffff1660e01b815260040161154b9190612971565b602060405180830381865afa158015611568573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158c9190612dc6565b73ffffffffffffffffffffffffffffffffffffffff1663e2e30830836040518263ffffffff1660e01b81526004016115c49190612d96565b602060405180830381865afa1580156115e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061160591906134e2565b905092915050565b611615612057565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016116509190612a9b565b602060405180830381865afa15801561166d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169191906134e2565b905060008111156116ca576116c982600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836121a2565b5b5050565b6116d6612057565b600047111561174957600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015611747573d6000803e3d6000fd5b505b565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fd12e8cc846040518263ffffffff1660e01b81526004016117aa9190612971565b602060405180830381865afa1580156117c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117eb9190612dc6565b905060008173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa15801561183a573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906118639190613128565b905060008161012001519050600082610120015161ffff1667ffffffffffffffff8111156118945761189361260d565b5b6040519080825280602002602001820160405280156118cd57816020015b6118ba612493565b8152602001906001900390816118b25790505b5090506000805b8361ffff168161ffff161015611afb5760008673ffffffffffffffffffffffffffffffffffffffff16639b7be8fc8761010001518461ffff168151811061191e5761191d613171565b5b60200260200101516040518263ffffffff1660e01b81526004016119429190612971565b60e060405180830381865afa15801561195f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119839190613438565b905060008660a0015161ffff168260c0015161ffff161490506000808973ffffffffffffffffffffffffffffffffffffffff1663598f3b9d85600001516040518263ffffffff1660e01b81526004016119dc9190612971565b600060405180830381865afa1580156119f9573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611a229190613465565b905060005b60058161ffff161015611a87576000828261ffff1681518110611a4d57611a4c613171565b5b60200260200101519050611a65818c6080015161107a565b15611a79578380611a7590613345565b9450505b508080600101915050611a27565b50604051806040016040528085600001518152602001611aa78486611db9565b600a811115611ab957611ab8612874565b5b815250878780611ac890613345565b985061ffff1681518110611adf57611ade613171565b5b60200260200101819052505050505080806001019150506118d4565b508195505050505050919050565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fd12e8cc846040518263ffffffff1660e01b8152600401611b689190612971565b602060405180830381865afa158015611b85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba99190612dc6565b905060008173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa158015611bf8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611c219190613128565b9050600081610160015161ffff1667ffffffffffffffff811115611c4857611c4761260d565b5b604051908082528060200260200182016040528015611c8157816020015b611c6e612477565b815260200190600190039081611c665790505b5090506000805b83610160015161ffff168161ffff161015611dac5760008573ffffffffffffffffffffffffffffffffffffffff1663dd85ae5f8661014001518461ffff1681518110611cd757611cd6613171565b5b60200260200101516040518263ffffffff1660e01b8152600401611cfb9190612971565b60a060405180830381865afa158015611d18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3c919061322c565b90506000611d5282604001518760c0015161107a565b9050604051806040016040528083600001518152602001821515815250858580611d7b90613345565b965061ffff1681518110611d9257611d91613171565b5b602002602001018190525050508080600101915050611c88565b5081945050505050919050565b600060058361ffff16148015611dcc5750815b15611dda5760019050611e5c565b60058361ffff1603611def5760029050611e5c565b60048361ffff16148015611e005750815b15611e0e5760039050611e5c565b60048361ffff1603611e235760049050611e5c565b60038361ffff16148015611e345750815b15611e425760059050611e5c565b60038361ffff1603611e575760069050611e5c565b600090505b92915050565b600080600090506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600186611eb691906134ae565b6040518263ffffffff1660e01b8152600401611ed29190612971565b602060405180830381865afa158015611eef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f139190612dc6565b73ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa158015611f5d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611f869190613128565b61016001519050600a8161ffff1681611fa257611fa1613259565b5b04915060008261ffff16148015611fbd575060008161ffff16115b15611fc757600191505b8192505050919050565b611fd9612057565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361204b5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016120429190612a9b565b60405180910390fd5b612054816120de565b50565b61205f612221565b73ffffffffffffffffffffffffffffffffffffffff1661207d611367565b73ffffffffffffffffffffffffffffffffffffffff16146120dc576120a0612221565b6040517f118cdaa70000000000000000000000000000000000000000000000000000000081526004016120d39190612a9b565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61221c838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040516024016121d592919061358c565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612229565b505050565b600033905090565b6000612254828473ffffffffffffffffffffffffffffffffffffffff166122c090919063ffffffff16565b9050600081511415801561227957508080602001905181019061227791906135b5565b155b156122bb57826040517f5274afe70000000000000000000000000000000000000000000000000000000081526004016122b29190612a9b565b60405180910390fd5b505050565b60606122ce838360006122d6565b905092915050565b60608147101561231d57306040517fcd7860590000000000000000000000000000000000000000000000000000000081526004016123149190612a9b565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1684866040516123469190613653565b60006040518083038185875af1925050503d8060008114612383576040519150601f19603f3d011682016040523d82523d6000602084013e612388565b606091505b50915091506123988683836123a3565b925050509392505050565b6060826123b8576123b382612432565b61242a565b600082511480156123e0575060008473ffffffffffffffffffffffffffffffffffffffff163b145b1561242257836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016124199190612a9b565b60405180910390fd5b81905061242b565b5b9392505050565b6000815111156124455780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518060400160405280600081526020016000151581525090565b6040518060400160405280600081526020016000600a8111156124b9576124b8612874565b5b81525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6124e6816124d3565b81146124f157600080fd5b50565b600081359050612503816124dd565b92915050565b600080604083850312156125205761251f6124c9565b5b600061252e858286016124f4565b925050602061253f858286016124f4565b9150509250929050565b612552816124d3565b82525050565b60008115159050919050565b61256d81612558565b82525050565b6040820160008201516125896000850182612549565b50602082015161259c6020850182612564565b50505050565b60006040820190506125b76000830184612573565b92915050565b600061ffff82169050919050565b6125d4816125bd565b81146125df57600080fd5b50565b6000813590506125f1816125cb565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612645826125fc565b810181811067ffffffffffffffff821117156126645761266361260d565b5b80604052505050565b60006126776124bf565b9050612683828261263c565b919050565b600067ffffffffffffffff8211156126a3576126a261260d565b5b602082029050602081019050919050565b600080fd5b60006126cc6126c784612688565b61266d565b905080838252602082019050602084028301858111156126ef576126ee6126b4565b5b835b81811015612718578061270488826125e2565b8452602084019350506020810190506126f1565b5050509392505050565b600082601f830112612737576127366125f7565b5b81356127478482602086016126b9565b91505092915050565b600080600060608486031215612769576127686124c9565b5b6000612777868287016124f4565b9350506020612788868287016125e2565b925050604084013567ffffffffffffffff8111156127a9576127a86124ce565b5b6127b586828701612722565b9150509250925092565b6127c8816125bd565b82525050565b60006020820190506127e360008301846127bf565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612814826127e9565b9050919050565b61282481612809565b811461282f57600080fd5b50565b6000813590506128418161281b565b92915050565b60006020828403121561285d5761285c6124c9565b5b600061286b84828501612832565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600b81106128b4576128b3612874565b5b50565b60008190506128c5826128a3565b919050565b60006128d5826128b7565b9050919050565b6128e5816128ca565b82525050565b6040820160008201516129016000850182612549565b50602082015161291460208501826128dc565b50505050565b600060408201905061292f60008301846128eb565b92915050565b60006020828403121561294b5761294a6124c9565b5b6000612959848285016124f4565b91505092915050565b61296b816124d3565b82525050565b60006020820190506129866000830184612962565b92915050565b600080604083850312156129a3576129a26124c9565b5b60006129b1858286016125e2565b925050602083013567ffffffffffffffff8111156129d2576129d16124ce565b5b6129de85828601612722565b9150509250929050565b6129f181612558565b82525050565b6000602082019050612a0c60008301846129e8565b92915050565b6000819050919050565b6000612a37612a32612a2d846127e9565b612a12565b6127e9565b9050919050565b6000612a4982612a1c565b9050919050565b6000612a5b82612a3e565b9050919050565b612a6b81612a50565b82525050565b6000602082019050612a866000830184612a62565b92915050565b612a9581612809565b82525050565b6000602082019050612ab06000830184612a8c565b92915050565b600b8110612ac357600080fd5b50565b600081359050612ad581612ab6565b92915050565b60008060408385031215612af257612af16124c9565b5b6000612b00858286016124f4565b9250506020612b1185828601612ac6565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b604082016000820151612b5d6000850182612549565b506020820151612b7060208501826128dc565b50505050565b6000612b828383612b47565b60408301905092915050565b6000602082019050919050565b6000612ba682612b1b565b612bb08185612b26565b9350612bbb83612b37565b8060005b83811015612bec578151612bd38882612b76565b9750612bde83612b8e565b925050600181019050612bbf565b5085935050505092915050565b60006020820190508181036000830152612c138184612b9b565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b604082016000820151612c5d6000850182612549565b506020820151612c706020850182612564565b50505050565b6000612c828383612c47565b60408301905092915050565b6000602082019050919050565b6000612ca682612c1b565b612cb08185612c26565b9350612cbb83612c37565b8060005b83811015612cec578151612cd38882612c76565b9750612cde83612c8e565b925050600181019050612cbf565b5085935050505092915050565b60006020820190508181036000830152612d138184612c9b565b905092915050565b612d2481612558565b8114612d2f57600080fd5b50565b600081359050612d4181612d1b565b92915050565b60008060408385031215612d5e57612d5d6124c9565b5b6000612d6c858286016125e2565b9250506020612d7d85828601612d32565b9150509250929050565b612d90816128ca565b82525050565b6000602082019050612dab6000830184612d87565b92915050565b600081519050612dc08161281b565b92915050565b600060208284031215612ddc57612ddb6124c9565b5b6000612dea84828501612db1565b91505092915050565b600080fd5b600080fd5b600081519050612e0c816124dd565b92915050565b600081519050612e2181612d1b565b92915050565b600081519050612e36816125cb565b92915050565b6000612e4f612e4a84612688565b61266d565b90508083825260208201905060208402830185811115612e7257612e716126b4565b5b835b81811015612e9b5780612e878882612e27565b845260208401935050602081019050612e74565b5050509392505050565b600082601f830112612eba57612eb96125f7565b5b8151612eca848260208601612e3c565b91505092915050565b600067ffffffffffffffff821115612eee57612eed61260d565b5b602082029050602081019050919050565b6000612f12612f0d84612ed3565b61266d565b90508083825260208201905060208402830185811115612f3557612f346126b4565b5b835b81811015612f5e5780612f4a8882612dfd565b845260208401935050602081019050612f37565b5050509392505050565b600082601f830112612f7d57612f7c6125f7565b5b8151612f8d848260208601612eff565b91505092915050565b60006101808284031215612fad57612fac612df3565b5b612fb861018061266d565b90506000612fc884828501612dfd565b6000830152506020612fdc84828501612dfd565b6020830152506040612ff084828501612dfd565b604083015250606061300484828501612e12565b606083015250608082015167ffffffffffffffff81111561302857613027612df8565b5b61303484828501612ea5565b60808301525060a061304884828501612e27565b60a08301525060c082015167ffffffffffffffff81111561306c5761306b612df8565b5b61307884828501612ea5565b60c08301525060e061308c84828501612e27565b60e08301525061010082015167ffffffffffffffff8111156130b1576130b0612df8565b5b6130bd84828501612f68565b610100830152506101206130d384828501612e27565b6101208301525061014082015167ffffffffffffffff8111156130f9576130f8612df8565b5b61310584828501612f68565b6101408301525061016061311b84828501612e27565b6101608301525092915050565b60006020828403121561313e5761313d6124c9565b5b600082015167ffffffffffffffff81111561315c5761315b6124ce565b5b61316884828501612f96565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060a082840312156131b6576131b5612df3565b5b6131c060a061266d565b905060006131d084828501612dfd565b60008301525060206131e484828501612db1565b60208301525060406131f884828501612e27565b604083015250606061320c84828501612e12565b606083015250608061322084828501612e12565b60808301525092915050565b600060a08284031215613242576132416124c9565b5b6000613250848285016131a0565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613293826124d3565b915061329e836124d3565b9250826132ae576132ad613259565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006132f3826124d3565b91506132fe836124d3565b9250828201905080821115613316576133156132b9565b5b92915050565b600060408201905061333160008301856127bf565b61333e60208301846127bf565b9392505050565b6000613350826125bd565b915061ffff8203613364576133636132b9565b5b600182019050919050565b60008151905061337e81612ab6565b92915050565b600060e0828403121561339a57613399612df3565b5b6133a460e061266d565b905060006133b484828501612dfd565b60008301525060206133c884828501612db1565b60208301525060406133dc84828501612db1565b60408301525060606133f084828501612e12565b606083015250608061340484828501612dfd565b60808301525060a06134188482850161336f565b60a08301525060c061342c84828501612e27565b60c08301525092915050565b600060e0828403121561344e5761344d6124c9565b5b600061345c84828501613384565b91505092915050565b60006020828403121561347b5761347a6124c9565b5b600082015167ffffffffffffffff811115613499576134986124ce565b5b6134a584828501612ea5565b91505092915050565b60006134b9826124d3565b91506134c4836124d3565b92508282039050818111156134dc576134db6132b9565b5b92915050565b6000602082840312156134f8576134f76124c9565b5b600061350684828501612dfd565b91505092915050565b600082825260208201905092915050565b7f496e76616c696420766963746f72792074696572000000000000000000000000600082015250565b600061355660148361350f565b915061356182613520565b602082019050919050565b6000602082019050818103600083015261358581613549565b9050919050565b60006040820190506135a16000830185612a8c565b6135ae6020830184612962565b9392505050565b6000602082840312156135cb576135ca6124c9565b5b60006135d984828501612e12565b91505092915050565b600081519050919050565b600081905092915050565b60005b838110156136165780820151818401526020810190506135fb565b60008484015250505050565b600061362d826135e2565b61363781856135ed565b93506136478185602086016135f8565b80840191505092915050565b600061365f8284613622565b91508190509291505056fea264697066735822122079a6789904113e0441d5f9eea268806e2c8bdae0e26effcf36f4d61c378d06ce64736f6c63430008180033",
  "deployedBytecode": "",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/LotteryReader.sol:LotteryReader",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3979,
        "contract": "contracts/LotteryReader.sol:LotteryReader",
        "label": "teamAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1954,
        "contract": "contracts/LotteryReader.sol:LotteryReader",
        "label": "lotteryMaster",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(LotteryMaster)1924"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(LotteryMaster)1924": {
        "encoding": "inplace",
        "label": "contract LotteryMaster",
        "numberOfBytes": "20"
      }
    }
  }
}