{
  "address": "0x93da0745f5712abC165Ba7Cea466d718aFAadF8B",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "amountWonInRound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "referralTicketId",
          "type": "uint256"
        }
      ],
      "name": "evaluateWonResultsForOneReferralTicket",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "referralTicketId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "referralAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "won",
              "type": "bool"
            }
          ],
          "internalType": "struct ReferralTicketResults",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ticketId",
          "type": "uint256"
        }
      ],
      "name": "evaluateWonResultsForOneTicket",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "ticketId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "participantAddress",
              "type": "address"
            },
            {
              "internalType": "enum RoundVictoryTier",
              "name": "victoryTier",
              "type": "uint8"
            }
          ],
          "internalType": "struct TicketResults",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "evaluateWonResultsForReferral",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "referralTicketId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "referralAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "won",
              "type": "bool"
            }
          ],
          "internalType": "struct ReferralTicketResults[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "evaluateWonResultsForTickets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "ticketId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "participantAddress",
              "type": "address"
            },
            {
              "internalType": "enum RoundVictoryTier",
              "name": "victoryTier",
              "type": "uint8"
            }
          ],
          "internalType": "struct TicketResults[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "num",
          "type": "uint16"
        },
        {
          "internalType": "uint16[]",
          "name": "arr",
          "type": "uint16[]"
        }
      ],
      "name": "existInArrayNumber",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "randomNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "maxValue",
          "type": "uint16"
        },
        {
          "internalType": "uint16[]",
          "name": "arr",
          "type": "uint16[]"
        }
      ],
      "name": "getRandomUniqueNumberInArrayForMaxValue",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lotteryMaster",
      "outputs": [
        {
          "internalType": "contract LotteryMaster",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "num",
          "type": "uint16"
        },
        {
          "internalType": "uint16[]",
          "name": "arr",
          "type": "uint16[]"
        }
      ],
      "name": "notExistInArrayNumber",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "numberOfReferralWinnersForRoundId",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "poolForReferral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        },
        {
          "internalType": "enum RoundVictoryTier",
          "name": "victoryTier",
          "type": "uint8"
        }
      ],
      "name": "poolForVictoryTier",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "referralWinnersNumber",
      "outputs": [
        {
          "internalType": "uint16[]",
          "name": "",
          "type": "uint16[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "roundNumbers",
      "outputs": [
        {
          "internalType": "uint16[]",
          "name": "",
          "type": "uint16[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendCryptoToTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "sendTokenToTeam",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lotteryMaster",
          "type": "address"
        }
      ],
      "name": "setLotteryMaster",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "rightNumbersForTicket",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "powerNumberFound",
          "type": "bool"
        }
      ],
      "name": "tierFromResults",
      "outputs": [
        {
          "internalType": "enum RoundVictoryTier",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "tokenHoldersPoolAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundId",
          "type": "uint256"
        }
      ],
      "name": "treasuryPoolAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_teamAddress",
          "type": "address"
        }
      ],
      "name": "updateTeamAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x94d76f514fb68e2a13b84e2b7c6d8c44def554b5616c4751e389e582237355b5",
  "receipt": {
    "to": null,
    "from": "0x4eCa23Ffd5710970E22558C484a0D6943dA5eAa5",
    "contractAddress": "0x93da0745f5712abC165Ba7Cea466d718aFAadF8B",
    "transactionIndex": 3,
    "gasUsed": "3657924",
    "logsBloom": "0x
    "blockHash": "0x82b6f24e8993e902e67b5799a4c1bafe024d391867da80f4204e29b9a95cc575",
    "transactionHash": "0x94d76f514fb68e2a13b84e2b7c6d8c44def554b5616c4751e389e582237355b5",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 32719233,
        "transactionHash": "0x94d76f514fb68e2a13b84e2b7c6d8c44def554b5616c4751e389e582237355b5",
        "address": "0x93da0745f5712abC165Ba7Cea466d718aFAadF8B",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004eca23ffd5710970e22558c484a0d6943da5eaa5"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x82b6f24e8993e902e67b5799a4c1bafe024d391867da80f4204e29b9a95cc575"
      }
    ],
    "blockNumber": 32719233,
    "cumulativeGasUsed": "3963333",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "a90ed1be3dee0aecf914d342725083db",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"amountWonInRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralTicketId\",\"type\":\"uint256\"}],\"name\":\"evaluateWonResultsForOneReferralTicket\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"referralTicketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referralAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"won\",\"type\":\"bool\"}],\"internalType\":\"struct ReferralTicketResults\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"}],\"name\":\"evaluateWonResultsForOneTicket\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"participantAddress\",\"type\":\"address\"},{\"internalType\":\"enum RoundVictoryTier\",\"name\":\"victoryTier\",\"type\":\"uint8\"}],\"internalType\":\"struct TicketResults\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"evaluateWonResultsForReferral\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"referralTicketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referralAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"won\",\"type\":\"bool\"}],\"internalType\":\"struct ReferralTicketResults[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"evaluateWonResultsForTickets\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"participantAddress\",\"type\":\"address\"},{\"internalType\":\"enum RoundVictoryTier\",\"name\":\"victoryTier\",\"type\":\"uint8\"}],\"internalType\":\"struct TicketResults[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"num\",\"type\":\"uint16\"},{\"internalType\":\"uint16[]\",\"name\":\"arr\",\"type\":\"uint16[]\"}],\"name\":\"existInArrayNumber\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"maxValue\",\"type\":\"uint16\"},{\"internalType\":\"uint16[]\",\"name\":\"arr\",\"type\":\"uint16[]\"}],\"name\":\"getRandomUniqueNumberInArrayForMaxValue\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryMaster\",\"outputs\":[{\"internalType\":\"contract LotteryMaster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"num\",\"type\":\"uint16\"},{\"internalType\":\"uint16[]\",\"name\":\"arr\",\"type\":\"uint16[]\"}],\"name\":\"notExistInArrayNumber\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"numberOfReferralWinnersForRoundId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"poolForReferral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"},{\"internalType\":\"enum RoundVictoryTier\",\"name\":\"victoryTier\",\"type\":\"uint8\"}],\"name\":\"poolForVictoryTier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"referralWinnersNumber\",\"outputs\":[{\"internalType\":\"uint16[]\",\"name\":\"\",\"type\":\"uint16[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"roundNumbers\",\"outputs\":[{\"internalType\":\"uint16[]\",\"name\":\"\",\"type\":\"uint16[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendCryptoToTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sendTokenToTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lotteryMaster\",\"type\":\"address\"}],\"name\":\"setLotteryMaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"rightNumbersForTicket\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"powerNumberFound\",\"type\":\"bool\"}],\"name\":\"tierFromResults\",\"outputs\":[{\"internalType\":\"enum RoundVictoryTier\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"tokenHoldersPoolAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundId\",\"type\":\"uint256\"}],\"name\":\"treasuryPoolAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teamAddress\",\"type\":\"address\"}],\"name\":\"updateTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LotteryReader.sol\":\"LotteryReader\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/CyclixRandomizerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface CyclixRandomizerInterface {\\n    function requestRandomWords(uint32 numWords) external returns (uint256 requestId);\\n    function getRequestStatus(uint256 _requestId) external view returns (bool fulfilled, uint256[] memory randomWords);\\n    function registerGameContract(address gameAddress, string calldata name) external;\\n    function getLastRequestIdForCaller(address _gameAddress) external view returns (uint256);\\n    function recoverLostNumberRequest(uint256 _requestId) external returns (uint256);\\n}\",\"keccak256\":\"0xc71c2b020044355f41cc53069e9a6f9f2778311e8d601a29bcc608301a0dfe24\",\"license\":\"MIT\"},\"contracts/LotteryCommon.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\n    enum RoundVictoryTier {\\n        NO_WIN,\\n        Tier5_1,\\n        Tier5,\\n        Tier4_1,\\n        Tier4,\\n        Tier3_1,\\n        Tier3,\\n        Referrer,\\n        PublicPool,\\n        TokenHolders,\\n        Treasury\\n    }\\n\\n    struct Round {\\n        uint256 id;\\n        uint256 startTime;\\n        uint256 endTime;\\n        bool ended;\\n        uint16[] roundNumbers;\\n        uint16[] referralWinnersNumber;\\n        uint16 referralWinnersNumberCount;\\n        uint256[] ticketIds;\\n        uint16 ticketsCount;\\n        uint256[] referralTicketIds;\\n        uint16 referralCounts;\\n    }\\n\\n    struct Ticket {\\n        uint256 id;\\n        address participantAddress;\\n        address referralAddress;\\n        bool claimed;\\n        uint256 chainId;\\n        RoundVictoryTier victoryTier;\\n    }\\n\\n    struct TicketResults {\\n        uint256 ticketId;\\n        address participantAddress;\\n        RoundVictoryTier victoryTier;\\n    }\\n\\n    struct ReferralTicket {\\n        uint256 id;\\n        address referralAddress;\\n        uint16 referralTicketNumber;\\n        bool winner;\\n        bool claimed;\\n    }\\n\\n    struct ReferralTicketResults {\\n        uint256 referralTicketId;\\n        address referralAddress;\\n        bool won;\\n    }\",\"keccak256\":\"0x678d80db11135f1af83c4fe484e4f1c48a8c9be8695152f8023b1ed2b5117788\",\"license\":\"UNLICENSED\"},\"contracts/LotteryMaster.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {CyclixRandomizerInterface} from \\\"./CyclixRandomizerInterface.sol\\\";\\nimport {EmergencyFunctions} from \\\"./utils/EmergencyFunctions.sol\\\";\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\nimport { LotteryRoundInterface } from \\\"./LotteryRoundInterface.sol\\\";\\nimport { LotteryReaderInterface } from \\\"./LotteryReaderInterface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./LotteryRoundCreatorInterface.sol\\\";\\n    enum LotteryStatuses {\\n        DrawOpen,\\n        EvaluatingResults,\\n        ResultsEvaluated,\\n        ClaimInProgress\\n    }\\n\\ncontract LotteryMaster is EmergencyFunctions {\\n\\n    uint256 public roundCount;\\n    address[] public rounds;\\n    LotteryStatuses public lotteryStatus;\\n    uint256 public statusStartTime;\\n    uint256 public statusEndTime;\\n\\n    mapping(address => uint16) public freeRounds;\\n    mapping(address => bool) public crossChainOperator;\\n    function setCrossChainOperator(address operator, bool value) public onlyOwner {\\n        crossChainOperator[operator] = value;\\n    }\\n\\n    uint16 public counterForBankWallets;\\n    address[] public bankWallets;\\n    function setBankWallet(address wallet, bool add) public onlyOwner {\\n        for (uint i = 0; i < bankWallets.length; i++) {\\n            if (bankWallets[i] == wallet) {\\n                if (add) {\\n                    require(false, \\\"Wallet already added\\\");\\n                } else {\\n                    bankWallets[i] = bankWallets[bankWallets.length - 1];\\n                    bankWallets.pop();\\n                }\\n            }\\n        }\\n        if (add) {\\n            bankWallets.push(wallet);\\n        }\\n    }\\n\\n    address public treasuryWallets;\\n    IERC20Metadata public paymentToken;\\n    CyclixRandomizerInterface public randomizer;\\n    LotteryReaderInterface public reader;\\n    uint256 public ticketPrice;\\n    bool public freeRoundsAreEnabled = false;\\n    uint16 public percentageOfReferralWinners = 10;\\n    LotteryRoundCreatorInterface public lotteryRoundCreator;\\n\\n    constructor(address cyclixRandomizer, address lotteryReader, address _lotteryRoundCreator, address _paymentToken, uint256 _ticketPrice, bool _freeRoundsAreEnabled)\\n    EmergencyFunctions(msg.sender) {\\n        randomizer = CyclixRandomizerInterface(cyclixRandomizer);\\n        randomizer.registerGameContract(address(this), \\\"LotteryMasterV0.1\\\");\\n        reader = LotteryReaderInterface(lotteryReader);\\n        lotteryRoundCreator = LotteryRoundCreatorInterface(_lotteryRoundCreator);\\n        paymentToken = IERC20Metadata(_paymentToken);\\n        ticketPrice = _ticketPrice * (10 ** uint256(paymentToken.decimals()));\\n        freeRoundsAreEnabled = _freeRoundsAreEnabled;\\n        treasuryWallets = msg.sender;\\n        bankWallets.push(msg.sender);\\n    }\\n\\n    function updateSetup(address cyclixRandomizer, address lotteryReader, address _lotteryRoundCreator, address _paymentToken, uint256 _ticketPrice,\\n        address _treasuryWallet, uint16 _percentageOfReferralWinners, uint16[] memory _poolPercentagesBasePoints, bool _freeRoundsAreEnabled) public onlyOwner {\\n        randomizer = CyclixRandomizerInterface(cyclixRandomizer);\\n        randomizer.registerGameContract(address(this), \\\"LotteryMasterV0.1\\\");\\n        reader = LotteryReaderInterface(lotteryReader);\\n        lotteryRoundCreator = LotteryRoundCreatorInterface(_lotteryRoundCreator);\\n        paymentToken = IERC20Metadata(_paymentToken);\\n        ticketPrice = _ticketPrice * (10 ** uint256(paymentToken.decimals()));\\n        treasuryWallets = _treasuryWallet;\\n        percentageOfReferralWinners = _percentageOfReferralWinners;\\n        LotteryRoundInterface(rounds[roundCount - 1]).setPoolPercentagesBasePoints(_poolPercentagesBasePoints);\\n        freeRoundsAreEnabled = _freeRoundsAreEnabled;\\n    }\\n\\n    function startNewRound(uint256 _statusEndTime) public onlyOwner {\\n        roundCount++;\\n        if (roundCount > 1) {\\n            rounds.push(lotteryRoundCreator.startNewRound(_statusEndTime, rounds[roundCount - 2]));\\n            require(lotteryStatus == LotteryStatuses.ClaimInProgress && statusEndTime < block.timestamp, \\\"Previous round not ended\\\");\\n        } else {\\n            rounds.push(lotteryRoundCreator.startNewRound(_statusEndTime, address(0)));\\n        }\\n        setLotteryStatus(LotteryStatuses.DrawOpen, _statusEndTime);\\n    }\\n\\n    function setLotteryStatus(LotteryStatuses _lotteryStatus, uint256 _statusEndTime) internal onlyOwner {\\n        lotteryStatus = _lotteryStatus;\\n        statusStartTime = block.timestamp;\\n        statusEndTime = block.timestamp + _statusEndTime;\\n    }\\n\\n    function buyTickets(uint256 chainId, uint16[] memory moreTicketNumbers, address referral, address buyer) public {\\n        for (uint i = 0; i < moreTicketNumbers.length; i += 6) {\\n            uint16[] memory chosenNumbers = new uint16[](6);\\n            for (uint j = 0; j < 6; j++) {\\n                chosenNumbers[j] = moreTicketNumbers[i + j];\\n            }\\n            buyTicket(chainId, chosenNumbers, referral, buyer);\\n        }\\n    }\\n\\n    function buyTicket(uint256 chainId, uint16[] memory chosenNumbers, address referral, address buyer) public {\\n        require(freeRounds[buyer] > 0\\n        || paymentToken.allowance(buyer, address(this)) >= ticketPrice\\n        || crossChainOperator[msg.sender], \\\"Missing Allowance\\\");\\n        LotteryRoundInterface lotteryRound = LotteryRoundInterface(rounds[roundCount - 1]);\\n        if (freeRounds[buyer] > 0) {\\n            freeRounds[buyer]--;\\n        } else {\\n            if (!crossChainOperator[msg.sender]) {\\n                require(paymentToken.balanceOf(tx.origin) >= ticketPrice, \\\"Insufficient funds\\\");\\n                counterForBankWallets = uint16(counterForBankWallets++ % bankWallets.length);\\n                uint256 treasuryAmount = lotteryRound.treasuryAmountOnTicket(ticketPrice);\\n                SafeERC20.safeTransferFrom(paymentToken, buyer, bankWallets[counterForBankWallets], ticketPrice - treasuryAmount);\\n                SafeERC20.safeTransferFrom(paymentToken, buyer, treasuryWallets, treasuryAmount);\\n            }\\n            lotteryRound.updateVictoryPoolForTicket(ticketPrice);\\n\\n            if (referral != address(0) && freeRoundsAreEnabled) {\\n                freeRounds[buyer]++;\\n                freeRounds[referral]++;\\n            }\\n        }\\n\\n        lotteryRound.buyTicket(chainId, chosenNumbers, referral, buyer);\\n    }\\n\\n    function addFreeRound(address[] calldata participant) public onlyOwner {\\n        for (uint i = 0; i < participant.length; i++) {\\n            freeRounds[participant[i]]++;\\n        }\\n    }\\n\\n    mapping(uint256 => uint256) public publicRoundRandomNumbersRequestId;\\n\\n    function closeRound(uint256 _statusEndTime) external onlyOwner {\\n        LotteryRoundInterface lotteryRound = LotteryRoundInterface(rounds[roundCount - 1]);\\n        lotteryRound.closeRound();\\n        uint16 referralWinners = reader.numberOfReferralWinnersForRoundId(roundCount);\\n        publicRoundRandomNumbersRequestId[roundCount] = randomizer.requestRandomWords(6 + referralWinners);\\n        setLotteryStatus(LotteryStatuses.EvaluatingResults, _statusEndTime);\\n    }\\n\\n    function fetchRoundNumbers(uint256 roundId, uint256 _statusEndTime) external onlyOwner {\\n        LotteryRoundInterface round = LotteryRoundInterface(rounds[roundId - 1]);\\n        round.couldReceiveWinningNumbers();\\n        (bool fulfilled, uint256[] memory randomWords) = randomizer.getRequestStatus(publicRoundRandomNumbersRequestId[roundId]);\\n        require(fulfilled, \\\"Random numbers not ready\\\");\\n        uint16[] memory roundNumbers = new uint16[](6);\\n        uint16[] memory referralWinnersNumber = new uint16[](randomWords.length - 6);\\n        if (fulfilled) {\\n            for (uint i = 0; i < 6; i++) {\\n                roundNumbers[i] = reader.getRandomUniqueNumberInArrayForMaxValue(randomWords[i], 69, roundNumbers);\\n            }\\n            roundNumbers[5] = uint16(randomWords[5] % 26 + 1);\\n            for (uint i = 6; i < randomWords.length; i++) {\\n                referralWinnersNumber [i - 6] = reader.getRandomUniqueNumberInArrayForMaxValue(randomWords[i],\\n                    round.getRound().referralCounts, referralWinnersNumber);\\n            }\\n        }\\n        round.storeWinningNumbers(roundNumbers, referralWinnersNumber);\\n        setLotteryStatus(LotteryStatuses.ResultsEvaluated, _statusEndTime);\\n    }\\n\\n    function markWinners(uint256 roundId, uint256 _statusEndTime) public onlyOwner {\\n        LotteryRoundInterface(rounds[roundId - 1]).markWinners(reader.evaluateWonResultsForTickets(roundId), reader.evaluateWonResultsForReferral(roundId));\\n        setLotteryStatus(LotteryStatuses.ClaimInProgress, _statusEndTime);\\n    }\\n\\n    function claimVictory(uint256 ticketId) public {\\n        LotteryRoundInterface lotteryRound = LotteryRoundInterface(rounds[roundCount - 1]);\\n        Ticket memory ticket = lotteryRound.ticketById(ticketId);\\n        require(ticket.participantAddress == msg.sender, \\\"Invalid ticket owner\\\");\\n        require(!ticket.claimed, \\\"Ticket already claimed\\\");\\n        require(lotteryRound.getRound().ended, \\\"Round not ended\\\");\\n        require(lotteryStatus == LotteryStatuses.ClaimInProgress, \\\"Claim not started\\\");\\n        require(block.timestamp < statusEndTime, \\\"Claim has ended\\\");\\n        require(ticket.victoryTier != RoundVictoryTier.NO_WIN, \\\"No prize for this ticket\\\");\\n        require(ticket.victoryTier == reader.evaluateWonResultsForOneTicket(lotteryRound.getRound().id, ticketId).victoryTier, \\\"Invalid ticket tier\\\");\\n        unchecked {\\n            uint256 amountWon = lotteryRound.victoryTierAmounts(ticket.victoryTier) / lotteryRound.winnersForEachTier(ticket.victoryTier);\\n            require(paymentToken.balanceOf(address(this)) >= amountWon, \\\"Not enough funds on contract\\\");\\n            LotteryRoundInterface(rounds[roundCount - 1]).markVictoryClaimed(ticketId, amountWon);\\n            paymentToken.transfer(msg.sender, amountWon);\\n        }\\n    }\\n\\n    function claimReferralVictory(uint256 referralTicketId) public {\\n        LotteryRoundInterface lotteryRound = LotteryRoundInterface(rounds[roundCount - 1]);\\n        ReferralTicket memory referralTicket = lotteryRound.referralTicketById(referralTicketId);\\n        require(referralTicket.id == referralTicketId, \\\"Invalid ticket id\\\");\\n        require(referralTicket.referralAddress == msg.sender, \\\"Invalid ticket owner\\\");\\n        require(!referralTicket.claimed, \\\"Ticket already claimed\\\");\\n        require(lotteryRound.getRound().ended, \\\"Round not ended\\\");\\n        require(referralTicket.winner == true, \\\"No prize for this ticket\\\");\\n        require(referralTicket.winner == reader.evaluateWonResultsForOneReferralTicket(lotteryRound.getRound().id, referralTicketId).won, \\\"Invalid ticket tier\\\");\\n        unchecked {\\n            uint256 amountWon = lotteryRound.victoryTierAmounts(RoundVictoryTier.Referrer) / reader.numberOfReferralWinnersForRoundId(lotteryRound.getRound().id);\\n            require(paymentToken.balanceOf(address(this)) >= amountWon, \\\"Not enough funds on contract\\\");\\n            LotteryRoundInterface(rounds[roundCount - 1]).markReferralVictoryClaimed(referralTicketId, amountWon);\\n            paymentToken.transfer(msg.sender, amountWon);\\n        }\\n    }\\n}\",\"keccak256\":\"0x0ca83e6edb548455a9003ec846c820272fc8a3d1ec6400d356bdd16cba25d22f\",\"license\":\"UNLICENSED\"},\"contracts/LotteryReader.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {TestFunctions} from \\\"./utils/TestUtils.sol\\\";\\nimport {EmergencyFunctions} from \\\"./utils/EmergencyFunctions.sol\\\";\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\nimport { LotteryRound } from \\\"./LotteryRound.sol\\\";\\nimport { LotteryMaster } from \\\"./LotteryMaster.sol\\\";\\nimport {LotteryReaderInterface} from \\\"./LotteryReaderInterface.sol\\\";\\n\\ncontract LotteryReader is LotteryReaderInterface, EmergencyFunctions {\\n    LotteryMaster public lotteryMaster;\\n\\n    function setLotteryMaster(address _lotteryMaster) public onlyOwner {\\n        lotteryMaster = LotteryMaster(_lotteryMaster);\\n    }\\n\\n    constructor() EmergencyFunctions(tx.origin) {}\\n\\n    function poolForVictoryTier(uint256 roundId, RoundVictoryTier victoryTier) public view override returns(uint256) {\\n        require(victoryTier == RoundVictoryTier.Tier5_1 || victoryTier == RoundVictoryTier.Tier5 || victoryTier == RoundVictoryTier.Tier4_1 ||\\n        victoryTier == RoundVictoryTier.Tier4 || victoryTier == RoundVictoryTier.Tier3_1 || victoryTier == RoundVictoryTier.Tier3,\\n            \\\"Invalid victory tier\\\");\\n        return LotteryRound(lotteryMaster.rounds(roundId -1)).victoryTierAmounts(victoryTier);\\n    }\\n\\n    function roundNumbers(uint256 roundId) public view returns(uint16[] memory) {\\n        Round memory round = LotteryRound(lotteryMaster.rounds(roundId -1)).getRound();\\n        return round.roundNumbers;\\n    }\\n\\n    function referralWinnersNumber(uint256 roundId) public view returns(uint16[] memory) {\\n        Round memory round = LotteryRound(lotteryMaster.rounds(roundId -1)).getRound();\\n        return round.referralWinnersNumber;\\n    }\\n\\n    function poolForReferral(uint256 roundId) public view override returns(uint256) {\\n        return LotteryRound(lotteryMaster.rounds(roundId -1)).victoryTierAmounts(RoundVictoryTier.Referrer);\\n    }\\n\\n    function tokenHoldersPoolAmount(uint256 roundId) public view override returns (uint256) {\\n        return LotteryRound(lotteryMaster.rounds(roundId -1)).victoryTierAmounts(RoundVictoryTier.TokenHolders);\\n    }\\n\\n    function treasuryPoolAmount(uint256 roundId) public view override returns (uint256) {\\n        return LotteryRound(lotteryMaster.rounds(roundId -1)).victoryTierAmounts(RoundVictoryTier.Treasury);\\n    }\\n\\n    function numberOfReferralWinnersForRoundId(uint256 roundId) public view override returns (uint16) {\\n        uint16 referralWinnersForRound = 0;\\n        uint16 referralCounts = LotteryRound(lotteryMaster.rounds(roundId -1)).getRound().referralCounts;\\n        unchecked {\\n            referralWinnersForRound = referralCounts / lotteryMaster.percentageOfReferralWinners();\\n        }\\n        if (referralWinnersForRound == 0 && referralCounts > 0) {\\n            referralWinnersForRound = 1;\\n        }\\n        return referralWinnersForRound;\\n    }\\n\\n    function existInArrayNumber(uint16 num, uint16[] memory arr) public pure override returns (bool) {\\n        for (uint i = 0; i < arr.length; i++) {\\n            if (arr[i] == num) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function notExistInArrayNumber(uint16 num, uint16[] memory arr) public pure override returns (bool) {\\n        return existInArrayNumber(num, arr) == false;\\n    }\\n\\n    function getRandomUniqueNumberInArrayForMaxValue(uint256 randomNumber, uint16 maxValue, uint16[] memory arr) public pure override returns (uint16) {\\n        uint16 returnedNumber = uint16(randomNumber % maxValue + 1);\\n        uint16 counter = 0;\\n        bool existInNumbers = existInArrayNumber(returnedNumber, arr);\\n        while (existInNumbers) {\\n            returnedNumber =  uint16(uint256(keccak256(abi.encode(returnedNumber, counter))) % maxValue + 1);\\n            existInNumbers = existInArrayNumber(returnedNumber, arr);\\n            counter++;\\n        }\\n        return returnedNumber;\\n    }\\n\\n\\n    function tierFromResults(uint16 rightNumbersForTicket, bool powerNumberFound) public pure override returns (RoundVictoryTier) {\\n        if (rightNumbersForTicket == 5 && powerNumberFound) {\\n            return RoundVictoryTier.Tier5_1;\\n        } else if (rightNumbersForTicket == 5) {\\n            return RoundVictoryTier.Tier5;\\n        } else if (rightNumbersForTicket == 4 && powerNumberFound) {\\n            return RoundVictoryTier.Tier4_1;\\n        } else if (rightNumbersForTicket == 4) {\\n            return RoundVictoryTier.Tier4;\\n        } else if (rightNumbersForTicket == 3 && powerNumberFound) {\\n            return RoundVictoryTier.Tier3_1;\\n        } else if (rightNumbersForTicket == 3) {\\n            return RoundVictoryTier.Tier3;\\n        }\\n        return RoundVictoryTier.NO_WIN;\\n    }\\n\\n    function evaluateWonResultsForOneTicket(uint256 roundId, uint256 ticketId) public view override returns (TicketResults memory){\\n        LotteryRound lotteryRound = LotteryRound(lotteryMaster.rounds(roundId - 1));\\n        Round memory roundForEvaluation = lotteryRound.getRound();\\n        Ticket memory ticket = lotteryRound.ticketById(roundForEvaluation.ticketIds[ticketId]);\\n        uint16[] memory ticketNumbers = lotteryRound.numbersForTicketId(ticket.id);\\n        bool powerNumberFound = ticketNumbers[5] == roundForEvaluation.roundNumbers[5];\\n        uint16 rightNumbersForTicket = 0;\\n        for(uint16 i = 0; i < 5; i++) {\\n            uint16 ticketNumber = ticketNumbers[i];\\n            if (existInArrayNumber(ticketNumber, roundForEvaluation.roundNumbers)) {\\n                rightNumbersForTicket++;\\n            }\\n        }\\n        return TicketResults({\\n            ticketId: ticket.id,\\n            participantAddress : ticket.participantAddress,\\n            victoryTier: tierFromResults(rightNumbersForTicket, powerNumberFound)\\n        });\\n    }\\n\\n    function evaluateWonResultsForTickets(uint256 roundId) public view override returns (TicketResults[] memory){\\n        LotteryRound lotteryRound = LotteryRound(lotteryMaster.rounds(roundId - 1));\\n        Round memory roundForEvaluation = lotteryRound.getRound();\\n        uint16 roundTicketCount = roundForEvaluation.ticketsCount;\\n        TicketResults[] memory ticketResults = new TicketResults[](roundForEvaluation.ticketsCount);\\n        uint16 counter = 0;\\n        for(uint16 ticketIndexForRound = 0; ticketIndexForRound < roundTicketCount; ticketIndexForRound++) {\\n            Ticket memory ticket = lotteryRound.ticketById(roundForEvaluation.ticketIds[ticketIndexForRound]);\\n            uint16[] memory ticketNumbers = lotteryRound.numbersForTicketId(ticket.id);\\n            bool powerNumberFound = ticketNumbers[5] == roundForEvaluation.roundNumbers[5];\\n            uint16 rightNumbersForTicket = 0;\\n            for(uint16 i = 0; i < 5; i++) {\\n                uint16 ticketNumber = ticketNumbers[i];\\n                if (existInArrayNumber(ticketNumber, roundForEvaluation.roundNumbers)) {\\n                    rightNumbersForTicket++;\\n                }\\n            }\\n            ticketResults[counter++] = TicketResults({\\n                ticketId: ticket.id,\\n                participantAddress : ticket.participantAddress,\\n                victoryTier: tierFromResults(rightNumbersForTicket, powerNumberFound)\\n            });\\n        }\\n        return ticketResults;\\n    }\\n\\n    function evaluateWonResultsForOneReferralTicket(uint256 roundId, uint256 referralTicketId) public view override returns (ReferralTicketResults memory) {\\n        LotteryRound lotteryRound = LotteryRound(lotteryMaster.rounds(roundId - 1));\\n        Round memory roundForEvaluation = lotteryRound.getRound();\\n        ReferralTicket memory referralTicket = lotteryRound.referralTicketById(roundForEvaluation.referralTicketIds[referralTicketId]);\\n        bool referralWon = existInArrayNumber(referralTicket.referralTicketNumber, roundForEvaluation.referralWinnersNumber);\\n        return ReferralTicketResults({\\n            referralTicketId: referralTicket.id,\\n            referralAddress: referralTicket.referralAddress,\\n            won: referralWon\\n        });\\n    }\\n\\n    function evaluateWonResultsForReferral(uint256 roundId) public view override returns (ReferralTicketResults[] memory) {\\n        LotteryRound lotteryRound = LotteryRound(lotteryMaster.rounds(roundId - 1));\\n        Round memory roundForEvaluation = lotteryRound.getRound();\\n        ReferralTicketResults[] memory referralWinnerIds = new ReferralTicketResults[](roundForEvaluation.referralCounts);\\n        uint16 counter = 0;\\n        for(uint16 referralIndexForRound = 0; referralIndexForRound < roundForEvaluation.referralCounts; referralIndexForRound++) {\\n            ReferralTicket memory referralTicket = lotteryRound.referralTicketById(roundForEvaluation.referralTicketIds[referralIndexForRound]);\\n            bool referralWon = existInArrayNumber(referralTicket.referralTicketNumber, roundForEvaluation.referralWinnersNumber);\\n            referralWinnerIds[counter++] = ReferralTicketResults({\\n                referralTicketId: referralTicket.id,\\n                referralAddress : referralTicket.referralAddress,\\n                won: referralWon\\n            });\\n        }\\n        return referralWinnerIds;\\n    }\\n\\n    function amountWonInRound(uint256 roundId) public view override returns (uint256) {\\n        LotteryRound lotteryRound = LotteryRound(lotteryMaster.rounds(roundId -1));\\n        uint256 amountWon = 0;\\n\\n        if (lotteryRound.winnersForEachTier(RoundVictoryTier.Tier5_1) > 0) {\\n            amountWon += lotteryRound.victoryTierAmounts(RoundVictoryTier.Tier5_1);\\n        }\\n        if (lotteryRound.winnersForEachTier(RoundVictoryTier.Tier5) > 0) {\\n            amountWon += lotteryRound.victoryTierAmounts(RoundVictoryTier.Tier5);\\n        }\\n        if (lotteryRound.winnersForEachTier(RoundVictoryTier.Tier4_1) > 0) {\\n            amountWon += lotteryRound.victoryTierAmounts(RoundVictoryTier.Tier4_1);\\n        }\\n        if (lotteryRound.winnersForEachTier(RoundVictoryTier.Tier4) > 0) {\\n            amountWon += lotteryRound.victoryTierAmounts(RoundVictoryTier.Tier4);\\n        }\\n        if (lotteryRound.winnersForEachTier(RoundVictoryTier.Tier3_1) > 0) {\\n            amountWon += lotteryRound.victoryTierAmounts(RoundVictoryTier.Tier3_1);\\n        }\\n        if (lotteryRound.winnersForEachTier(RoundVictoryTier.Tier3) > 0) {\\n            amountWon += lotteryRound.victoryTierAmounts(RoundVictoryTier.Tier3);\\n        }\\n        if (lotteryRound.winnersForEachTier(RoundVictoryTier.Referrer) > 0) {\\n            amountWon += lotteryRound.victoryTierAmounts(RoundVictoryTier.Referrer);\\n        }\\n        return amountWon;\\n    }\\n}\",\"keccak256\":\"0xa66c97a997a0a17138f193078ea110bd6cfcd60cc629eb7bdfc78432d6551131\",\"license\":\"UNLICENSED\"},\"contracts/LotteryReaderInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {TestFunctions} from \\\"./utils/TestUtils.sol\\\";\\nimport {CyclixRandomizerInterface} from \\\"./CyclixRandomizerInterface.sol\\\";\\nimport {EmergencyFunctions} from \\\"./utils/EmergencyFunctions.sol\\\";\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\n\\ninterface LotteryReaderInterface {\\n    function poolForVictoryTier(uint256 roundId, RoundVictoryTier victoryTier) external view returns(uint256) ;\\n    function poolForReferral(uint256 roundId) external view returns(uint256) ;\\n    function tokenHoldersPoolAmount(uint256 roundId) external view returns (uint256) ;\\n    function treasuryPoolAmount(uint256 roundId) external view returns (uint256) ;\\n    function numberOfReferralWinnersForRoundId(uint256 roundId) external view returns (uint16) ;\\n    function existInArrayNumber(uint16 num, uint16[] memory arr) external pure returns (bool) ;\\n    function notExistInArrayNumber(uint16 num, uint16[] memory arr) external pure returns (bool) ;\\n    function getRandomUniqueNumberInArrayForMaxValue(uint256 randomNumber, uint16 maxValue, uint16[] memory arr) external pure returns (uint16) ;\\n    function tierFromResults(uint16 rightNumbersForTicket, bool powerNumberFound) external pure returns (RoundVictoryTier) ;\\n    function evaluateWonResultsForOneTicket(uint256 roundId, uint256 ticketId) external view returns (TicketResults memory);\\n    function evaluateWonResultsForTickets(uint256 roundId) external view returns (TicketResults[] memory);\\n    function evaluateWonResultsForOneReferralTicket(uint256 roundId, uint256 referralTicketId) external view returns (ReferralTicketResults memory);\\n    function evaluateWonResultsForReferral(uint256 roundId) external view returns (ReferralTicketResults[] memory);\\n    function amountWonInRound(uint256 roundId) external view returns (uint256) ;\\n    function roundNumbers(uint256 roundId) external view returns(uint16[] memory);\\n    function referralWinnersNumber(uint256 roundId) external view returns(uint16[] memory);\\n}\",\"keccak256\":\"0xa8081ad5eb434225fa4cf47b8a51926edd1929b5b75f8e2475f40411ec7bafaa\",\"license\":\"UNLICENSED\"},\"contracts/LotteryRound.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\nimport {LotteryRoundInterface} from \\\"./LotteryRoundInterface.sol\\\";\\n\\ncontract LotteryRound is Ownable, LotteryRoundInterface {\\n    Round public round;\\n    function getRound() public view returns (Round memory) {\\n        return round;\\n    }\\n\\n    Ticket[] public tickets;\\n    function ticketById(uint256 ticketId) public view returns (Ticket memory) {\\n        return tickets[ticketId];\\n    }\\n    mapping(uint256 => uint16[]) public ticketNumbers;\\n    function numbersForTicketId(uint256 ticketId) public view returns (uint16[] memory) {\\n        return ticketNumbers[ticketId];\\n    }\\n    mapping(address => uint256[]) public roundTicketsByAddress;\\n    mapping(address => uint256) public roundTicketsByAddressCount;\\n\\n    ReferralTicket[] public referralTickets;\\n    function referralTicketById(uint256 index) public view returns (ReferralTicket memory) {\\n        return referralTickets[index];\\n    }\\n    mapping(address => uint256[]) public roundReferralTicketsByAddress;\\n    mapping(address => uint256) public roundReferralTicketsByAddressCount;\\n\\n    mapping(RoundVictoryTier => uint256) public victoryTierAmounts;\\n    mapping(RoundVictoryTier => uint256) public victoryTierAmountsClaimed;\\n    mapping(RoundVictoryTier => uint256) public winnersForEachTier;\\n    address public previousRound;\\n\\n    uint16[]  public  poolPercentagesBasePoints = [3000, 1500, 1000, 700, 500, 300, 1500, 1000, 500];\\n    function setPoolPercentagesBasePoints(uint16[] memory _poolPercentagesBasePoints) public onlyOwner {\\n        poolPercentagesBasePoints = _poolPercentagesBasePoints;\\n    }\\n\\n    constructor(address previousRoundAddress, uint256 roundDurationInSeconds) Ownable(msg.sender) {\\n        uint256 id = 1;\\n        previousRound = previousRoundAddress;\\n        if (previousRoundAddress != address(0)) {\\n            LotteryRound previousLotteryRound = LotteryRound(previousRoundAddress);\\n            id = previousLotteryRound.getRound().id + 1;\\n            propagateWinningFromPreviousRound();\\n        }\\n        round = Round({\\n            id: id,\\n            startTime: block.timestamp,\\n            endTime: block.timestamp + roundDurationInSeconds,\\n            ended : false,\\n            roundNumbers: new uint16[](0),\\n            referralWinnersNumber: new uint16[](0),\\n            referralWinnersNumberCount : 0,\\n            ticketIds : new uint256[](0),\\n            ticketsCount : 0,\\n            referralTicketIds : new uint256[](0),\\n            referralCounts : 0\\n        });\\n    }\\n\\n    function propagateWinningFromPreviousRound() internal {\\n        LotteryRound previousLotteryRound = LotteryRound(previousRound);\\n        victoryTierAmounts[RoundVictoryTier.Tier5_1] += previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Tier5_1) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Tier5_1);\\n        victoryTierAmounts[RoundVictoryTier.Tier5] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Tier5) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Tier5);\\n        victoryTierAmounts[RoundVictoryTier.Tier4_1] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Tier4_1) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Tier4_1);\\n        victoryTierAmounts[RoundVictoryTier.Tier4] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Tier4) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Tier4);\\n        victoryTierAmounts[RoundVictoryTier.Tier3_1] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Tier3_1) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Tier3_1);\\n        victoryTierAmounts[RoundVictoryTier.Tier3] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Tier3) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Tier3);\\n        victoryTierAmounts[RoundVictoryTier.PublicPool] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.PublicPool) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.PublicPool);\\n        victoryTierAmounts[RoundVictoryTier.Referrer] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Referrer) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Referrer);\\n        victoryTierAmounts[RoundVictoryTier.TokenHolders] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.TokenHolders) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.TokenHolders);\\n        victoryTierAmounts[RoundVictoryTier.Treasury] +=  previousLotteryRound.victoryTierAmounts(RoundVictoryTier.Treasury) - previousLotteryRound.victoryTierAmountsClaimed(RoundVictoryTier.Treasury);\\n    }\\n\\n    function numberIsInRangeForRound(uint256 number) public pure returns (bool) {\\n        return number > 0 && number <= 69;\\n    }\\n\\n    function numberIsInRangeForPowerNumber(uint256 number) public pure returns (bool) {\\n        return number > 0 && number <= 26;\\n    }\\n\\n    function validateBuyTicket(uint16[] memory numbers, address referral) public view onlyOwner {\\n        require(tx.origin != address(0), \\\"Invalid sender\\\");\\n        require(block.timestamp < round.endTime, \\\"Round is over\\\");\\n        require(numbers.length == 6, \\\"Invalid numbers count\\\");\\n        for (uint i = 0; i < numbers.length - 1; i++) {\\n            require(numberIsInRangeForRound(numbers[i]), \\\"Invalid numbers\\\");\\n        }\\n        require(numberIsInRangeForPowerNumber(numbers[5]), \\\"Invalid power number\\\");\\n        require(referral != tx.origin, \\\"Referral cannot be the same as the participant\\\");\\n    }\\n\\n    function percentageInBasisPoint(uint256 amount, uint256 basisPoint) public pure returns (uint256) {\\n        return amount * basisPoint / 10000;\\n    }\\n\\n    function treasuryAmountOnTicket(uint256 paymentTokenAmount) public view returns (uint256) {\\n        return percentageInBasisPoint(paymentTokenAmount, poolPercentagesBasePoints[8]);\\n    }\\n\\n    function updateVictoryPoolForTicket(uint256 paymentTokenAmount) public onlyOwner {\\n        uint256 forPublicPool = paymentTokenAmount;\\n        victoryTierAmounts[RoundVictoryTier.Tier5_1] += percentageInBasisPoint(forPublicPool, poolPercentagesBasePoints[0]);\\n        victoryTierAmounts[RoundVictoryTier.Tier5] += percentageInBasisPoint(forPublicPool, poolPercentagesBasePoints[1]);\\n        victoryTierAmounts[RoundVictoryTier.Tier4_1] += percentageInBasisPoint(forPublicPool, poolPercentagesBasePoints[2]);\\n        victoryTierAmounts[RoundVictoryTier.Tier4] += percentageInBasisPoint(forPublicPool, poolPercentagesBasePoints[3]);\\n        victoryTierAmounts[RoundVictoryTier.Tier3_1] += percentageInBasisPoint(forPublicPool, poolPercentagesBasePoints[4]);\\n        victoryTierAmounts[RoundVictoryTier.Tier3] += percentageInBasisPoint(forPublicPool, poolPercentagesBasePoints[5]);\\n        victoryTierAmounts[RoundVictoryTier.PublicPool] += forPublicPool;\\n        victoryTierAmounts[RoundVictoryTier.Referrer] += percentageInBasisPoint(paymentTokenAmount, poolPercentagesBasePoints[6]);\\n        victoryTierAmounts[RoundVictoryTier.TokenHolders] += percentageInBasisPoint(paymentTokenAmount, poolPercentagesBasePoints[7]);\\n        victoryTierAmounts[RoundVictoryTier.Treasury] += treasuryAmountOnTicket(paymentTokenAmount);\\n    }\\n\\n    function buyTicket(uint256 chainId, uint16[] memory chosenNumbers, address referral, address buyer) public onlyOwner {\\n        validateBuyTicket(chosenNumbers, referral);\\n\\n        uint256 ticketId = tickets.length;\\n        tickets.push(Ticket({\\n            id: ticketId,\\n            participantAddress: buyer,\\n            referralAddress: referral,\\n            claimed: false,\\n            chainId: chainId,\\n            victoryTier: RoundVictoryTier.NO_WIN\\n        }));\\n        for(uint i = 0; i < chosenNumbers.length; i++) {\\n            ticketNumbers[ticketId].push(chosenNumbers[i]);\\n        }\\n        round.ticketIds.push(ticketId);\\n        round.ticketsCount++;\\n\\n        roundTicketsByAddress[buyer].push(tickets.length - 1);\\n        roundTicketsByAddressCount[buyer]++;\\n        if (referral != address(0)) {\\n            uint256 referralTicketId = referralTickets.length;\\n            round.referralTicketIds.push(referralTicketId);\\n            round.referralCounts++;\\n            referralTickets.push(ReferralTicket({\\n                id: referralTicketId,\\n                referralAddress: referral,\\n                referralTicketNumber: uint16(round.referralCounts),\\n                winner: false,\\n                claimed: false\\n            }));\\n\\n            roundReferralTicketsByAddress[referral].push(referralTickets.length - 1);\\n            roundReferralTicketsByAddressCount[referral]++;\\n        }\\n    }\\n\\n    function closeRound() public onlyOwner {\\n        require(block.timestamp >= round.endTime, \\\"Round is not over yet\\\");\\n        round.ended = true;\\n    }\\n\\n    function couldReceiveWinningNumbers() public view {\\n        require(block.timestamp >= round.endTime, \\\"Round is not over yet\\\");\\n        require(round.roundNumbers.length == 0, \\\"Winning numbers already set\\\");\\n    }\\n\\n    function storeWinningNumbers(uint16[] memory roundNumbers, uint16[] memory referralWinnersNumber) public onlyOwner {\\n        round.roundNumbers = roundNumbers;\\n        round.referralWinnersNumber = referralWinnersNumber;\\n        round.referralWinnersNumberCount = uint16(referralWinnersNumber.length);\\n    }\\n\\n    function markWinners(TicketResults[] memory ticketResults, ReferralTicketResults[] memory referralTicketResults) public onlyOwner {\\n        for (uint i = 0; i < ticketResults.length; i++) {\\n            TicketResults memory ticketResult = ticketResults[i];\\n            Ticket storage ticket = tickets[ticketResult.ticketId];\\n            ticket.victoryTier = ticketResult.victoryTier;\\n            winnersForEachTier[ticketResult.victoryTier]++;\\n        }\\n        for (uint i = 0; i < referralTicketResults.length; i++) {\\n            ReferralTicketResults memory referralTicketResult = referralTicketResults[i];\\n            ReferralTicket storage referralTicket = referralTickets[referralTicketResult.referralTicketId];\\n            referralTicket.winner = referralTicketResult.won;\\n            if (referralTicketResult.won) {\\n                winnersForEachTier[RoundVictoryTier.Referrer]++;\\n            }\\n        }\\n    }\\n\\n    function markVictoryClaimed(uint256 ticketId, uint256 amountClaimed) public onlyOwner {\\n        Ticket storage ticket = tickets[ticketId];\\n        ticket.claimed = true;\\n        victoryTierAmountsClaimed[ticket.victoryTier] += amountClaimed;\\n    }\\n\\n    function markReferralVictoryClaimed(uint256 referralTicketId, uint256 amountClaimed) public onlyOwner {\\n        ReferralTicket storage referralTicket = referralTickets[referralTicketId];\\n        referralTicket.claimed = true;\\n        victoryTierAmountsClaimed[RoundVictoryTier.Referrer] += amountClaimed;\\n    }\\n}\",\"keccak256\":\"0xd65c2054ce9fc547c18cc26a5dde2016974d836f631d5df4bf63d0560c7f7bd2\",\"license\":\"UNLICENSED\"},\"contracts/LotteryRoundCreatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\ninterface LotteryRoundCreatorInterface {\\n   function startNewRound(uint256 roundDurationInSeconds, address previousRoundAddress) external returns(address);\\n}\",\"keccak256\":\"0x758edc675f9d3b6e91d052e64cf4ea0495d6639542acf1d41ddb2a4c825a392a\",\"license\":\"UNLICENSED\"},\"contracts/LotteryRoundInterface.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.20;\\n\\nimport { RoundVictoryTier, Round, Ticket, TicketResults, ReferralTicket, ReferralTicketResults } from \\\"./LotteryCommon.sol\\\";\\n\\ninterface LotteryRoundInterface {\\n    function getRound() external returns(Round memory);\\n    function previousRound() external returns(address);\\n    function markWinners(TicketResults[] memory ticketResults, ReferralTicketResults[] memory referralTicketResults) external;\\n    function markVictoryClaimed(uint256 ticketId, uint256 amountClaimed) external;\\n    function markReferralVictoryClaimed(uint256 referralTicketId, uint256 amountClaimed) external;\\n    function treasuryAmountOnTicket(uint256 paymentTokenAmount) external view returns (uint256);\\n    function updateVictoryPoolForTicket(uint256 paymentTokenAmount) external;\\n    function buyTicket(uint256 chainId, uint16[] memory chosenNumbers, address referral, address buyer) external;\\n    function closeRound() external;\\n    function couldReceiveWinningNumbers() external view;\\n    function storeWinningNumbers(uint16[] memory roundNumbers, uint16[] memory referralWinnersNumber) external;\\n    function ticketById(uint256 ticketId) external view returns (Ticket memory);\\n    function numbersForTicketId(uint256 ticketId) external view returns (uint16[] memory);\\n    function referralTicketById(uint256 index) external view returns (ReferralTicket memory);\\n    function victoryTierAmounts(RoundVictoryTier tier) external view returns (uint256);\\n    function winnersForEachTier(RoundVictoryTier tier) external returns(uint256);\\n    function setPoolPercentagesBasePoints(uint16[] memory _poolPercentagesBasePoints) external;\\n}\",\"keccak256\":\"0xaf0ab80798c6142a9cf867a7f998c58ab2a980ef5b81ac2451ac83da18e20457\",\"license\":\"UNLICENSED\"},\"contracts/utils/EmergencyFunctions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract EmergencyFunctions is Ownable {\\n    address internal teamAddress;\\n    constructor(address _teamAddress) Ownable(_teamAddress) {\\n        teamAddress = _teamAddress;\\n    }\\n\\n    function updateTeamAddress(address _teamAddress) public onlyOwner {\\n        teamAddress = _teamAddress;\\n    }\\n\\n    // Emergency Functions\\n    function sendTokenToTeam(address _token) public onlyOwner {\\n        uint256 amount = IERC20(_token).balanceOf(address(this));\\n        if (amount > 0) {\\n            SafeERC20.safeTransfer(IERC20(_token), teamAddress, amount);\\n        }\\n    }\\n\\n    function sendCryptoToTeam() public onlyOwner {\\n        if (address(this).balance > 0) {\\n            payable(teamAddress).transfer(address(this).balance);\\n        }\\n    }\\n\\n    /** @notice Check if an address is a contract */\\n    function _isContract(address _addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x68dcc6a4104e2905f65c342fdb2dbde1908113d10c006f5857b52dc0bbefd419\",\"license\":\"MIT\"},\"contracts/utils/TestUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.x <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IERC20Extension {\\n    function decimals() external view returns (uint8);\\n}\\n\\ncontract TestFunctions is Ownable {\\n    constructor() Ownable(msg.sender) {}\\n    //Used for mock testing, contract ownership will be renounced on release\\n    uint public currentTimestampOverride;\\n    function updateCurrentTimestampOverride(uint _v) external onlyOwner {\\n        currentTimestampOverride = _v;\\n    }\\n    function currentTimestamp() public view returns(uint) {\\n        if (currentTimestampOverride > 0) {\\n            return currentTimestampOverride;\\n        }\\n        return block.timestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x8edb22ef91efc1d38ffbd50b48821f4fe23bdaf84a14de75d0df8231eb772bc4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c806368525a4e116100c3578063c099ae191161007c578063c099ae1914610411578063d856f0d514610441578063e34208e614610471578063f1664df6146104a1578063f2fde38b146104d1578063fdfe8185146104ed57610158565b806368525a4e14610363578063715018a6146103935780638da5cb5b1461039d5780638e0e3fcd146103bb578063998da3e9146103eb578063bbd1783a1461040757610158565b80633c73b4c4116101155780633c73b4c41461025557806349a0a1f6146102855780634e00b9d3146102b557806359103c12146102e55780635dc9dbe81461031557806361ab0c891461033357610158565b8063078a6dbf1461015d5780630c746a8a1461018d57806314eb76ac146101bd57806322bd49a8146101d9578063283b7f28146101f55780632aa6017014610225575b600080fd5b61017760048036038101906101729190612d78565b61051d565b6040516101849190612e65565b60405180910390f35b6101a760048036038101906101a29190613013565b610743565b6040516101b49190613091565b60405180910390f35b6101d760048036038101906101d291906130d8565b6107ef565b005b6101f360048036038101906101ee91906130d8565b61083b565b005b61020f600480360381019061020a9190613105565b610887565b60405161021c91906131f0565b60405180910390f35b61023f600480360381019061023a9190612d78565b6109b5565b60405161024c91906132cb565b60405180910390f35b61026f600480360381019061026a9190613105565b610d14565b60405161027c91906132f5565b60405180910390f35b61029f600480360381019061029a9190613105565b611520565b6040516102ac91906132f5565b60405180910390f35b6102cf60048036038101906102ca9190613310565b61164b565b6040516102dc919061337b565b60405180910390f35b6102ff60048036038101906102fa9190613310565b611665565b60405161030c919061337b565b60405180910390f35b61031d6116c2565b60405161032a91906133f5565b60405180910390f35b61034d60048036038101906103489190613105565b6116e8565b60405161035a91906132f5565b60405180910390f35b61037d60048036038101906103789190613105565b611813565b60405161038a91906132f5565b60405180910390f35b61039b61193e565b005b6103a5611952565b6040516103b2919061341f565b60405180910390f35b6103d560048036038101906103d0919061345f565b61197b565b6040516103e291906132f5565b60405180910390f35b610405600480360381019061040091906130d8565b611bf8565b005b61040f611cb9565b005b61042b60048036038101906104269190613105565b611d36565b6040516104389190613590565b60405180910390f35b61045b60048036038101906104569190613105565b612151565b60405161046891906136a3565b60405180910390f35b61048b600480360381019061048691906136f1565b61242d565b6040516104989190613740565b60405180910390f35b6104bb60048036038101906104b69190613105565b6124d6565b6040516104c89190613091565b60405180910390f35b6104eb60048036038101906104e691906130d8565b6126d8565b005b61050760048036038101906105029190613105565b61275e565b60405161051491906131f0565b60405180910390f35b610525612cac565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600186610572919061378a565b6040518263ffffffff1660e01b815260040161058e91906132f5565b602060405180830381865afa1580156105ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105cf91906137d3565b905060008173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa15801561061e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906106479190613b1f565b905060008273ffffffffffffffffffffffffffffffffffffffff1663dd85ae5f836101200151878151811061067f5761067e613b68565b5b60200260200101516040518263ffffffff1660e01b81526004016106a391906132f5565b60a060405180830381865afa1580156106c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e49190613c23565b905060006106fa82604001518460a00151611665565b9050604051806060016040528083600001518152602001836020015173ffffffffffffffffffffffffffffffffffffffff16815260200182151581525094505050505092915050565b60008060018461ffff16866107589190613c7f565b6107629190613cb0565b90506000806107718386611665565b90505b80156107e25760018661ffff168484604051602001610794929190613ce4565b6040516020818303038152906040528051906020012060001c6107b79190613c7f565b6107c19190613cb0565b92506107cd8386611665565b905081806107da90613d0d565b925050610774565b8293505050509392505050565b6107f761288c565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61084361288c565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f6001856108d6919061378a565b6040518263ffffffff1660e01b81526004016108f291906132f5565b602060405180830381865afa15801561090f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093391906137d3565b73ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa15801561097d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906109a69190613b1f565b90508060a00151915050919050565b6109bd612ce5565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600186610a0a919061378a565b6040518263ffffffff1660e01b8152600401610a2691906132f5565b602060405180830381865afa158015610a43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6791906137d3565b905060008173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa158015610ab6573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610adf9190613b1f565b905060008273ffffffffffffffffffffffffffffffffffffffff16639b7be8fc8360e001518781518110610b1657610b15613b68565b5b60200260200101516040518263ffffffff1660e01b8152600401610b3a91906132f5565b60c060405180830381865afa158015610b57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7b9190613dec565b905060008373ffffffffffffffffffffffffffffffffffffffff1663598f3b9d83600001516040518263ffffffff1660e01b8152600401610bbc91906132f5565b600060405180830381865afa158015610bd9573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610c029190613e19565b905060008360800151600581518110610c1e57610c1d613b68565b5b602002602001015161ffff1682600581518110610c3e57610c3d613b68565b5b602002602001015161ffff161490506000805b60058161ffff161015610cb1576000848261ffff1681518110610c7757610c76613b68565b5b60200260200101519050610c8f818860800151611665565b15610ca3578280610c9f90613d0d565b9350505b508080600101915050610c51565b50604051806060016040528085600001518152602001856020015173ffffffffffffffffffffffffffffffffffffffff168152602001610cf1838561242d565b600a811115610d0357610d02613212565b5b815250965050505050505092915050565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600185610d62919061378a565b6040518263ffffffff1660e01b8152600401610d7e91906132f5565b602060405180830381865afa158015610d9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbf91906137d3565b90506000808273ffffffffffffffffffffffffffffffffffffffff1663efa3d53160016040518263ffffffff1660e01b8152600401610dfe9190613740565b602060405180830381865afa158015610e1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3f9190613e62565b1115610ece578173ffffffffffffffffffffffffffffffffffffffff1663e2e3083060016040518263ffffffff1660e01b8152600401610e7f9190613740565b602060405180830381865afa158015610e9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec09190613e62565b81610ecb9190613cb0565b90505b60008273ffffffffffffffffffffffffffffffffffffffff1663efa3d53160026040518263ffffffff1660e01b8152600401610f0a9190613740565b602060405180830381865afa158015610f27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4b9190613e62565b1115610fda578173ffffffffffffffffffffffffffffffffffffffff1663e2e3083060026040518263ffffffff1660e01b8152600401610f8b9190613740565b602060405180830381865afa158015610fa8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fcc9190613e62565b81610fd79190613cb0565b90505b60008273ffffffffffffffffffffffffffffffffffffffff1663efa3d53160036040518263ffffffff1660e01b81526004016110169190613740565b602060405180830381865afa158015611033573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110579190613e62565b11156110e6578173ffffffffffffffffffffffffffffffffffffffff1663e2e3083060036040518263ffffffff1660e01b81526004016110979190613740565b602060405180830381865afa1580156110b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d89190613e62565b816110e39190613cb0565b90505b60008273ffffffffffffffffffffffffffffffffffffffff1663efa3d53160046040518263ffffffff1660e01b81526004016111229190613740565b602060405180830381865afa15801561113f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111639190613e62565b11156111f2578173ffffffffffffffffffffffffffffffffffffffff1663e2e3083060046040518263ffffffff1660e01b81526004016111a39190613740565b602060405180830381865afa1580156111c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e49190613e62565b816111ef9190613cb0565b90505b60008273ffffffffffffffffffffffffffffffffffffffff1663efa3d53160056040518263ffffffff1660e01b815260040161122e9190613740565b602060405180830381865afa15801561124b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126f9190613e62565b11156112fe578173ffffffffffffffffffffffffffffffffffffffff1663e2e3083060056040518263ffffffff1660e01b81526004016112af9190613740565b602060405180830381865afa1580156112cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f09190613e62565b816112fb9190613cb0565b90505b60008273ffffffffffffffffffffffffffffffffffffffff1663efa3d53160066040518263ffffffff1660e01b815260040161133a9190613740565b602060405180830381865afa158015611357573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137b9190613e62565b111561140a578173ffffffffffffffffffffffffffffffffffffffff1663e2e3083060066040518263ffffffff1660e01b81526004016113bb9190613740565b602060405180830381865afa1580156113d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113fc9190613e62565b816114079190613cb0565b90505b60008273ffffffffffffffffffffffffffffffffffffffff1663efa3d53160076040518263ffffffff1660e01b81526004016114469190613740565b602060405180830381865afa158015611463573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114879190613e62565b1115611516578173ffffffffffffffffffffffffffffffffffffffff1663e2e3083060076040518263ffffffff1660e01b81526004016114c79190613740565b602060405180830381865afa1580156114e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115089190613e62565b816115139190613cb0565b90505b8092505050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f60018461156d919061378a565b6040518263ffffffff1660e01b815260040161158991906132f5565b602060405180830381865afa1580156115a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ca91906137d3565b73ffffffffffffffffffffffffffffffffffffffff1663e2e3083060096040518263ffffffff1660e01b81526004016116039190613740565b602060405180830381865afa158015611620573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116449190613e62565b9050919050565b600080151561165a8484611665565b151514905092915050565b600080600090505b82518110156116b6578361ffff1683828151811061168e5761168d613b68565b5b602002602001015161ffff16036116a95760019150506116bc565b808060010191505061166d565b50600090505b92915050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600184611735919061378a565b6040518263ffffffff1660e01b815260040161175191906132f5565b602060405180830381865afa15801561176e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179291906137d3565b73ffffffffffffffffffffffffffffffffffffffff1663e2e30830600a6040518263ffffffff1660e01b81526004016117cb9190613740565b602060405180830381865afa1580156117e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180c9190613e62565b9050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600184611860919061378a565b6040518263ffffffff1660e01b815260040161187c91906132f5565b602060405180830381865afa158015611899573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118bd91906137d3565b73ffffffffffffffffffffffffffffffffffffffff1663e2e3083060076040518263ffffffff1660e01b81526004016118f69190613740565b602060405180830381865afa158015611913573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119379190613e62565b9050919050565b61194661288c565b6119506000612913565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006001600a81111561199157611990613212565b5b82600a8111156119a4576119a3613212565b5b14806119d457506002600a8111156119bf576119be613212565b5b82600a8111156119d2576119d1613212565b5b145b80611a0357506003600a8111156119ee576119ed613212565b5b82600a811115611a0157611a00613212565b5b145b80611a3257506004600a811115611a1d57611a1c613212565b5b82600a811115611a3057611a2f613212565b5b145b80611a6157506005600a811115611a4c57611a4b613212565b5b82600a811115611a5f57611a5e613212565b5b145b80611a9057506006600a811115611a7b57611a7a613212565b5b82600a811115611a8e57611a8d613212565b5b145b611acf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ac690613eec565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600185611b1a919061378a565b6040518263ffffffff1660e01b8152600401611b3691906132f5565b602060405180830381865afa158015611b53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7791906137d3565b73ffffffffffffffffffffffffffffffffffffffff1663e2e30830836040518263ffffffff1660e01b8152600401611baf9190613740565b602060405180830381865afa158015611bcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf09190613e62565b905092915050565b611c0061288c565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611c3b919061341f565b602060405180830381865afa158015611c58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7c9190613e62565b90506000811115611cb557611cb482600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836129d7565b5b5050565b611cc161288c565b6000471115611d3457600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015611d32573d6000803e3d6000fd5b505b565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f600185611d85919061378a565b6040518263ffffffff1660e01b8152600401611da191906132f5565b602060405180830381865afa158015611dbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611de291906137d3565b905060008173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa158015611e31573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611e5a9190613b1f565b905060008161010001519050600082610100015161ffff1667ffffffffffffffff811115611e8b57611e8a612ed0565b5b604051908082528060200260200182016040528015611ec457816020015b611eb1612ce5565b815260200190600190039081611ea95790505b5090506000805b8361ffff168161ffff1610156121435760008673ffffffffffffffffffffffffffffffffffffffff16639b7be8fc8760e001518461ffff1681518110611f1457611f13613b68565b5b60200260200101516040518263ffffffff1660e01b8152600401611f3891906132f5565b60c060405180830381865afa158015611f55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f799190613dec565b905060008773ffffffffffffffffffffffffffffffffffffffff1663598f3b9d83600001516040518263ffffffff1660e01b8152600401611fba91906132f5565b600060405180830381865afa158015611fd7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906120009190613e19565b90506000876080015160058151811061201c5761201b613b68565b5b602002602001015161ffff168260058151811061203c5761203b613b68565b5b602002602001015161ffff161490506000805b60058161ffff1610156120af576000848261ffff168151811061207557612074613b68565b5b6020026020010151905061208d818c60800151611665565b156120a157828061209d90613d0d565b9350505b50808060010191505061204f565b50604051806060016040528085600001518152602001856020015173ffffffffffffffffffffffffffffffffffffffff1681526020016120ef838561242d565b600a81111561210157612100613212565b5b81525087878061211090613d0d565b985061ffff168151811061212757612126613b68565b5b6020026020010181905250505050508080600101915050611ecb565b508195505050505050919050565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f6001856121a0919061378a565b6040518263ffffffff1660e01b81526004016121bc91906132f5565b602060405180830381865afa1580156121d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121fd91906137d3565b905060008173ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa15801561224c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906122759190613b1f565b9050600081610140015161ffff1667ffffffffffffffff81111561229c5761229b612ed0565b5b6040519080825280602002602001820160405280156122d557816020015b6122c2612cac565b8152602001906001900390816122ba5790505b5090506000805b83610140015161ffff168161ffff1610156124205760008573ffffffffffffffffffffffffffffffffffffffff1663dd85ae5f8661012001518461ffff168151811061232b5761232a613b68565b5b60200260200101516040518263ffffffff1660e01b815260040161234f91906132f5565b60a060405180830381865afa15801561236c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123909190613c23565b905060006123a682604001518760a00151611665565b9050604051806060016040528083600001518152602001836020015173ffffffffffffffffffffffffffffffffffffffff1681526020018215158152508585806123ef90613d0d565b965061ffff168151811061240657612405613b68565b5b6020026020010181905250505080806001019150506122dc565b5081945050505050919050565b600060058361ffff161480156124405750815b1561244e57600190506124d0565b60058361ffff160361246357600290506124d0565b60048361ffff161480156124745750815b1561248257600390506124d0565b60048361ffff160361249757600490506124d0565b60038361ffff161480156124a85750815b156124b657600590506124d0565b60038361ffff16036124cb57600690506124d0565b600090505b92915050565b600080600090506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f60018661252a919061378a565b6040518263ffffffff1660e01b815260040161254691906132f5565b602060405180830381865afa158015612563573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061258791906137d3565b73ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa1580156125d1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906125fa9190613b1f565b61014001519050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f4dec22b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561266e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126929190613f0c565b61ffff168161ffff16816126a9576126a8613c50565b5b04915060008261ffff161480156126c4575060008161ffff16115b156126ce57600191505b8192505050919050565b6126e061288c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036127525760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401612749919061341f565b60405180910390fd5b61275b81612913565b50565b60606000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638c65c81f6001856127ad919061378a565b6040518263ffffffff1660e01b81526004016127c991906132f5565b602060405180830381865afa1580156127e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061280a91906137d3565b73ffffffffffffffffffffffffffffffffffffffff16639f8743f76040518163ffffffff1660e01b8152600401600060405180830381865afa158015612854573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061287d9190613b1f565b90508060800151915050919050565b612894612a56565b73ffffffffffffffffffffffffffffffffffffffff166128b2611952565b73ffffffffffffffffffffffffffffffffffffffff1614612911576128d5612a56565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401612908919061341f565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b612a51838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401612a0a929190613f39565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612a5e565b505050565b600033905090565b6000612a89828473ffffffffffffffffffffffffffffffffffffffff16612af590919063ffffffff16565b90506000815114158015612aae575080806020019051810190612aac9190613f62565b155b15612af057826040517f5274afe7000000000000000000000000000000000000000000000000000000008152600401612ae7919061341f565b60405180910390fd5b505050565b6060612b0383836000612b0b565b905092915050565b606081471015612b5257306040517fcd786059000000000000000000000000000000000000000000000000000000008152600401612b49919061341f565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff168486604051612b7b9190614000565b60006040518083038185875af1925050503d8060008114612bb8576040519150601f19603f3d011682016040523d82523d6000602084013e612bbd565b606091505b5091509150612bcd868383612bd8565b925050509392505050565b606082612bed57612be882612c67565b612c5f565b60008251148015612c15575060008473ffffffffffffffffffffffffffffffffffffffff163b145b15612c5757836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401612c4e919061341f565b60405180910390fd5b819050612c60565b5b9392505050565b600081511115612c7a5780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604051806060016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000151581525090565b604051806060016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000600a811115612d2857612d27613212565b5b81525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b612d5581612d42565b8114612d6057600080fd5b50565b600081359050612d7281612d4c565b92915050565b60008060408385031215612d8f57612d8e612d38565b5b6000612d9d85828601612d63565b9250506020612dae85828601612d63565b9150509250929050565b612dc181612d42565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612df282612dc7565b9050919050565b612e0281612de7565b82525050565b60008115159050919050565b612e1d81612e08565b82525050565b606082016000820151612e396000850182612db8565b506020820151612e4c6020850182612df9565b506040820151612e5f6040850182612e14565b50505050565b6000606082019050612e7a6000830184612e23565b92915050565b600061ffff82169050919050565b612e9781612e80565b8114612ea257600080fd5b50565b600081359050612eb481612e8e565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612f0882612ebf565b810181811067ffffffffffffffff82111715612f2757612f26612ed0565b5b80604052505050565b6000612f3a612d2e565b9050612f468282612eff565b919050565b600067ffffffffffffffff821115612f6657612f65612ed0565b5b602082029050602081019050919050565b600080fd5b6000612f8f612f8a84612f4b565b612f30565b90508083825260208201905060208402830185811115612fb257612fb1612f77565b5b835b81811015612fdb5780612fc78882612ea5565b845260208401935050602081019050612fb4565b5050509392505050565b600082601f830112612ffa57612ff9612eba565b5b813561300a848260208601612f7c565b91505092915050565b60008060006060848603121561302c5761302b612d38565b5b600061303a86828701612d63565b935050602061304b86828701612ea5565b925050604084013567ffffffffffffffff81111561306c5761306b612d3d565b5b61307886828701612fe5565b9150509250925092565b61308b81612e80565b82525050565b60006020820190506130a66000830184613082565b92915050565b6130b581612de7565b81146130c057600080fd5b50565b6000813590506130d2816130ac565b92915050565b6000602082840312156130ee576130ed612d38565b5b60006130fc848285016130c3565b91505092915050565b60006020828403121561311b5761311a612d38565b5b600061312984828501612d63565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61316781612e80565b82525050565b6000613179838361315e565b60208301905092915050565b6000602082019050919050565b600061319d82613132565b6131a7818561313d565b93506131b28361314e565b8060005b838110156131e35781516131ca888261316d565b97506131d583613185565b9250506001810190506131b6565b5085935050505092915050565b6000602082019050818103600083015261320a8184613192565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600b811061325257613251613212565b5b50565b600081905061326382613241565b919050565b600061327382613255565b9050919050565b61328381613268565b82525050565b60608201600082015161329f6000850182612db8565b5060208201516132b26020850182612df9565b5060408201516132c5604085018261327a565b50505050565b60006060820190506132e06000830184613289565b92915050565b6132ef81612d42565b82525050565b600060208201905061330a60008301846132e6565b92915050565b6000806040838503121561332757613326612d38565b5b600061333585828601612ea5565b925050602083013567ffffffffffffffff81111561335657613355612d3d565b5b61336285828601612fe5565b9150509250929050565b61337581612e08565b82525050565b6000602082019050613390600083018461336c565b92915050565b6000819050919050565b60006133bb6133b66133b184612dc7565b613396565b612dc7565b9050919050565b60006133cd826133a0565b9050919050565b60006133df826133c2565b9050919050565b6133ef816133d4565b82525050565b600060208201905061340a60008301846133e6565b92915050565b61341981612de7565b82525050565b60006020820190506134346000830184613410565b92915050565b600b811061344757600080fd5b50565b6000813590506134598161343a565b92915050565b6000806040838503121561347657613475612d38565b5b600061348485828601612d63565b92505060206134958582860161344a565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6060820160008201516134e16000850182612db8565b5060208201516134f46020850182612df9565b506040820151613507604085018261327a565b50505050565b600061351983836134cb565b60608301905092915050565b6000602082019050919050565b600061353d8261349f565b61354781856134aa565b9350613552836134bb565b8060005b8381101561358357815161356a888261350d565b975061357583613525565b925050600181019050613556565b5085935050505092915050565b600060208201905081810360008301526135aa8184613532565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6060820160008201516135f46000850182612db8565b5060208201516136076020850182612df9565b50604082015161361a6040850182612e14565b50505050565b600061362c83836135de565b60608301905092915050565b6000602082019050919050565b6000613650826135b2565b61365a81856135bd565b9350613665836135ce565b8060005b8381101561369657815161367d8882613620565b975061368883613638565b925050600181019050613669565b5085935050505092915050565b600060208201905081810360008301526136bd8184613645565b905092915050565b6136ce81612e08565b81146136d957600080fd5b50565b6000813590506136eb816136c5565b92915050565b6000806040838503121561370857613707612d38565b5b600061371685828601612ea5565b9250506020613727858286016136dc565b9150509250929050565b61373a81613268565b82525050565b60006020820190506137556000830184613731565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061379582612d42565b91506137a083612d42565b92508282039050818111156137b8576137b761375b565b5b92915050565b6000815190506137cd816130ac565b92915050565b6000602082840312156137e9576137e8612d38565b5b60006137f7848285016137be565b91505092915050565b600080fd5b600080fd5b60008151905061381981612d4c565b92915050565b60008151905061382e816136c5565b92915050565b60008151905061384381612e8e565b92915050565b600061385c61385784612f4b565b612f30565b9050808382526020820190506020840283018581111561387f5761387e612f77565b5b835b818110156138a857806138948882613834565b845260208401935050602081019050613881565b5050509392505050565b600082601f8301126138c7576138c6612eba565b5b81516138d7848260208601613849565b91505092915050565b600067ffffffffffffffff8211156138fb576138fa612ed0565b5b602082029050602081019050919050565b600061391f61391a846138e0565b612f30565b9050808382526020820190506020840283018581111561394257613941612f77565b5b835b8181101561396b5780613957888261380a565b845260208401935050602081019050613944565b5050509392505050565b600082601f83011261398a57613989612eba565b5b815161399a84826020860161390c565b91505092915050565b600061016082840312156139ba576139b9613800565b5b6139c5610160612f30565b905060006139d58482850161380a565b60008301525060206139e98482850161380a565b60208301525060406139fd8482850161380a565b6040830152506060613a118482850161381f565b606083015250608082015167ffffffffffffffff811115613a3557613a34613805565b5b613a41848285016138b2565b60808301525060a082015167ffffffffffffffff811115613a6557613a64613805565b5b613a71848285016138b2565b60a08301525060c0613a8584828501613834565b60c08301525060e082015167ffffffffffffffff811115613aa957613aa8613805565b5b613ab584828501613975565b60e083015250610100613aca84828501613834565b6101008301525061012082015167ffffffffffffffff811115613af057613aef613805565b5b613afc84828501613975565b61012083015250610140613b1284828501613834565b6101408301525092915050565b600060208284031215613b3557613b34612d38565b5b600082015167ffffffffffffffff811115613b5357613b52612d3d565b5b613b5f848285016139a3565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060a08284031215613bad57613bac613800565b5b613bb760a0612f30565b90506000613bc78482850161380a565b6000830152506020613bdb848285016137be565b6020830152506040613bef84828501613834565b6040830152506060613c038482850161381f565b6060830152506080613c178482850161381f565b60808301525092915050565b600060a08284031215613c3957613c38612d38565b5b6000613c4784828501613b97565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613c8a82612d42565b9150613c9583612d42565b925082613ca557613ca4613c50565b5b828206905092915050565b6000613cbb82612d42565b9150613cc683612d42565b9250828201905080821115613cde57613cdd61375b565b5b92915050565b6000604082019050613cf96000830185613082565b613d066020830184613082565b9392505050565b6000613d1882612e80565b915061ffff8203613d2c57613d2b61375b565b5b600182019050919050565b600081519050613d468161343a565b92915050565b600060c08284031215613d6257613d61613800565b5b613d6c60c0612f30565b90506000613d7c8482850161380a565b6000830152506020613d90848285016137be565b6020830152506040613da4848285016137be565b6040830152506060613db88482850161381f565b6060830152506080613dcc8482850161380a565b60808301525060a0613de084828501613d37565b60a08301525092915050565b600060c08284031215613e0257613e01612d38565b5b6000613e1084828501613d4c565b91505092915050565b600060208284031215613e2f57613e2e612d38565b5b600082015167ffffffffffffffff811115613e4d57613e4c612d3d565b5b613e59848285016138b2565b91505092915050565b600060208284031215613e7857613e77612d38565b5b6000613e868482850161380a565b91505092915050565b600082825260208201905092915050565b7f496e76616c696420766963746f72792074696572000000000000000000000000600082015250565b6000613ed6601483613e8f565b9150613ee182613ea0565b602082019050919050565b60006020820190508181036000830152613f0581613ec9565b9050919050565b600060208284031215613f2257613f21612d38565b5b6000613f3084828501613834565b91505092915050565b6000604082019050613f4e6000830185613410565b613f5b60208301846132e6565b9392505050565b600060208284031215613f7857613f77612d38565b5b6000613f868482850161381f565b91505092915050565b600081519050919050565b600081905092915050565b60005b83811015613fc3578082015181840152602081019050613fa8565b60008484015250505050565b6000613fda82613f8f565b613fe48185613f9a565b9350613ff4818560208601613fa5565b80840191505092915050565b600061400c8284613fcf565b91508190509291505056fea2646970667358221220514a94e14eea241d3ddf0f170fc355991453f8be06a08243b9be5afbab7df5be64736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/LotteryReader.sol:LotteryReader",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4621,
        "contract": "contracts/LotteryReader.sol:LotteryReader",
        "label": "teamAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2201,
        "contract": "contracts/LotteryReader.sol:LotteryReader",
        "label": "lotteryMaster",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(LotteryMaster)2171"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(LotteryMaster)2171": {
        "encoding": "inplace",
        "label": "contract LotteryMaster",
        "numberOfBytes": "20"
      }
    }
  }
}